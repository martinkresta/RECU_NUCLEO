
RECU_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c908  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000324  0800cad8  0800cad8  0001cad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cdfc  0800cdfc  00020218  2**0
                  CONTENTS
  4 .ARM          00000008  0800cdfc  0800cdfc  0001cdfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce04  0800ce04  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce04  0800ce04  0001ce04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce08  0800ce08  0001ce08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800ce0c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dc4  20000218  0800d024  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000fdc  0800d024  00020fdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bb08  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041e3  00000000  00000000  0003bd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001810  00000000  00000000  0003ff38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001650  00000000  00000000  00041748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026e4a  00000000  00000000  00042d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f5a7  00000000  00000000  00069be2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0398  00000000  00000000  00089189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00169521  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007358  00000000  00000000  00169574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000218 	.word	0x20000218
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cac0 	.word	0x0800cac0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000021c 	.word	0x2000021c
 800020c:	0800cac0 	.word	0x0800cac0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_ldivmod>:
 80002e0:	b97b      	cbnz	r3, 8000302 <__aeabi_ldivmod+0x22>
 80002e2:	b972      	cbnz	r2, 8000302 <__aeabi_ldivmod+0x22>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bfbe      	ittt	lt
 80002e8:	2000      	movlt	r0, #0
 80002ea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ee:	e006      	blt.n	80002fe <__aeabi_ldivmod+0x1e>
 80002f0:	bf08      	it	eq
 80002f2:	2800      	cmpeq	r0, #0
 80002f4:	bf1c      	itt	ne
 80002f6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002fa:	f04f 30ff 	movne.w	r0, #4294967295
 80002fe:	f000 b9bf 	b.w	8000680 <__aeabi_idiv0>
 8000302:	f1ad 0c08 	sub.w	ip, sp, #8
 8000306:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030a:	2900      	cmp	r1, #0
 800030c:	db09      	blt.n	8000322 <__aeabi_ldivmod+0x42>
 800030e:	2b00      	cmp	r3, #0
 8000310:	db1a      	blt.n	8000348 <__aeabi_ldivmod+0x68>
 8000312:	f000 f84d 	bl	80003b0 <__udivmoddi4>
 8000316:	f8dd e004 	ldr.w	lr, [sp, #4]
 800031a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031e:	b004      	add	sp, #16
 8000320:	4770      	bx	lr
 8000322:	4240      	negs	r0, r0
 8000324:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000328:	2b00      	cmp	r3, #0
 800032a:	db1b      	blt.n	8000364 <__aeabi_ldivmod+0x84>
 800032c:	f000 f840 	bl	80003b0 <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	4252      	negs	r2, r2
 8000342:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000346:	4770      	bx	lr
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	f000 f82f 	bl	80003b0 <__udivmoddi4>
 8000352:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000356:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035a:	b004      	add	sp, #16
 800035c:	4240      	negs	r0, r0
 800035e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000362:	4770      	bx	lr
 8000364:	4252      	negs	r2, r2
 8000366:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036a:	f000 f821 	bl	80003b0 <__udivmoddi4>
 800036e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000376:	b004      	add	sp, #16
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <COM_Init>:

static void SendVariable(uint16_t id);


void COM_Init(uint8_t nodeId)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
	mNodeId = nodeId;
 800068e:	4a04      	ldr	r2, [pc, #16]	; (80006a0 <COM_Init+0x1c>)
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	7013      	strb	r3, [r2, #0]
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	2000057c 	.word	0x2000057c

080006a4 <COM_GetRxMessage>:
	return ns;
}

// just wrapper to MCAN
uint8_t COM_GetRxMessage( s_CanRxMsg* msg)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	return MCAN_GetRxMessage(msg);
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f000 fabd 	bl	8000c2c <MCAN_GetRxMessage>
 80006b2:	4603      	mov	r3, r0
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <COM_Update_10ms>:

void COM_Update_10ms(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0

	// stream the variables to CAN
	int i;
	for(i = 0; i < STREAM_LIST_SIZE; i++)
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	e017      	b.n	80006f8 <COM_Update_10ms+0x3c>
	{
		mStreamList[i].timer+=10;
 80006c8:	4934      	ldr	r1, [pc, #208]	; (800079c <COM_Update_10ms+0xe0>)
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	4613      	mov	r3, r2
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	4413      	add	r3, r2
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	440b      	add	r3, r1
 80006d6:	3306      	adds	r3, #6
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	330a      	adds	r3, #10
 80006dc:	b298      	uxth	r0, r3
 80006de:	492f      	ldr	r1, [pc, #188]	; (800079c <COM_Update_10ms+0xe0>)
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	4613      	mov	r3, r2
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	4413      	add	r3, r2
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	440b      	add	r3, r1
 80006ec:	3306      	adds	r3, #6
 80006ee:	4602      	mov	r2, r0
 80006f0:	801a      	strh	r2, [r3, #0]
	for(i = 0; i < STREAM_LIST_SIZE; i++)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	3301      	adds	r3, #1
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2b45      	cmp	r3, #69	; 0x45
 80006fc:	dde4      	ble.n	80006c8 <COM_Update_10ms+0xc>
	}
	for(i = 0; i < STREAM_LIST_SIZE; i++)
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	e042      	b.n	800078a <COM_Update_10ms+0xce>
	{
		if (mStreamList[i].enable == 1 && mStreamList[i].sendPeriod != 0)
 8000704:	4925      	ldr	r1, [pc, #148]	; (800079c <COM_Update_10ms+0xe0>)
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	4613      	mov	r3, r2
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	4413      	add	r3, r2
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	440b      	add	r3, r1
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d135      	bne.n	8000784 <COM_Update_10ms+0xc8>
 8000718:	4920      	ldr	r1, [pc, #128]	; (800079c <COM_Update_10ms+0xe0>)
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	4613      	mov	r3, r2
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	4413      	add	r3, r2
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	440b      	add	r3, r1
 8000726:	3304      	adds	r3, #4
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d02a      	beq.n	8000784 <COM_Update_10ms+0xc8>
		{
			if (mStreamList[i].timer >= mStreamList[i].sendPeriod)
 800072e:	491b      	ldr	r1, [pc, #108]	; (800079c <COM_Update_10ms+0xe0>)
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	4613      	mov	r3, r2
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	4413      	add	r3, r2
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	440b      	add	r3, r1
 800073c:	3306      	adds	r3, #6
 800073e:	8819      	ldrh	r1, [r3, #0]
 8000740:	4816      	ldr	r0, [pc, #88]	; (800079c <COM_Update_10ms+0xe0>)
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	4613      	mov	r3, r2
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	4413      	add	r3, r2
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	4403      	add	r3, r0
 800074e:	3304      	adds	r3, #4
 8000750:	881b      	ldrh	r3, [r3, #0]
 8000752:	4299      	cmp	r1, r3
 8000754:	d316      	bcc.n	8000784 <COM_Update_10ms+0xc8>
			{
				SendVariable(mStreamList[i].varId);
 8000756:	4911      	ldr	r1, [pc, #68]	; (800079c <COM_Update_10ms+0xe0>)
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	4613      	mov	r3, r2
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	4413      	add	r3, r2
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	440b      	add	r3, r1
 8000764:	3302      	adds	r3, #2
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	4618      	mov	r0, r3
 800076a:	f000 f89b 	bl	80008a4 <SendVariable>
				mStreamList[i].timer = 0;
 800076e:	490b      	ldr	r1, [pc, #44]	; (800079c <COM_Update_10ms+0xe0>)
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	4613      	mov	r3, r2
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	4413      	add	r3, r2
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	440b      	add	r3, r1
 800077c:	3306      	adds	r3, #6
 800077e:	2200      	movs	r2, #0
 8000780:	801a      	strh	r2, [r3, #0]
				break;  // send just 1 value every 10ms
 8000782:	e006      	b.n	8000792 <COM_Update_10ms+0xd6>
	for(i = 0; i < STREAM_LIST_SIZE; i++)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	3301      	adds	r3, #1
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b45      	cmp	r3, #69	; 0x45
 800078e:	ddb9      	ble.n	8000704 <COM_Update_10ms+0x48>
			}
		}
	}
}
 8000790:	bf00      	nop
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000234 	.word	0x20000234

080007a0 <COM_AddStreamedVariable>:
	MCAN_SendFrame(cobid + mNodeId, data, dlc);
}


void COM_AddStreamedVariable(uint16_t varId, uint16_t period)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	460a      	mov	r2, r1
 80007aa:	80fb      	strh	r3, [r7, #6]
 80007ac:	4613      	mov	r3, r2
 80007ae:	80bb      	strh	r3, [r7, #4]
	// go thru the list to find if entry already exists
	int i;
	for(i = 0; i < STREAM_LIST_SIZE; i++)
 80007b0:	2300      	movs	r3, #0
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	e038      	b.n	8000828 <COM_AddStreamedVariable+0x88>
	{
		if(mStreamList[i].varId == varId)
 80007b6:	493a      	ldr	r1, [pc, #232]	; (80008a0 <COM_AddStreamedVariable+0x100>)
 80007b8:	68fa      	ldr	r2, [r7, #12]
 80007ba:	4613      	mov	r3, r2
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	4413      	add	r3, r2
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	440b      	add	r3, r1
 80007c4:	3302      	adds	r3, #2
 80007c6:	881b      	ldrh	r3, [r3, #0]
 80007c8:	88fa      	ldrh	r2, [r7, #6]
 80007ca:	429a      	cmp	r2, r3
 80007cc:	d129      	bne.n	8000822 <COM_AddStreamedVariable+0x82>
		{
			if(period != 0)
 80007ce:	88bb      	ldrh	r3, [r7, #4]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d013      	beq.n	80007fc <COM_AddStreamedVariable+0x5c>
			{
				mStreamList[i].sendPeriod = period;
 80007d4:	4932      	ldr	r1, [pc, #200]	; (80008a0 <COM_AddStreamedVariable+0x100>)
 80007d6:	68fa      	ldr	r2, [r7, #12]
 80007d8:	4613      	mov	r3, r2
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	4413      	add	r3, r2
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	440b      	add	r3, r1
 80007e2:	3304      	adds	r3, #4
 80007e4:	88ba      	ldrh	r2, [r7, #4]
 80007e6:	801a      	strh	r2, [r3, #0]
				mStreamList[i].enable = 1;
 80007e8:	492d      	ldr	r1, [pc, #180]	; (80008a0 <COM_AddStreamedVariable+0x100>)
 80007ea:	68fa      	ldr	r2, [r7, #12]
 80007ec:	4613      	mov	r3, r2
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	4413      	add	r3, r2
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	440b      	add	r3, r1
 80007f6:	2201      	movs	r2, #1
 80007f8:	701a      	strb	r2, [r3, #0]
				return;
 80007fa:	e04c      	b.n	8000896 <COM_AddStreamedVariable+0xf6>
			}
			else
			{
				mStreamList[i].sendPeriod = 0;
 80007fc:	4928      	ldr	r1, [pc, #160]	; (80008a0 <COM_AddStreamedVariable+0x100>)
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	4613      	mov	r3, r2
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	4413      	add	r3, r2
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	440b      	add	r3, r1
 800080a:	3304      	adds	r3, #4
 800080c:	2200      	movs	r2, #0
 800080e:	801a      	strh	r2, [r3, #0]
				mStreamList[i].enable = 0;
 8000810:	4923      	ldr	r1, [pc, #140]	; (80008a0 <COM_AddStreamedVariable+0x100>)
 8000812:	68fa      	ldr	r2, [r7, #12]
 8000814:	4613      	mov	r3, r2
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	4413      	add	r3, r2
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	440b      	add	r3, r1
 800081e:	2200      	movs	r2, #0
 8000820:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < STREAM_LIST_SIZE; i++)
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	3301      	adds	r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	2b45      	cmp	r3, #69	; 0x45
 800082c:	ddc3      	ble.n	80007b6 <COM_AddStreamedVariable+0x16>
			}
		}
	}

	// if not add variable to the list
	for(i = 0; i < STREAM_LIST_SIZE; i++)
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	e02d      	b.n	8000890 <COM_AddStreamedVariable+0xf0>
	{
		if(mStreamList[i].enable == 0)
 8000834:	491a      	ldr	r1, [pc, #104]	; (80008a0 <COM_AddStreamedVariable+0x100>)
 8000836:	68fa      	ldr	r2, [r7, #12]
 8000838:	4613      	mov	r3, r2
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	4413      	add	r3, r2
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	440b      	add	r3, r1
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d120      	bne.n	800088a <COM_AddStreamedVariable+0xea>
		{
			if(period != 0)
 8000848:	88bb      	ldrh	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d01d      	beq.n	800088a <COM_AddStreamedVariable+0xea>
			{
				mStreamList[i].varId = varId;
 800084e:	4914      	ldr	r1, [pc, #80]	; (80008a0 <COM_AddStreamedVariable+0x100>)
 8000850:	68fa      	ldr	r2, [r7, #12]
 8000852:	4613      	mov	r3, r2
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	4413      	add	r3, r2
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	440b      	add	r3, r1
 800085c:	3302      	adds	r3, #2
 800085e:	88fa      	ldrh	r2, [r7, #6]
 8000860:	801a      	strh	r2, [r3, #0]
				mStreamList[i].sendPeriod = period;
 8000862:	490f      	ldr	r1, [pc, #60]	; (80008a0 <COM_AddStreamedVariable+0x100>)
 8000864:	68fa      	ldr	r2, [r7, #12]
 8000866:	4613      	mov	r3, r2
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	4413      	add	r3, r2
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	440b      	add	r3, r1
 8000870:	3304      	adds	r3, #4
 8000872:	88ba      	ldrh	r2, [r7, #4]
 8000874:	801a      	strh	r2, [r3, #0]
				mStreamList[i].enable = 1;
 8000876:	490a      	ldr	r1, [pc, #40]	; (80008a0 <COM_AddStreamedVariable+0x100>)
 8000878:	68fa      	ldr	r2, [r7, #12]
 800087a:	4613      	mov	r3, r2
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	4413      	add	r3, r2
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	440b      	add	r3, r1
 8000884:	2201      	movs	r2, #1
 8000886:	701a      	strb	r2, [r3, #0]
				return;
 8000888:	e005      	b.n	8000896 <COM_AddStreamedVariable+0xf6>
	for(i = 0; i < STREAM_LIST_SIZE; i++)
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	3301      	adds	r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	2b45      	cmp	r3, #69	; 0x45
 8000894:	ddce      	ble.n	8000834 <COM_AddStreamedVariable+0x94>
			}
		}
	}
}
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	20000234 	.word	0x20000234

080008a4 <SendVariable>:

/*Private methods*/
static void SendVariable(uint16_t id)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	80fb      	strh	r3, [r7, #6]
	uint16_t invalid = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	827b      	strh	r3, [r7, #18]
	uint16_t validflag = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	82fb      	strh	r3, [r7, #22]
	int16_t tmp = VAR_GetVariable(id, &invalid);
 80008b6:	f107 0212 	add.w	r2, r7, #18
 80008ba:	88fb      	ldrh	r3, [r7, #6]
 80008bc:	4611      	mov	r1, r2
 80008be:	4618      	mov	r0, r3
 80008c0:	f001 fee4 	bl	800268c <VAR_GetVariable>
 80008c4:	4603      	mov	r3, r0
 80008c6:	82bb      	strh	r3, [r7, #20]
	validflag = (invalid == INVALID_FLAG ? 0 : 1);
 80008c8:	8a7b      	ldrh	r3, [r7, #18]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	bf14      	ite	ne
 80008ce:	2301      	movne	r3, #1
 80008d0:	2300      	moveq	r3, #0
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	82fb      	strh	r3, [r7, #22]
	uint8_t data[8];
	data[0] = id >> 8;
 80008d6:	88fb      	ldrh	r3, [r7, #6]
 80008d8:	0a1b      	lsrs	r3, r3, #8
 80008da:	b29b      	uxth	r3, r3
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	723b      	strb	r3, [r7, #8]
	data[1] = id  & 0xFF;
 80008e0:	88fb      	ldrh	r3, [r7, #6]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	727b      	strb	r3, [r7, #9]
	data[2] = tmp >> 8;
 80008e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80008ea:	121b      	asrs	r3, r3, #8
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	72bb      	strb	r3, [r7, #10]
	data[3] = tmp & 0xFF;
 80008f2:	8abb      	ldrh	r3, [r7, #20]
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	72fb      	strb	r3, [r7, #11]
	data[4] = validflag >> 8;
 80008f8:	8afb      	ldrh	r3, [r7, #22]
 80008fa:	0a1b      	lsrs	r3, r3, #8
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	733b      	strb	r3, [r7, #12]
	data[5] = validflag & 0xFF;
 8000902:	8afb      	ldrh	r3, [r7, #22]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	737b      	strb	r3, [r7, #13]
	data[6] = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	73bb      	strb	r3, [r7, #14]
	data[7] = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	73fb      	strb	r3, [r7, #15]
	MCAN_SendFrame(CMD_VAR_VALUE + mNodeId, data, 8);
 8000910:	4b07      	ldr	r3, [pc, #28]	; (8000930 <SendVariable+0x8c>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	b29b      	uxth	r3, r3
 8000916:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800091a:	b29b      	uxth	r3, r3
 800091c:	f107 0108 	add.w	r1, r7, #8
 8000920:	2208      	movs	r2, #8
 8000922:	4618      	mov	r0, r3
 8000924:	f000 f998 	bl	8000c58 <MCAN_SendFrame>
}
 8000928:	bf00      	nop
 800092a:	3718      	adds	r7, #24
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	2000057c 	.word	0x2000057c

08000934 <MCAN_Init>:



// initialization of CAN node, and buffers
void MCAN_Init(CAN_HandleTypeDef	* can, uint8_t id)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b088      	sub	sp, #32
 8000938:	af04      	add	r7, sp, #16
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	460b      	mov	r3, r1
 800093e:	70fb      	strb	r3, [r7, #3]
	uint8_t bank_offset = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	73fb      	strb	r3, [r7, #15]
	uint8_t i;

	mMcan.Rx0Buf = CB_Create(sizeof(s_CanRxMsg),RX_NMT_BUFF_SIZE);
 8000944:	21c8      	movs	r1, #200	; 0xc8
 8000946:	2024      	movs	r0, #36	; 0x24
 8000948:	f001 fef4 	bl	8002734 <CB_Create>
 800094c:	4603      	mov	r3, r0
 800094e:	4a4d      	ldr	r2, [pc, #308]	; (8000a84 <MCAN_Init+0x150>)
 8000950:	60d3      	str	r3, [r2, #12]
	mMcan.Rx1Buf = CB_Create(sizeof(s_CanRxMsg),RX_BUFF_SIZE);
 8000952:	2150      	movs	r1, #80	; 0x50
 8000954:	2024      	movs	r0, #36	; 0x24
 8000956:	f001 feed 	bl	8002734 <CB_Create>
 800095a:	4603      	mov	r3, r0
 800095c:	4a49      	ldr	r2, [pc, #292]	; (8000a84 <MCAN_Init+0x150>)
 800095e:	6113      	str	r3, [r2, #16]
	mMcan.TxBuf = CB_Create(sizeof(s_CanTxMsg),TX_BUFF_SIZE);
 8000960:	2164      	movs	r1, #100	; 0x64
 8000962:	2020      	movs	r0, #32
 8000964:	f001 fee6 	bl	8002734 <CB_Create>
 8000968:	4603      	mov	r3, r0
 800096a:	4a46      	ldr	r2, [pc, #280]	; (8000a84 <MCAN_Init+0x150>)
 800096c:	6153      	str	r3, [r2, #20]
	if (mMcan.Rx0Buf == NULL || mMcan.Rx1Buf == NULL ||mMcan.TxBuf == NULL)
 800096e:	4b45      	ldr	r3, [pc, #276]	; (8000a84 <MCAN_Init+0x150>)
 8000970:	68db      	ldr	r3, [r3, #12]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d002      	beq.n	800097c <MCAN_Init+0x48>
 8000976:	4b43      	ldr	r3, [pc, #268]	; (8000a84 <MCAN_Init+0x150>)
 8000978:	691b      	ldr	r3, [r3, #16]
 800097a:	2b00      	cmp	r3, #0
	{
		// TBD
	}

	mMcan.CanHw = can;
 800097c:	4a41      	ldr	r2, [pc, #260]	; (8000a84 <MCAN_Init+0x150>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6093      	str	r3, [r2, #8]
	// for devices with two cans check which HW is used and adjust filter banks offset
	#ifdef CAN2
	if(mMcan.CanHw->Instance == CAN2)
 8000982:	4b40      	ldr	r3, [pc, #256]	; (8000a84 <MCAN_Init+0x150>)
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a3f      	ldr	r2, [pc, #252]	; (8000a88 <MCAN_Init+0x154>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d101      	bne.n	8000992 <MCAN_Init+0x5e>
	{
		bank_offset = 15;
 800098e:	230f      	movs	r3, #15
 8000990:	73fb      	strb	r3, [r7, #15]
	}
	#endif


	mMcan.Node.nodeId = id;
 8000992:	4a3c      	ldr	r2, [pc, #240]	; (8000a84 <MCAN_Init+0x150>)
 8000994:	78fb      	ldrb	r3, [r7, #3]
 8000996:	7013      	strb	r3, [r2, #0]
	mMcan.Node.timeout = CO_DEFAULT_HB_TO/2;
 8000998:	4b3a      	ldr	r3, [pc, #232]	; (8000a84 <MCAN_Init+0x150>)
 800099a:	f241 3288 	movw	r2, #5000	; 0x1388
 800099e:	809a      	strh	r2, [r3, #4]
	mMcan.Node.timeout_cnt = 0;
 80009a0:	4b38      	ldr	r3, [pc, #224]	; (8000a84 <MCAN_Init+0x150>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	805a      	strh	r2, [r3, #2]

	mMcan.HbMsg.header.DLC = 1;
 80009a6:	4b37      	ldr	r3, [pc, #220]	; (8000a84 <MCAN_Init+0x150>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	629a      	str	r2, [r3, #40]	; 0x28
	mMcan.HbMsg.header.StdId = HB + mMcan.Node.nodeId;
 80009ac:	4b35      	ldr	r3, [pc, #212]	; (8000a84 <MCAN_Init+0x150>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 80009b4:	461a      	mov	r2, r3
 80009b6:	4b33      	ldr	r3, [pc, #204]	; (8000a84 <MCAN_Init+0x150>)
 80009b8:	619a      	str	r2, [r3, #24]
	mMcan.HbMsg.header.ExtId = 0x00;
 80009ba:	4b32      	ldr	r3, [pc, #200]	; (8000a84 <MCAN_Init+0x150>)
 80009bc:	2200      	movs	r2, #0
 80009be:	61da      	str	r2, [r3, #28]
	mMcan.HbMsg.header.RTR = CAN_RTR_DATA;
 80009c0:	4b30      	ldr	r3, [pc, #192]	; (8000a84 <MCAN_Init+0x150>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	; 0x24
	mMcan.HbMsg.header.IDE = CAN_ID_STD;
 80009c6:	4b2f      	ldr	r3, [pc, #188]	; (8000a84 <MCAN_Init+0x150>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	621a      	str	r2, [r3, #32]

	// init network
	for (i = 0; i < MAX_NUM_OF_NODES; i++)
 80009cc:	2300      	movs	r3, #0
 80009ce:	73bb      	strb	r3, [r7, #14]
 80009d0:	e014      	b.n	80009fc <MCAN_Init+0xc8>
	{
		mNodes[i].timeout = CO_DEFAULT_HB_TO;
 80009d2:	7bbb      	ldrb	r3, [r7, #14]
 80009d4:	4a2d      	ldr	r2, [pc, #180]	; (8000a8c <MCAN_Init+0x158>)
 80009d6:	00db      	lsls	r3, r3, #3
 80009d8:	4413      	add	r3, r2
 80009da:	f242 7210 	movw	r2, #10000	; 0x2710
 80009de:	809a      	strh	r2, [r3, #4]
		mNodes[i].canStatus = eNS_NMT_UNKNOWN;
 80009e0:	7bbb      	ldrb	r3, [r7, #14]
 80009e2:	4a2a      	ldr	r2, [pc, #168]	; (8000a8c <MCAN_Init+0x158>)
 80009e4:	00db      	lsls	r3, r3, #3
 80009e6:	4413      	add	r3, r2
 80009e8:	22ff      	movs	r2, #255	; 0xff
 80009ea:	719a      	strb	r2, [r3, #6]
		mNodes[i].nodeId = i;
 80009ec:	7bbb      	ldrb	r3, [r7, #14]
 80009ee:	4927      	ldr	r1, [pc, #156]	; (8000a8c <MCAN_Init+0x158>)
 80009f0:	7bba      	ldrb	r2, [r7, #14]
 80009f2:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
	for (i = 0; i < MAX_NUM_OF_NODES; i++)
 80009f6:	7bbb      	ldrb	r3, [r7, #14]
 80009f8:	3301      	adds	r3, #1
 80009fa:	73bb      	strb	r3, [r7, #14]
 80009fc:	7bbb      	ldrb	r3, [r7, #14]
 80009fe:	2b07      	cmp	r3, #7
 8000a00:	d9e7      	bls.n	80009d2 <MCAN_Init+0x9e>
	}
	mNodes[mMcan.Node.nodeId].canStatus = mMcan.Node.canStatus;
 8000a02:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <MCAN_Init+0x150>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	4618      	mov	r0, r3
 8000a08:	4b1e      	ldr	r3, [pc, #120]	; (8000a84 <MCAN_Init+0x150>)
 8000a0a:	7999      	ldrb	r1, [r3, #6]
 8000a0c:	4a1f      	ldr	r2, [pc, #124]	; (8000a8c <MCAN_Init+0x158>)
 8000a0e:	00c3      	lsls	r3, r0, #3
 8000a10:	4413      	add	r3, r2
 8000a12:	460a      	mov	r2, r1
 8000a14:	719a      	strb	r2, [r3, #6]



	// set the filter of FIFO0 for hearbeats (0x700 - 0x70F)
	Set_Filter_Id_Mask(mMcan.CanHw, CAN_FILTER_FIFO0, 1 + bank_offset , HB, HB+ID_RANGE, 0,0); // HeartBeats from all devices => FMI = 0/4
 8000a16:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <MCAN_Init+0x150>)
 8000a18:	6898      	ldr	r0, [r3, #8]
 8000a1a:	7bfb      	ldrb	r3, [r7, #15]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	2300      	movs	r3, #0
 8000a22:	9302      	str	r3, [sp, #8]
 8000a24:	2300      	movs	r3, #0
 8000a26:	9301      	str	r3, [sp, #4]
 8000a28:	f240 730f 	movw	r3, #1807	; 0x70f
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000a32:	2100      	movs	r1, #0
 8000a34:	f000 f992 	bl	8000d5c <Set_Filter_Id_Mask>

	// set the filter of FIFO1 for all other messages (0x000 - 0x6FF)
	Set_Filter_Id_Mask(mMcan.CanHw, CAN_FILTER_FIFO1, 2 + bank_offset , 0x000, 0x6FF, 0,0);
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <MCAN_Init+0x150>)
 8000a3a:	6898      	ldr	r0, [r3, #8]
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	3302      	adds	r3, #2
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	2300      	movs	r3, #0
 8000a44:	9302      	str	r3, [sp, #8]
 8000a46:	2300      	movs	r3, #0
 8000a48:	9301      	str	r3, [sp, #4]
 8000a4a:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	2300      	movs	r3, #0
 8000a52:	2101      	movs	r1, #1
 8000a54:	f000 f982 	bl	8000d5c <Set_Filter_Id_Mask>


	HAL_CAN_ActivateNotification(mMcan.CanHw, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING | CAN_IT_LAST_ERROR_CODE| CAN_IT_ERROR);
 8000a58:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <MCAN_Init+0x150>)
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	f648 0112 	movw	r1, #34834	; 0x8812
 8000a60:	4618      	mov	r0, r3
 8000a62:	f003 fde4 	bl	800462e <HAL_CAN_ActivateNotification>

	mMcan.CanHw->Instance->MCR &= ~0x00010000;	// enable CAN in debug mode (clear DBF bit)
 8000a66:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <MCAN_Init+0x150>)
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <MCAN_Init+0x150>)
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000a78:	601a      	str	r2, [r3, #0]
}
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000580 	.word	0x20000580
 8000a88:	40006800 	.word	0x40006800
 8000a8c:	200005bc 	.word	0x200005bc

08000a90 <MCAN_Start>:



// Start CANOPEN protocols
void MCAN_Start(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
	HAL_CAN_Start(mMcan.CanHw);  // start can
 8000a94:	4b09      	ldr	r3, [pc, #36]	; (8000abc <MCAN_Start+0x2c>)
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f003 fb97 	bl	80041cc <HAL_CAN_Start>
	mMcan.Node.canStatus = eNS_NMT_RUN;
 8000a9e:	4b07      	ldr	r3, [pc, #28]	; (8000abc <MCAN_Start+0x2c>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	719a      	strb	r2, [r3, #6]
	mNodes[mMcan.Node.nodeId].canStatus = mMcan.Node.canStatus;
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <MCAN_Start+0x2c>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	4b04      	ldr	r3, [pc, #16]	; (8000abc <MCAN_Start+0x2c>)
 8000aac:	7999      	ldrb	r1, [r3, #6]
 8000aae:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <MCAN_Start+0x30>)
 8000ab0:	00c3      	lsls	r3, r0, #3
 8000ab2:	4413      	add	r3, r2
 8000ab4:	460a      	mov	r2, r1
 8000ab6:	719a      	strb	r2, [r3, #6]
}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000580 	.word	0x20000580
 8000ac0:	200005bc 	.word	0x200005bc

08000ac4 <MCAN_Update_10ms>:
	return mNodes;
}

// Periodic update function for synchronous CAN handling
void MCAN_Update_10ms(void)
{
 8000ac4:	b5b0      	push	{r4, r5, r7, lr}
 8000ac6:	b098      	sub	sp, #96	; 0x60
 8000ac8:	af04      	add	r7, sp, #16
	uint32_t	TxMailbox;


	// Check messages from FIFO 0 (NMT, HB)

	while(0 == CB_Get(mMcan.Rx0Buf,(uint8_t*)&msg))  // process all messages in buffer
 8000aca:	e01e      	b.n	8000b0a <MCAN_Update_10ms+0x46>
	{
		if (msg.header.StdId >= HB && msg.header.StdId <= HB + ID_RANGE) // received HB
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8000ad2:	d31a      	bcc.n	8000b0a <MCAN_Update_10ms+0x46>
 8000ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad6:	f5b3 6fe2 	cmp.w	r3, #1808	; 0x710
 8000ada:	d216      	bcs.n	8000b0a <MCAN_Update_10ms+0x46>
		{
			uint8_t nodeId = msg.header.StdId - HB;
 8000adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ade:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			if (nodeId < MAX_NUM_OF_NODES)  // valid heartbeat received
 8000ae2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000ae6:	2b07      	cmp	r3, #7
 8000ae8:	d80f      	bhi.n	8000b0a <MCAN_Update_10ms+0x46>
			{
				mNodes[nodeId].canStatus = (e_NodeStatus)msg.data[0];
 8000aea:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000aee:	f897 1040 	ldrb.w	r1, [r7, #64]	; 0x40
 8000af2:	4a38      	ldr	r2, [pc, #224]	; (8000bd4 <MCAN_Update_10ms+0x110>)
 8000af4:	00db      	lsls	r3, r3, #3
 8000af6:	4413      	add	r3, r2
 8000af8:	460a      	mov	r2, r1
 8000afa:	719a      	strb	r2, [r3, #6]
				mNodes[nodeId].timeout_cnt = 0;
 8000afc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000b00:	4a34      	ldr	r2, [pc, #208]	; (8000bd4 <MCAN_Update_10ms+0x110>)
 8000b02:	00db      	lsls	r3, r3, #3
 8000b04:	4413      	add	r3, r2
 8000b06:	2200      	movs	r2, #0
 8000b08:	805a      	strh	r2, [r3, #2]
	while(0 == CB_Get(mMcan.Rx0Buf,(uint8_t*)&msg))  // process all messages in buffer
 8000b0a:	4b33      	ldr	r3, [pc, #204]	; (8000bd8 <MCAN_Update_10ms+0x114>)
 8000b0c:	68db      	ldr	r3, [r3, #12]
 8000b0e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000b12:	4611      	mov	r1, r2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f001 feaf 	bl	8002878 <CB_Get>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d0d5      	beq.n	8000acc <MCAN_Update_10ms+0x8>
			}
		}
	}

	// Check timeout of all nodes
	for(i = 0; i < MAX_NUM_OF_NODES; i++)
 8000b20:	2300      	movs	r3, #0
 8000b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b24:	e02e      	b.n	8000b84 <MCAN_Update_10ms+0xc0>
	{
		mNodes[i].timeout_cnt += 10;  // 10ms period of execution of this fcn
 8000b26:	4a2b      	ldr	r2, [pc, #172]	; (8000bd4 <MCAN_Update_10ms+0x110>)
 8000b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b2a:	00db      	lsls	r3, r3, #3
 8000b2c:	4413      	add	r3, r2
 8000b2e:	885b      	ldrh	r3, [r3, #2]
 8000b30:	330a      	adds	r3, #10
 8000b32:	b299      	uxth	r1, r3
 8000b34:	4a27      	ldr	r2, [pc, #156]	; (8000bd4 <MCAN_Update_10ms+0x110>)
 8000b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b38:	00db      	lsls	r3, r3, #3
 8000b3a:	4413      	add	r3, r2
 8000b3c:	460a      	mov	r2, r1
 8000b3e:	805a      	strh	r2, [r3, #2]
		if (mNodes[i].timeout_cnt > mNodes[i].timeout &&  // HB period elapsed
 8000b40:	4a24      	ldr	r2, [pc, #144]	; (8000bd4 <MCAN_Update_10ms+0x110>)
 8000b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	4413      	add	r3, r2
 8000b48:	885a      	ldrh	r2, [r3, #2]
 8000b4a:	4922      	ldr	r1, [pc, #136]	; (8000bd4 <MCAN_Update_10ms+0x110>)
 8000b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b4e:	00db      	lsls	r3, r3, #3
 8000b50:	440b      	add	r3, r1
 8000b52:	889b      	ldrh	r3, [r3, #4]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d912      	bls.n	8000b7e <MCAN_Update_10ms+0xba>
				mNodes[i].canStatus != eNS_NMT_UNKNOWN)
 8000b58:	4a1e      	ldr	r2, [pc, #120]	; (8000bd4 <MCAN_Update_10ms+0x110>)
 8000b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	4413      	add	r3, r2
 8000b60:	799b      	ldrb	r3, [r3, #6]
		if (mNodes[i].timeout_cnt > mNodes[i].timeout &&  // HB period elapsed
 8000b62:	2bff      	cmp	r3, #255	; 0xff
 8000b64:	d00b      	beq.n	8000b7e <MCAN_Update_10ms+0xba>
		{
			mNodes[i].timeout_cnt = 0;
 8000b66:	4a1b      	ldr	r2, [pc, #108]	; (8000bd4 <MCAN_Update_10ms+0x110>)
 8000b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b6a:	00db      	lsls	r3, r3, #3
 8000b6c:	4413      	add	r3, r2
 8000b6e:	2200      	movs	r2, #0
 8000b70:	805a      	strh	r2, [r3, #2]
			mNodes[i].canStatus = eNS_NMT_UNKNOWN;
 8000b72:	4a18      	ldr	r2, [pc, #96]	; (8000bd4 <MCAN_Update_10ms+0x110>)
 8000b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	4413      	add	r3, r2
 8000b7a:	22ff      	movs	r2, #255	; 0xff
 8000b7c:	719a      	strb	r2, [r3, #6]
	for(i = 0; i < MAX_NUM_OF_NODES; i++)
 8000b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b80:	3301      	adds	r3, #1
 8000b82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b86:	2b07      	cmp	r3, #7
 8000b88:	ddcd      	ble.n	8000b26 <MCAN_Update_10ms+0x62>
		}
	}

	// Send heartbeat if it's time
	mMcan.Node.timeout_cnt += 10;
 8000b8a:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <MCAN_Update_10ms+0x114>)
 8000b8c:	885b      	ldrh	r3, [r3, #2]
 8000b8e:	330a      	adds	r3, #10
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MCAN_Update_10ms+0x114>)
 8000b94:	805a      	strh	r2, [r3, #2]
	if (mMcan.Node.timeout_cnt >= mMcan.Node.timeout)
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <MCAN_Update_10ms+0x114>)
 8000b98:	885a      	ldrh	r2, [r3, #2]
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <MCAN_Update_10ms+0x114>)
 8000b9c:	889b      	ldrh	r3, [r3, #4]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d313      	bcc.n	8000bca <MCAN_Update_10ms+0x106>
	{
		mMcan.Node.timeout_cnt = 0;
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <MCAN_Update_10ms+0x114>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	805a      	strh	r2, [r3, #2]
		mMcan.HbMsg.data[0] = mMcan.Node.canStatus;
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <MCAN_Update_10ms+0x114>)
 8000baa:	799a      	ldrb	r2, [r3, #6]
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <MCAN_Update_10ms+0x114>)
 8000bae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		Send(mMcan.HbMsg);
 8000bb2:	4d09      	ldr	r5, [pc, #36]	; (8000bd8 <MCAN_Update_10ms+0x114>)
 8000bb4:	466c      	mov	r4, sp
 8000bb6:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8000bba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000bc0:	f105 0318 	add.w	r3, r5, #24
 8000bc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bc6:	f000 f871 	bl	8000cac <Send>
	}

}
 8000bca:	bf00      	nop
 8000bcc:	3750      	adds	r7, #80	; 0x50
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200005bc 	.word	0x200005bc
 8000bd8:	20000580 	.word	0x20000580

08000bdc <MCAN_Transmit>:


// function to be called periodically at a rate of transmitting can messages. (for example every 5 ms)
// One CAN message is is sent if TX buffer is not empty
void MCAN_Transmit(void)
{
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	b08b      	sub	sp, #44	; 0x2c
 8000be0:	af00      	add	r7, sp, #0
	s_CanTxMsg TxMsg;
	s_CanNode* tmp;
	uint32_t	TxMailbox;

	if  (0 == CB_Probe(mMcan.TxBuf,(uint8_t*)&TxMsg))  // fetch the message from the buffer
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MCAN_Transmit+0x4c>)
 8000be4:	695b      	ldr	r3, [r3, #20]
 8000be6:	f107 0208 	add.w	r2, r7, #8
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f001 fdea 	bl	80027c6 <CB_Probe>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d113      	bne.n	8000c20 <MCAN_Transmit+0x44>
	{
		if (HAL_OK == HAL_CAN_AddTxMessage(mMcan.CanHw, &TxMsg.header, TxMsg.data, &TxMailbox))  // transmit the message
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <MCAN_Transmit+0x4c>)
 8000bfa:	6898      	ldr	r0, [r3, #8]
 8000bfc:	1d3c      	adds	r4, r7, #4
 8000bfe:	f107 0308 	add.w	r3, r7, #8
 8000c02:	f103 0218 	add.w	r2, r3, #24
 8000c06:	f107 0108 	add.w	r1, r7, #8
 8000c0a:	4623      	mov	r3, r4
 8000c0c:	f003 fb22 	bl	8004254 <HAL_CAN_AddTxMessage>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d104      	bne.n	8000c20 <MCAN_Transmit+0x44>
		{
			CB_Remove(mMcan.TxBuf);  // remove the message from the buffer only if transmission was succesfull
 8000c16:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <MCAN_Transmit+0x4c>)
 8000c18:	695b      	ldr	r3, [r3, #20]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f001 fe00 	bl	8002820 <CB_Remove>
		}
	}
}
 8000c20:	bf00      	nop
 8000c22:	372c      	adds	r7, #44	; 0x2c
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd90      	pop	{r4, r7, pc}
 8000c28:	20000580 	.word	0x20000580

08000c2c <MCAN_GetRxMessage>:

// Gets a message from receive buffer to be processed by application
// returns 1 if message is available, otherwise return 0
uint8_t MCAN_GetRxMessage( s_CanRxMsg* msg)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	if (0 == CB_Get(mMcan.Rx1Buf,(uint8_t*)msg))
 8000c34:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <MCAN_GetRxMessage+0x28>)
 8000c36:	691b      	ldr	r3, [r3, #16]
 8000c38:	6879      	ldr	r1, [r7, #4]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f001 fe1c 	bl	8002878 <CB_Get>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d101      	bne.n	8000c4a <MCAN_GetRxMessage+0x1e>
	{
		return 1;
 8000c46:	2301      	movs	r3, #1
 8000c48:	e000      	b.n	8000c4c <MCAN_GetRxMessage+0x20>
	}
	return 0;
 8000c4a:	2300      	movs	r3, #0
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000580 	.word	0x20000580

08000c58 <MCAN_SendFrame>:
}


// Sends general CAN data message
uint8_t MCAN_SendFrame(uint16_t cobid, uint8_t* data, uint8_t dlc)
{
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b08f      	sub	sp, #60	; 0x3c
 8000c5c:	af04      	add	r7, sp, #16
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	80fb      	strh	r3, [r7, #6]
 8000c64:	4613      	mov	r3, r2
 8000c66:	717b      	strb	r3, [r7, #5]
	s_CanTxMsg msg;
	msg.header.DLC = dlc;
 8000c68:	797b      	ldrb	r3, [r7, #5]
 8000c6a:	61bb      	str	r3, [r7, #24]
	msg.header.StdId = cobid;
 8000c6c:	88fb      	ldrh	r3, [r7, #6]
 8000c6e:	60bb      	str	r3, [r7, #8]
	msg.header.ExtId = 0x00;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
	msg.header.RTR = CAN_RTR_DATA;
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
	msg.header.IDE = CAN_ID_STD;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	613b      	str	r3, [r7, #16]

	memcpy(&msg.data[0], data, dlc);
 8000c7c:	797a      	ldrb	r2, [r7, #5]
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	3318      	adds	r3, #24
 8000c84:	6839      	ldr	r1, [r7, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f009 feb8 	bl	800a9fc <memcpy>
	return Send(msg);
 8000c8c:	466c      	mov	r4, sp
 8000c8e:	f107 0318 	add.w	r3, r7, #24
 8000c92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000c98:	f107 0308 	add.w	r3, r7, #8
 8000c9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c9e:	f000 f805 	bl	8000cac <Send>
 8000ca2:	4603      	mov	r3, r0
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	372c      	adds	r7, #44	; 0x2c
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd90      	pop	{r4, r7, pc}

08000cac <Send>:

/*************** Private Fcns **************/

// CAN transmit
static uint8_t Send(s_CanTxMsg msg)
{
 8000cac:	b084      	sub	sp, #16
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	f107 0c08 	add.w	ip, r7, #8
 8000cb6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// instert to Tx buffer
	CB_Put(mMcan.TxBuf,(uint8_t*) &msg);
 8000cba:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <Send+0x2c>)
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	f107 0108 	add.w	r1, r7, #8
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f001 fe15 	bl	80028f2 <CB_Put>
}
 8000cc8:	bf00      	nop
 8000cca:	4618      	mov	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000580 	.word	0x20000580

08000cdc <HAL_CAN_RxFifo0MsgPendingCallback>:


// interrupt handlers - callbacks
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
 {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08c      	sub	sp, #48	; 0x30
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	s_CanRxMsg tmp;
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &tmp.header, tmp.data);
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	331c      	adds	r3, #28
 8000cea:	f107 020c 	add.w	r2, r7, #12
 8000cee:	2100      	movs	r1, #0
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f003 fb8a 	bl	800440a <HAL_CAN_GetRxMessage>
	if (mMcan.CanHw == hcan)
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d107      	bne.n	8000d10 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
	{
		CB_Put(mMcan.Rx0Buf,(uint8_t*) &tmp);
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	f107 020c 	add.w	r2, r7, #12
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f001 fdf1 	bl	80028f2 <CB_Put>
		//UI_LED_B_SetMode(eUI_BLINK_ONCE);  // blue blink
	}

}
 8000d10:	bf00      	nop
 8000d12:	3730      	adds	r7, #48	; 0x30
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000580 	.word	0x20000580

08000d1c <HAL_CAN_RxFifo1MsgPendingCallback>:


void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08c      	sub	sp, #48	; 0x30
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	s_CanRxMsg tmp;
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &tmp.header, tmp.data);
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	331c      	adds	r3, #28
 8000d2a:	f107 020c 	add.w	r2, r7, #12
 8000d2e:	2101      	movs	r1, #1
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f003 fb6a 	bl	800440a <HAL_CAN_GetRxMessage>
	if (mMcan.CanHw == hcan)
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d107      	bne.n	8000d50 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>
	{
		CB_Put(mMcan.Rx1Buf,(uint8_t*) &tmp);
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 8000d42:	691b      	ldr	r3, [r3, #16]
 8000d44:	f107 020c 	add.w	r2, r7, #12
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f001 fdd1 	bl	80028f2 <CB_Put>
		//UI_LED_B_SetMode(eUI_BLINK_ONCE);  // blue blink
	}

}
 8000d50:	bf00      	nop
 8000d52:	3730      	adds	r7, #48	; 0x30
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000580 	.word	0x20000580

08000d5c <Set_Filter_Id_Mask>:
  Input		 		: -
  Output	  	: -
  Description : -
************************************************************************/
void Set_Filter_Id_Mask (CAN_HandleTypeDef *hcan, uint8_t fifo,  uint8_t bank, uint16_t id_1_from, uint16_t id_1_to, uint16_t id_2_from, uint16_t id_2_to)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08c      	sub	sp, #48	; 0x30
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	4608      	mov	r0, r1
 8000d66:	4611      	mov	r1, r2
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	70fb      	strb	r3, [r7, #3]
 8000d6e:	460b      	mov	r3, r1
 8000d70:	70bb      	strb	r3, [r7, #2]
 8000d72:	4613      	mov	r3, r2
 8000d74:	803b      	strh	r3, [r7, #0]
	CAN_FilterTypeDef			 filterInitStructure;

	filterInitStructure.SlaveStartFilterBank  = 14;
 8000d76:	230e      	movs	r3, #14
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c


	filterInitStructure.FilterBank									= bank;
 8000d7a:	78bb      	ldrb	r3, [r7, #2]
 8000d7c:	61fb      	str	r3, [r7, #28]


	filterInitStructure.FilterMode									=	CAN_FILTERMODE_IDMASK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	623b      	str	r3, [r7, #32]
	filterInitStructure.FilterScale									=	CAN_FILTERSCALE_16BIT;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
	filterInitStructure.FilterFIFOAssignment				=	fifo;
 8000d86:	78fb      	ldrb	r3, [r7, #3]
 8000d88:	61bb      	str	r3, [r7, #24]

	filterInitStructure.FilterIdHigh								=	id_2_from << 5;
 8000d8a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000d8c:	015b      	lsls	r3, r3, #5
 8000d8e:	60bb      	str	r3, [r7, #8]
	filterInitStructure.FilterIdLow 								=	id_1_from << 5;
 8000d90:	883b      	ldrh	r3, [r7, #0]
 8000d92:	015b      	lsls	r3, r3, #5
 8000d94:	60fb      	str	r3, [r7, #12]
	filterInitStructure.FilterMaskIdHigh						= Filter_Calc_Mask_Code(id_2_from,id_2_to);
 8000d96:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000d9a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000d9c:	4611      	mov	r1, r2
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 f816 	bl	8000dd0 <Filter_Calc_Mask_Code>
 8000da4:	4603      	mov	r3, r0
 8000da6:	613b      	str	r3, [r7, #16]
	filterInitStructure.FilterMaskIdLow 						= Filter_Calc_Mask_Code(id_1_from,id_1_to);
 8000da8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000daa:	883b      	ldrh	r3, [r7, #0]
 8000dac:	4611      	mov	r1, r2
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 f80e 	bl	8000dd0 <Filter_Calc_Mask_Code>
 8000db4:	4603      	mov	r3, r0
 8000db6:	617b      	str	r3, [r7, #20]

	filterInitStructure.FilterActivation						=	ENABLE;
 8000db8:	2301      	movs	r3, #1
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28

	HAL_CAN_ConfigFilter(hcan,&filterInitStructure);
 8000dbc:	f107 0308 	add.w	r3, r7, #8
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f003 f922 	bl	800400c <HAL_CAN_ConfigFilter>
}
 8000dc8:	bf00      	nop
 8000dca:	3730      	adds	r7, #48	; 0x30
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <Filter_Calc_Mask_Code>:
  Input		 		: -
  Output	  	: -
  Description : -
************************************************************************/
uint16_t Filter_Calc_Mask_Code (uint16_t from,uint16_t to)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	460a      	mov	r2, r1
 8000dda:	80fb      	strh	r3, [r7, #6]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	80bb      	strh	r3, [r7, #4]
	uint16_t	help			 	= 0x00;
 8000de0:	2300      	movs	r3, #0
 8000de2:	81fb      	strh	r3, [r7, #14]
	uint8_t		shift_cnt		= 0x00;
 8000de4:	2300      	movs	r3, #0
 8000de6:	737b      	strb	r3, [r7, #13]
	uint8_t			first			= FALSE;
 8000de8:	2300      	movs	r3, #0
 8000dea:	733b      	strb	r3, [r7, #12]

	for (shift_cnt = 0; shift_cnt < 16; shift_cnt++)
 8000dec:	2300      	movs	r3, #0
 8000dee:	737b      	strb	r3, [r7, #13]
 8000df0:	e022      	b.n	8000e38 <Filter_Calc_Mask_Code+0x68>
	{
		if(((from & 0x8000) == (to & 0x8000)) && (!first))
 8000df2:	88fa      	ldrh	r2, [r7, #6]
 8000df4:	88bb      	ldrh	r3, [r7, #4]
 8000df6:	4053      	eors	r3, r2
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	b21b      	sxth	r3, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	db09      	blt.n	8000e14 <Filter_Calc_Mask_Code+0x44>
 8000e00:	7b3b      	ldrb	r3, [r7, #12]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d106      	bne.n	8000e14 <Filter_Calc_Mask_Code+0x44>
		{
			from = from << 1;
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	80fb      	strh	r3, [r7, #6]
			to = to << 1;
 8000e0c:	88bb      	ldrh	r3, [r7, #4]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	80bb      	strh	r3, [r7, #4]
 8000e12:	e00e      	b.n	8000e32 <Filter_Calc_Mask_Code+0x62>
		}
		else
		{
			help = help << 1;
 8000e14:	89fb      	ldrh	r3, [r7, #14]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	81fb      	strh	r3, [r7, #14]
			first = TRUE;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	733b      	strb	r3, [r7, #12]
			help |= 0x01;
 8000e1e:	89fb      	ldrh	r3, [r7, #14]
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	81fb      	strh	r3, [r7, #14]

			from = from << 1;
 8000e26:	88fb      	ldrh	r3, [r7, #6]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	80fb      	strh	r3, [r7, #6]
			to = to << 1;
 8000e2c:	88bb      	ldrh	r3, [r7, #4]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	80bb      	strh	r3, [r7, #4]
	for (shift_cnt = 0; shift_cnt < 16; shift_cnt++)
 8000e32:	7b7b      	ldrb	r3, [r7, #13]
 8000e34:	3301      	adds	r3, #1
 8000e36:	737b      	strb	r3, [r7, #13]
 8000e38:	7b7b      	ldrb	r3, [r7, #13]
 8000e3a:	2b0f      	cmp	r3, #15
 8000e3c:	d9d9      	bls.n	8000df2 <Filter_Calc_Mask_Code+0x22>
		}
	}
	help = (~help) << 5;
 8000e3e:	89fb      	ldrh	r3, [r7, #14]
 8000e40:	43db      	mvns	r3, r3
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	015b      	lsls	r3, r3, #5
 8000e46:	81fb      	strh	r3, [r7, #14]
	return help;
 8000e48:	89fb      	ldrh	r3, [r7, #14]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <ActivateBus>:
uint8_t mROM[8];

static uint8_t CalculateCRC(uint8_t* data, uint8_t len);

static void ActivateBus(uint8_t mBusId)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
	mOwPort = mBus[mBusId].Port;
 8000e62:	79fa      	ldrb	r2, [r7, #7]
 8000e64:	4912      	ldr	r1, [pc, #72]	; (8000eb0 <ActivateBus+0x58>)
 8000e66:	4613      	mov	r3, r2
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	4413      	add	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	440b      	add	r3, r1
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a10      	ldr	r2, [pc, #64]	; (8000eb4 <ActivateBus+0x5c>)
 8000e74:	6013      	str	r3, [r2, #0]
	mOwClearMask = mBus[mBusId].ClearBitMask;
 8000e76:	79fa      	ldrb	r2, [r7, #7]
 8000e78:	490d      	ldr	r1, [pc, #52]	; (8000eb0 <ActivateBus+0x58>)
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	4413      	add	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	440b      	add	r3, r1
 8000e84:	3304      	adds	r3, #4
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <ActivateBus+0x60>)
 8000e8a:	6013      	str	r3, [r2, #0]
	mOwSetMask = mBus[mBusId].SetBitMask;
 8000e8c:	79fa      	ldrb	r2, [r7, #7]
 8000e8e:	4908      	ldr	r1, [pc, #32]	; (8000eb0 <ActivateBus+0x58>)
 8000e90:	4613      	mov	r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	4413      	add	r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	440b      	add	r3, r1
 8000e9a:	3308      	adds	r3, #8
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a07      	ldr	r2, [pc, #28]	; (8000ebc <ActivateBus+0x64>)
 8000ea0:	6013      	str	r3, [r2, #0]
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000644 	.word	0x20000644
 8000eb4:	20000668 	.word	0x20000668
 8000eb8:	2000066c 	.word	0x2000066c
 8000ebc:	20000670 	.word	0x20000670

08000ec0 <OW_Init>:

//initialization of GPIO, Timer, and timing of OW bus;
void OW_Init(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
//reset list of busses
	uint8_t i;
	for (i = 0; i < MAX_NUM_OF_BUSES; i++)
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	71fb      	strb	r3, [r7, #7]
 8000eca:	e00b      	b.n	8000ee4 <OW_Init+0x24>
	{
		mBus[i].Port = NULL;
 8000ecc:	79fa      	ldrb	r2, [r7, #7]
 8000ece:	4921      	ldr	r1, [pc, #132]	; (8000f54 <OW_Init+0x94>)
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	4413      	add	r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	440b      	add	r3, r1
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < MAX_NUM_OF_BUSES; i++)
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	71fb      	strb	r3, [r7, #7]
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d9f0      	bls.n	8000ecc <OW_Init+0xc>
 // debug support (stop Timer when halted)
//	DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_TIM6_STOP;
// configure the OW pin as a open drain output


	OW_TIM->DIER |= TIM_DIER_UIE;
 8000eea:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <OW_Init+0x98>)
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	4a1a      	ldr	r2, [pc, #104]	; (8000f58 <OW_Init+0x98>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	60d3      	str	r3, [r2, #12]
	OW_TIM->PSC = 4;
 8000ef6:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <OW_Init+0x98>)
 8000ef8:	2204      	movs	r2, #4
 8000efa:	629a      	str	r2, [r3, #40]	; 0x28
	OW_TIM->CR1 |= TIM_CR1_ARPE;  // preload enable
 8000efc:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <OW_Init+0x98>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a15      	ldr	r2, [pc, #84]	; (8000f58 <OW_Init+0x98>)
 8000f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f06:	6013      	str	r3, [r2, #0]

	mTimReset[0] = DEL_RES_PULSE * TIM_CLK_PER_US;
 8000f08:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <OW_Init+0x9c>)
 8000f0a:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8000f0e:	801a      	strh	r2, [r3, #0]
	mTimReset[1] = DEL_RES_SAMPLE * TIM_CLK_PER_US;
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <OW_Init+0x9c>)
 8000f12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f16:	805a      	strh	r2, [r3, #2]
	mTimReset[2] = DEL_RES_REST * TIM_CLK_PER_US;
 8000f18:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <OW_Init+0x9c>)
 8000f1a:	f640 62d8 	movw	r2, #3800	; 0xed8
 8000f1e:	809a      	strh	r2, [r3, #4]

	mTimWriteBit[0] = DEL_WB_PULSE * TIM_CLK_PER_US;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <OW_Init+0xa0>)
 8000f22:	223c      	movs	r2, #60	; 0x3c
 8000f24:	801a      	strh	r2, [r3, #0]
	mTimWriteBit[1] = DEL_WB_WRITE * TIM_CLK_PER_US;
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <OW_Init+0xa0>)
 8000f28:	f240 228a 	movw	r2, #650	; 0x28a
 8000f2c:	805a      	strh	r2, [r3, #2]
	mTimWriteBit[2] = DEL_WB_REST * TIM_CLK_PER_US;
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <OW_Init+0xa0>)
 8000f30:	2296      	movs	r2, #150	; 0x96
 8000f32:	809a      	strh	r2, [r3, #4]

	mTimReadBit[0] = DEL_RB_PULSE * TIM_CLK_PER_US;
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <OW_Init+0xa4>)
 8000f36:	220a      	movs	r2, #10
 8000f38:	801a      	strh	r2, [r3, #0]
	mTimReadBit[1] = DEL_RB_SAMPLE * TIM_CLK_PER_US;
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <OW_Init+0xa4>)
 8000f3c:	226e      	movs	r2, #110	; 0x6e
 8000f3e:	805a      	strh	r2, [r3, #2]
	mTimReadBit[2] = DEL_RB_REST * TIM_CLK_PER_US;
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <OW_Init+0xa4>)
 8000f42:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000f46:	809a      	strh	r2, [r3, #4]

}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	20000644 	.word	0x20000644
 8000f58:	40001000 	.word	0x40001000
 8000f5c:	20000608 	.word	0x20000608
 8000f60:	20000610 	.word	0x20000610
 8000f64:	20000618 	.word	0x20000618

08000f68 <OW_AddBus>:


// define bus connected to some GPIO pin
void OW_AddBus(uint8_t busId, GPIO_TypeDef* port, uint32_t pin)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	73fb      	strb	r3, [r7, #15]
	if (busId < MAX_NUM_OF_BUSES)
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d832      	bhi.n	8000fe2 <OW_AddBus+0x7a>
	{
		// store the Bus - Pin assignment
		mBus[busId].Port = port;
 8000f7c:	7bfa      	ldrb	r2, [r7, #15]
 8000f7e:	491b      	ldr	r1, [pc, #108]	; (8000fec <OW_AddBus+0x84>)
 8000f80:	4613      	mov	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	4413      	add	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	440b      	add	r3, r1
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	601a      	str	r2, [r3, #0]
		mBus[busId].SetBitMask = pin;
 8000f8e:	7bfa      	ldrb	r2, [r7, #15]
 8000f90:	4916      	ldr	r1, [pc, #88]	; (8000fec <OW_AddBus+0x84>)
 8000f92:	4613      	mov	r3, r2
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	4413      	add	r3, r2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	3308      	adds	r3, #8
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	601a      	str	r2, [r3, #0]
		mBus[busId].ClearBitMask = pin << 16;
 8000fa2:	7bfa      	ldrb	r2, [r7, #15]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	0419      	lsls	r1, r3, #16
 8000fa8:	4810      	ldr	r0, [pc, #64]	; (8000fec <OW_AddBus+0x84>)
 8000faa:	4613      	mov	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	4413      	add	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	4403      	add	r3, r0
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	6019      	str	r1, [r3, #0]

		// configure the pin
		 /*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	68b8      	ldr	r0, [r7, #8]
 8000fc2:	f004 f86d 	bl	80050a0 <HAL_GPIO_WritePin>

		GPIO_InitTypeDef GPIO_InitStruct;
		GPIO_InitStruct.Pin = pin;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000fca:	2311      	movs	r3, #17
 8000fcc:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(port, &GPIO_InitStruct);
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4619      	mov	r1, r3
 8000fdc:	68b8      	ldr	r0, [r7, #8]
 8000fde:	f003 feb3 	bl	8004d48 <HAL_GPIO_Init>
	}
}
 8000fe2:	bf00      	nop
 8000fe4:	3728      	adds	r7, #40	; 0x28
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000644 	.word	0x20000644

08000ff0 <ClearRxBuffer>:


void ClearRxBuffer()
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
	mRxBuff[0] = 0;
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <ClearRxBuffer+0x40>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
	mRxBuff[1] = 0;
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <ClearRxBuffer+0x40>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	705a      	strb	r2, [r3, #1]
	mRxBuff[2] = 0;
 8001000:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <ClearRxBuffer+0x40>)
 8001002:	2200      	movs	r2, #0
 8001004:	709a      	strb	r2, [r3, #2]
	mRxBuff[3] = 0;
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <ClearRxBuffer+0x40>)
 8001008:	2200      	movs	r2, #0
 800100a:	70da      	strb	r2, [r3, #3]
	mRxBuff[4] = 0;
 800100c:	4b08      	ldr	r3, [pc, #32]	; (8001030 <ClearRxBuffer+0x40>)
 800100e:	2200      	movs	r2, #0
 8001010:	711a      	strb	r2, [r3, #4]
	mRxBuff[5] = 0;
 8001012:	4b07      	ldr	r3, [pc, #28]	; (8001030 <ClearRxBuffer+0x40>)
 8001014:	2200      	movs	r2, #0
 8001016:	715a      	strb	r2, [r3, #5]
	mRxBuff[6] = 0;
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <ClearRxBuffer+0x40>)
 800101a:	2200      	movs	r2, #0
 800101c:	719a      	strb	r2, [r3, #6]
	mRxBuff[7] = 0;
 800101e:	4b04      	ldr	r3, [pc, #16]	; (8001030 <ClearRxBuffer+0x40>)
 8001020:	2200      	movs	r2, #0
 8001022:	71da      	strb	r2, [r3, #7]
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	2000062c 	.word	0x2000062c

08001034 <OW_ReadSensor>:

eOwResult OW_ReadSensor(uint8_t busId, uint8_t* address, int16_t* result, uint8_t* valid)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	4603      	mov	r3, r0
 8001042:	73fb      	strb	r3, [r7, #15]
	eOwResult res = etr_OK;
 8001044:	2300      	movs	r3, #0
 8001046:	75fb      	strb	r3, [r7, #23]

	if (mBus[busId].Port == NULL)
 8001048:	7bfa      	ldrb	r2, [r7, #15]
 800104a:	4945      	ldr	r1, [pc, #276]	; (8001160 <OW_ReadSensor+0x12c>)
 800104c:	4613      	mov	r3, r2
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	4413      	add	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	440b      	add	r3, r1
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d102      	bne.n	8001062 <OW_ReadSensor+0x2e>
	{
		res = etr_UnknownBus;
 800105c:	2302      	movs	r3, #2
 800105e:	75fb      	strb	r3, [r7, #23]
 8001060:	e076      	b.n	8001150 <OW_ReadSensor+0x11c>
	}
	else if (result == NULL | valid == NULL)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	bf0c      	ite	eq
 8001068:	2301      	moveq	r3, #1
 800106a:	2300      	movne	r3, #0
 800106c:	b2da      	uxtb	r2, r3
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	bf0c      	ite	eq
 8001074:	2301      	moveq	r3, #1
 8001076:	2300      	movne	r3, #0
 8001078:	b2db      	uxtb	r3, r3
 800107a:	4313      	orrs	r3, r2
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d002      	beq.n	8001088 <OW_ReadSensor+0x54>
	{
	  res = etr_InvalidParam;
 8001082:	2305      	movs	r3, #5
 8001084:	75fb      	strb	r3, [r7, #23]
 8001086:	e063      	b.n	8001150 <OW_ReadSensor+0x11c>
	}
	else if (mBusy)
 8001088:	4b36      	ldr	r3, [pc, #216]	; (8001164 <OW_ReadSensor+0x130>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d002      	beq.n	8001096 <OW_ReadSensor+0x62>
	{
		res = etr_Busy;
 8001090:	2301      	movs	r3, #1
 8001092:	75fb      	strb	r3, [r7, #23]
 8001094:	e05c      	b.n	8001150 <OW_ReadSensor+0x11c>
	}
	else // all OK
	{
		ActivateBus(busId);  // asign active bus
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fedd 	bl	8000e58 <ActivateBus>
		ClearRxBuffer();
 800109e:	f7ff ffa7 	bl	8000ff0 <ClearRxBuffer>
		// initialize transfer parameters
		mResultPtr = result;
 80010a2:	4a31      	ldr	r2, [pc, #196]	; (8001168 <OW_ReadSensor+0x134>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6013      	str	r3, [r2, #0]
		mValidPtr = valid;
 80010a8:	4a30      	ldr	r2, [pc, #192]	; (800116c <OW_ReadSensor+0x138>)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	6013      	str	r3, [r2, #0]
		mTxBuff[0] = CMD_MATCH_ROM;
 80010ae:	4b30      	ldr	r3, [pc, #192]	; (8001170 <OW_ReadSensor+0x13c>)
 80010b0:	2255      	movs	r2, #85	; 0x55
 80010b2:	701a      	strb	r2, [r3, #0]
		mTxBuff[1] = address[0];
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	781a      	ldrb	r2, [r3, #0]
 80010b8:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <OW_ReadSensor+0x13c>)
 80010ba:	705a      	strb	r2, [r3, #1]
		mTxBuff[2] = address[1];
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	785a      	ldrb	r2, [r3, #1]
 80010c0:	4b2b      	ldr	r3, [pc, #172]	; (8001170 <OW_ReadSensor+0x13c>)
 80010c2:	709a      	strb	r2, [r3, #2]
		mTxBuff[3] = address[2];
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	789a      	ldrb	r2, [r3, #2]
 80010c8:	4b29      	ldr	r3, [pc, #164]	; (8001170 <OW_ReadSensor+0x13c>)
 80010ca:	70da      	strb	r2, [r3, #3]
		mTxBuff[4] = address[3];
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	78da      	ldrb	r2, [r3, #3]
 80010d0:	4b27      	ldr	r3, [pc, #156]	; (8001170 <OW_ReadSensor+0x13c>)
 80010d2:	711a      	strb	r2, [r3, #4]
		mTxBuff[5] = address[4];
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	791a      	ldrb	r2, [r3, #4]
 80010d8:	4b25      	ldr	r3, [pc, #148]	; (8001170 <OW_ReadSensor+0x13c>)
 80010da:	715a      	strb	r2, [r3, #5]
		mTxBuff[6] = address[5];
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	795a      	ldrb	r2, [r3, #5]
 80010e0:	4b23      	ldr	r3, [pc, #140]	; (8001170 <OW_ReadSensor+0x13c>)
 80010e2:	719a      	strb	r2, [r3, #6]
		mTxBuff[7] = address[6];
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	799a      	ldrb	r2, [r3, #6]
 80010e8:	4b21      	ldr	r3, [pc, #132]	; (8001170 <OW_ReadSensor+0x13c>)
 80010ea:	71da      	strb	r2, [r3, #7]
		mTxBuff[8] = address[7];
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	79da      	ldrb	r2, [r3, #7]
 80010f0:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <OW_ReadSensor+0x13c>)
 80010f2:	721a      	strb	r2, [r3, #8]
		mTxBuff[9] = CMD_READ_SCRATCHPAD;
 80010f4:	4b1e      	ldr	r3, [pc, #120]	; (8001170 <OW_ReadSensor+0x13c>)
 80010f6:	22be      	movs	r2, #190	; 0xbe
 80010f8:	725a      	strb	r2, [r3, #9]


		mTrStage = ets_Reset;
 80010fa:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <OW_ReadSensor+0x140>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
		mResetStage = ers_ResetPulse;
 8001100:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <OW_ReadSensor+0x144>)
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
		mBitStage = ebs_Init;
 8001106:	4b1d      	ldr	r3, [pc, #116]	; (800117c <OW_ReadSensor+0x148>)
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
		mPresencePulse = 0;
 800110c:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <OW_ReadSensor+0x14c>)
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
		mBytesToWrite = 10;
 8001112:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <OW_ReadSensor+0x150>)
 8001114:	220a      	movs	r2, #10
 8001116:	701a      	strb	r2, [r3, #0]
		mBytesToRead = 9; //2;
 8001118:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <OW_ReadSensor+0x154>)
 800111a:	2209      	movs	r2, #9
 800111c:	701a      	strb	r2, [r3, #0]
		mCurrBit = 0;
 800111e:	4b1b      	ldr	r3, [pc, #108]	; (800118c <OW_ReadSensor+0x158>)
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
		mCurrByte = 0;
 8001124:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <OW_ReadSensor+0x15c>)
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
		mCurrentTranfer = ett_ReadTemp;
 800112a:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <OW_ReadSensor+0x160>)
 800112c:	2201      	movs	r2, #1
 800112e:	701a      	strb	r2, [r3, #0]

		mBusy = 1;
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <OW_ReadSensor+0x130>)
 8001132:	2201      	movs	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]
		OW_TIM->ARR = mTimReset[ers_ResetPulse];  // first timed period
 8001136:	4b18      	ldr	r3, [pc, #96]	; (8001198 <OW_ReadSensor+0x164>)
 8001138:	881a      	ldrh	r2, [r3, #0]
 800113a:	4b18      	ldr	r3, [pc, #96]	; (800119c <OW_ReadSensor+0x168>)
 800113c:	62da      	str	r2, [r3, #44]	; 0x2c
		OW_TIM->CR1 |= TIM_CR1_CEN;
 800113e:	4b17      	ldr	r3, [pc, #92]	; (800119c <OW_ReadSensor+0x168>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a16      	ldr	r2, [pc, #88]	; (800119c <OW_ReadSensor+0x168>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6013      	str	r3, [r2, #0]
		OW_TIM->EGR = 1;
 800114a:	4b14      	ldr	r3, [pc, #80]	; (800119c <OW_ReadSensor+0x168>)
 800114c:	2201      	movs	r2, #1
 800114e:	615a      	str	r2, [r3, #20]
	}
	mLastTransferResult = res;
 8001150:	4a13      	ldr	r2, [pc, #76]	; (80011a0 <OW_ReadSensor+0x16c>)
 8001152:	7dfb      	ldrb	r3, [r7, #23]
 8001154:	7013      	strb	r3, [r2, #0]
	return res;
 8001156:	7dfb      	ldrb	r3, [r7, #23]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000644 	.word	0x20000644
 8001164:	20000640 	.word	0x20000640
 8001168:	20000638 	.word	0x20000638
 800116c:	2000063c 	.word	0x2000063c
 8001170:	20000620 	.word	0x20000620
 8001174:	20000602 	.word	0x20000602
 8001178:	20000600 	.word	0x20000600
 800117c:	20000601 	.word	0x20000601
 8001180:	20000604 	.word	0x20000604
 8001184:	200005fc 	.word	0x200005fc
 8001188:	200005fd 	.word	0x200005fd
 800118c:	200005fe 	.word	0x200005fe
 8001190:	200005ff 	.word	0x200005ff
 8001194:	20000603 	.word	0x20000603
 8001198:	20000608 	.word	0x20000608
 800119c:	40001000 	.word	0x40001000
 80011a0:	20000605 	.word	0x20000605

080011a4 <OW_ConvertAll>:
	OW_ReadSensor(busId, mROM, &mTemp, &valid);
}


eOwResult OW_ConvertAll(uint8_t busId)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
	eOwResult res = etr_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	73fb      	strb	r3, [r7, #15]

	if (mBus[busId].Port == NULL)
 80011b2:	79fa      	ldrb	r2, [r7, #7]
 80011b4:	4928      	ldr	r1, [pc, #160]	; (8001258 <OW_ConvertAll+0xb4>)
 80011b6:	4613      	mov	r3, r2
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	4413      	add	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	440b      	add	r3, r1
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d102      	bne.n	80011cc <OW_ConvertAll+0x28>
	{
		res = etr_UnknownBus;
 80011c6:	2302      	movs	r3, #2
 80011c8:	73fb      	strb	r3, [r7, #15]
 80011ca:	e03d      	b.n	8001248 <OW_ConvertAll+0xa4>
	}
	else if (mBusy)
 80011cc:	4b23      	ldr	r3, [pc, #140]	; (800125c <OW_ConvertAll+0xb8>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d002      	beq.n	80011da <OW_ConvertAll+0x36>
	{
		res = etr_Busy;
 80011d4:	2301      	movs	r3, #1
 80011d6:	73fb      	strb	r3, [r7, #15]
 80011d8:	e036      	b.n	8001248 <OW_ConvertAll+0xa4>
	}
	else // all OK
	{
		ActivateBus(busId);  // asign active bus
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fe3b 	bl	8000e58 <ActivateBus>
		ClearRxBuffer();
 80011e2:	f7ff ff05 	bl	8000ff0 <ClearRxBuffer>
		// initialize transfer parameters
		mTxBuff[0] = CMD_SKIP_ROM;
 80011e6:	4b1e      	ldr	r3, [pc, #120]	; (8001260 <OW_ConvertAll+0xbc>)
 80011e8:	22cc      	movs	r2, #204	; 0xcc
 80011ea:	701a      	strb	r2, [r3, #0]
		mTxBuff[1] = CMD_CONVERT;
 80011ec:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <OW_ConvertAll+0xbc>)
 80011ee:	2244      	movs	r2, #68	; 0x44
 80011f0:	705a      	strb	r2, [r3, #1]

		mTrStage = ets_Reset;
 80011f2:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <OW_ConvertAll+0xc0>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
		mResetStage = ers_ResetPulse;
 80011f8:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <OW_ConvertAll+0xc4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
		mBitStage = ebs_Init;
 80011fe:	4b1b      	ldr	r3, [pc, #108]	; (800126c <OW_ConvertAll+0xc8>)
 8001200:	2200      	movs	r2, #0
 8001202:	701a      	strb	r2, [r3, #0]
		mPresencePulse = 0;
 8001204:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <OW_ConvertAll+0xcc>)
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]
		mBytesToWrite = 2;
 800120a:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <OW_ConvertAll+0xd0>)
 800120c:	2202      	movs	r2, #2
 800120e:	701a      	strb	r2, [r3, #0]
		mBytesToRead = 0;
 8001210:	4b19      	ldr	r3, [pc, #100]	; (8001278 <OW_ConvertAll+0xd4>)
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
		mCurrBit = 0;
 8001216:	4b19      	ldr	r3, [pc, #100]	; (800127c <OW_ConvertAll+0xd8>)
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
		mCurrByte = 0;
 800121c:	4b18      	ldr	r3, [pc, #96]	; (8001280 <OW_ConvertAll+0xdc>)
 800121e:	2200      	movs	r2, #0
 8001220:	701a      	strb	r2, [r3, #0]
		mCurrentTranfer = ett_Convert;
 8001222:	4b18      	ldr	r3, [pc, #96]	; (8001284 <OW_ConvertAll+0xe0>)
 8001224:	2202      	movs	r2, #2
 8001226:	701a      	strb	r2, [r3, #0]

		mBusy = 1;
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <OW_ConvertAll+0xb8>)
 800122a:	2201      	movs	r2, #1
 800122c:	701a      	strb	r2, [r3, #0]
		OW_TIM->ARR = mTimReset[ers_ResetPulse];  // first timed period
 800122e:	4b16      	ldr	r3, [pc, #88]	; (8001288 <OW_ConvertAll+0xe4>)
 8001230:	881a      	ldrh	r2, [r3, #0]
 8001232:	4b16      	ldr	r3, [pc, #88]	; (800128c <OW_ConvertAll+0xe8>)
 8001234:	62da      	str	r2, [r3, #44]	; 0x2c
		OW_TIM->CR1 |= TIM_CR1_CEN;
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <OW_ConvertAll+0xe8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a14      	ldr	r2, [pc, #80]	; (800128c <OW_ConvertAll+0xe8>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6013      	str	r3, [r2, #0]
		OW_TIM->EGR = 1;
 8001242:	4b12      	ldr	r3, [pc, #72]	; (800128c <OW_ConvertAll+0xe8>)
 8001244:	2201      	movs	r2, #1
 8001246:	615a      	str	r2, [r3, #20]
	}
	mLastTransferResult = res;
 8001248:	4a11      	ldr	r2, [pc, #68]	; (8001290 <OW_ConvertAll+0xec>)
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	7013      	strb	r3, [r2, #0]
	return res;
 800124e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000644 	.word	0x20000644
 800125c:	20000640 	.word	0x20000640
 8001260:	20000620 	.word	0x20000620
 8001264:	20000602 	.word	0x20000602
 8001268:	20000600 	.word	0x20000600
 800126c:	20000601 	.word	0x20000601
 8001270:	20000604 	.word	0x20000604
 8001274:	200005fc 	.word	0x200005fc
 8001278:	200005fd 	.word	0x200005fd
 800127c:	200005fe 	.word	0x200005fe
 8001280:	200005ff 	.word	0x200005ff
 8001284:	20000603 	.word	0x20000603
 8001288:	20000608 	.word	0x20000608
 800128c:	40001000 	.word	0x40001000
 8001290:	20000605 	.word	0x20000605

08001294 <TransferComplete>:
}


// private fcn called from last IRQ of OW transfer
void TransferComplete()
{
 8001294:	b590      	push	{r4, r7, lr}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
	uint16_t rawbits;
	int16_t rawvalue;

	if (mPresencePulse == 0)
 800129a:	4b2c      	ldr	r3, [pc, #176]	; (800134c <TransferComplete+0xb8>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d102      	bne.n	80012a8 <TransferComplete+0x14>
	{
		mLastTransferResult = etr_NotPresent;
 80012a2:	4b2b      	ldr	r3, [pc, #172]	; (8001350 <TransferComplete+0xbc>)
 80012a4:	2203      	movs	r2, #3
 80012a6:	701a      	strb	r2, [r3, #0]
	}
	switch (mCurrentTranfer)
 80012a8:	4b2a      	ldr	r3, [pc, #168]	; (8001354 <TransferComplete+0xc0>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d042      	beq.n	8001336 <TransferComplete+0xa2>
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	dc43      	bgt.n	800133c <TransferComplete+0xa8>
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d002      	beq.n	80012be <TransferComplete+0x2a>
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d007      	beq.n	80012cc <TransferComplete+0x38>
 80012bc:	e03e      	b.n	800133c <TransferComplete+0xa8>
	{
		case ett_ReadRom:
			memcpy(mROM, mRxBuff, 8);
 80012be:	4b26      	ldr	r3, [pc, #152]	; (8001358 <TransferComplete+0xc4>)
 80012c0:	4a26      	ldr	r2, [pc, #152]	; (800135c <TransferComplete+0xc8>)
 80012c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012c6:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 80012ca:	e037      	b.n	800133c <TransferComplete+0xa8>
		case ett_Convert:
			// nothing
			break;
		case ett_ReadTemp:
			if (mResultPtr != NULL)
 80012cc:	4b24      	ldr	r3, [pc, #144]	; (8001360 <TransferComplete+0xcc>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d032      	beq.n	800133a <TransferComplete+0xa6>
			{
				rawbits = (uint16_t)mRxBuff[0]  |   ((uint16_t)mRxBuff[1]) << 8;
 80012d4:	4b21      	ldr	r3, [pc, #132]	; (800135c <TransferComplete+0xc8>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	b21a      	sxth	r2, r3
 80012da:	4b20      	ldr	r3, [pc, #128]	; (800135c <TransferComplete+0xc8>)
 80012dc:	785b      	ldrb	r3, [r3, #1]
 80012de:	021b      	lsls	r3, r3, #8
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	4313      	orrs	r3, r2
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	80fb      	strh	r3, [r7, #6]
				rawvalue = (int16_t)rawbits;
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	80bb      	strh	r3, [r7, #4]
				// chech CRC
				if (mRxBuff[8] == CalculateCRC(mRxBuff, 8))
 80012ec:	4b1b      	ldr	r3, [pc, #108]	; (800135c <TransferComplete+0xc8>)
 80012ee:	7a1c      	ldrb	r4, [r3, #8]
 80012f0:	2108      	movs	r1, #8
 80012f2:	481a      	ldr	r0, [pc, #104]	; (800135c <TransferComplete+0xc8>)
 80012f4:	f000 f9ec 	bl	80016d0 <CalculateCRC>
 80012f8:	4603      	mov	r3, r0
 80012fa:	429c      	cmp	r4, r3
 80012fc:	d113      	bne.n	8001326 <TransferComplete+0x92>
				{
				  // insert value only if valid CRC
				  *mResultPtr = (rawvalue * 10) / 16;
 80012fe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	2b00      	cmp	r3, #0
 800130c:	da00      	bge.n	8001310 <TransferComplete+0x7c>
 800130e:	330f      	adds	r3, #15
 8001310:	111b      	asrs	r3, r3, #4
 8001312:	461a      	mov	r2, r3
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <TransferComplete+0xcc>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	b212      	sxth	r2, r2
 800131a:	801a      	strh	r2, [r3, #0]
				  *mValidPtr = 1;
 800131c:	4b11      	ldr	r3, [pc, #68]	; (8001364 <TransferComplete+0xd0>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2201      	movs	r2, #1
 8001322:	701a      	strb	r2, [r3, #0]
 8001324:	e003      	b.n	800132e <TransferComplete+0x9a>
				}
				else
				{
				  *mValidPtr = 0;
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <TransferComplete+0xd0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
				}

				//*mResultPtr = (int16_t)((double)(((uint16_t)mRxBuff[0] | ((uint16_t)mRxBuff[1]) << 8)) / 1.6);

				mResultPtr = NULL; // clear the pointer to prevent overwrite in next cycle.
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <TransferComplete+0xcc>)
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
			}
			break;
 8001334:	e001      	b.n	800133a <TransferComplete+0xa6>
			break;
 8001336:	bf00      	nop
 8001338:	e000      	b.n	800133c <TransferComplete+0xa8>
			break;
 800133a:	bf00      	nop
	}
	mBusy = 0;
 800133c:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <TransferComplete+0xd4>)
 800133e:	2200      	movs	r2, #0
 8001340:	701a      	strb	r2, [r3, #0]
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	bd90      	pop	{r4, r7, pc}
 800134a:	bf00      	nop
 800134c:	20000604 	.word	0x20000604
 8001350:	20000605 	.word	0x20000605
 8001354:	20000603 	.word	0x20000603
 8001358:	20000674 	.word	0x20000674
 800135c:	2000062c 	.word	0x2000062c
 8001360:	20000638 	.word	0x20000638
 8001364:	2000063c 	.word	0x2000063c
 8001368:	20000640 	.word	0x20000640

0800136c <OW_IRQHandler>:
	return mROM;
}


void OW_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
	OW_TIM->SR = 0;  // Clear the UIF flag
 8001370:	4b8d      	ldr	r3, [pc, #564]	; (80015a8 <OW_IRQHandler+0x23c>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]

	if (mTrStage == ets_Write)
 8001376:	4b8d      	ldr	r3, [pc, #564]	; (80015ac <OW_IRQHandler+0x240>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b01      	cmp	r3, #1
 800137c:	f040 8086 	bne.w	800148c <OW_IRQHandler+0x120>
	{
		switch (mBitStage)
 8001380:	4b8b      	ldr	r3, [pc, #556]	; (80015b0 <OW_IRQHandler+0x244>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b02      	cmp	r3, #2
 8001386:	d026      	beq.n	80013d6 <OW_IRQHandler+0x6a>
 8001388:	2b02      	cmp	r3, #2
 800138a:	dc2a      	bgt.n	80013e2 <OW_IRQHandler+0x76>
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <OW_IRQHandler+0x2a>
 8001390:	2b01      	cmp	r3, #1
 8001392:	d006      	beq.n	80013a2 <OW_IRQHandler+0x36>
 8001394:	e025      	b.n	80013e2 <OW_IRQHandler+0x76>
		{
			case ebs_Init:
				// write 0 to GPIO
				mOwPort->BSRR = mOwClearMask;
 8001396:	4b87      	ldr	r3, [pc, #540]	; (80015b4 <OW_IRQHandler+0x248>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a87      	ldr	r2, [pc, #540]	; (80015b8 <OW_IRQHandler+0x24c>)
 800139c:	6812      	ldr	r2, [r2, #0]
 800139e:	619a      	str	r2, [r3, #24]
				break;
 80013a0:	e01f      	b.n	80013e2 <OW_IRQHandler+0x76>
			case ebs_WriteSample:
				// write the bit  value to the GPIO
				if (mTxBuff[mCurrByte] & (1 << mCurrBit))
 80013a2:	4b86      	ldr	r3, [pc, #536]	; (80015bc <OW_IRQHandler+0x250>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	461a      	mov	r2, r3
 80013a8:	4b85      	ldr	r3, [pc, #532]	; (80015c0 <OW_IRQHandler+0x254>)
 80013aa:	5c9b      	ldrb	r3, [r3, r2]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b85      	ldr	r3, [pc, #532]	; (80015c4 <OW_IRQHandler+0x258>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	fa42 f303 	asr.w	r3, r2, r3
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d005      	beq.n	80013ca <OW_IRQHandler+0x5e>
				{  // write 1
					mOwPort->BSRR = mOwSetMask;
 80013be:	4b7d      	ldr	r3, [pc, #500]	; (80015b4 <OW_IRQHandler+0x248>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a81      	ldr	r2, [pc, #516]	; (80015c8 <OW_IRQHandler+0x25c>)
 80013c4:	6812      	ldr	r2, [r2, #0]
 80013c6:	619a      	str	r2, [r3, #24]
				else
				{
					//write 0;
					mOwPort->BSRR = mOwClearMask;
				}
				break;
 80013c8:	e00b      	b.n	80013e2 <OW_IRQHandler+0x76>
					mOwPort->BSRR = mOwClearMask;
 80013ca:	4b7a      	ldr	r3, [pc, #488]	; (80015b4 <OW_IRQHandler+0x248>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a7a      	ldr	r2, [pc, #488]	; (80015b8 <OW_IRQHandler+0x24c>)
 80013d0:	6812      	ldr	r2, [r2, #0]
 80013d2:	619a      	str	r2, [r3, #24]
				break;
 80013d4:	e005      	b.n	80013e2 <OW_IRQHandler+0x76>
			case ebs_Rest:
				// write 1 to GPIO
				mOwPort->BSRR = mOwSetMask;
 80013d6:	4b77      	ldr	r3, [pc, #476]	; (80015b4 <OW_IRQHandler+0x248>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a7b      	ldr	r2, [pc, #492]	; (80015c8 <OW_IRQHandler+0x25c>)
 80013dc:	6812      	ldr	r2, [r2, #0]
 80013de:	619a      	str	r2, [r3, #24]
				// increment CurrBit
				break;
 80013e0:	bf00      	nop
		}

		mBitStage++;
 80013e2:	4b73      	ldr	r3, [pc, #460]	; (80015b0 <OW_IRQHandler+0x244>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	3301      	adds	r3, #1
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4b71      	ldr	r3, [pc, #452]	; (80015b0 <OW_IRQHandler+0x244>)
 80013ec:	701a      	strb	r2, [r3, #0]
		if (mBitStage <=2)
 80013ee:	4b70      	ldr	r3, [pc, #448]	; (80015b0 <OW_IRQHandler+0x244>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d808      	bhi.n	8001408 <OW_IRQHandler+0x9c>
		{
			OW_TIM->ARR = mTimWriteBit[mBitStage];   // prepare ARR for next bit stage
 80013f6:	4b6e      	ldr	r3, [pc, #440]	; (80015b0 <OW_IRQHandler+0x244>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	461a      	mov	r2, r3
 80013fc:	4b73      	ldr	r3, [pc, #460]	; (80015cc <OW_IRQHandler+0x260>)
 80013fe:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001402:	4b69      	ldr	r3, [pc, #420]	; (80015a8 <OW_IRQHandler+0x23c>)
 8001404:	62da      	str	r2, [r3, #44]	; 0x2c
				mBusy = 0;
			}
		}
	}

}
 8001406:	e14a      	b.n	800169e <OW_IRQHandler+0x332>
			mBitStage = 0;
 8001408:	4b69      	ldr	r3, [pc, #420]	; (80015b0 <OW_IRQHandler+0x244>)
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
			OW_TIM->ARR = mTimWriteBit[mBitStage];   // prepare ARR for first stage of next write bit
 800140e:	4b68      	ldr	r3, [pc, #416]	; (80015b0 <OW_IRQHandler+0x244>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	461a      	mov	r2, r3
 8001414:	4b6d      	ldr	r3, [pc, #436]	; (80015cc <OW_IRQHandler+0x260>)
 8001416:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800141a:	4b63      	ldr	r3, [pc, #396]	; (80015a8 <OW_IRQHandler+0x23c>)
 800141c:	62da      	str	r2, [r3, #44]	; 0x2c
			mCurrBit++;
 800141e:	4b69      	ldr	r3, [pc, #420]	; (80015c4 <OW_IRQHandler+0x258>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	3301      	adds	r3, #1
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4b67      	ldr	r3, [pc, #412]	; (80015c4 <OW_IRQHandler+0x258>)
 8001428:	701a      	strb	r2, [r3, #0]
			if (mCurrBit > 7)
 800142a:	4b66      	ldr	r3, [pc, #408]	; (80015c4 <OW_IRQHandler+0x258>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b07      	cmp	r3, #7
 8001430:	f240 8135 	bls.w	800169e <OW_IRQHandler+0x332>
				mCurrBit = 0;
 8001434:	4b63      	ldr	r3, [pc, #396]	; (80015c4 <OW_IRQHandler+0x258>)
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
				mCurrByte++;
 800143a:	4b60      	ldr	r3, [pc, #384]	; (80015bc <OW_IRQHandler+0x250>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	3301      	adds	r3, #1
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4b5e      	ldr	r3, [pc, #376]	; (80015bc <OW_IRQHandler+0x250>)
 8001444:	701a      	strb	r2, [r3, #0]
				if (mCurrByte >= mBytesToWrite)  // all bytes written
 8001446:	4b5d      	ldr	r3, [pc, #372]	; (80015bc <OW_IRQHandler+0x250>)
 8001448:	781a      	ldrb	r2, [r3, #0]
 800144a:	4b61      	ldr	r3, [pc, #388]	; (80015d0 <OW_IRQHandler+0x264>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	429a      	cmp	r2, r3
 8001450:	f0c0 8125 	bcc.w	800169e <OW_IRQHandler+0x332>
					mCurrByte = 0;
 8001454:	4b59      	ldr	r3, [pc, #356]	; (80015bc <OW_IRQHandler+0x250>)
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
					if (mBytesToRead > 0)
 800145a:	4b5e      	ldr	r3, [pc, #376]	; (80015d4 <OW_IRQHandler+0x268>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d00b      	beq.n	800147a <OW_IRQHandler+0x10e>
						mTrStage = ets_Read;   // switch to reading stage
 8001462:	4b52      	ldr	r3, [pc, #328]	; (80015ac <OW_IRQHandler+0x240>)
 8001464:	2202      	movs	r2, #2
 8001466:	701a      	strb	r2, [r3, #0]
						OW_TIM->ARR = mTimReadBit[mBitStage];   // prepare ARR for first stage of first read bit
 8001468:	4b51      	ldr	r3, [pc, #324]	; (80015b0 <OW_IRQHandler+0x244>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	461a      	mov	r2, r3
 800146e:	4b5a      	ldr	r3, [pc, #360]	; (80015d8 <OW_IRQHandler+0x26c>)
 8001470:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001474:	4b4c      	ldr	r3, [pc, #304]	; (80015a8 <OW_IRQHandler+0x23c>)
 8001476:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001478:	e111      	b.n	800169e <OW_IRQHandler+0x332>
						OW_TIM->CR1 &= ~TIM_CR1_CEN;
 800147a:	4b4b      	ldr	r3, [pc, #300]	; (80015a8 <OW_IRQHandler+0x23c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a4a      	ldr	r2, [pc, #296]	; (80015a8 <OW_IRQHandler+0x23c>)
 8001480:	f023 0301 	bic.w	r3, r3, #1
 8001484:	6013      	str	r3, [r2, #0]
						TransferComplete();
 8001486:	f7ff ff05 	bl	8001294 <TransferComplete>
}
 800148a:	e108      	b.n	800169e <OW_IRQHandler+0x332>
	else if (mTrStage == ets_Read)
 800148c:	4b47      	ldr	r3, [pc, #284]	; (80015ac <OW_IRQHandler+0x240>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b02      	cmp	r3, #2
 8001492:	f040 80a7 	bne.w	80015e4 <OW_IRQHandler+0x278>
		switch (mBitStage)
 8001496:	4b46      	ldr	r3, [pc, #280]	; (80015b0 <OW_IRQHandler+0x244>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b02      	cmp	r3, #2
 800149c:	d012      	beq.n	80014c4 <OW_IRQHandler+0x158>
 800149e:	2b02      	cmp	r3, #2
 80014a0:	dc44      	bgt.n	800152c <OW_IRQHandler+0x1c0>
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d002      	beq.n	80014ac <OW_IRQHandler+0x140>
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d006      	beq.n	80014b8 <OW_IRQHandler+0x14c>
 80014aa:	e03f      	b.n	800152c <OW_IRQHandler+0x1c0>
					mOwPort->BSRR = mOwClearMask;
 80014ac:	4b41      	ldr	r3, [pc, #260]	; (80015b4 <OW_IRQHandler+0x248>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a41      	ldr	r2, [pc, #260]	; (80015b8 <OW_IRQHandler+0x24c>)
 80014b2:	6812      	ldr	r2, [r2, #0]
 80014b4:	619a      	str	r2, [r3, #24]
					break;
 80014b6:	e039      	b.n	800152c <OW_IRQHandler+0x1c0>
					mOwPort->BSRR = mOwSetMask;
 80014b8:	4b3e      	ldr	r3, [pc, #248]	; (80015b4 <OW_IRQHandler+0x248>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a42      	ldr	r2, [pc, #264]	; (80015c8 <OW_IRQHandler+0x25c>)
 80014be:	6812      	ldr	r2, [r2, #0]
 80014c0:	619a      	str	r2, [r3, #24]
					break;
 80014c2:	e033      	b.n	800152c <OW_IRQHandler+0x1c0>
					if (mOwPort->IDR & mOwSetMask)
 80014c4:	4b3b      	ldr	r3, [pc, #236]	; (80015b4 <OW_IRQHandler+0x248>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	691a      	ldr	r2, [r3, #16]
 80014ca:	4b3f      	ldr	r3, [pc, #252]	; (80015c8 <OW_IRQHandler+0x25c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4013      	ands	r3, r2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d014      	beq.n	80014fe <OW_IRQHandler+0x192>
						mRxBuff[mCurrByte] |= (1 << mCurrBit);
 80014d4:	4b39      	ldr	r3, [pc, #228]	; (80015bc <OW_IRQHandler+0x250>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b40      	ldr	r3, [pc, #256]	; (80015dc <OW_IRQHandler+0x270>)
 80014dc:	5c9b      	ldrb	r3, [r3, r2]
 80014de:	b25a      	sxtb	r2, r3
 80014e0:	4b38      	ldr	r3, [pc, #224]	; (80015c4 <OW_IRQHandler+0x258>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	4619      	mov	r1, r3
 80014e6:	2301      	movs	r3, #1
 80014e8:	408b      	lsls	r3, r1
 80014ea:	b25b      	sxtb	r3, r3
 80014ec:	4313      	orrs	r3, r2
 80014ee:	b259      	sxtb	r1, r3
 80014f0:	4b32      	ldr	r3, [pc, #200]	; (80015bc <OW_IRQHandler+0x250>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	461a      	mov	r2, r3
 80014f6:	b2c9      	uxtb	r1, r1
 80014f8:	4b38      	ldr	r3, [pc, #224]	; (80015dc <OW_IRQHandler+0x270>)
 80014fa:	5499      	strb	r1, [r3, r2]
					break;
 80014fc:	e015      	b.n	800152a <OW_IRQHandler+0x1be>
						mRxBuff[mCurrByte] &= ~(1 << mCurrBit);
 80014fe:	4b2f      	ldr	r3, [pc, #188]	; (80015bc <OW_IRQHandler+0x250>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	4b35      	ldr	r3, [pc, #212]	; (80015dc <OW_IRQHandler+0x270>)
 8001506:	5c9b      	ldrb	r3, [r3, r2]
 8001508:	b25a      	sxtb	r2, r3
 800150a:	4b2e      	ldr	r3, [pc, #184]	; (80015c4 <OW_IRQHandler+0x258>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	4619      	mov	r1, r3
 8001510:	2301      	movs	r3, #1
 8001512:	408b      	lsls	r3, r1
 8001514:	b25b      	sxtb	r3, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	b25b      	sxtb	r3, r3
 800151a:	4013      	ands	r3, r2
 800151c:	b259      	sxtb	r1, r3
 800151e:	4b27      	ldr	r3, [pc, #156]	; (80015bc <OW_IRQHandler+0x250>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	b2c9      	uxtb	r1, r1
 8001526:	4b2d      	ldr	r3, [pc, #180]	; (80015dc <OW_IRQHandler+0x270>)
 8001528:	5499      	strb	r1, [r3, r2]
					break;
 800152a:	bf00      	nop
				mBitStage++;
 800152c:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <OW_IRQHandler+0x244>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	3301      	adds	r3, #1
 8001532:	b2da      	uxtb	r2, r3
 8001534:	4b1e      	ldr	r3, [pc, #120]	; (80015b0 <OW_IRQHandler+0x244>)
 8001536:	701a      	strb	r2, [r3, #0]
				if (mBitStage > 2)
 8001538:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <OW_IRQHandler+0x244>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d929      	bls.n	8001594 <OW_IRQHandler+0x228>
					mBitStage = 0;
 8001540:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <OW_IRQHandler+0x244>)
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]
					mCurrBit++;
 8001546:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <OW_IRQHandler+0x258>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	3301      	adds	r3, #1
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4b1d      	ldr	r3, [pc, #116]	; (80015c4 <OW_IRQHandler+0x258>)
 8001550:	701a      	strb	r2, [r3, #0]
					if (mCurrBit > 7)
 8001552:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <OW_IRQHandler+0x258>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b07      	cmp	r3, #7
 8001558:	d91c      	bls.n	8001594 <OW_IRQHandler+0x228>
						mCurrBit = 0;
 800155a:	4b1a      	ldr	r3, [pc, #104]	; (80015c4 <OW_IRQHandler+0x258>)
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]
						mCurrByte++;
 8001560:	4b16      	ldr	r3, [pc, #88]	; (80015bc <OW_IRQHandler+0x250>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	3301      	adds	r3, #1
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b14      	ldr	r3, [pc, #80]	; (80015bc <OW_IRQHandler+0x250>)
 800156a:	701a      	strb	r2, [r3, #0]
						if (mCurrByte >= mBytesToRead)  // all bytes written
 800156c:	4b13      	ldr	r3, [pc, #76]	; (80015bc <OW_IRQHandler+0x250>)
 800156e:	781a      	ldrb	r2, [r3, #0]
 8001570:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <OW_IRQHandler+0x268>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	429a      	cmp	r2, r3
 8001576:	d30d      	bcc.n	8001594 <OW_IRQHandler+0x228>
							OW_TIM->CR1 &= ~TIM_CR1_CEN;
 8001578:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <OW_IRQHandler+0x23c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <OW_IRQHandler+0x23c>)
 800157e:	f023 0301 	bic.w	r3, r3, #1
 8001582:	6013      	str	r3, [r2, #0]
							TransferComplete();
 8001584:	f7ff fe86 	bl	8001294 <TransferComplete>
							mCurrByte = 0;
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <OW_IRQHandler+0x250>)
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
							mBusy  = 0;
 800158e:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <OW_IRQHandler+0x274>)
 8001590:	2200      	movs	r2, #0
 8001592:	701a      	strb	r2, [r3, #0]
				OW_TIM->ARR = mTimReadBit[mBitStage]; // prepare ARR for next period
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <OW_IRQHandler+0x244>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <OW_IRQHandler+0x26c>)
 800159c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80015a0:	4b01      	ldr	r3, [pc, #4]	; (80015a8 <OW_IRQHandler+0x23c>)
 80015a2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80015a4:	e07b      	b.n	800169e <OW_IRQHandler+0x332>
 80015a6:	bf00      	nop
 80015a8:	40001000 	.word	0x40001000
 80015ac:	20000602 	.word	0x20000602
 80015b0:	20000601 	.word	0x20000601
 80015b4:	20000668 	.word	0x20000668
 80015b8:	2000066c 	.word	0x2000066c
 80015bc:	200005ff 	.word	0x200005ff
 80015c0:	20000620 	.word	0x20000620
 80015c4:	200005fe 	.word	0x200005fe
 80015c8:	20000670 	.word	0x20000670
 80015cc:	20000610 	.word	0x20000610
 80015d0:	200005fc 	.word	0x200005fc
 80015d4:	200005fd 	.word	0x200005fd
 80015d8:	20000618 	.word	0x20000618
 80015dc:	2000062c 	.word	0x2000062c
 80015e0:	20000640 	.word	0x20000640
	else if (mTrStage == ets_Reset)
 80015e4:	4b2f      	ldr	r3, [pc, #188]	; (80016a4 <OW_IRQHandler+0x338>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d158      	bne.n	800169e <OW_IRQHandler+0x332>
		switch (mResetStage)
 80015ec:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <OW_IRQHandler+0x33c>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d012      	beq.n	800161a <OW_IRQHandler+0x2ae>
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	dc20      	bgt.n	800163a <OW_IRQHandler+0x2ce>
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d002      	beq.n	8001602 <OW_IRQHandler+0x296>
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d006      	beq.n	800160e <OW_IRQHandler+0x2a2>
 8001600:	e01b      	b.n	800163a <OW_IRQHandler+0x2ce>
				mOwPort->BSRR = mOwClearMask;
 8001602:	4b2a      	ldr	r3, [pc, #168]	; (80016ac <OW_IRQHandler+0x340>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a2a      	ldr	r2, [pc, #168]	; (80016b0 <OW_IRQHandler+0x344>)
 8001608:	6812      	ldr	r2, [r2, #0]
 800160a:	619a      	str	r2, [r3, #24]
				break;
 800160c:	e015      	b.n	800163a <OW_IRQHandler+0x2ce>
				mOwPort->BSRR = mOwSetMask;
 800160e:	4b27      	ldr	r3, [pc, #156]	; (80016ac <OW_IRQHandler+0x340>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a28      	ldr	r2, [pc, #160]	; (80016b4 <OW_IRQHandler+0x348>)
 8001614:	6812      	ldr	r2, [r2, #0]
 8001616:	619a      	str	r2, [r3, #24]
				break;
 8001618:	e00f      	b.n	800163a <OW_IRQHandler+0x2ce>
				if (mOwPort->IDR & mOwSetMask)
 800161a:	4b24      	ldr	r3, [pc, #144]	; (80016ac <OW_IRQHandler+0x340>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	691a      	ldr	r2, [r3, #16]
 8001620:	4b24      	ldr	r3, [pc, #144]	; (80016b4 <OW_IRQHandler+0x348>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4013      	ands	r3, r2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <OW_IRQHandler+0x2c6>
					mPresencePulse = 0;
 800162a:	4b23      	ldr	r3, [pc, #140]	; (80016b8 <OW_IRQHandler+0x34c>)
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
				break;
 8001630:	e002      	b.n	8001638 <OW_IRQHandler+0x2cc>
					mPresencePulse = 1;
 8001632:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <OW_IRQHandler+0x34c>)
 8001634:	2201      	movs	r2, #1
 8001636:	701a      	strb	r2, [r3, #0]
				break;
 8001638:	bf00      	nop
		mResetStage++;
 800163a:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <OW_IRQHandler+0x33c>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	3301      	adds	r3, #1
 8001640:	b2da      	uxtb	r2, r3
 8001642:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <OW_IRQHandler+0x33c>)
 8001644:	701a      	strb	r2, [r3, #0]
		if (mResetStage <= 2)   // still in Reset phase
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <OW_IRQHandler+0x33c>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d808      	bhi.n	8001660 <OW_IRQHandler+0x2f4>
			OW_TIM->ARR = mTimReset[mResetStage];  // prepare period for next reset stage
 800164e:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <OW_IRQHandler+0x33c>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	461a      	mov	r2, r3
 8001654:	4b19      	ldr	r3, [pc, #100]	; (80016bc <OW_IRQHandler+0x350>)
 8001656:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800165a:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <OW_IRQHandler+0x354>)
 800165c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800165e:	e01e      	b.n	800169e <OW_IRQHandler+0x332>
			mResetStage = 0;
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <OW_IRQHandler+0x33c>)
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]
			mBitStage = 0;   // reset the bit stage for next phase
 8001666:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <OW_IRQHandler+0x358>)
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
			if (mPresencePulse)  // device detected switch to write phase
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <OW_IRQHandler+0x34c>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d00b      	beq.n	800168c <OW_IRQHandler+0x320>
				mTrStage = ets_Write;
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <OW_IRQHandler+0x338>)
 8001676:	2201      	movs	r2, #1
 8001678:	701a      	strb	r2, [r3, #0]
				OW_TIM->ARR = mTimWriteBit[mBitStage];  // prepare period for first write bit stage
 800167a:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <OW_IRQHandler+0x358>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	461a      	mov	r2, r3
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <OW_IRQHandler+0x35c>)
 8001682:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <OW_IRQHandler+0x354>)
 8001688:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800168a:	e008      	b.n	800169e <OW_IRQHandler+0x332>
				OW_TIM->CR1 &= ~TIM_CR1_CEN;
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <OW_IRQHandler+0x354>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <OW_IRQHandler+0x354>)
 8001692:	f023 0301 	bic.w	r3, r3, #1
 8001696:	6013      	str	r3, [r2, #0]
				mBusy = 0;
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <OW_IRQHandler+0x360>)
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000602 	.word	0x20000602
 80016a8:	20000600 	.word	0x20000600
 80016ac:	20000668 	.word	0x20000668
 80016b0:	2000066c 	.word	0x2000066c
 80016b4:	20000670 	.word	0x20000670
 80016b8:	20000604 	.word	0x20000604
 80016bc:	20000608 	.word	0x20000608
 80016c0:	40001000 	.word	0x40001000
 80016c4:	20000601 	.word	0x20000601
 80016c8:	20000610 	.word	0x20000610
 80016cc:	20000640 	.word	0x20000640

080016d0 <CalculateCRC>:



static uint8_t CalculateCRC(uint8_t* data, uint8_t len)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	70fb      	strb	r3, [r7, #3]
  uint8_t crc=0;
 80016dc:	2300      	movs	r3, #0
 80016de:	73fb      	strb	r3, [r7, #15]
  uint8_t inbyte;

    for (uint8_t i=0; i<len;i++)
 80016e0:	2300      	movs	r3, #0
 80016e2:	73bb      	strb	r3, [r7, #14]
 80016e4:	e025      	b.n	8001732 <CalculateCRC+0x62>
    {
      uint8_t inbyte = data[i];
 80016e6:	7bbb      	ldrb	r3, [r7, #14]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	4413      	add	r3, r2
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	737b      	strb	r3, [r7, #13]
      for (uint8_t j=0;j<8;j++)
 80016f0:	2300      	movs	r3, #0
 80016f2:	733b      	strb	r3, [r7, #12]
 80016f4:	e017      	b.n	8001726 <CalculateCRC+0x56>
      {
        uint8_t mix = (crc ^ inbyte) & 0x01;
 80016f6:	7bfa      	ldrb	r2, [r7, #15]
 80016f8:	7b7b      	ldrb	r3, [r7, #13]
 80016fa:	4053      	eors	r3, r2
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	72fb      	strb	r3, [r7, #11]
        crc >>= 1;
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	085b      	lsrs	r3, r3, #1
 8001708:	73fb      	strb	r3, [r7, #15]
        if (mix)
 800170a:	7afb      	ldrb	r3, [r7, #11]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d004      	beq.n	800171a <CalculateCRC+0x4a>
          crc ^= 0x8C;
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8001716:	43db      	mvns	r3, r3
 8001718:	73fb      	strb	r3, [r7, #15]

        inbyte >>= 1;
 800171a:	7b7b      	ldrb	r3, [r7, #13]
 800171c:	085b      	lsrs	r3, r3, #1
 800171e:	737b      	strb	r3, [r7, #13]
      for (uint8_t j=0;j<8;j++)
 8001720:	7b3b      	ldrb	r3, [r7, #12]
 8001722:	3301      	adds	r3, #1
 8001724:	733b      	strb	r3, [r7, #12]
 8001726:	7b3b      	ldrb	r3, [r7, #12]
 8001728:	2b07      	cmp	r3, #7
 800172a:	d9e4      	bls.n	80016f6 <CalculateCRC+0x26>
    for (uint8_t i=0; i<len;i++)
 800172c:	7bbb      	ldrb	r3, [r7, #14]
 800172e:	3301      	adds	r3, #1
 8001730:	73bb      	strb	r3, [r7, #14]
 8001732:	7bba      	ldrb	r2, [r7, #14]
 8001734:	78fb      	ldrb	r3, [r7, #3]
 8001736:	429a      	cmp	r2, r3
 8001738:	d3d5      	bcc.n	80016e6 <CalculateCRC+0x16>
      }
    }
    return crc;
 800173a:	7bfb      	ldrb	r3, [r7, #15]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <RTC_GetTime>:

/* USER CODE END 0 */


sDateTime RTC_GetTime()
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	; 0x28
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  sDateTime dt;
  RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 8001750:	f107 0308 	add.w	r3, r7, #8
 8001754:	2200      	movs	r2, #0
 8001756:	4619      	mov	r1, r3
 8001758:	4816      	ldr	r0, [pc, #88]	; (80017b4 <RTC_GetTime+0x6c>)
 800175a:	f007 faa3 	bl	8008ca4 <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 800175e:	f107 031c 	add.w	r3, r7, #28
 8001762:	2200      	movs	r2, #0
 8001764:	4619      	mov	r1, r3
 8001766:	4813      	ldr	r0, [pc, #76]	; (80017b4 <RTC_GetTime+0x6c>)
 8001768:	f007 fb7e 	bl	8008e68 <HAL_RTC_GetDate>

  dt.Year = 2000 + sdatestructureget.Year;
 800176c:	7ffb      	ldrb	r3, [r7, #31]
 800176e:	b29b      	uxth	r3, r3
 8001770:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001774:	b29b      	uxth	r3, r3
 8001776:	84fb      	strh	r3, [r7, #38]	; 0x26
  dt.Month = sdatestructureget.Month;
 8001778:	7f7b      	ldrb	r3, [r7, #29]
 800177a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dt.Day = sdatestructureget.Date;
 800177e:	7fbb      	ldrb	r3, [r7, #30]
 8001780:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  dt.Hour = stimestructureget.Hours;
 8001784:	7a3b      	ldrb	r3, [r7, #8]
 8001786:	f887 3020 	strb.w	r3, [r7, #32]
  dt.Minute = stimestructureget.Minutes;
 800178a:	7a7b      	ldrb	r3, [r7, #9]
 800178c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  dt.Second = stimestructureget.Seconds;
 8001790:	7abb      	ldrb	r3, [r7, #10]
 8001792:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dt.WeekDay = sdatestructureget.WeekDay;
 8001796:	7f3b      	ldrb	r3, [r7, #28]
 8001798:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  return dt;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	461a      	mov	r2, r3
 80017a0:	f107 0320 	add.w	r3, r7, #32
 80017a4:	cb03      	ldmia	r3!, {r0, r1}
 80017a6:	6010      	str	r0, [r2, #0]
 80017a8:	6051      	str	r1, [r2, #4]
}
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	3728      	adds	r7, #40	; 0x28
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000e64 	.word	0x20000e64

080017b8 <RTC_SetTime>:

void RTC_SetTime(sDateTime dt)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0
 80017be:	463b      	mov	r3, r7
 80017c0:	e883 0003 	stmia.w	r3, {r0, r1}
  /* Configure RTC Calendar */
   RTC_DateTypeDef sdatestructure;
   RTC_TimeTypeDef stimestructure;

   /*##-1- Configure the Date #################################################*/
   sdatestructure.Year = dt.Year - 2000;
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	3330      	adds	r3, #48	; 0x30
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	77fb      	strb	r3, [r7, #31]
   sdatestructure.Month = dt.Month;
 80017ce:	793b      	ldrb	r3, [r7, #4]
 80017d0:	777b      	strb	r3, [r7, #29]
   sdatestructure.Date = dt.Day;
 80017d2:	78fb      	ldrb	r3, [r7, #3]
 80017d4:	77bb      	strb	r3, [r7, #30]
   sdatestructure.WeekDay = dt.WeekDay;
 80017d6:	797b      	ldrb	r3, [r7, #5]
 80017d8:	773b      	strb	r3, [r7, #28]

   if(HAL_RTC_SetDate(&hrtc,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 80017da:	f107 031c 	add.w	r3, r7, #28
 80017de:	2200      	movs	r2, #0
 80017e0:	4619      	mov	r1, r3
 80017e2:	4810      	ldr	r0, [pc, #64]	; (8001824 <RTC_SetTime+0x6c>)
 80017e4:	f007 fabc 	bl	8008d60 <HAL_RTC_SetDate>
     /* Initialization Error */
   //  Error_Handler();
   }

   /*##-2- Configure the Time #################################################*/
   stimestructure.Hours = dt.Hour;
 80017e8:	783b      	ldrb	r3, [r7, #0]
 80017ea:	723b      	strb	r3, [r7, #8]
   stimestructure.Minutes = dt.Minute;
 80017ec:	787b      	ldrb	r3, [r7, #1]
 80017ee:	727b      	strb	r3, [r7, #9]
   stimestructure.Seconds = dt.Second;
 80017f0:	78bb      	ldrb	r3, [r7, #2]
 80017f2:	72bb      	strb	r3, [r7, #10]
   stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 80017f4:	2300      	movs	r3, #0
 80017f6:	72fb      	strb	r3, [r7, #11]
   stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
   stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61bb      	str	r3, [r7, #24]

   if(HAL_RTC_SetTime(&hrtc,&stimestructure,RTC_FORMAT_BIN) != HAL_OK)
 8001800:	f107 0308 	add.w	r3, r7, #8
 8001804:	2200      	movs	r2, #0
 8001806:	4619      	mov	r1, r3
 8001808:	4806      	ldr	r0, [pc, #24]	; (8001824 <RTC_SetTime+0x6c>)
 800180a:	f007 f9b1 	bl	8008b70 <HAL_RTC_SetTime>
     /* Initialization Error */
   //  Error_Handler();
   }

   /*##-3- Writes a data in a RTC Backup data Register1 #######################*/
   HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 800180e:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001812:	2101      	movs	r1, #1
 8001814:	4803      	ldr	r0, [pc, #12]	; (8001824 <RTC_SetTime+0x6c>)
 8001816:	f007 fc33 	bl	8009080 <HAL_RTCEx_BKUPWrite>
	
	// LOG_InsertGeneralMessage("Real Time Clock changed !");
 }
 800181a:	bf00      	nop
 800181c:	3720      	adds	r7, #32
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000e64 	.word	0x20000e64

08001828 <RTC_SetUnixTime>:

 
 void RTC_SetUnixTime(uint32_t unixtime)
 {
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	 struct tm * tm_now;
	 time_t unixnow = unixtime;
 8001830:	6879      	ldr	r1, [r7, #4]
 8001832:	2000      	movs	r0, #0
 8001834:	460a      	mov	r2, r1
 8001836:	4603      	mov	r3, r0
 8001838:	e9c7 2304 	strd	r2, r3, [r7, #16]
	 tm_now = localtime(&unixnow);
 800183c:	f107 0310 	add.w	r3, r7, #16
 8001840:	4618      	mov	r0, r3
 8001842:	f008 ffb9 	bl	800a7b8 <localtime>
 8001846:	61f8      	str	r0, [r7, #28]
	 sDateTime time;
	 time.Second = tm_now->tm_sec;
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	b2db      	uxtb	r3, r3
 800184e:	72bb      	strb	r3, [r7, #10]
	 time.Minute = tm_now->tm_min;
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	b2db      	uxtb	r3, r3
 8001856:	727b      	strb	r3, [r7, #9]
	 time.Hour = tm_now->tm_hour;    
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	723b      	strb	r3, [r7, #8]
	 time.Day = tm_now->tm_mday;
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	72fb      	strb	r3, [r7, #11]
	 time.Month = tm_now->tm_mon +1;
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	3301      	adds	r3, #1
 8001870:	b2db      	uxtb	r3, r3
 8001872:	733b      	strb	r3, [r7, #12]
	 time.Year = tm_now->tm_year + 1900;
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	b29b      	uxth	r3, r3
 800187a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800187e:	b29b      	uxth	r3, r3
 8001880:	81fb      	strh	r3, [r7, #14]
	 RTC_SetTime(time);
 8001882:	f107 0308 	add.w	r3, r7, #8
 8001886:	e893 0003 	ldmia.w	r3, {r0, r1}
 800188a:	f7ff ff95 	bl	80017b8 <RTC_SetTime>
 }
 800188e:	bf00      	nop
 8001890:	3720      	adds	r7, #32
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <SENS_Init>:


uint16_t scd_timer;

void SENS_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0

  mSensors[0].BusHandle = &hi2c1;
 800189c:	4b13      	ldr	r3, [pc, #76]	; (80018ec <SENS_Init+0x54>)
 800189e:	4a14      	ldr	r2, [pc, #80]	; (80018f0 <SENS_Init+0x58>)
 80018a0:	605a      	str	r2, [r3, #4]
  mSensors[0].Id = 0;
 80018a2:	4b12      	ldr	r3, [pc, #72]	; (80018ec <SENS_Init+0x54>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	701a      	strb	r2, [r3, #0]
  mSensors[0].Type = st_SCD4x;
 80018a8:	4b10      	ldr	r3, [pc, #64]	; (80018ec <SENS_Init+0x54>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	705a      	strb	r2, [r3, #1]
  scd_timer = 0;
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <SENS_Init+0x5c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	801a      	strh	r2, [r3, #0]

  mSensors[1].BusHandle = &hi2c1;
 80018b4:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <SENS_Init+0x54>)
 80018b6:	4a0e      	ldr	r2, [pc, #56]	; (80018f0 <SENS_Init+0x58>)
 80018b8:	615a      	str	r2, [r3, #20]
  mSensors[1].Id = 1;
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <SENS_Init+0x54>)
 80018bc:	2201      	movs	r2, #1
 80018be:	741a      	strb	r2, [r3, #16]
  mSensors[1].Type = st_SDP810_125;
 80018c0:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <SENS_Init+0x54>)
 80018c2:	2203      	movs	r2, #3
 80018c4:	745a      	strb	r2, [r3, #17]


  SCD4x_SetAltitude(&(mSensors[0]), 411);
 80018c6:	f240 119b 	movw	r1, #411	; 0x19b
 80018ca:	4808      	ldr	r0, [pc, #32]	; (80018ec <SENS_Init+0x54>)
 80018cc:	f000 f878 	bl	80019c0 <SCD4x_SetAltitude>
  HAL_Delay(10);
 80018d0:	200a      	movs	r0, #10
 80018d2:	f002 fa7b 	bl	8003dcc <HAL_Delay>
  SCD4x_StartMeasurement(&(mSensors[0]));
 80018d6:	4805      	ldr	r0, [pc, #20]	; (80018ec <SENS_Init+0x54>)
 80018d8:	f000 f852 	bl	8001980 <SCD4x_StartMeasurement>


  HAL_Delay(50);
 80018dc:	2032      	movs	r0, #50	; 0x32
 80018de:	f002 fa75 	bl	8003dcc <HAL_Delay>
  SDPx_StartMeasurement(&(mSensors[1]));
 80018e2:	4805      	ldr	r0, [pc, #20]	; (80018f8 <SENS_Init+0x60>)
 80018e4:	f000 f926 	bl	8001b34 <SDPx_StartMeasurement>

}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	2000067c 	.word	0x2000067c
 80018f0:	20000db0 	.word	0x20000db0
 80018f4:	2000071e 	.word	0x2000071e
 80018f8:	2000068c 	.word	0x2000068c

080018fc <SENS_ReadSensor>:
  mSensors[i] = sensor;

}

int16_t SENS_ReadSensor(sI2cSensor* sens)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  switch(sens->Type)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	785b      	ldrb	r3, [r3, #1]
 8001908:	2b03      	cmp	r3, #3
 800190a:	d80b      	bhi.n	8001924 <SENS_ReadSensor+0x28>
 800190c:	a201      	add	r2, pc, #4	; (adr r2, 8001914 <SENS_ReadSensor+0x18>)
 800190e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001912:	bf00      	nop
 8001914:	08001925 	.word	0x08001925
 8001918:	08001925 	.word	0x08001925
 800191c:	08001925 	.word	0x08001925
 8001920:	08001925 	.word	0x08001925
    case st_SPS30:
      break;
    case st_SDP810_125:
      break;
  }
}
 8001924:	bf00      	nop
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop

08001934 <SENS_Update_1s>:



void SENS_Update_1s(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
  int16_t co2,temp,hum,dp;

  scd_timer++;
 800193a:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <SENS_Update_1s+0x40>)
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	3301      	adds	r3, #1
 8001940:	b29a      	uxth	r2, r3
 8001942:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <SENS_Update_1s+0x40>)
 8001944:	801a      	strh	r2, [r3, #0]



  if(scd_timer >= 6)
 8001946:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <SENS_Update_1s+0x40>)
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	2b05      	cmp	r3, #5
 800194c:	d908      	bls.n	8001960 <SENS_Update_1s+0x2c>
  {
    scd_timer = 0;
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <SENS_Update_1s+0x40>)
 8001950:	2200      	movs	r2, #0
 8001952:	801a      	strh	r2, [r3, #0]
    SCD4x_Read(&(mSensors[0]),&co2, &temp, &hum);
 8001954:	1cbb      	adds	r3, r7, #2
 8001956:	1d3a      	adds	r2, r7, #4
 8001958:	1db9      	adds	r1, r7, #6
 800195a:	4807      	ldr	r0, [pc, #28]	; (8001978 <SENS_Update_1s+0x44>)
 800195c:	f000 f868 	bl	8001a30 <SCD4x_Read>
  }


  SDPx_Read(&(mSensors[1]), &dp);
 8001960:	463b      	mov	r3, r7
 8001962:	4619      	mov	r1, r3
 8001964:	4805      	ldr	r0, [pc, #20]	; (800197c <SENS_Update_1s+0x48>)
 8001966:	f000 f905 	bl	8001b74 <SDPx_Read>

}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	2000071e 	.word	0x2000071e
 8001978:	2000067c 	.word	0x2000067c
 800197c:	2000068c 	.word	0x2000068c

08001980 <SCD4x_StartMeasurement>:
  return 0;
}


int16_t SCD4x_StartMeasurement(sI2cSensor* sens)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	; 0x28
 8001984:	af02      	add	r7, sp, #8
 8001986:	6078      	str	r0, [r7, #4]
  uint8_t rxData[10];
  uint8_t txData[10];

  txData[0] = 0x21;
 8001988:	2321      	movs	r3, #33	; 0x21
 800198a:	723b      	strb	r3, [r7, #8]
  txData[1] = 0xB1;
 800198c:	23b1      	movs	r3, #177	; 0xb1
 800198e:	727b      	strb	r3, [r7, #9]
  uint8_t wradd = (SENS_I2C_ADR_SCD41 << 1);
 8001990:	23c4      	movs	r3, #196	; 0xc4
 8001992:	77fb      	strb	r3, [r7, #31]
  uint8_t readd = (SENS_I2C_ADR_SCD41 << 1) | 0x01;
 8001994:	23c5      	movs	r3, #197	; 0xc5
 8001996:	77bb      	strb	r3, [r7, #30]

  if(HAL_OK != HAL_I2C_Master_Transmit(sens->BusHandle, wradd, txData, 2, 50))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6858      	ldr	r0, [r3, #4]
 800199c:	7ffb      	ldrb	r3, [r7, #31]
 800199e:	b299      	uxth	r1, r3
 80019a0:	f107 0208 	add.w	r2, r7, #8
 80019a4:	2332      	movs	r3, #50	; 0x32
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	2302      	movs	r3, #2
 80019aa:	f003 fcf1 	bl	8005390 <HAL_I2C_Master_Transmit>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <SCD4x_StartMeasurement+0x38>
  {
    return 1;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e7ff      	b.n	80019b8 <SCD4x_StartMeasurement+0x38>
  }
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3720      	adds	r7, #32
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <SCD4x_SetAltitude>:
  }
}


int16_t SCD4x_SetAltitude(sI2cSensor* sens, uint16_t alt)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08a      	sub	sp, #40	; 0x28
 80019c4:	af02      	add	r7, sp, #8
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	460b      	mov	r3, r1
 80019ca:	807b      	strh	r3, [r7, #2]
  uint8_t rxData[10];
  uint8_t txData[10];

  txData[0] = 0x24;
 80019cc:	2324      	movs	r3, #36	; 0x24
 80019ce:	723b      	strb	r3, [r7, #8]
  txData[1] = 0x27;
 80019d0:	2327      	movs	r3, #39	; 0x27
 80019d2:	727b      	strb	r3, [r7, #9]
  txData[2] = alt / 0xff;
 80019d4:	887b      	ldrh	r3, [r7, #2]
 80019d6:	4a15      	ldr	r2, [pc, #84]	; (8001a2c <SCD4x_SetAltitude+0x6c>)
 80019d8:	fba2 2303 	umull	r2, r3, r2, r3
 80019dc:	09db      	lsrs	r3, r3, #7
 80019de:	b29b      	uxth	r3, r3
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	72bb      	strb	r3, [r7, #10]
  txData[3] = (alt & 0xFF);
 80019e4:	887b      	ldrh	r3, [r7, #2]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	72fb      	strb	r3, [r7, #11]
  txData[4] = CalculateCRC(&(txData[2]),2);
 80019ea:	f107 0308 	add.w	r3, r7, #8
 80019ee:	3302      	adds	r3, #2
 80019f0:	2102      	movs	r1, #2
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 f908 	bl	8001c08 <CalculateCRC>
 80019f8:	4603      	mov	r3, r0
 80019fa:	733b      	strb	r3, [r7, #12]

  uint8_t wradd = (SENS_I2C_ADR_SCD41 << 1);
 80019fc:	23c4      	movs	r3, #196	; 0xc4
 80019fe:	77fb      	strb	r3, [r7, #31]
  uint8_t readd = (SENS_I2C_ADR_SCD41 << 1) | 0x01;
 8001a00:	23c5      	movs	r3, #197	; 0xc5
 8001a02:	77bb      	strb	r3, [r7, #30]

  if(HAL_OK != HAL_I2C_Master_Transmit(sens->BusHandle, wradd, txData, 5, 50))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6858      	ldr	r0, [r3, #4]
 8001a08:	7ffb      	ldrb	r3, [r7, #31]
 8001a0a:	b299      	uxth	r1, r3
 8001a0c:	f107 0208 	add.w	r2, r7, #8
 8001a10:	2332      	movs	r3, #50	; 0x32
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	2305      	movs	r3, #5
 8001a16:	f003 fcbb 	bl	8005390 <HAL_I2C_Master_Transmit>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <SCD4x_SetAltitude+0x64>
  {
    return 1;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e7ff      	b.n	8001a24 <SCD4x_SetAltitude+0x64>
  }
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3720      	adds	r7, #32
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	80808081 	.word	0x80808081

08001a30 <SCD4x_Read>:



int16_t SCD4x_Read(sI2cSensor* sens, int16_t* co2, int16_t* temperature, int16_t* humidity)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b090      	sub	sp, #64	; 0x40
 8001a34:	af02      	add	r7, sp, #8
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
 8001a3c:	603b      	str	r3, [r7, #0]

  uint16_t temp_raw;
  uint16_t rh_raw;
  uint16_t co2_raw;

  uint8_t wradd = (SENS_I2C_ADR_SCD41 << 1);
 8001a3e:	23c4      	movs	r3, #196	; 0xc4
 8001a40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint8_t readd = (SENS_I2C_ADR_SCD41 << 1) | 0x01;
 8001a44:	23c5      	movs	r3, #197	; 0xc5
 8001a46:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

  txData[0] = 0xEC;
 8001a4a:	23ec      	movs	r3, #236	; 0xec
 8001a4c:	753b      	strb	r3, [r7, #20]
  txData[1] = 0x05;
 8001a4e:	2305      	movs	r3, #5
 8001a50:	757b      	strb	r3, [r7, #21]

  if(HAL_OK != HAL_I2C_Master_Transmit(sens->BusHandle, wradd, txData, 2, 50))
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6858      	ldr	r0, [r3, #4]
 8001a56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001a5a:	b299      	uxth	r1, r3
 8001a5c:	f107 0214 	add.w	r2, r7, #20
 8001a60:	2332      	movs	r3, #50	; 0x32
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	2302      	movs	r3, #2
 8001a66:	f003 fc93 	bl	8005390 <HAL_I2C_Master_Transmit>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <SCD4x_Read+0x44>
  {
    return 1;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e058      	b.n	8001b26 <SCD4x_Read+0xf6>
  }
  HAL_Delay(5);
 8001a74:	2005      	movs	r0, #5
 8001a76:	f002 f9a9 	bl	8003dcc <HAL_Delay>
  if(HAL_OK != HAL_I2C_Master_Receive(sens->BusHandle, readd, rxData, 9, 100))
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6858      	ldr	r0, [r3, #4]
 8001a7e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001a82:	b299      	uxth	r1, r3
 8001a84:	f107 0220 	add.w	r2, r7, #32
 8001a88:	2364      	movs	r3, #100	; 0x64
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	2309      	movs	r3, #9
 8001a8e:	f003 fd7d 	bl	800558c <HAL_I2C_Master_Receive>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <SCD4x_Read+0x6c>
  {
    return 1;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e044      	b.n	8001b26 <SCD4x_Read+0xf6>
  }
  co2_raw = (uint16_t)rxData[0] * 256 + rxData[1];
 8001a9c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	021b      	lsls	r3, r3, #8
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	4413      	add	r3, r2
 8001aae:	86bb      	strh	r3, [r7, #52]	; 0x34
  temp_raw = (uint16_t)rxData[3] * 256 + rxData[4];
 8001ab0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	021b      	lsls	r3, r3, #8
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	4413      	add	r3, r2
 8001ac2:	867b      	strh	r3, [r7, #50]	; 0x32
  rh_raw = (uint16_t)rxData[6] * 256 + rxData[7];
 8001ac4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	021b      	lsls	r3, r3, #8
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	863b      	strh	r3, [r7, #48]	; 0x30
  co = co2_raw;
 8001ad8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001ada:	85fb      	strh	r3, [r7, #46]	; 0x2e
  temp = -45 + (175 * temp_raw)/0xFFFF;
 8001adc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001ade:	22af      	movs	r2, #175	; 0xaf
 8001ae0:	fb02 f303 	mul.w	r3, r2, r3
 8001ae4:	4a12      	ldr	r2, [pc, #72]	; (8001b30 <SCD4x_Read+0x100>)
 8001ae6:	fb82 1203 	smull	r1, r2, r2, r3
 8001aea:	441a      	add	r2, r3
 8001aec:	13d2      	asrs	r2, r2, #15
 8001aee:	17db      	asrs	r3, r3, #31
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	3b2d      	subs	r3, #45	; 0x2d
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rh = (100 * rh_raw)/0xFFFF;
 8001afa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001afc:	2264      	movs	r2, #100	; 0x64
 8001afe:	fb02 f303 	mul.w	r3, r2, r3
 8001b02:	4a0b      	ldr	r2, [pc, #44]	; (8001b30 <SCD4x_Read+0x100>)
 8001b04:	fb82 1203 	smull	r1, r2, r2, r3
 8001b08:	441a      	add	r2, r3
 8001b0a:	13d2      	asrs	r2, r2, #15
 8001b0c:	17db      	asrs	r3, r3, #31
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	857b      	strh	r3, [r7, #42]	; 0x2a
  *co2 = co;
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001b16:	801a      	strh	r2, [r3, #0]
  *temperature = temp;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001b1c:	801a      	strh	r2, [r3, #0]
  *humidity = rh;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001b22:	801a      	strh	r2, [r3, #0]
  return 0;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3738      	adds	r7, #56	; 0x38
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	80008001 	.word	0x80008001

08001b34 <SDPx_StartMeasurement>:




int16_t SDPx_StartMeasurement(sI2cSensor* sens)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08a      	sub	sp, #40	; 0x28
 8001b38:	af02      	add	r7, sp, #8
 8001b3a:	6078      	str	r0, [r7, #4]
  uint8_t rxData[10];
  uint8_t txData[10];

  txData[0] = 0x36;
 8001b3c:	2336      	movs	r3, #54	; 0x36
 8001b3e:	723b      	strb	r3, [r7, #8]
  txData[1] = 0x15;
 8001b40:	2315      	movs	r3, #21
 8001b42:	727b      	strb	r3, [r7, #9]
  uint8_t wradd = (SENS_I2C_ADR_SDP810 << 1);
 8001b44:	234a      	movs	r3, #74	; 0x4a
 8001b46:	77fb      	strb	r3, [r7, #31]
  uint8_t readd = (SENS_I2C_ADR_SDP810 << 1) | 0x01;
 8001b48:	234b      	movs	r3, #75	; 0x4b
 8001b4a:	77bb      	strb	r3, [r7, #30]

  if(HAL_OK != HAL_I2C_Master_Transmit(sens->BusHandle, wradd, txData, 2, 50))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6858      	ldr	r0, [r3, #4]
 8001b50:	7ffb      	ldrb	r3, [r7, #31]
 8001b52:	b299      	uxth	r1, r3
 8001b54:	f107 0208 	add.w	r2, r7, #8
 8001b58:	2332      	movs	r3, #50	; 0x32
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	f003 fc17 	bl	8005390 <HAL_I2C_Master_Transmit>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <SDPx_StartMeasurement+0x38>
  {
    return 1;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e7ff      	b.n	8001b6c <SDPx_StartMeasurement+0x38>
  }
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3720      	adds	r7, #32
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <SDPx_Read>:
    return 1;
  }
}

int16_t SDPx_Read(sI2cSensor* sens, int16_t* dp)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08c      	sub	sp, #48	; 0x30
 8001b78:	af02      	add	r7, sp, #8
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]

  int16_t pressure_raw;
  int16_t pressure;
  int16_t temp;

  uint8_t wradd = (SENS_I2C_ADR_SDP810 << 1);
 8001b7e:	234a      	movs	r3, #74	; 0x4a
 8001b80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t readd = (SENS_I2C_ADR_SDP810 << 1) | 0x01;
 8001b84:	234b      	movs	r3, #75	; 0x4b
 8001b86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


  if(HAL_OK != HAL_I2C_Master_Receive(sens->BusHandle, readd, rxData, 9, 100))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6858      	ldr	r0, [r3, #4]
 8001b8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b92:	b299      	uxth	r1, r3
 8001b94:	f107 0214 	add.w	r2, r7, #20
 8001b98:	2364      	movs	r3, #100	; 0x64
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	2309      	movs	r3, #9
 8001b9e:	f003 fcf5 	bl	800558c <HAL_I2C_Master_Receive>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <SDPx_Read+0x38>
  {
    return 1;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e022      	b.n	8001bf2 <SDPx_Read+0x7e>
  }
  pressure_raw = (((int16_t)rxData[0] << 8) | rxData[1]);
 8001bac:	7d3b      	ldrb	r3, [r7, #20]
 8001bae:	021b      	lsls	r3, r3, #8
 8001bb0:	b21a      	sxth	r2, r3
 8001bb2:	7d7b      	ldrb	r3, [r7, #21]
 8001bb4:	b21b      	sxth	r3, r3
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	84bb      	strh	r3, [r7, #36]	; 0x24
  pressure = pressure_raw / 240;
 8001bba:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001bbe:	4a0f      	ldr	r2, [pc, #60]	; (8001bfc <SDPx_Read+0x88>)
 8001bc0:	fb82 1203 	smull	r1, r2, r2, r3
 8001bc4:	441a      	add	r2, r3
 8001bc6:	11d2      	asrs	r2, r2, #7
 8001bc8:	17db      	asrs	r3, r3, #31
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	847b      	strh	r3, [r7, #34]	; 0x22
  temp =  ((uint16_t)rxData[3] * 256 + rxData[4])/200;
 8001bce:	7dfb      	ldrb	r3, [r7, #23]
 8001bd0:	021b      	lsls	r3, r3, #8
 8001bd2:	7e3a      	ldrb	r2, [r7, #24]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <SDPx_Read+0x8c>)
 8001bd8:	fb82 1203 	smull	r1, r2, r2, r3
 8001bdc:	1192      	asrs	r2, r2, #6
 8001bde:	17db      	asrs	r3, r3, #31
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	843b      	strh	r3, [r7, #32]
  *dp = pressure;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001be8:	801a      	strh	r2, [r3, #0]
  mDP = pressure;
 8001bea:	4a06      	ldr	r2, [pc, #24]	; (8001c04 <SDPx_Read+0x90>)
 8001bec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001bee:	8013      	strh	r3, [r2, #0]
  return 0;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3728      	adds	r7, #40	; 0x28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	88888889 	.word	0x88888889
 8001c00:	51eb851f 	.word	0x51eb851f
 8001c04:	2000071c 	.word	0x2000071c

08001c08 <CalculateCRC>:




static uint8_t CalculateCRC(uint8_t* data, uint8_t len)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	70fb      	strb	r3, [r7, #3]
  uint16_t current_byte;
  uint8_t crc = CRC8_INIT;
 8001c14:	23ff      	movs	r3, #255	; 0xff
 8001c16:	737b      	strb	r3, [r7, #13]
  uint8_t crc_bit;
  /* calculates 8-Bit checksum with given polynomial */
  for (current_byte = 0; current_byte < len; ++current_byte)
 8001c18:	2300      	movs	r3, #0
 8001c1a:	81fb      	strh	r3, [r7, #14]
 8001c1c:	e021      	b.n	8001c62 <CalculateCRC+0x5a>
  {
    crc ^= (data[current_byte]);
 8001c1e:	89fb      	ldrh	r3, [r7, #14]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	4413      	add	r3, r2
 8001c24:	781a      	ldrb	r2, [r3, #0]
 8001c26:	7b7b      	ldrb	r3, [r7, #13]
 8001c28:	4053      	eors	r3, r2
 8001c2a:	737b      	strb	r3, [r7, #13]
    for (crc_bit = 8; crc_bit > 0; --crc_bit)
 8001c2c:	2308      	movs	r3, #8
 8001c2e:	733b      	strb	r3, [r7, #12]
 8001c30:	e011      	b.n	8001c56 <CalculateCRC+0x4e>
    {
      if (crc & 0x80)
 8001c32:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	da07      	bge.n	8001c4a <CalculateCRC+0x42>
      {
        crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8001c3a:	7b7b      	ldrb	r3, [r7, #13]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	b25b      	sxtb	r3, r3
 8001c40:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8001c44:	b25b      	sxtb	r3, r3
 8001c46:	737b      	strb	r3, [r7, #13]
 8001c48:	e002      	b.n	8001c50 <CalculateCRC+0x48>
      }
      else
      {
        crc = (crc << 1);
 8001c4a:	7b7b      	ldrb	r3, [r7, #13]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	737b      	strb	r3, [r7, #13]
    for (crc_bit = 8; crc_bit > 0; --crc_bit)
 8001c50:	7b3b      	ldrb	r3, [r7, #12]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	733b      	strb	r3, [r7, #12]
 8001c56:	7b3b      	ldrb	r3, [r7, #12]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1ea      	bne.n	8001c32 <CalculateCRC+0x2a>
  for (current_byte = 0; current_byte < len; ++current_byte)
 8001c5c:	89fb      	ldrh	r3, [r7, #14]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	81fb      	strh	r3, [r7, #14]
 8001c62:	78fb      	ldrb	r3, [r7, #3]
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	89fa      	ldrh	r2, [r7, #14]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d3d8      	bcc.n	8001c1e <CalculateCRC+0x16>
      }
    }
  }
  return crc;
 8001c6c:	7b7b      	ldrb	r3, [r7, #13]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3714      	adds	r7, #20
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
	...

08001c7c <TEMP_Init>:
/* Private methods */

/* Public methods */

void TEMP_Init(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
	mTimer = 0;
 8001c80:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <TEMP_Init+0x2c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	801a      	strh	r2, [r3, #0]
	mReadId = 0;
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <TEMP_Init+0x30>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
	mConvertId = 0;
 8001c8c:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <TEMP_Init+0x34>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	701a      	strb	r2, [r3, #0]
	mNumOfAssignedSensors = 0;
 8001c92:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <TEMP_Init+0x38>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
	mNumOfBuses = 0;
 8001c98:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <TEMP_Init+0x3c>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	701a      	strb	r2, [r3, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	20000904 	.word	0x20000904
 8001cac:	20000906 	.word	0x20000906
 8001cb0:	20000907 	.word	0x20000907
 8001cb4:	20000720 	.word	0x20000720
 8001cb8:	20000908 	.word	0x20000908

08001cbc <TEMP_Update100ms>:

void TEMP_Update100ms(void)
{
 8001cbc:	b590      	push	{r4, r7, lr}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
	// cyclically read all assigned sensors and trig the conversion

	if (mTimer == 0)
 8001cc2:	4b85      	ldr	r3, [pc, #532]	; (8001ed8 <TEMP_Update100ms+0x21c>)
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f040 80ab 	bne.w	8001e22 <TEMP_Update100ms+0x166>
	{
		// copy results to VARS
		int i;
		for(i = 0; i < mNumOfAssignedSensors; i++)
 8001ccc:	2300      	movs	r3, #0
 8001cce:	607b      	str	r3, [r7, #4]
 8001cd0:	e0a0      	b.n	8001e14 <TEMP_Update100ms+0x158>
		{
			mSensors[i].errorCnt++;  // just assume error to simplify the code :-)
 8001cd2:	4982      	ldr	r1, [pc, #520]	; (8001edc <TEMP_Update100ms+0x220>)
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	4413      	add	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	440b      	add	r3, r1
 8001ce0:	330b      	adds	r3, #11
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	b2d8      	uxtb	r0, r3
 8001ce8:	497c      	ldr	r1, [pc, #496]	; (8001edc <TEMP_Update100ms+0x220>)
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	4613      	mov	r3, r2
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	4413      	add	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	330b      	adds	r3, #11
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	701a      	strb	r2, [r3, #0]
			// check the validity of last readout
			if ((mSensors[i].rawTempC_10ths >= -300) && (mSensors[i].rawTempC_10ths <= 1250) && mSensors[i].status == ets_Valid)  // valid range from -30 to 125 deg C
 8001cfc:	4977      	ldr	r1, [pc, #476]	; (8001edc <TEMP_Update100ms+0x220>)
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	4413      	add	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	3304      	adds	r3, #4
 8001d0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d10:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 8001d14:	db4e      	blt.n	8001db4 <TEMP_Update100ms+0xf8>
 8001d16:	4971      	ldr	r1, [pc, #452]	; (8001edc <TEMP_Update100ms+0x220>)
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	4413      	add	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	440b      	add	r3, r1
 8001d24:	3304      	adds	r3, #4
 8001d26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d2a:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	dc40      	bgt.n	8001db4 <TEMP_Update100ms+0xf8>
 8001d32:	496a      	ldr	r1, [pc, #424]	; (8001edc <TEMP_Update100ms+0x220>)
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	4613      	mov	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	440b      	add	r3, r1
 8001d40:	3306      	adds	r3, #6
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d135      	bne.n	8001db4 <TEMP_Update100ms+0xf8>
			{
				mSensors[i].errorCnt = 0;
 8001d48:	4964      	ldr	r1, [pc, #400]	; (8001edc <TEMP_Update100ms+0x220>)
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	4413      	add	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	330b      	adds	r3, #11
 8001d58:	2200      	movs	r2, #0
 8001d5a:	701a      	strb	r2, [r3, #0]
				mSensors[i].tempC_10ths = mSensors[i].rawTempC_10ths;  // copy the raw value to valid value
 8001d5c:	495f      	ldr	r1, [pc, #380]	; (8001edc <TEMP_Update100ms+0x220>)
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	4413      	add	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001d70:	495a      	ldr	r1, [pc, #360]	; (8001edc <TEMP_Update100ms+0x220>)
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4413      	add	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	3302      	adds	r3, #2
 8001d80:	4602      	mov	r2, r0
 8001d82:	801a      	strh	r2, [r3, #0]
				VAR_SetVariable(mSensors[i].VarId, mSensors[i].tempC_10ths, 1);
 8001d84:	4955      	ldr	r1, [pc, #340]	; (8001edc <TEMP_Update100ms+0x220>)
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	4413      	add	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	440b      	add	r3, r1
 8001d92:	3308      	adds	r3, #8
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	b2d8      	uxtb	r0, r3
 8001d98:	4950      	ldr	r1, [pc, #320]	; (8001edc <TEMP_Update100ms+0x220>)
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4413      	add	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	440b      	add	r3, r1
 8001da6:	3302      	adds	r3, #2
 8001da8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dac:	2201      	movs	r2, #1
 8001dae:	4619      	mov	r1, r3
 8001db0:	f000 fca0 	bl	80026f4 <VAR_SetVariable>
			}

			if (mSensors[i].errorCnt > MAX_ERR_TO_INVALIDATE)
 8001db4:	4949      	ldr	r1, [pc, #292]	; (8001edc <TEMP_Update100ms+0x220>)
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4413      	add	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	330b      	adds	r3, #11
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b05      	cmp	r3, #5
 8001dc8:	d921      	bls.n	8001e0e <TEMP_Update100ms+0x152>
			{
				mSensors[i].errorCnt = 0;
 8001dca:	4944      	ldr	r1, [pc, #272]	; (8001edc <TEMP_Update100ms+0x220>)
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	4413      	add	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	440b      	add	r3, r1
 8001dd8:	330b      	adds	r3, #11
 8001dda:	2200      	movs	r2, #0
 8001ddc:	701a      	strb	r2, [r3, #0]
				VAR_SetVariable(mSensors[i].VarId, mSensors[i].tempC_10ths, 0);  // set invalid flag also to variables..
 8001dde:	493f      	ldr	r1, [pc, #252]	; (8001edc <TEMP_Update100ms+0x220>)
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4413      	add	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	440b      	add	r3, r1
 8001dec:	3308      	adds	r3, #8
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	b2d8      	uxtb	r0, r3
 8001df2:	493a      	ldr	r1, [pc, #232]	; (8001edc <TEMP_Update100ms+0x220>)
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	4613      	mov	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4413      	add	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	440b      	add	r3, r1
 8001e00:	3302      	adds	r3, #2
 8001e02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e06:	2200      	movs	r2, #0
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f000 fc73 	bl	80026f4 <VAR_SetVariable>
		for(i = 0; i < mNumOfAssignedSensors; i++)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3301      	adds	r3, #1
 8001e12:	607b      	str	r3, [r7, #4]
 8001e14:	4b32      	ldr	r3, [pc, #200]	; (8001ee0 <TEMP_Update100ms+0x224>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	f6ff af58 	blt.w	8001cd2 <TEMP_Update100ms+0x16>
		}
		// trig conversion

	}

	if (mTimer < mNumOfBuses)
 8001e22:	4b30      	ldr	r3, [pc, #192]	; (8001ee4 <TEMP_Update100ms+0x228>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	4b2b      	ldr	r3, [pc, #172]	; (8001ed8 <TEMP_Update100ms+0x21c>)
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d905      	bls.n	8001e3c <TEMP_Update100ms+0x180>
	{
		OW_ConvertAll(mTimer);  //  convert one Bus
 8001e30:	4b29      	ldr	r3, [pc, #164]	; (8001ed8 <TEMP_Update100ms+0x21c>)
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff f9b4 	bl	80011a4 <OW_ConvertAll>
	}


	if (mTimer > 20)  // 2 sec delay
 8001e3c:	4b26      	ldr	r3, [pc, #152]	; (8001ed8 <TEMP_Update100ms+0x21c>)
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	2b14      	cmp	r3, #20
 8001e42:	d933      	bls.n	8001eac <TEMP_Update100ms+0x1f0>
	{

		OW_ReadSensor(mSensors[mReadId].owBusId,
 8001e44:	4b28      	ldr	r3, [pc, #160]	; (8001ee8 <TEMP_Update100ms+0x22c>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4a24      	ldr	r2, [pc, #144]	; (8001edc <TEMP_Update100ms+0x220>)
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	440b      	add	r3, r1
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	330a      	adds	r3, #10
 8001e58:	7818      	ldrb	r0, [r3, #0]
									&(mSensorsAddress[mSensors[mReadId].sensorId]),
 8001e5a:	4b23      	ldr	r3, [pc, #140]	; (8001ee8 <TEMP_Update100ms+0x22c>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4a1e      	ldr	r2, [pc, #120]	; (8001edc <TEMP_Update100ms+0x220>)
 8001e62:	460b      	mov	r3, r1
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	440b      	add	r3, r1
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	4a1e      	ldr	r2, [pc, #120]	; (8001eec <TEMP_Update100ms+0x230>)
 8001e72:	1899      	adds	r1, r3, r2
									&(mSensors[mReadId].rawTempC_10ths),
 8001e74:	4b1c      	ldr	r3, [pc, #112]	; (8001ee8 <TEMP_Update100ms+0x22c>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	461a      	mov	r2, r3
		OW_ReadSensor(mSensors[mReadId].owBusId,
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	4413      	add	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4a16      	ldr	r2, [pc, #88]	; (8001edc <TEMP_Update100ms+0x220>)
 8001e84:	4413      	add	r3, r2
 8001e86:	1d1a      	adds	r2, r3, #4
									&(mSensors[mReadId].status));
 8001e88:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <TEMP_Update100ms+0x22c>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	461c      	mov	r4, r3
 8001e8e:	4623      	mov	r3, r4
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	4423      	add	r3, r4
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4c11      	ldr	r4, [pc, #68]	; (8001edc <TEMP_Update100ms+0x220>)
 8001e98:	4423      	add	r3, r4
 8001e9a:	3306      	adds	r3, #6
		OW_ReadSensor(mSensors[mReadId].owBusId,
 8001e9c:	f7ff f8ca 	bl	8001034 <OW_ReadSensor>
		mReadId++;
 8001ea0:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <TEMP_Update100ms+0x22c>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <TEMP_Update100ms+0x22c>)
 8001eaa:	701a      	strb	r2, [r3, #0]

	}
	mTimer++;
 8001eac:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <TEMP_Update100ms+0x21c>)
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <TEMP_Update100ms+0x21c>)
 8001eb6:	801a      	strh	r2, [r3, #0]

	if (mReadId >= mNumOfAssignedSensors)
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <TEMP_Update100ms+0x22c>)
 8001eba:	781a      	ldrb	r2, [r3, #0]
 8001ebc:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <TEMP_Update100ms+0x224>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d305      	bcc.n	8001ed0 <TEMP_Update100ms+0x214>
	{
		mReadId = 0;
 8001ec4:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <TEMP_Update100ms+0x22c>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	701a      	strb	r2, [r3, #0]
		mTimer = 0;
 8001eca:	4b03      	ldr	r3, [pc, #12]	; (8001ed8 <TEMP_Update100ms+0x21c>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	801a      	strh	r2, [r3, #0]
	}

}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd90      	pop	{r4, r7, pc}
 8001ed8:	20000904 	.word	0x20000904
 8001edc:	20000724 	.word	0x20000724
 8001ee0:	20000720 	.word	0x20000720
 8001ee4:	20000908 	.word	0x20000908
 8001ee8:	20000906 	.word	0x20000906
 8001eec:	20000000 	.word	0x20000000

08001ef0 <TEMP_AddHwBus>:

uint8_t TEMP_AddHwBus(uint8_t busId, GPIO_TypeDef* port, uint32_t pin)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
 8001efc:	73fb      	strb	r3, [r7, #15]
	if (mNumOfBuses < MAX_NUM_OF_BUSES)
 8001efe:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <TEMP_AddHwBus+0x3c>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d80d      	bhi.n	8001f22 <TEMP_AddHwBus+0x32>
	{
		OW_AddBus(busId,port, pin);
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	68b9      	ldr	r1, [r7, #8]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff f82b 	bl	8000f68 <OW_AddBus>
		mNumOfBuses ++;
 8001f12:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <TEMP_AddHwBus+0x3c>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	3301      	adds	r3, #1
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <TEMP_AddHwBus+0x3c>)
 8001f1c:	701a      	strb	r2, [r3, #0]
		return 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e000      	b.n	8001f24 <TEMP_AddHwBus+0x34>
	}
	else
	{
		return 1;
 8001f22:	2301      	movs	r3, #1
	}

}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20000908 	.word	0x20000908

08001f30 <TEMP_AssignSensor>:



uint8_t TEMP_AssignSensor(uint8_t sensorId, uint8_t varId, uint8_t busId)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	71bb      	strb	r3, [r7, #6]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	717b      	strb	r3, [r7, #5]
	if (mNumOfAssignedSensors < NUM_OF_ALL_SENSORS)
 8001f42:	4b2e      	ldr	r3, [pc, #184]	; (8001ffc <TEMP_AssignSensor+0xcc>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b27      	cmp	r3, #39	; 0x27
 8001f48:	d851      	bhi.n	8001fee <TEMP_AssignSensor+0xbe>
	{
		mSensors[mNumOfAssignedSensors].sensorId = sensorId;
 8001f4a:	4b2c      	ldr	r3, [pc, #176]	; (8001ffc <TEMP_AssignSensor+0xcc>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4a2b      	ldr	r2, [pc, #172]	; (8002000 <TEMP_AssignSensor+0xd0>)
 8001f52:	460b      	mov	r3, r1
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	440b      	add	r3, r1
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	79fa      	ldrb	r2, [r7, #7]
 8001f5e:	701a      	strb	r2, [r3, #0]
		mSensors[mNumOfAssignedSensors].tempC_10ths = 0x8000;
 8001f60:	4b26      	ldr	r3, [pc, #152]	; (8001ffc <TEMP_AssignSensor+0xcc>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	4619      	mov	r1, r3
 8001f66:	4a26      	ldr	r2, [pc, #152]	; (8002000 <TEMP_AssignSensor+0xd0>)
 8001f68:	460b      	mov	r3, r1
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	440b      	add	r3, r1
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	3302      	adds	r3, #2
 8001f74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f78:	801a      	strh	r2, [r3, #0]
		mSensors[mNumOfAssignedSensors].status = ets_NotValid;
 8001f7a:	4b20      	ldr	r3, [pc, #128]	; (8001ffc <TEMP_AssignSensor+0xcc>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4a1f      	ldr	r2, [pc, #124]	; (8002000 <TEMP_AssignSensor+0xd0>)
 8001f82:	460b      	mov	r3, r1
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	440b      	add	r3, r1
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	3306      	adds	r3, #6
 8001f8e:	2200      	movs	r2, #0
 8001f90:	701a      	strb	r2, [r3, #0]
		mSensors[mNumOfAssignedSensors].VarId = varId;
 8001f92:	4b1a      	ldr	r3, [pc, #104]	; (8001ffc <TEMP_AssignSensor+0xcc>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	4619      	mov	r1, r3
 8001f98:	79bb      	ldrb	r3, [r7, #6]
 8001f9a:	b298      	uxth	r0, r3
 8001f9c:	4a18      	ldr	r2, [pc, #96]	; (8002000 <TEMP_AssignSensor+0xd0>)
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	440b      	add	r3, r1
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	3308      	adds	r3, #8
 8001faa:	4602      	mov	r2, r0
 8001fac:	801a      	strh	r2, [r3, #0]
		mSensors[mNumOfAssignedSensors].owBusId = busId;
 8001fae:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <TEMP_AssignSensor+0xcc>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4a12      	ldr	r2, [pc, #72]	; (8002000 <TEMP_AssignSensor+0xd0>)
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	440b      	add	r3, r1
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	330a      	adds	r3, #10
 8001fc2:	797a      	ldrb	r2, [r7, #5]
 8001fc4:	701a      	strb	r2, [r3, #0]
		mSensors[mNumOfAssignedSensors].errorCnt = 0;
 8001fc6:	4b0d      	ldr	r3, [pc, #52]	; (8001ffc <TEMP_AssignSensor+0xcc>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4a0c      	ldr	r2, [pc, #48]	; (8002000 <TEMP_AssignSensor+0xd0>)
 8001fce:	460b      	mov	r3, r1
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	440b      	add	r3, r1
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	330b      	adds	r3, #11
 8001fda:	2200      	movs	r2, #0
 8001fdc:	701a      	strb	r2, [r3, #0]
		mNumOfAssignedSensors++;
 8001fde:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <TEMP_AssignSensor+0xcc>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <TEMP_AssignSensor+0xcc>)
 8001fe8:	701a      	strb	r2, [r3, #0]
		return 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	e000      	b.n	8001ff0 <TEMP_AssignSensor+0xc0>
	}
	else
	{
		return 1;
 8001fee:	2301      	movs	r3, #1
	}
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	20000720 	.word	0x20000720
 8002000:	20000724 	.word	0x20000724

08002004 <UI_Init>:
void UI_Struct_Initialisation (sUI init_struct, sUI *target);



void UI_Init (sUIHwInit* hw)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af02      	add	r7, sp, #8
 800200a:	6078      	str	r0, [r7, #4]
	sUI init_struct;
	
	init_struct.Status			= eUI_OFF;
 800200c:	2300      	movs	r3, #0
 800200e:	72bb      	strb	r3, [r7, #10]
	init_struct.Led_Cnt			= 0x00;
 8002010:	2300      	movs	r3, #0
 8002012:	813b      	strh	r3, [r7, #8]
	
	init_struct.Pin					= hw->Led_Life.Pin;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	613b      	str	r3, [r7, #16]
	init_struct.Port				= hw->Led_Life.Port;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	60fb      	str	r3, [r7, #12]
	init_struct.Logic				= hw->Led_Life.Logic;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	7a1b      	ldrb	r3, [r3, #8]
 8002024:	753b      	strb	r3, [r7, #20]
	UI_Struct_Initialisation (init_struct, &LED_Life);
 8002026:	4b27      	ldr	r3, [pc, #156]	; (80020c4 <UI_Init+0xc0>)
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	f107 0308 	add.w	r3, r7, #8
 800202e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002030:	f000 f852 	bl	80020d8 <UI_Struct_Initialisation>
	
	init_struct.Pin					= hw->Led_R.Pin;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	613b      	str	r3, [r7, #16]
	init_struct.Port				= hw->Led_R.Port;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	60fb      	str	r3, [r7, #12]
	init_struct.Logic				= hw->Led_R.Logic;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	7d1b      	ldrb	r3, [r3, #20]
 8002044:	753b      	strb	r3, [r7, #20]
	UI_Struct_Initialisation (init_struct, &LED_R);
 8002046:	4b20      	ldr	r3, [pc, #128]	; (80020c8 <UI_Init+0xc4>)
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	f107 0308 	add.w	r3, r7, #8
 800204e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002050:	f000 f842 	bl	80020d8 <UI_Struct_Initialisation>

#ifndef LIMITED_UI

	init_struct.Pin					= hw->Led_G.Pin;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69db      	ldr	r3, [r3, #28]
 8002058:	613b      	str	r3, [r7, #16]
	init_struct.Port				= hw->Led_G.Port;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	60fb      	str	r3, [r7, #12]
	init_struct.Logic				= hw->Led_G.Logic;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002066:	753b      	strb	r3, [r7, #20]
	UI_Struct_Initialisation (init_struct, &LED_G);
 8002068:	4b18      	ldr	r3, [pc, #96]	; (80020cc <UI_Init+0xc8>)
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	f107 0308 	add.w	r3, r7, #8
 8002070:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002072:	f000 f831 	bl	80020d8 <UI_Struct_Initialisation>

	init_struct.Pin					= hw->Led_B.Pin;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207a:	613b      	str	r3, [r7, #16]
	init_struct.Port				= hw->Led_B.Port;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	60fb      	str	r3, [r7, #12]
	init_struct.Logic				= hw->Led_B.Logic;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002088:	753b      	strb	r3, [r7, #20]
	UI_Struct_Initialisation (init_struct, &LED_B);
 800208a:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <UI_Init+0xcc>)
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	f107 0308 	add.w	r3, r7, #8
 8002092:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002094:	f000 f820 	bl	80020d8 <UI_Struct_Initialisation>

	init_struct.Pin					= hw->Buzzer.Pin;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209c:	613b      	str	r3, [r7, #16]
	init_struct.Port				= hw->Buzzer.Port;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	60fb      	str	r3, [r7, #12]
	init_struct.Logic				= hw->Buzzer.Logic;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020aa:	753b      	strb	r3, [r7, #20]
  UI_Struct_Initialisation (init_struct, &Buzzer);
 80020ac:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <UI_Init+0xd0>)
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	f107 0308 	add.w	r3, r7, #8
 80020b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020b6:	f000 f80f 	bl	80020d8 <UI_Struct_Initialisation>
#endif
}
 80020ba:	bf00      	nop
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	2000090c 	.word	0x2000090c
 80020c8:	2000091c 	.word	0x2000091c
 80020cc:	2000092c 	.word	0x2000092c
 80020d0:	2000093c 	.word	0x2000093c
 80020d4:	2000094c 	.word	0x2000094c

080020d8 <UI_Struct_Initialisation>:
/**
* @brief  Reading of actual states on defined Digital input
* @param	*di_input	Pointer to Digital input
*/
void UI_Struct_Initialisation (sUI init_struct, sUI *target)
{
 80020d8:	b590      	push	{r4, r7, lr}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	463c      	mov	r4, r7
 80020e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	*target = init_struct;
 80020e4:	6a3b      	ldr	r3, [r7, #32]
 80020e6:	461c      	mov	r4, r3
 80020e8:	463b      	mov	r3, r7
 80020ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	UI_Control(target,0);
 80020f0:	2100      	movs	r1, #0
 80020f2:	6a38      	ldr	r0, [r7, #32]
 80020f4:	f000 f83e 	bl	8002174 <UI_Control>
}
 80020f8:	bf00      	nop
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd90      	pop	{r4, r7, pc}

08002100 <UI_Update_10ms>:


// periodicaly scheduled updtae function
void UI_Update_10ms()
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
	UI_Control(&LED_Life, 	0x00);
 8002104:	2100      	movs	r1, #0
 8002106:	480a      	ldr	r0, [pc, #40]	; (8002130 <UI_Update_10ms+0x30>)
 8002108:	f000 f834 	bl	8002174 <UI_Control>
	UI_Control(&LED_R, 	0x00);
 800210c:	2100      	movs	r1, #0
 800210e:	4809      	ldr	r0, [pc, #36]	; (8002134 <UI_Update_10ms+0x34>)
 8002110:	f000 f830 	bl	8002174 <UI_Control>
#ifndef LIMITED_UI
	UI_Control(&LED_G, 	0x00);
 8002114:	2100      	movs	r1, #0
 8002116:	4808      	ldr	r0, [pc, #32]	; (8002138 <UI_Update_10ms+0x38>)
 8002118:	f000 f82c 	bl	8002174 <UI_Control>
	UI_Control(&LED_B, 	0x00);
 800211c:	2100      	movs	r1, #0
 800211e:	4807      	ldr	r0, [pc, #28]	; (800213c <UI_Update_10ms+0x3c>)
 8002120:	f000 f828 	bl	8002174 <UI_Control>
	UI_Control(&Buzzer, 	0x00);
 8002124:	2100      	movs	r1, #0
 8002126:	4806      	ldr	r0, [pc, #24]	; (8002140 <UI_Update_10ms+0x40>)
 8002128:	f000 f824 	bl	8002174 <UI_Control>
#endif
}
 800212c:	bf00      	nop
 800212e:	bd80      	pop	{r7, pc}
 8002130:	2000090c 	.word	0x2000090c
 8002134:	2000091c 	.word	0x2000091c
 8002138:	2000092c 	.word	0x2000092c
 800213c:	2000093c 	.word	0x2000093c
 8002140:	2000094c 	.word	0x2000094c

08002144 <UI_LED_Life_SetMode>:
		LED_B.Led_Cnt = 0;
	}
}

void UI_LED_Life_SetMode(eUI_Status status)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	71fb      	strb	r3, [r7, #7]
	if (LED_Life.Status != status)
 800214e:	4b08      	ldr	r3, [pc, #32]	; (8002170 <UI_LED_Life_SetMode+0x2c>)
 8002150:	789b      	ldrb	r3, [r3, #2]
 8002152:	79fa      	ldrb	r2, [r7, #7]
 8002154:	429a      	cmp	r2, r3
 8002156:	d005      	beq.n	8002164 <UI_LED_Life_SetMode+0x20>
	{
		LED_Life.Status = status;
 8002158:	4a05      	ldr	r2, [pc, #20]	; (8002170 <UI_LED_Life_SetMode+0x2c>)
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	7093      	strb	r3, [r2, #2]
		LED_Life.Led_Cnt = 0;
 800215e:	4b04      	ldr	r3, [pc, #16]	; (8002170 <UI_LED_Life_SetMode+0x2c>)
 8002160:	2200      	movs	r2, #0
 8002162:	801a      	strh	r2, [r3, #0]
	}
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	2000090c 	.word	0x2000090c

08002174 <UI_Control>:
  * @brief  Controlling states of LED 
  * @param  led: Pointer to specific LED
  * @param  led_switch: If isn't this parameter null, the function inverts status of specific LED, but LED has to be in TOGGLE mode!
  */
static void UI_Control (sUI *led,uint8_t led_switch)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	70fb      	strb	r3, [r7, #3]

	switch(led->Status)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	789b      	ldrb	r3, [r3, #2]
 8002184:	2b08      	cmp	r3, #8
 8002186:	f200 823f 	bhi.w	8002608 <UI_Control+0x494>
 800218a:	a201      	add	r2, pc, #4	; (adr r2, 8002190 <UI_Control+0x1c>)
 800218c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002190:	080021b5 	.word	0x080021b5
 8002194:	080021e5 	.word	0x080021e5
 8002198:	08002215 	.word	0x08002215
 800219c:	0800228d 	.word	0x0800228d
 80021a0:	08002305 	.word	0x08002305
 80021a4:	08002379 	.word	0x08002379
 80021a8:	080023ef 	.word	0x080023ef
 80021ac:	08002483 	.word	0x08002483
 80021b0:	08002467 	.word	0x08002467
	{
		case eUI_OFF:
			if(led->Logic == eUIL_NEGATIVE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	7b1b      	ldrb	r3, [r3, #12]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d109      	bne.n	80021d0 <UI_Control+0x5c>
			{
				HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6858      	ldr	r0, [r3, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	2201      	movs	r2, #1
 80021c8:	4619      	mov	r1, r3
 80021ca:	f002 ff69 	bl	80050a0 <HAL_GPIO_WritePin>
			}
			else
			{
				HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
			}
			break;
 80021ce:	e226      	b.n	800261e <UI_Control+0x4aa>
				HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6858      	ldr	r0, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	b29b      	uxth	r3, r3
 80021da:	2200      	movs	r2, #0
 80021dc:	4619      	mov	r1, r3
 80021de:	f002 ff5f 	bl	80050a0 <HAL_GPIO_WritePin>
			break;
 80021e2:	e21c      	b.n	800261e <UI_Control+0x4aa>
		case eUI_ON:
			if(led->Logic == eUIL_NEGATIVE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	7b1b      	ldrb	r3, [r3, #12]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d109      	bne.n	8002200 <UI_Control+0x8c>
			{
				HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6858      	ldr	r0, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	2200      	movs	r2, #0
 80021f8:	4619      	mov	r1, r3
 80021fa:	f002 ff51 	bl	80050a0 <HAL_GPIO_WritePin>
			}
			else
			{
				HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
			}			
			break;
 80021fe:	e20e      	b.n	800261e <UI_Control+0x4aa>
				HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6858      	ldr	r0, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	b29b      	uxth	r3, r3
 800220a:	2201      	movs	r2, #1
 800220c:	4619      	mov	r1, r3
 800220e:	f002 ff47 	bl	80050a0 <HAL_GPIO_WritePin>
			break;
 8002212:	e204      	b.n	800261e <UI_Control+0x4aa>
		case eUI_BLINKING_SLOW:
			if(led->Led_Cnt <= 50)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	2b32      	cmp	r3, #50	; 0x32
 800221a:	d817      	bhi.n	800224c <UI_Control+0xd8>
			{
				if(led->Logic == eUIL_NEGATIVE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	7b1b      	ldrb	r3, [r3, #12]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d109      	bne.n	8002238 <UI_Control+0xc4>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6858      	ldr	r0, [r3, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	b29b      	uxth	r3, r3
 800222e:	2200      	movs	r2, #0
 8002230:	4619      	mov	r1, r3
 8002232:	f002 ff35 	bl	80050a0 <HAL_GPIO_WritePin>
 8002236:	e020      	b.n	800227a <UI_Control+0x106>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6858      	ldr	r0, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	b29b      	uxth	r3, r3
 8002242:	2201      	movs	r2, #1
 8002244:	4619      	mov	r1, r3
 8002246:	f002 ff2b 	bl	80050a0 <HAL_GPIO_WritePin>
 800224a:	e016      	b.n	800227a <UI_Control+0x106>
				}	
			}
			else
			{
				if(led->Logic == eUIL_NEGATIVE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	7b1b      	ldrb	r3, [r3, #12]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d109      	bne.n	8002268 <UI_Control+0xf4>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6858      	ldr	r0, [r3, #4]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	b29b      	uxth	r3, r3
 800225e:	2201      	movs	r2, #1
 8002260:	4619      	mov	r1, r3
 8002262:	f002 ff1d 	bl	80050a0 <HAL_GPIO_WritePin>
 8002266:	e008      	b.n	800227a <UI_Control+0x106>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6858      	ldr	r0, [r3, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	b29b      	uxth	r3, r3
 8002272:	2200      	movs	r2, #0
 8002274:	4619      	mov	r1, r3
 8002276:	f002 ff13 	bl	80050a0 <HAL_GPIO_WritePin>
				}
			}

			if(led->Led_Cnt >= 100)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	2b63      	cmp	r3, #99	; 0x63
 8002280:	f240 81c4 	bls.w	800260c <UI_Control+0x498>
			{
				led->Led_Cnt = 0;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	801a      	strh	r2, [r3, #0]
			}
			break;
 800228a:	e1bf      	b.n	800260c <UI_Control+0x498>
		case eUI_BLINKING_FAST:
			if(led->Led_Cnt <= 10 )
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	2b0a      	cmp	r3, #10
 8002292:	d817      	bhi.n	80022c4 <UI_Control+0x150>
			{
				if(led->Logic == eUIL_NEGATIVE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	7b1b      	ldrb	r3, [r3, #12]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d109      	bne.n	80022b0 <UI_Control+0x13c>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6858      	ldr	r0, [r3, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	2200      	movs	r2, #0
 80022a8:	4619      	mov	r1, r3
 80022aa:	f002 fef9 	bl	80050a0 <HAL_GPIO_WritePin>
 80022ae:	e020      	b.n	80022f2 <UI_Control+0x17e>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6858      	ldr	r0, [r3, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	2201      	movs	r2, #1
 80022bc:	4619      	mov	r1, r3
 80022be:	f002 feef 	bl	80050a0 <HAL_GPIO_WritePin>
 80022c2:	e016      	b.n	80022f2 <UI_Control+0x17e>
				}	
			}
			else
			{
				if(led->Logic == eUIL_NEGATIVE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	7b1b      	ldrb	r3, [r3, #12]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d109      	bne.n	80022e0 <UI_Control+0x16c>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6858      	ldr	r0, [r3, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	2201      	movs	r2, #1
 80022d8:	4619      	mov	r1, r3
 80022da:	f002 fee1 	bl	80050a0 <HAL_GPIO_WritePin>
 80022de:	e008      	b.n	80022f2 <UI_Control+0x17e>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6858      	ldr	r0, [r3, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	2200      	movs	r2, #0
 80022ec:	4619      	mov	r1, r3
 80022ee:	f002 fed7 	bl	80050a0 <HAL_GPIO_WritePin>
				}
			}

			if(led->Led_Cnt >= 20)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	881b      	ldrh	r3, [r3, #0]
 80022f6:	2b13      	cmp	r3, #19
 80022f8:	f240 818a 	bls.w	8002610 <UI_Control+0x49c>
			{
				led->Led_Cnt = 0;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	801a      	strh	r2, [r3, #0]
			}			
			break;
 8002302:	e185      	b.n	8002610 <UI_Control+0x49c>
		case eUI_BLINK_ONCE:
			if(led->Led_Cnt <= 2)  // blink for 20ms
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	2b02      	cmp	r3, #2
 800230a:	d817      	bhi.n	800233c <UI_Control+0x1c8>
			{
				if(led->Logic == eUIL_NEGATIVE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	7b1b      	ldrb	r3, [r3, #12]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d109      	bne.n	8002328 <UI_Control+0x1b4>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6858      	ldr	r0, [r3, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	b29b      	uxth	r3, r3
 800231e:	2200      	movs	r2, #0
 8002320:	4619      	mov	r1, r3
 8002322:	f002 febd 	bl	80050a0 <HAL_GPIO_WritePin>
				}
				
				led->Status = eUI_OFF;   // go to permanent off state
				led->Led_Cnt = 0;
			}		
			break;
 8002326:	e17a      	b.n	800261e <UI_Control+0x4aa>
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6858      	ldr	r0, [r3, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	b29b      	uxth	r3, r3
 8002332:	2201      	movs	r2, #1
 8002334:	4619      	mov	r1, r3
 8002336:	f002 feb3 	bl	80050a0 <HAL_GPIO_WritePin>
			break;
 800233a:	e170      	b.n	800261e <UI_Control+0x4aa>
				if(led->Logic == eUIL_NEGATIVE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	7b1b      	ldrb	r3, [r3, #12]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d109      	bne.n	8002358 <UI_Control+0x1e4>
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6858      	ldr	r0, [r3, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	b29b      	uxth	r3, r3
 800234e:	2201      	movs	r2, #1
 8002350:	4619      	mov	r1, r3
 8002352:	f002 fea5 	bl	80050a0 <HAL_GPIO_WritePin>
 8002356:	e008      	b.n	800236a <UI_Control+0x1f6>
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6858      	ldr	r0, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	b29b      	uxth	r3, r3
 8002362:	2200      	movs	r2, #0
 8002364:	4619      	mov	r1, r3
 8002366:	f002 fe9b 	bl	80050a0 <HAL_GPIO_WritePin>
				led->Status = eUI_OFF;   // go to permanent off state
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	709a      	strb	r2, [r3, #2]
				led->Led_Cnt = 0;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	801a      	strh	r2, [r3, #0]
			break;
 8002376:	e152      	b.n	800261e <UI_Control+0x4aa>
		 case eUI_BEEP_ONCE:
					if(led->Led_Cnt <= 300)  // beep for 3 sec
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	881b      	ldrh	r3, [r3, #0]
 800237c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002380:	d817      	bhi.n	80023b2 <UI_Control+0x23e>
					{
						if(led->Logic == eUIL_NEGATIVE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	7b1b      	ldrb	r3, [r3, #12]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d109      	bne.n	800239e <UI_Control+0x22a>
						{
							HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6858      	ldr	r0, [r3, #4]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	b29b      	uxth	r3, r3
 8002394:	2200      	movs	r2, #0
 8002396:	4619      	mov	r1, r3
 8002398:	f002 fe82 	bl	80050a0 <HAL_GPIO_WritePin>
						}

						led->Status = eUI_OFF;   // go to permanent off state
						led->Led_Cnt = 0;
					}
					break;
 800239c:	e13f      	b.n	800261e <UI_Control+0x4aa>
							HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6858      	ldr	r0, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	2201      	movs	r2, #1
 80023aa:	4619      	mov	r1, r3
 80023ac:	f002 fe78 	bl	80050a0 <HAL_GPIO_WritePin>
					break;
 80023b0:	e135      	b.n	800261e <UI_Control+0x4aa>
						if(led->Logic == eUIL_NEGATIVE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	7b1b      	ldrb	r3, [r3, #12]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d109      	bne.n	80023ce <UI_Control+0x25a>
							HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6858      	ldr	r0, [r3, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	2201      	movs	r2, #1
 80023c6:	4619      	mov	r1, r3
 80023c8:	f002 fe6a 	bl	80050a0 <HAL_GPIO_WritePin>
 80023cc:	e008      	b.n	80023e0 <UI_Control+0x26c>
							HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6858      	ldr	r0, [r3, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	2200      	movs	r2, #0
 80023da:	4619      	mov	r1, r3
 80023dc:	f002 fe60 	bl	80050a0 <HAL_GPIO_WritePin>
						led->Status = eUI_OFF;   // go to permanent off state
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	709a      	strb	r2, [r3, #2]
						led->Led_Cnt = 0;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	801a      	strh	r2, [r3, #0]
					break;
 80023ec:	e117      	b.n	800261e <UI_Control+0x4aa>
		case eUI_FLASH:
			if(led->Led_Cnt < 2)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d817      	bhi.n	8002426 <UI_Control+0x2b2>
			{
				if(led->Logic == eUIL_NEGATIVE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	7b1b      	ldrb	r3, [r3, #12]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d109      	bne.n	8002412 <UI_Control+0x29e>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6858      	ldr	r0, [r3, #4]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	b29b      	uxth	r3, r3
 8002408:	2200      	movs	r2, #0
 800240a:	4619      	mov	r1, r3
 800240c:	f002 fe48 	bl	80050a0 <HAL_GPIO_WritePin>
 8002410:	e020      	b.n	8002454 <UI_Control+0x2e0>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6858      	ldr	r0, [r3, #4]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	b29b      	uxth	r3, r3
 800241c:	2201      	movs	r2, #1
 800241e:	4619      	mov	r1, r3
 8002420:	f002 fe3e 	bl	80050a0 <HAL_GPIO_WritePin>
 8002424:	e016      	b.n	8002454 <UI_Control+0x2e0>
				}	
			}
			else
			{
				if(led->Logic == eUIL_NEGATIVE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	7b1b      	ldrb	r3, [r3, #12]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d109      	bne.n	8002442 <UI_Control+0x2ce>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6858      	ldr	r0, [r3, #4]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	b29b      	uxth	r3, r3
 8002438:	2201      	movs	r2, #1
 800243a:	4619      	mov	r1, r3
 800243c:	f002 fe30 	bl	80050a0 <HAL_GPIO_WritePin>
 8002440:	e008      	b.n	8002454 <UI_Control+0x2e0>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6858      	ldr	r0, [r3, #4]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	b29b      	uxth	r3, r3
 800244c:	2200      	movs	r2, #0
 800244e:	4619      	mov	r1, r3
 8002450:	f002 fe26 	bl	80050a0 <HAL_GPIO_WritePin>
				}
			}

			if(led->Led_Cnt >= 200)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	2bc7      	cmp	r3, #199	; 0xc7
 800245a:	f240 80db 	bls.w	8002614 <UI_Control+0x4a0>
			{
				led->Led_Cnt = 0;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	801a      	strh	r2, [r3, #0]
			}			
			break;
 8002464:	e0d6      	b.n	8002614 <UI_Control+0x4a0>
		case eUI_TOGGLE:
			if(led_switch)
 8002466:	78fb      	ldrb	r3, [r7, #3]
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 80d5 	beq.w	8002618 <UI_Control+0x4a4>
			{
				HAL_GPIO_TogglePin(led->Port,led->Pin);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	b29b      	uxth	r3, r3
 8002478:	4619      	mov	r1, r3
 800247a:	4610      	mov	r0, r2
 800247c:	f002 fe29 	bl	80050d2 <HAL_GPIO_TogglePin>
			}
			break;
 8002480:	e0ca      	b.n	8002618 <UI_Control+0x4a4>
		case eUI_COMBI_1:
			if(led->Led_Cnt < 10)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	2b09      	cmp	r3, #9
 8002488:	d817      	bhi.n	80024ba <UI_Control+0x346>
			{
				if(led->Logic == eUIL_NEGATIVE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	7b1b      	ldrb	r3, [r3, #12]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d109      	bne.n	80024a6 <UI_Control+0x332>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6858      	ldr	r0, [r3, #4]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	b29b      	uxth	r3, r3
 800249c:	2200      	movs	r2, #0
 800249e:	4619      	mov	r1, r3
 80024a0:	f002 fdfe 	bl	80050a0 <HAL_GPIO_WritePin>
 80024a4:	e0a8      	b.n	80025f8 <UI_Control+0x484>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6858      	ldr	r0, [r3, #4]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	2201      	movs	r2, #1
 80024b2:	4619      	mov	r1, r3
 80024b4:	f002 fdf4 	bl	80050a0 <HAL_GPIO_WritePin>
 80024b8:	e09e      	b.n	80025f8 <UI_Control+0x484>
				}	
			}
			else if((led->Led_Cnt >= 10)&&(led->Led_Cnt < 50))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	2b09      	cmp	r3, #9
 80024c0:	d91b      	bls.n	80024fa <UI_Control+0x386>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	2b31      	cmp	r3, #49	; 0x31
 80024c8:	d817      	bhi.n	80024fa <UI_Control+0x386>
			{
				if(led->Logic == eUIL_NEGATIVE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	7b1b      	ldrb	r3, [r3, #12]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d109      	bne.n	80024e6 <UI_Control+0x372>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6858      	ldr	r0, [r3, #4]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	b29b      	uxth	r3, r3
 80024dc:	2201      	movs	r2, #1
 80024de:	4619      	mov	r1, r3
 80024e0:	f002 fdde 	bl	80050a0 <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 80024e4:	e088      	b.n	80025f8 <UI_Control+0x484>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6858      	ldr	r0, [r3, #4]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	2200      	movs	r2, #0
 80024f2:	4619      	mov	r1, r3
 80024f4:	f002 fdd4 	bl	80050a0 <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 80024f8:	e07e      	b.n	80025f8 <UI_Control+0x484>
				}
			}
			else if((led->Led_Cnt >= 50)&&(led->Led_Cnt < 60))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	2b31      	cmp	r3, #49	; 0x31
 8002500:	d91b      	bls.n	800253a <UI_Control+0x3c6>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	2b3b      	cmp	r3, #59	; 0x3b
 8002508:	d817      	bhi.n	800253a <UI_Control+0x3c6>
			{
				if(led->Logic == eUIL_NEGATIVE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	7b1b      	ldrb	r3, [r3, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d109      	bne.n	8002526 <UI_Control+0x3b2>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6858      	ldr	r0, [r3, #4]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	b29b      	uxth	r3, r3
 800251c:	2200      	movs	r2, #0
 800251e:	4619      	mov	r1, r3
 8002520:	f002 fdbe 	bl	80050a0 <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 8002524:	e068      	b.n	80025f8 <UI_Control+0x484>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6858      	ldr	r0, [r3, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	b29b      	uxth	r3, r3
 8002530:	2201      	movs	r2, #1
 8002532:	4619      	mov	r1, r3
 8002534:	f002 fdb4 	bl	80050a0 <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 8002538:	e05e      	b.n	80025f8 <UI_Control+0x484>
				}	
			}
			else if((led->Led_Cnt >= 60)&&(led->Led_Cnt < 100))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	2b3b      	cmp	r3, #59	; 0x3b
 8002540:	d91b      	bls.n	800257a <UI_Control+0x406>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	2b63      	cmp	r3, #99	; 0x63
 8002548:	d817      	bhi.n	800257a <UI_Control+0x406>
			{
				if(led->Logic == eUIL_NEGATIVE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	7b1b      	ldrb	r3, [r3, #12]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d109      	bne.n	8002566 <UI_Control+0x3f2>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6858      	ldr	r0, [r3, #4]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	b29b      	uxth	r3, r3
 800255c:	2201      	movs	r2, #1
 800255e:	4619      	mov	r1, r3
 8002560:	f002 fd9e 	bl	80050a0 <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 8002564:	e048      	b.n	80025f8 <UI_Control+0x484>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6858      	ldr	r0, [r3, #4]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	b29b      	uxth	r3, r3
 8002570:	2200      	movs	r2, #0
 8002572:	4619      	mov	r1, r3
 8002574:	f002 fd94 	bl	80050a0 <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 8002578:	e03e      	b.n	80025f8 <UI_Control+0x484>
				}
			}
			else if((led->Led_Cnt >= 100)&&(led->Led_Cnt < 150))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	2b63      	cmp	r3, #99	; 0x63
 8002580:	d91b      	bls.n	80025ba <UI_Control+0x446>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	2b95      	cmp	r3, #149	; 0x95
 8002588:	d817      	bhi.n	80025ba <UI_Control+0x446>
			{
				if(led->Logic == eUIL_NEGATIVE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	7b1b      	ldrb	r3, [r3, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d109      	bne.n	80025a6 <UI_Control+0x432>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6858      	ldr	r0, [r3, #4]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	b29b      	uxth	r3, r3
 800259c:	2200      	movs	r2, #0
 800259e:	4619      	mov	r1, r3
 80025a0:	f002 fd7e 	bl	80050a0 <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 80025a4:	e028      	b.n	80025f8 <UI_Control+0x484>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6858      	ldr	r0, [r3, #4]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	2201      	movs	r2, #1
 80025b2:	4619      	mov	r1, r3
 80025b4:	f002 fd74 	bl	80050a0 <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 80025b8:	e01e      	b.n	80025f8 <UI_Control+0x484>
				}	
			}
			else if((led->Led_Cnt >= 150)&&(led->Led_Cnt < 200))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	2b95      	cmp	r3, #149	; 0x95
 80025c0:	d91a      	bls.n	80025f8 <UI_Control+0x484>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	2bc7      	cmp	r3, #199	; 0xc7
 80025c8:	d816      	bhi.n	80025f8 <UI_Control+0x484>
			{
				if(led->Logic == eUIL_NEGATIVE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	7b1b      	ldrb	r3, [r3, #12]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d109      	bne.n	80025e6 <UI_Control+0x472>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6858      	ldr	r0, [r3, #4]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	b29b      	uxth	r3, r3
 80025dc:	2201      	movs	r2, #1
 80025de:	4619      	mov	r1, r3
 80025e0:	f002 fd5e 	bl	80050a0 <HAL_GPIO_WritePin>
 80025e4:	e008      	b.n	80025f8 <UI_Control+0x484>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6858      	ldr	r0, [r3, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	2200      	movs	r2, #0
 80025f2:	4619      	mov	r1, r3
 80025f4:	f002 fd54 	bl	80050a0 <HAL_GPIO_WritePin>
				}
			}

			if(led->Led_Cnt >= 200)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	2bc7      	cmp	r3, #199	; 0xc7
 80025fe:	d90d      	bls.n	800261c <UI_Control+0x4a8>
			{
				led->Led_Cnt = 0;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	801a      	strh	r2, [r3, #0]
			}			
			
			break;
 8002606:	e009      	b.n	800261c <UI_Control+0x4a8>
		default:
			break;
 8002608:	bf00      	nop
 800260a:	e008      	b.n	800261e <UI_Control+0x4aa>
			break;
 800260c:	bf00      	nop
 800260e:	e006      	b.n	800261e <UI_Control+0x4aa>
			break;
 8002610:	bf00      	nop
 8002612:	e004      	b.n	800261e <UI_Control+0x4aa>
			break;
 8002614:	bf00      	nop
 8002616:	e002      	b.n	800261e <UI_Control+0x4aa>
			break;
 8002618:	bf00      	nop
 800261a:	e000      	b.n	800261e <UI_Control+0x4aa>
			break;
 800261c:	bf00      	nop
	}
	
	if(led->Led_Cnt < 0xFFFF)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002626:	4293      	cmp	r3, r2
 8002628:	d005      	beq.n	8002636 <UI_Control+0x4c2>
	{
		led->Led_Cnt++;		
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	3301      	adds	r3, #1
 8002630:	b29a      	uxth	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	801a      	strh	r2, [r3, #0]
	}	
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop

08002640 <VAR_Init>:

int16_t mDummyVar = 0x8000;


void VAR_Init(void)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < NUM_OF_VARIABLES; i++)
 8002646:	2300      	movs	r3, #0
 8002648:	607b      	str	r3, [r7, #4]
 800264a:	e013      	b.n	8002674 <VAR_Init+0x34>
	{
		Vars[i].valid = 0;
 800264c:	4a0e      	ldr	r2, [pc, #56]	; (8002688 <VAR_Init+0x48>)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2100      	movs	r1, #0
 8002652:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		Vars[i].local = 0;
 8002656:	4a0c      	ldr	r2, [pc, #48]	; (8002688 <VAR_Init+0x48>)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	2200      	movs	r2, #0
 8002660:	705a      	strb	r2, [r3, #1]
		Vars[i].value = 0;
 8002662:	4a09      	ldr	r2, [pc, #36]	; (8002688 <VAR_Init+0x48>)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	2200      	movs	r2, #0
 800266c:	805a      	strh	r2, [r3, #2]
	for(i = 0; i < NUM_OF_VARIABLES; i++)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3301      	adds	r3, #1
 8002672:	607b      	str	r3, [r7, #4]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2bfe      	cmp	r3, #254	; 0xfe
 8002678:	dde8      	ble.n	800264c <VAR_Init+0xc>
	}
}
 800267a:	bf00      	nop
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	2000095c 	.word	0x2000095c

0800268c <VAR_GetVariable>:

int16_t VAR_GetVariable(uint16_t varId, uint16_t* invalid)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	6039      	str	r1, [r7, #0]
 8002696:	80fb      	strh	r3, [r7, #6]
	if (varId < NUM_OF_VARIABLES)
 8002698:	88fb      	ldrh	r3, [r7, #6]
 800269a:	2bfe      	cmp	r3, #254	; 0xfe
 800269c:	d816      	bhi.n	80026cc <VAR_GetVariable+0x40>
	{
		if(Vars[varId].valid == 0)
 800269e:	88fb      	ldrh	r3, [r7, #6]
 80026a0:	4a13      	ldr	r2, [pc, #76]	; (80026f0 <VAR_GetVariable+0x64>)
 80026a2:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d109      	bne.n	80026be <VAR_GetVariable+0x32>
		{
			if (invalid != NULL) *invalid |= INVALID_FLAG;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d006      	beq.n	80026be <VAR_GetVariable+0x32>
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	801a      	strh	r2, [r3, #0]
		}
		return Vars[varId].value;
 80026be:	88fb      	ldrh	r3, [r7, #6]
 80026c0:	4a0b      	ldr	r2, [pc, #44]	; (80026f0 <VAR_GetVariable+0x64>)
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80026ca:	e00a      	b.n	80026e2 <VAR_GetVariable+0x56>
	}
	else
	{
		if (invalid != NULL) *invalid |= INVALID_FLAG;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d006      	beq.n	80026e0 <VAR_GetVariable+0x54>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	f043 0301 	orr.w	r3, r3, #1
 80026da:	b29a      	uxth	r2, r3
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	801a      	strh	r2, [r3, #0]
		return 0;
 80026e0:	2300      	movs	r3, #0
	}
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	2000095c 	.word	0x2000095c

080026f4 <VAR_SetVariable>:
		return &(Vars[varId].value);
	}
}

void VAR_SetVariable(uint8_t varId, int16_t value, uint8_t valid)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	71fb      	strb	r3, [r7, #7]
 80026fe:	460b      	mov	r3, r1
 8002700:	80bb      	strh	r3, [r7, #4]
 8002702:	4613      	mov	r3, r2
 8002704:	71bb      	strb	r3, [r7, #6]
	if (varId < NUM_OF_VARIABLES)
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	2bff      	cmp	r3, #255	; 0xff
 800270a:	d00a      	beq.n	8002722 <VAR_SetVariable+0x2e>
	{
		Vars[varId].valid = valid;
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	4908      	ldr	r1, [pc, #32]	; (8002730 <VAR_SetVariable+0x3c>)
 8002710:	79ba      	ldrb	r2, [r7, #6]
 8002712:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
		Vars[varId].value = value;
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	4a05      	ldr	r2, [pc, #20]	; (8002730 <VAR_SetVariable+0x3c>)
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	88ba      	ldrh	r2, [r7, #4]
 8002720:	805a      	strh	r2, [r3, #2]
	}
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	2000095c 	.word	0x2000095c

08002734 <CB_Create>:
 // s_CanTxMsg Msg;

	

CB_handle CB_Create(uint8_t elementsize, uint16_t length)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	460a      	mov	r2, r1
 800273e:	71fb      	strb	r3, [r7, #7]
 8002740:	4613      	mov	r3, r2
 8002742:	80bb      	strh	r3, [r7, #4]
	CB_handle cb = malloc(sizeof(s_CB)); 
 8002744:	2010      	movs	r0, #16
 8002746:	f008 f949 	bl	800a9dc <malloc>
 800274a:	4603      	mov	r3, r0
 800274c:	60fb      	str	r3, [r7, #12]
	cb->buff = malloc (length * elementsize);  // TBD : check pointer
 800274e:	88bb      	ldrh	r3, [r7, #4]
 8002750:	79fa      	ldrb	r2, [r7, #7]
 8002752:	fb02 f303 	mul.w	r3, r2, r3
 8002756:	4618      	mov	r0, r3
 8002758:	f008 f940 	bl	800a9dc <malloc>
 800275c:	4603      	mov	r3, r0
 800275e:	461a      	mov	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	601a      	str	r2, [r3, #0]
	cb->length = length;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	88ba      	ldrh	r2, [r7, #4]
 8002768:	80da      	strh	r2, [r3, #6]
	cb->head = 0;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	811a      	strh	r2, [r3, #8]
	cb->tail = 0;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	815a      	strh	r2, [r3, #10]
	cb->full = 0;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	731a      	strb	r2, [r3, #12]
	cb->sizeOfElement = elementsize;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	79fa      	ldrb	r2, [r7, #7]
 8002780:	711a      	strb	r2, [r3, #4]
	
	
	return cb;
 8002782:	68fb      	ldr	r3, [r7, #12]
}
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <CB_IsEmpty>:
	return noi;
	
}

uint8_t CB_IsEmpty(CB_handle cb)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
	if (cb!= NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00e      	beq.n	80027b8 <CB_IsEmpty+0x2c>
	{
		return (!cb->full && (cb->head == cb->tail));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	7b1b      	ldrb	r3, [r3, #12]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d107      	bne.n	80027b2 <CB_IsEmpty+0x26>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	891a      	ldrh	r2, [r3, #8]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	895b      	ldrh	r3, [r3, #10]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d101      	bne.n	80027b2 <CB_IsEmpty+0x26>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <CB_IsEmpty+0x28>
 80027b2:	2300      	movs	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	e000      	b.n	80027ba <CB_IsEmpty+0x2e>
	}
	return 1; 
 80027b8:	2301      	movs	r3, #1
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <CB_Probe>:

// Gets the item from the buffer, but do not remove it from the buffer
// To remove the intem, call CB_Probe() + CB_Remove(), or use CB_Get() to get and remove in one step 

uint8_t CB_Probe(CB_handle cb, uint8_t * item)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	6039      	str	r1, [r7, #0]
	if (cb!= NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d01f      	beq.n	8002816 <CB_Probe+0x50>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027d6:	b672      	cpsid	i
}
 80027d8:	bf00      	nop
	{

		
		__disable_irq();
			if(!CB_IsEmpty(cb))
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7ff ffd6 	bl	800278c <CB_IsEmpty>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d113      	bne.n	800280e <CB_Probe+0x48>
			{
				
				memcpy(item, &cb->buff[cb->tail * cb->sizeOfElement], cb->sizeOfElement);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	8952      	ldrh	r2, [r2, #10]
 80027ee:	4611      	mov	r1, r2
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	7912      	ldrb	r2, [r2, #4]
 80027f4:	fb01 f202 	mul.w	r2, r1, r2
 80027f8:	1899      	adds	r1, r3, r2
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	791b      	ldrb	r3, [r3, #4]
 80027fe:	461a      	mov	r2, r3
 8002800:	6838      	ldr	r0, [r7, #0]
 8002802:	f008 f8fb 	bl	800a9fc <memcpy>
  __ASM volatile ("cpsie i" : : : "memory");
 8002806:	b662      	cpsie	i
}
 8002808:	bf00      	nop
				//cb->tail = (cb->tail + 1) % cb->length;
				//cb->full = 0;
				__enable_irq();
				return 0;
 800280a:	2300      	movs	r3, #0
 800280c:	e004      	b.n	8002818 <CB_Probe+0x52>
  __ASM volatile ("cpsie i" : : : "memory");
 800280e:	b662      	cpsie	i
}
 8002810:	bf00      	nop

			}
			else  // empty buffer
			{
				__enable_irq();
				return 1;
 8002812:	2301      	movs	r3, #1
 8002814:	e000      	b.n	8002818 <CB_Probe+0x52>
			}
		}

	// TBD assert
	return 1;
 8002816:	2301      	movs	r3, #1

}
 8002818:	4618      	mov	r0, r3
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <CB_Remove>:


// Removes the item from the buffer, use together with CB_Probe()
uint8_t CB_Remove(CB_handle cb)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
	if (cb!= NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d01f      	beq.n	800286e <CB_Remove+0x4e>
  __ASM volatile ("cpsid i" : : : "memory");
 800282e:	b672      	cpsid	i
}
 8002830:	bf00      	nop
	{
		
		__disable_irq();
			if(!CB_IsEmpty(cb))
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7ff ffaa 	bl	800278c <CB_IsEmpty>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d113      	bne.n	8002866 <CB_Remove+0x46>
			{
				cb->tail = (cb->tail + 1) % cb->length;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	895b      	ldrh	r3, [r3, #10]
 8002842:	3301      	adds	r3, #1
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	88d2      	ldrh	r2, [r2, #6]
 8002848:	fb93 f1f2 	sdiv	r1, r3, r2
 800284c:	fb01 f202 	mul.w	r2, r1, r2
 8002850:	1a9b      	subs	r3, r3, r2
 8002852:	b29a      	uxth	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	815a      	strh	r2, [r3, #10]
				cb->full = 0;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	731a      	strb	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800285e:	b662      	cpsie	i
}
 8002860:	bf00      	nop
				__enable_irq();
				return 0;
 8002862:	2300      	movs	r3, #0
 8002864:	e004      	b.n	8002870 <CB_Remove+0x50>
  __ASM volatile ("cpsie i" : : : "memory");
 8002866:	b662      	cpsie	i
}
 8002868:	bf00      	nop

			}
			else  // empty buffer
			{
				__enable_irq();
				return 1;
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <CB_Remove+0x50>
			}
		}

	// TBD assert
	return 1;
 800286e:	2301      	movs	r3, #1

}
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <CB_Get>:


uint8_t CB_Get(CB_handle cb, uint8_t * item)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
	if (cb!= NULL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d02f      	beq.n	80028e8 <CB_Get+0x70>
  __ASM volatile ("cpsid i" : : : "memory");
 8002888:	b672      	cpsid	i
}
 800288a:	bf00      	nop
	{
		
		__disable_irq();
			if(!CB_IsEmpty(cb))
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff ff7d 	bl	800278c <CB_IsEmpty>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d123      	bne.n	80028e0 <CB_Get+0x68>
			{
				
				memcpy(item, &cb->buff[cb->tail * cb->sizeOfElement], cb->sizeOfElement);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	8952      	ldrh	r2, [r2, #10]
 80028a0:	4611      	mov	r1, r2
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	7912      	ldrb	r2, [r2, #4]
 80028a6:	fb01 f202 	mul.w	r2, r1, r2
 80028aa:	1899      	adds	r1, r3, r2
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	791b      	ldrb	r3, [r3, #4]
 80028b0:	461a      	mov	r2, r3
 80028b2:	6838      	ldr	r0, [r7, #0]
 80028b4:	f008 f8a2 	bl	800a9fc <memcpy>
				cb->tail = (cb->tail + 1) % cb->length;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	895b      	ldrh	r3, [r3, #10]
 80028bc:	3301      	adds	r3, #1
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	88d2      	ldrh	r2, [r2, #6]
 80028c2:	fb93 f1f2 	sdiv	r1, r3, r2
 80028c6:	fb01 f202 	mul.w	r2, r1, r2
 80028ca:	1a9b      	subs	r3, r3, r2
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	815a      	strh	r2, [r3, #10]
				cb->full = 0;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	731a      	strb	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 80028d8:	b662      	cpsie	i
}
 80028da:	bf00      	nop
				__enable_irq();
				return 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	e004      	b.n	80028ea <CB_Get+0x72>
  __ASM volatile ("cpsie i" : : : "memory");
 80028e0:	b662      	cpsie	i
}
 80028e2:	bf00      	nop

			}
			else  // empty buffer
			{
				__enable_irq();
				return 1;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e000      	b.n	80028ea <CB_Get+0x72>
			}
		}

	// TBD assert
	return 1;
 80028e8:	2301      	movs	r3, #1

}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <CB_Put>:


uint8_t CB_Put(CB_handle cb, uint8_t* item)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	6039      	str	r1, [r7, #0]
	
	if (cb != NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d03b      	beq.n	800297a <CB_Put+0x88>
	{	
		memcpy(&cb->buff[cb->head * cb->sizeOfElement],item, cb->sizeOfElement);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	8912      	ldrh	r2, [r2, #8]
 800290a:	4611      	mov	r1, r2
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	7912      	ldrb	r2, [r2, #4]
 8002910:	fb01 f202 	mul.w	r2, r1, r2
 8002914:	1898      	adds	r0, r3, r2
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	791b      	ldrb	r3, [r3, #4]
 800291a:	461a      	mov	r2, r3
 800291c:	6839      	ldr	r1, [r7, #0]
 800291e:	f008 f86d 	bl	800a9fc <memcpy>
		if(cb->full)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	7b1b      	ldrb	r3, [r3, #12]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00c      	beq.n	8002944 <CB_Put+0x52>
		{
			cb->tail = (cb->tail + 1) % cb->length;		
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	895b      	ldrh	r3, [r3, #10]
 800292e:	3301      	adds	r3, #1
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	88d2      	ldrh	r2, [r2, #6]
 8002934:	fb93 f1f2 	sdiv	r1, r3, r2
 8002938:	fb01 f202 	mul.w	r2, r1, r2
 800293c:	1a9b      	subs	r3, r3, r2
 800293e:	b29a      	uxth	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	815a      	strh	r2, [r3, #10]
		}
		cb->head = (cb->head + 1) % cb->length;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	891b      	ldrh	r3, [r3, #8]
 8002948:	3301      	adds	r3, #1
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	88d2      	ldrh	r2, [r2, #6]
 800294e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002952:	fb01 f202 	mul.w	r2, r1, r2
 8002956:	1a9b      	subs	r3, r3, r2
 8002958:	b29a      	uxth	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	811a      	strh	r2, [r3, #8]
		cb->full = (cb->head == cb->tail? 1 : 0);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	891a      	ldrh	r2, [r3, #8]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	895b      	ldrh	r3, [r3, #10]
 8002966:	429a      	cmp	r2, r3
 8002968:	bf0c      	ite	eq
 800296a:	2301      	moveq	r3, #1
 800296c:	2300      	movne	r3, #0
 800296e:	b2db      	uxtb	r3, r3
 8002970:	461a      	mov	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	731a      	strb	r2, [r3, #12]

		return 0;
 8002976:	2300      	movs	r3, #0
 8002978:	e000      	b.n	800297c <CB_Put+0x8a>
	}
	else
	{
		return 1;
 800297a:	2301      	movs	r3, #1
	}
}
 800297c:	4618      	mov	r0, r3
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <WDG_Init>:
#include "main.h"
#include "watchdog.h"


void WDG_Init(uint32_t period_ms)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
	__HAL_DBGMCU_FREEZE_IWDG();  // stop the watchdog in debug mode
 800298c:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <WDG_Init+0x44>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	4a0d      	ldr	r2, [pc, #52]	; (80029c8 <WDG_Init+0x44>)
 8002992:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002996:	6093      	str	r3, [r2, #8]
	if (period_ms > 32000)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800299e:	d902      	bls.n	80029a6 <WDG_Init+0x22>
	{
		period_ms = 32000;
 80029a0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80029a4:	607b      	str	r3, [r7, #4]
	}
	hiwdg.Instance = IWDG;
 80029a6:	4b09      	ldr	r3, [pc, #36]	; (80029cc <WDG_Init+0x48>)
 80029a8:	4a09      	ldr	r2, [pc, #36]	; (80029d0 <WDG_Init+0x4c>)
 80029aa:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80029ac:	4b07      	ldr	r3, [pc, #28]	; (80029cc <WDG_Init+0x48>)
 80029ae:	2206      	movs	r2, #6
 80029b0:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Reload = period_ms/8;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	08db      	lsrs	r3, r3, #3
 80029b6:	4a05      	ldr	r2, [pc, #20]	; (80029cc <WDG_Init+0x48>)
 80029b8:	6093      	str	r3, [r2, #8]
	HAL_IWDG_Init(&hiwdg);
 80029ba:	4804      	ldr	r0, [pc, #16]	; (80029cc <WDG_Init+0x48>)
 80029bc:	f004 fefe 	bl	80077bc <HAL_IWDG_Init>
}
 80029c0:	bf00      	nop
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	e0042000 	.word	0xe0042000
 80029cc:	20000e58 	.word	0x20000e58
 80029d0:	40003000 	.word	0x40003000

080029d4 <WDG_Refresh>:

void WDG_Refresh()
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);
 80029d8:	4802      	ldr	r0, [pc, #8]	; (80029e4 <WDG_Refresh+0x10>)
 80029da:	f004 ff31 	bl	8007840 <HAL_IWDG_Refresh>
}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	20000e58 	.word	0x20000e58

080029e8 <APP_Init>:

uint8_t mFanPct = 20;

// public methods
void APP_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b090      	sub	sp, #64	; 0x40
 80029ec:	af00      	add	r7, sp, #0
	sUIHwInit uihw;


	Scheduler_Init();
 80029ee:	f000 fcdb 	bl	80033a8 <Scheduler_Init>
	OW_Init();
 80029f2:	f7fe fa65 	bl	8000ec0 <OW_Init>
	TEMP_Init();
 80029f6:	f7ff f941 	bl	8001c7c <TEMP_Init>
	VAR_Init();
 80029fa:	f7ff fe21 	bl	8002640 <VAR_Init>
	MCAN_Init(&hcan1, THIS_NODE);
 80029fe:	2105      	movs	r1, #5
 8002a00:	4847      	ldr	r0, [pc, #284]	; (8002b20 <APP_Init+0x138>)
 8002a02:	f7fd ff97 	bl	8000934 <MCAN_Init>
	COM_Init(THIS_NODE);
 8002a06:	2005      	movs	r0, #5
 8002a08:	f7fd fe3c 	bl	8000684 <COM_Init>
	WDG_Init(3000);
 8002a0c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002a10:	f7ff ffb8 	bl	8002984 <WDG_Init>


  /*Assign pins for onboard UI  */
	uihw.Led_Life.Pin = LD2_Pin;
 8002a14:	2320      	movs	r3, #32
 8002a16:	60bb      	str	r3, [r7, #8]
	uihw.Led_Life.Port = LD2_GPIO_Port;
 8002a18:	4b42      	ldr	r3, [pc, #264]	; (8002b24 <APP_Init+0x13c>)
 8002a1a:	607b      	str	r3, [r7, #4]
	uihw.Led_Life.Logic = eUIL_POSITIVE;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	733b      	strb	r3, [r7, #12]

	uihw.Led_R.Pin = LED_R_Pin;
 8002a20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a24:	617b      	str	r3, [r7, #20]
	uihw.Led_R.Port = LED_R_GPIO_Port;
 8002a26:	4b40      	ldr	r3, [pc, #256]	; (8002b28 <APP_Init+0x140>)
 8002a28:	613b      	str	r3, [r7, #16]
	uihw.Led_R.Logic = eUIL_NEGATIVE;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	763b      	strb	r3, [r7, #24]

	uihw.Led_G.Pin = LED_G_Pin;
 8002a2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a32:	623b      	str	r3, [r7, #32]
	uihw.Led_G.Port = LED_G_GPIO_Port;
 8002a34:	4b3c      	ldr	r3, [pc, #240]	; (8002b28 <APP_Init+0x140>)
 8002a36:	61fb      	str	r3, [r7, #28]
	uihw.Led_G.Logic = eUIL_NEGATIVE;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	uihw.Led_B.Pin = LED_B_Pin;
 8002a3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a42:	62fb      	str	r3, [r7, #44]	; 0x2c
	uihw.Led_B.Port = LED_B_GPIO_Port;
 8002a44:	4b38      	ldr	r3, [pc, #224]	; (8002b28 <APP_Init+0x140>)
 8002a46:	62bb      	str	r3, [r7, #40]	; 0x28
	uihw.Led_B.Logic = eUIL_NEGATIVE;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	uihw.Buzzer.Pin = BUZZ_Pin;
 8002a4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a52:	63bb      	str	r3, [r7, #56]	; 0x38
	uihw.Buzzer.Port = BUZZ_GPIO_Port;
 8002a54:	4b34      	ldr	r3, [pc, #208]	; (8002b28 <APP_Init+0x140>)
 8002a56:	637b      	str	r3, [r7, #52]	; 0x34
	uihw.Buzzer.Logic = eUIL_POSITIVE;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

	UI_Init(&uihw);
 8002a5e:	1d3b      	adds	r3, r7, #4
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff facf 	bl	8002004 <UI_Init>
	UI_LED_Life_SetMode(eUI_BLINKING_SLOW);
 8002a66:	2002      	movs	r0, #2
 8002a68:	f7ff fb6c 	bl	8002144 <UI_LED_Life_SetMode>
	/*Gestures definition*/


	/* Temperature sensors configuration */
	// define hardware OW busses
	TEMP_AddHwBus(0,OW1_GPIO_Port, OW1_Pin);
 8002a6c:	2208      	movs	r2, #8
 8002a6e:	492f      	ldr	r1, [pc, #188]	; (8002b2c <APP_Init+0x144>)
 8002a70:	2000      	movs	r0, #0
 8002a72:	f7ff fa3d 	bl	8001ef0 <TEMP_AddHwBus>

	// assign sensors on OW1 :
	// default sensor assignment:
	TEMP_AssignSensor(T305, VAR_TEMP_RECU_WC, 0);
 8002a76:	2200      	movs	r2, #0
 8002a78:	2183      	movs	r1, #131	; 0x83
 8002a7a:	201e      	movs	r0, #30
 8002a7c:	f7ff fa58 	bl	8001f30 <TEMP_AssignSensor>
	TEMP_AssignSensor(T309, VAR_TEMP_RECU_WH, 0);
 8002a80:	2200      	movs	r2, #0
 8002a82:	2182      	movs	r1, #130	; 0x82
 8002a84:	2022      	movs	r0, #34	; 0x22
 8002a86:	f7ff fa53 	bl	8001f30 <TEMP_AssignSensor>
	TEMP_AssignSensor(T115, VAR_TEMP_RECU_FC, 0);
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2180      	movs	r1, #128	; 0x80
 8002a8e:	2018      	movs	r0, #24
 8002a90:	f7ff fa4e 	bl	8001f30 <TEMP_AssignSensor>
	TEMP_AssignSensor(T116, VAR_TEMP_RECU_FH, 0);
 8002a94:	2200      	movs	r2, #0
 8002a96:	2181      	movs	r1, #129	; 0x81
 8002a98:	2019      	movs	r0, #25
 8002a9a:	f7ff fa49 	bl	8001f30 <TEMP_AssignSensor>

	/* Configure CAN streamed variables */

	COM_AddStreamedVariable(VAR_TEMP_RECU_WC, 3000);
 8002a9e:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002aa2:	2083      	movs	r0, #131	; 0x83
 8002aa4:	f7fd fe7c 	bl	80007a0 <COM_AddStreamedVariable>
	COM_AddStreamedVariable(VAR_TEMP_RECU_WH, 3000);
 8002aa8:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002aac:	2082      	movs	r0, #130	; 0x82
 8002aae:	f7fd fe77 	bl	80007a0 <COM_AddStreamedVariable>
	COM_AddStreamedVariable(VAR_TEMP_RECU_FC, 3000);
 8002ab2:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002ab6:	2080      	movs	r0, #128	; 0x80
 8002ab8:	f7fd fe72 	bl	80007a0 <COM_AddStreamedVariable>
	COM_AddStreamedVariable(VAR_TEMP_RECU_FH, 3000);
 8002abc:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002ac0:	2081      	movs	r0, #129	; 0x81
 8002ac2:	f7fd fe6d 	bl	80007a0 <COM_AddStreamedVariable>

	/*configure I2c sensors*  */



	mSht.BusHandle = &hi2c1;
 8002ac6:	4b1a      	ldr	r3, [pc, #104]	; (8002b30 <APP_Init+0x148>)
 8002ac8:	4a1a      	ldr	r2, [pc, #104]	; (8002b34 <APP_Init+0x14c>)
 8002aca:	605a      	str	r2, [r3, #4]
	mSht.Id = 1;
 8002acc:	4b18      	ldr	r3, [pc, #96]	; (8002b30 <APP_Init+0x148>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	701a      	strb	r2, [r3, #0]
	mSht.Type = st_SHT4x;
 8002ad2:	4b17      	ldr	r3, [pc, #92]	; (8002b30 <APP_Init+0x148>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	705a      	strb	r2, [r3, #1]


	SENS_Init();
 8002ad8:	f7fe fede 	bl	8001898 <SENS_Init>

  mPWM.OCMode = TIM_OCMODE_PWM1;
 8002adc:	4b16      	ldr	r3, [pc, #88]	; (8002b38 <APP_Init+0x150>)
 8002ade:	2260      	movs	r2, #96	; 0x60
 8002ae0:	601a      	str	r2, [r3, #0]
  mPWM.Pulse = 200;
 8002ae2:	4b15      	ldr	r3, [pc, #84]	; (8002b38 <APP_Init+0x150>)
 8002ae4:	22c8      	movs	r2, #200	; 0xc8
 8002ae6:	605a      	str	r2, [r3, #4]
  mPWM.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ae8:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <APP_Init+0x150>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	609a      	str	r2, [r3, #8]
  mPWM.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002aee:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <APP_Init+0x150>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	60da      	str	r2, [r3, #12]
  mPWM.OCFastMode = TIM_OCFAST_DISABLE;
 8002af4:	4b10      	ldr	r3, [pc, #64]	; (8002b38 <APP_Init+0x150>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	611a      	str	r2, [r3, #16]
  mPWM.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002afa:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <APP_Init+0x150>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	615a      	str	r2, [r3, #20]
  mPWM.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b00:	4b0d      	ldr	r3, [pc, #52]	; (8002b38 <APP_Init+0x150>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	619a      	str	r2, [r3, #24]


	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002b06:	2100      	movs	r1, #0
 8002b08:	480c      	ldr	r0, [pc, #48]	; (8002b3c <APP_Init+0x154>)
 8002b0a:	f006 fb7b 	bl	8009204 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002b0e:	2104      	movs	r1, #4
 8002b10:	480a      	ldr	r0, [pc, #40]	; (8002b3c <APP_Init+0x154>)
 8002b12:	f006 fb77 	bl	8009204 <HAL_TIM_PWM_Start>

}
 8002b16:	bf00      	nop
 8002b18:	3740      	adds	r7, #64	; 0x40
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20000d88 	.word	0x20000d88
 8002b24:	40020000 	.word	0x40020000
 8002b28:	40020400 	.word	0x40020400
 8002b2c:	40020800 	.word	0x40020800
 8002b30:	20000d58 	.word	0x20000d58
 8002b34:	20000db0 	.word	0x20000db0
 8002b38:	20000d68 	.word	0x20000d68
 8002b3c:	20000e84 	.word	0x20000e84

08002b40 <APP_Start>:

void APP_Start(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b08a      	sub	sp, #40	; 0x28
 8002b44:	af00      	add	r7, sp, #0

	MCAN_Start();
 8002b46:	f7fd ffa3 	bl	8000a90 <MCAN_Start>
	while (1)   // endless loop
	{
		Scheduler_Check_Flag();
 8002b4a:	f000 fca7 	bl	800349c <Scheduler_Check_Flag>

		s_CanRxMsg rmsg;
		while(1 == COM_GetRxMessage(&rmsg))  // process all messages in buffer
 8002b4e:	e003      	b.n	8002b58 <APP_Start+0x18>
		{
				ProcessMessage(&rmsg);
 8002b50:	1d3b      	adds	r3, r7, #4
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 f876 	bl	8002c44 <ProcessMessage>
		while(1 == COM_GetRxMessage(&rmsg))  // process all messages in buffer
 8002b58:	1d3b      	adds	r3, r7, #4
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fd fda2 	bl	80006a4 <COM_GetRxMessage>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d0f4      	beq.n	8002b50 <APP_Start+0x10>
	{
 8002b66:	e7f0      	b.n	8002b4a <APP_Start+0xa>

08002b68 <APP_Update_1s>:


}

void APP_Update_1s(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0

	static uint8_t dayNumber = 0;
	uint8_t newDayNumber = 0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	73fb      	strb	r3, [r7, #15]
	sDateTime now = RTC_GetTime();
 8002b72:	1d3b      	adds	r3, r7, #4
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fe fde7 	bl	8001748 <RTC_GetTime>
	newDayNumber = now.Day;
 8002b7a:	79fb      	ldrb	r3, [r7, #7]
 8002b7c:	73fb      	strb	r3, [r7, #15]
	if (dayNumber != newDayNumber)
 8002b7e:	4b2b      	ldr	r3, [pc, #172]	; (8002c2c <APP_Update_1s+0xc4>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	7bfa      	ldrb	r2, [r7, #15]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d002      	beq.n	8002b8e <APP_Update_1s+0x26>
	{
		dayNumber = newDayNumber;
 8002b88:	4a28      	ldr	r2, [pc, #160]	; (8002c2c <APP_Update_1s+0xc4>)
 8002b8a:	7bfb      	ldrb	r3, [r7, #15]
 8002b8c:	7013      	strb	r3, [r2, #0]
		// TBD
	}


  if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 8002b8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b92:	4827      	ldr	r0, [pc, #156]	; (8002c30 <APP_Update_1s+0xc8>)
 8002b94:	f002 fa6c 	bl	8005070 <HAL_GPIO_ReadPin>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d13d      	bne.n	8002c1a <APP_Update_1s+0xb2>
  {
     UI_LED_Life_SetMode(eUI_BLINKING_SLOW);
 8002b9e:	2002      	movs	r0, #2
 8002ba0:	f7ff fad0 	bl	8002144 <UI_LED_Life_SetMode>

     mFanPct += 5;
 8002ba4:	4b23      	ldr	r3, [pc, #140]	; (8002c34 <APP_Update_1s+0xcc>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	3305      	adds	r3, #5
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	4b21      	ldr	r3, [pc, #132]	; (8002c34 <APP_Update_1s+0xcc>)
 8002bae:	701a      	strb	r2, [r3, #0]
     if(mFanPct >= 100)
 8002bb0:	4b20      	ldr	r3, [pc, #128]	; (8002c34 <APP_Update_1s+0xcc>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b63      	cmp	r3, #99	; 0x63
 8002bb6:	d902      	bls.n	8002bbe <APP_Update_1s+0x56>
     {
       mFanPct = 0;
 8002bb8:	4b1e      	ldr	r3, [pc, #120]	; (8002c34 <APP_Update_1s+0xcc>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	701a      	strb	r2, [r3, #0]
     }
     mPWM.Pulse = mFanPct * 10;
 8002bbe:	4b1d      	ldr	r3, [pc, #116]	; (8002c34 <APP_Update_1s+0xcc>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4b1a      	ldr	r3, [pc, #104]	; (8002c38 <APP_Update_1s+0xd0>)
 8002bd0:	605a      	str	r2, [r3, #4]

     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	4819      	ldr	r0, [pc, #100]	; (8002c3c <APP_Update_1s+0xd4>)
 8002bd6:	f006 fbdd 	bl	8009394 <HAL_TIM_PWM_Stop>

     if (HAL_TIM_PWM_ConfigChannel(&htim1, &mPWM, TIM_CHANNEL_1) != HAL_OK)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	4916      	ldr	r1, [pc, #88]	; (8002c38 <APP_Update_1s+0xd0>)
 8002bde:	4817      	ldr	r0, [pc, #92]	; (8002c3c <APP_Update_1s+0xd4>)
 8002be0:	f006 fd50 	bl	8009684 <HAL_TIM_PWM_ConfigChannel>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <APP_Update_1s+0x86>
      {
        Error_Handler();
 8002bea:	f000 fbd7 	bl	800339c <Error_Handler>
      }

     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002bee:	2100      	movs	r1, #0
 8002bf0:	4812      	ldr	r0, [pc, #72]	; (8002c3c <APP_Update_1s+0xd4>)
 8002bf2:	f006 fb07 	bl	8009204 <HAL_TIM_PWM_Start>

     HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8002bf6:	2104      	movs	r1, #4
 8002bf8:	4810      	ldr	r0, [pc, #64]	; (8002c3c <APP_Update_1s+0xd4>)
 8002bfa:	f006 fbcb 	bl	8009394 <HAL_TIM_PWM_Stop>

     if (HAL_TIM_PWM_ConfigChannel(&htim1, &mPWM, TIM_CHANNEL_2) != HAL_OK)
 8002bfe:	2204      	movs	r2, #4
 8002c00:	490d      	ldr	r1, [pc, #52]	; (8002c38 <APP_Update_1s+0xd0>)
 8002c02:	480e      	ldr	r0, [pc, #56]	; (8002c3c <APP_Update_1s+0xd4>)
 8002c04:	f006 fd3e 	bl	8009684 <HAL_TIM_PWM_ConfigChannel>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <APP_Update_1s+0xaa>
      {
        Error_Handler();
 8002c0e:	f000 fbc5 	bl	800339c <Error_Handler>
      }

     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002c12:	2104      	movs	r1, #4
 8002c14:	4809      	ldr	r0, [pc, #36]	; (8002c3c <APP_Update_1s+0xd4>)
 8002c16:	f006 faf5 	bl	8009204 <HAL_TIM_PWM_Start>
  }


  int16_t rh = SENS_ReadSensor(&mSht);
 8002c1a:	4809      	ldr	r0, [pc, #36]	; (8002c40 <APP_Update_1s+0xd8>)
 8002c1c:	f7fe fe6e 	bl	80018fc <SENS_ReadSensor>
 8002c20:	4603      	mov	r3, r0
 8002c22:	81bb      	strh	r3, [r7, #12]


}
 8002c24:	bf00      	nop
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20000d84 	.word	0x20000d84
 8002c30:	40020800 	.word	0x40020800
 8002c34:	20000140 	.word	0x20000140
 8002c38:	20000d68 	.word	0x20000d68
 8002c3c:	20000e84 	.word	0x20000e84
 8002c40:	20000d58 	.word	0x20000d58

08002c44 <ProcessMessage>:

static void ProcessMessage(s_CanRxMsg* msg)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
	uint16_t cmd = msg->header.StdId & 0xFF0;  // maskout nodeid
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8002c56:	82fb      	strh	r3, [r7, #22]
	//uint8_t producer = msg->header.StdId & 0x00F;  // maskout cmd
	int16_t par1,par2,par3; //,par4;
	uint32_t unixtime = 0;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	613b      	str	r3, [r7, #16]
	par1 = (msg->data[0] << 8) | msg->data[1];
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	7f1b      	ldrb	r3, [r3, #28]
 8002c60:	021b      	lsls	r3, r3, #8
 8002c62:	b21a      	sxth	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	7f5b      	ldrb	r3, [r3, #29]
 8002c68:	b21b      	sxth	r3, r3
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	81fb      	strh	r3, [r7, #14]
	par2 = (msg->data[2] << 8) | msg->data[3];
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	7f9b      	ldrb	r3, [r3, #30]
 8002c72:	021b      	lsls	r3, r3, #8
 8002c74:	b21a      	sxth	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	7fdb      	ldrb	r3, [r3, #31]
 8002c7a:	b21b      	sxth	r3, r3
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	81bb      	strh	r3, [r7, #12]
	par3 = (msg->data[4] << 8) | msg->data[5];
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c86:	021b      	lsls	r3, r3, #8
 8002c88:	b21a      	sxth	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c90:	b21b      	sxth	r3, r3
 8002c92:	4313      	orrs	r3, r2
 8002c94:	817b      	strh	r3, [r7, #10]
	// par4 = (msg->data[6] << 8) | msg->data[7];

	switch (cmd)
 8002c96:	8afb      	ldrh	r3, [r7, #22]
 8002c98:	f5b3 6fa2 	cmp.w	r3, #1296	; 0x510
 8002c9c:	d019      	beq.n	8002cd2 <ProcessMessage+0x8e>
 8002c9e:	f5b3 6fa2 	cmp.w	r3, #1296	; 0x510
 8002ca2:	dc39      	bgt.n	8002d18 <ProcessMessage+0xd4>
 8002ca4:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8002ca8:	d032      	beq.n	8002d10 <ProcessMessage+0xcc>
 8002caa:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8002cae:	dc33      	bgt.n	8002d18 <ProcessMessage+0xd4>
 8002cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cb4:	d02e      	beq.n	8002d14 <ProcessMessage+0xd0>
 8002cb6:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8002cba:	d000      	beq.n	8002cbe <ProcessMessage+0x7a>
			unixtime |= msg->data[2] << 8;
			unixtime |= msg->data[3];
			RTC_SetUnixTime(unixtime);
			break;
	}
	return;
 8002cbc:	e02c      	b.n	8002d18 <ProcessMessage+0xd4>
			VAR_SetVariable(par1, par2, par3);
 8002cbe:	89fb      	ldrh	r3, [r7, #14]
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	897a      	ldrh	r2, [r7, #10]
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff fd12 	bl	80026f4 <VAR_SetVariable>
			break;
 8002cd0:	e021      	b.n	8002d16 <ProcessMessage+0xd2>
			unixtime |= msg->data[0] << 24;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	7f1b      	ldrb	r3, [r3, #28]
 8002cd6:	061b      	lsls	r3, r3, #24
 8002cd8:	461a      	mov	r2, r3
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]
			unixtime |= msg->data[1] << 16;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	7f5b      	ldrb	r3, [r3, #29]
 8002ce4:	041b      	lsls	r3, r3, #16
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
			unixtime |= msg->data[2] << 8;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	7f9b      	ldrb	r3, [r3, #30]
 8002cf2:	021b      	lsls	r3, r3, #8
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
			unixtime |= msg->data[3];
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	7fdb      	ldrb	r3, [r3, #31]
 8002d00:	461a      	mov	r2, r3
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
			RTC_SetUnixTime(unixtime);
 8002d08:	6938      	ldr	r0, [r7, #16]
 8002d0a:	f7fe fd8d 	bl	8001828 <RTC_SetUnixTime>
			break;
 8002d0e:	e002      	b.n	8002d16 <ProcessMessage+0xd2>
			break;
 8002d10:	bf00      	nop
 8002d12:	e000      	b.n	8002d16 <ProcessMessage+0xd2>
			break;
 8002d14:	bf00      	nop
	return;
 8002d16:	bf00      	nop
 8002d18:	bf00      	nop
}
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d24:	f000 ffe0 	bl	8003ce8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d28:	f000 f81e 	bl	8002d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d2c:	f000 fa9e 	bl	800326c <MX_GPIO_Init>
  MX_TIM1_Init();
 8002d30:	f000 f990 	bl	8003054 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8002d34:	f000 fa70 	bl	8003218 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8002d38:	f000 f886 	bl	8002e48 <MX_CAN1_Init>
  MX_I2C1_Init();
 8002d3c:	f000 f8ba 	bl	8002eb4 <MX_I2C1_Init>
  MX_TIM6_Init();
 8002d40:	f000 fa34 	bl	80031ac <MX_TIM6_Init>
  MX_IWDG_Init();
 8002d44:	f000 f912 	bl	8002f6c <MX_IWDG_Init>
  MX_RTC_Init();
 8002d48:	f000 f92a 	bl	8002fa0 <MX_RTC_Init>
  MX_I2C2_Init();
 8002d4c:	f000 f8e0 	bl	8002f10 <MX_I2C2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

 // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);

  APP_Init();
 8002d50:	f7ff fe4a 	bl	80029e8 <APP_Init>

  APP_Start();
 8002d54:	f7ff fef4 	bl	8002b40 <APP_Start>

  while (1)
  {

     if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 8002d58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d5c:	4801      	ldr	r0, [pc, #4]	; (8002d64 <main+0x44>)
 8002d5e:	f002 f987 	bl	8005070 <HAL_GPIO_ReadPin>
 8002d62:	e7f9      	b.n	8002d58 <main+0x38>
 8002d64:	40020800 	.word	0x40020800

08002d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b094      	sub	sp, #80	; 0x50
 8002d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d6e:	f107 031c 	add.w	r3, r7, #28
 8002d72:	2234      	movs	r2, #52	; 0x34
 8002d74:	2100      	movs	r1, #0
 8002d76:	4618      	mov	r0, r3
 8002d78:	f007 fe4e 	bl	800aa18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d7c:	f107 0308 	add.w	r3, r7, #8
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	605a      	str	r2, [r3, #4]
 8002d86:	609a      	str	r2, [r3, #8]
 8002d88:	60da      	str	r2, [r3, #12]
 8002d8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	607b      	str	r3, [r7, #4]
 8002d90:	4b2b      	ldr	r3, [pc, #172]	; (8002e40 <SystemClock_Config+0xd8>)
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	4a2a      	ldr	r2, [pc, #168]	; (8002e40 <SystemClock_Config+0xd8>)
 8002d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d9a:	6413      	str	r3, [r2, #64]	; 0x40
 8002d9c:	4b28      	ldr	r3, [pc, #160]	; (8002e40 <SystemClock_Config+0xd8>)
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da4:	607b      	str	r3, [r7, #4]
 8002da6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002da8:	2300      	movs	r3, #0
 8002daa:	603b      	str	r3, [r7, #0]
 8002dac:	4b25      	ldr	r3, [pc, #148]	; (8002e44 <SystemClock_Config+0xdc>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002db4:	4a23      	ldr	r2, [pc, #140]	; (8002e44 <SystemClock_Config+0xdc>)
 8002db6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	4b21      	ldr	r3, [pc, #132]	; (8002e44 <SystemClock_Config+0xdc>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002dc4:	603b      	str	r3, [r7, #0]
 8002dc6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002dc8:	2309      	movs	r3, #9
 8002dca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002dcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dd0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002dda:	2302      	movs	r3, #2
 8002ddc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002dde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002de2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002de4:	2308      	movs	r3, #8
 8002de6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 200;
 8002de8:	23c8      	movs	r3, #200	; 0xc8
 8002dea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002dec:	2304      	movs	r3, #4
 8002dee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002df0:	2302      	movs	r3, #2
 8002df2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002df4:	2302      	movs	r3, #2
 8002df6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002df8:	f107 031c 	add.w	r3, r7, #28
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f005 fba3 	bl	8008548 <HAL_RCC_OscConfig>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002e08:	f000 fac8 	bl	800339c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e0c:	230f      	movs	r3, #15
 8002e0e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e10:	2302      	movs	r3, #2
 8002e12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e14:	2300      	movs	r3, #0
 8002e16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002e22:	f107 0308 	add.w	r3, r7, #8
 8002e26:	2101      	movs	r1, #1
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f004 fd19 	bl	8007860 <HAL_RCC_ClockConfig>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002e34:	f000 fab2 	bl	800339c <Error_Handler>
  }
}
 8002e38:	bf00      	nop
 8002e3a:	3750      	adds	r7, #80	; 0x50
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40023800 	.word	0x40023800
 8002e44:	40007000 	.word	0x40007000

08002e48 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002e4c:	4b17      	ldr	r3, [pc, #92]	; (8002eac <MX_CAN1_Init+0x64>)
 8002e4e:	4a18      	ldr	r2, [pc, #96]	; (8002eb0 <MX_CAN1_Init+0x68>)
 8002e50:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8002e52:	4b16      	ldr	r3, [pc, #88]	; (8002eac <MX_CAN1_Init+0x64>)
 8002e54:	2205      	movs	r2, #5
 8002e56:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002e58:	4b14      	ldr	r3, [pc, #80]	; (8002eac <MX_CAN1_Init+0x64>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002e5e:	4b13      	ldr	r3, [pc, #76]	; (8002eac <MX_CAN1_Init+0x64>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8002e64:	4b11      	ldr	r3, [pc, #68]	; (8002eac <MX_CAN1_Init+0x64>)
 8002e66:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002e6a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8002e6c:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <MX_CAN1_Init+0x64>)
 8002e6e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8002e72:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002e74:	4b0d      	ldr	r3, [pc, #52]	; (8002eac <MX_CAN1_Init+0x64>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8002e7a:	4b0c      	ldr	r3, [pc, #48]	; (8002eac <MX_CAN1_Init+0x64>)
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002e80:	4b0a      	ldr	r3, [pc, #40]	; (8002eac <MX_CAN1_Init+0x64>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8002e86:	4b09      	ldr	r3, [pc, #36]	; (8002eac <MX_CAN1_Init+0x64>)
 8002e88:	2201      	movs	r2, #1
 8002e8a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002e8c:	4b07      	ldr	r3, [pc, #28]	; (8002eac <MX_CAN1_Init+0x64>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8002e92:	4b06      	ldr	r3, [pc, #24]	; (8002eac <MX_CAN1_Init+0x64>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002e98:	4804      	ldr	r0, [pc, #16]	; (8002eac <MX_CAN1_Init+0x64>)
 8002e9a:	f000 ffbb 	bl	8003e14 <HAL_CAN_Init>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002ea4:	f000 fa7a 	bl	800339c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002ea8:	bf00      	nop
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	20000d88 	.word	0x20000d88
 8002eb0:	40006400 	.word	0x40006400

08002eb4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002eb8:	4b13      	ldr	r3, [pc, #76]	; (8002f08 <MX_I2C1_Init+0x54>)
 8002eba:	4a14      	ldr	r2, [pc, #80]	; (8002f0c <MX_I2C1_Init+0x58>)
 8002ebc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 8002ebe:	4b12      	ldr	r3, [pc, #72]	; (8002f08 <MX_I2C1_Init+0x54>)
 8002ec0:	f242 7210 	movw	r2, #10000	; 0x2710
 8002ec4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ec6:	4b10      	ldr	r3, [pc, #64]	; (8002f08 <MX_I2C1_Init+0x54>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002ecc:	4b0e      	ldr	r3, [pc, #56]	; (8002f08 <MX_I2C1_Init+0x54>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ed2:	4b0d      	ldr	r3, [pc, #52]	; (8002f08 <MX_I2C1_Init+0x54>)
 8002ed4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ed8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002eda:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <MX_I2C1_Init+0x54>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002ee0:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <MX_I2C1_Init+0x54>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ee6:	4b08      	ldr	r3, [pc, #32]	; (8002f08 <MX_I2C1_Init+0x54>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002eec:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <MX_I2C1_Init+0x54>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ef2:	4805      	ldr	r0, [pc, #20]	; (8002f08 <MX_I2C1_Init+0x54>)
 8002ef4:	f002 f908 	bl	8005108 <HAL_I2C_Init>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8002efe:	f000 fa4d 	bl	800339c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002f02:	bf00      	nop
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	20000db0 	.word	0x20000db0
 8002f0c:	40005400 	.word	0x40005400

08002f10 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002f14:	4b13      	ldr	r3, [pc, #76]	; (8002f64 <MX_I2C2_Init+0x54>)
 8002f16:	4a14      	ldr	r2, [pc, #80]	; (8002f68 <MX_I2C2_Init+0x58>)
 8002f18:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 10000;
 8002f1a:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <MX_I2C2_Init+0x54>)
 8002f1c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002f20:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f22:	4b10      	ldr	r3, [pc, #64]	; (8002f64 <MX_I2C2_Init+0x54>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002f28:	4b0e      	ldr	r3, [pc, #56]	; (8002f64 <MX_I2C2_Init+0x54>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f2e:	4b0d      	ldr	r3, [pc, #52]	; (8002f64 <MX_I2C2_Init+0x54>)
 8002f30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f34:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f36:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <MX_I2C2_Init+0x54>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002f3c:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <MX_I2C2_Init+0x54>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f42:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <MX_I2C2_Init+0x54>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f48:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <MX_I2C2_Init+0x54>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002f4e:	4805      	ldr	r0, [pc, #20]	; (8002f64 <MX_I2C2_Init+0x54>)
 8002f50:	f002 f8da 	bl	8005108 <HAL_I2C_Init>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 8002f5a:	f000 fa1f 	bl	800339c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002f5e:	bf00      	nop
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20000e04 	.word	0x20000e04
 8002f68:	40005800 	.word	0x40005800

08002f6c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002f70:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <MX_IWDG_Init+0x2c>)
 8002f72:	4a0a      	ldr	r2, [pc, #40]	; (8002f9c <MX_IWDG_Init+0x30>)
 8002f74:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8002f76:	4b08      	ldr	r3, [pc, #32]	; (8002f98 <MX_IWDG_Init+0x2c>)
 8002f78:	2206      	movs	r2, #6
 8002f7a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8002f7c:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <MX_IWDG_Init+0x2c>)
 8002f7e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002f82:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002f84:	4804      	ldr	r0, [pc, #16]	; (8002f98 <MX_IWDG_Init+0x2c>)
 8002f86:	f004 fc19 	bl	80077bc <HAL_IWDG_Init>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8002f90:	f000 fa04 	bl	800339c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002f94:	bf00      	nop
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	20000e58 	.word	0x20000e58
 8002f9c:	40003000 	.word	0x40003000

08002fa0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002fa6:	1d3b      	adds	r3, r7, #4
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	605a      	str	r2, [r3, #4]
 8002fae:	609a      	str	r2, [r3, #8]
 8002fb0:	60da      	str	r2, [r3, #12]
 8002fb2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002fb8:	4b24      	ldr	r3, [pc, #144]	; (800304c <MX_RTC_Init+0xac>)
 8002fba:	4a25      	ldr	r2, [pc, #148]	; (8003050 <MX_RTC_Init+0xb0>)
 8002fbc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002fbe:	4b23      	ldr	r3, [pc, #140]	; (800304c <MX_RTC_Init+0xac>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 124;
 8002fc4:	4b21      	ldr	r3, [pc, #132]	; (800304c <MX_RTC_Init+0xac>)
 8002fc6:	227c      	movs	r2, #124	; 0x7c
 8002fc8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 3999;
 8002fca:	4b20      	ldr	r3, [pc, #128]	; (800304c <MX_RTC_Init+0xac>)
 8002fcc:	f640 729f 	movw	r2, #3999	; 0xf9f
 8002fd0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002fd2:	4b1e      	ldr	r3, [pc, #120]	; (800304c <MX_RTC_Init+0xac>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002fd8:	4b1c      	ldr	r3, [pc, #112]	; (800304c <MX_RTC_Init+0xac>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002fde:	4b1b      	ldr	r3, [pc, #108]	; (800304c <MX_RTC_Init+0xac>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002fe4:	4819      	ldr	r0, [pc, #100]	; (800304c <MX_RTC_Init+0xac>)
 8002fe6:	f005 fd4d 	bl	8008a84 <HAL_RTC_Init>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8002ff0:	f000 f9d4 	bl	800339c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003000:	2300      	movs	r3, #0
 8003002:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003008:	1d3b      	adds	r3, r7, #4
 800300a:	2201      	movs	r2, #1
 800300c:	4619      	mov	r1, r3
 800300e:	480f      	ldr	r0, [pc, #60]	; (800304c <MX_RTC_Init+0xac>)
 8003010:	f005 fdae 	bl	8008b70 <HAL_RTC_SetTime>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 800301a:	f000 f9bf 	bl	800339c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800301e:	2301      	movs	r3, #1
 8003020:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003022:	2301      	movs	r3, #1
 8003024:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003026:	2301      	movs	r3, #1
 8003028:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800302a:	2300      	movs	r3, #0
 800302c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800302e:	463b      	mov	r3, r7
 8003030:	2201      	movs	r2, #1
 8003032:	4619      	mov	r1, r3
 8003034:	4805      	ldr	r0, [pc, #20]	; (800304c <MX_RTC_Init+0xac>)
 8003036:	f005 fe93 	bl	8008d60 <HAL_RTC_SetDate>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8003040:	f000 f9ac 	bl	800339c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003044:	bf00      	nop
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	20000e64 	.word	0x20000e64
 8003050:	40002800 	.word	0x40002800

08003054 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b096      	sub	sp, #88	; 0x58
 8003058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800305a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	605a      	str	r2, [r3, #4]
 8003064:	609a      	str	r2, [r3, #8]
 8003066:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003068:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	605a      	str	r2, [r3, #4]
 800307c:	609a      	str	r2, [r3, #8]
 800307e:	60da      	str	r2, [r3, #12]
 8003080:	611a      	str	r2, [r3, #16]
 8003082:	615a      	str	r2, [r3, #20]
 8003084:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003086:	1d3b      	adds	r3, r7, #4
 8003088:	2220      	movs	r2, #32
 800308a:	2100      	movs	r1, #0
 800308c:	4618      	mov	r0, r3
 800308e:	f007 fcc3 	bl	800aa18 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003092:	4b44      	ldr	r3, [pc, #272]	; (80031a4 <MX_TIM1_Init+0x150>)
 8003094:	4a44      	ldr	r2, [pc, #272]	; (80031a8 <MX_TIM1_Init+0x154>)
 8003096:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24;
 8003098:	4b42      	ldr	r3, [pc, #264]	; (80031a4 <MX_TIM1_Init+0x150>)
 800309a:	2218      	movs	r2, #24
 800309c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800309e:	4b41      	ldr	r3, [pc, #260]	; (80031a4 <MX_TIM1_Init+0x150>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80030a4:	4b3f      	ldr	r3, [pc, #252]	; (80031a4 <MX_TIM1_Init+0x150>)
 80030a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030ac:	4b3d      	ldr	r3, [pc, #244]	; (80031a4 <MX_TIM1_Init+0x150>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80030b2:	4b3c      	ldr	r3, [pc, #240]	; (80031a4 <MX_TIM1_Init+0x150>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030b8:	4b3a      	ldr	r3, [pc, #232]	; (80031a4 <MX_TIM1_Init+0x150>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80030be:	4839      	ldr	r0, [pc, #228]	; (80031a4 <MX_TIM1_Init+0x150>)
 80030c0:	f005 fff8 	bl	80090b4 <HAL_TIM_Base_Init>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80030ca:	f000 f967 	bl	800339c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030d2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80030d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80030d8:	4619      	mov	r1, r3
 80030da:	4832      	ldr	r0, [pc, #200]	; (80031a4 <MX_TIM1_Init+0x150>)
 80030dc:	f006 fb94 	bl	8009808 <HAL_TIM_ConfigClockSource>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80030e6:	f000 f959 	bl	800339c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80030ea:	482e      	ldr	r0, [pc, #184]	; (80031a4 <MX_TIM1_Init+0x150>)
 80030ec:	f006 f831 	bl	8009152 <HAL_TIM_PWM_Init>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80030f6:	f000 f951 	bl	800339c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030fa:	2300      	movs	r3, #0
 80030fc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030fe:	2300      	movs	r3, #0
 8003100:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003102:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003106:	4619      	mov	r1, r3
 8003108:	4826      	ldr	r0, [pc, #152]	; (80031a4 <MX_TIM1_Init+0x150>)
 800310a:	f006 ff87 	bl	800a01c <HAL_TIMEx_MasterConfigSynchronization>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003114:	f000 f942 	bl	800339c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003118:	2360      	movs	r3, #96	; 0x60
 800311a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 200;
 800311c:	23c8      	movs	r3, #200	; 0xc8
 800311e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003120:	2300      	movs	r3, #0
 8003122:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003124:	2300      	movs	r3, #0
 8003126:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003128:	2300      	movs	r3, #0
 800312a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800312c:	2300      	movs	r3, #0
 800312e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003130:	2300      	movs	r3, #0
 8003132:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003138:	2200      	movs	r2, #0
 800313a:	4619      	mov	r1, r3
 800313c:	4819      	ldr	r0, [pc, #100]	; (80031a4 <MX_TIM1_Init+0x150>)
 800313e:	f006 faa1 	bl	8009684 <HAL_TIM_PWM_ConfigChannel>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003148:	f000 f928 	bl	800339c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800314c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003150:	2204      	movs	r2, #4
 8003152:	4619      	mov	r1, r3
 8003154:	4813      	ldr	r0, [pc, #76]	; (80031a4 <MX_TIM1_Init+0x150>)
 8003156:	f006 fa95 	bl	8009684 <HAL_TIM_PWM_ConfigChannel>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003160:	f000 f91c 	bl	800339c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003164:	2300      	movs	r3, #0
 8003166:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003168:	2300      	movs	r3, #0
 800316a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800316c:	2300      	movs	r3, #0
 800316e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003170:	2300      	movs	r3, #0
 8003172:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003174:	2300      	movs	r3, #0
 8003176:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003178:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800317c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800317e:	2300      	movs	r3, #0
 8003180:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003182:	1d3b      	adds	r3, r7, #4
 8003184:	4619      	mov	r1, r3
 8003186:	4807      	ldr	r0, [pc, #28]	; (80031a4 <MX_TIM1_Init+0x150>)
 8003188:	f006 ffc4 	bl	800a114 <HAL_TIMEx_ConfigBreakDeadTime>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8003192:	f000 f903 	bl	800339c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003196:	4803      	ldr	r0, [pc, #12]	; (80031a4 <MX_TIM1_Init+0x150>)
 8003198:	f000 fbb8 	bl	800390c <HAL_TIM_MspPostInit>

}
 800319c:	bf00      	nop
 800319e:	3758      	adds	r7, #88	; 0x58
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	20000e84 	.word	0x20000e84
 80031a8:	40010000 	.word	0x40010000

080031ac <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031b2:	463b      	mov	r3, r7
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80031ba:	4b15      	ldr	r3, [pc, #84]	; (8003210 <MX_TIM6_Init+0x64>)
 80031bc:	4a15      	ldr	r2, [pc, #84]	; (8003214 <MX_TIM6_Init+0x68>)
 80031be:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 80031c0:	4b13      	ldr	r3, [pc, #76]	; (8003210 <MX_TIM6_Init+0x64>)
 80031c2:	2204      	movs	r2, #4
 80031c4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031c6:	4b12      	ldr	r3, [pc, #72]	; (8003210 <MX_TIM6_Init+0x64>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 80031cc:	4b10      	ldr	r3, [pc, #64]	; (8003210 <MX_TIM6_Init+0x64>)
 80031ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80031d2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031d4:	4b0e      	ldr	r3, [pc, #56]	; (8003210 <MX_TIM6_Init+0x64>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80031da:	480d      	ldr	r0, [pc, #52]	; (8003210 <MX_TIM6_Init+0x64>)
 80031dc:	f005 ff6a 	bl	80090b4 <HAL_TIM_Base_Init>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80031e6:	f000 f8d9 	bl	800339c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031ea:	2300      	movs	r3, #0
 80031ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031ee:	2300      	movs	r3, #0
 80031f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80031f2:	463b      	mov	r3, r7
 80031f4:	4619      	mov	r1, r3
 80031f6:	4806      	ldr	r0, [pc, #24]	; (8003210 <MX_TIM6_Init+0x64>)
 80031f8:	f006 ff10 	bl	800a01c <HAL_TIMEx_MasterConfigSynchronization>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003202:	f000 f8cb 	bl	800339c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003206:	bf00      	nop
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20000ecc 	.word	0x20000ecc
 8003214:	40001000 	.word	0x40001000

08003218 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800321c:	4b11      	ldr	r3, [pc, #68]	; (8003264 <MX_USART2_UART_Init+0x4c>)
 800321e:	4a12      	ldr	r2, [pc, #72]	; (8003268 <MX_USART2_UART_Init+0x50>)
 8003220:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003222:	4b10      	ldr	r3, [pc, #64]	; (8003264 <MX_USART2_UART_Init+0x4c>)
 8003224:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003228:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800322a:	4b0e      	ldr	r3, [pc, #56]	; (8003264 <MX_USART2_UART_Init+0x4c>)
 800322c:	2200      	movs	r2, #0
 800322e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003230:	4b0c      	ldr	r3, [pc, #48]	; (8003264 <MX_USART2_UART_Init+0x4c>)
 8003232:	2200      	movs	r2, #0
 8003234:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003236:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <MX_USART2_UART_Init+0x4c>)
 8003238:	2200      	movs	r2, #0
 800323a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800323c:	4b09      	ldr	r3, [pc, #36]	; (8003264 <MX_USART2_UART_Init+0x4c>)
 800323e:	220c      	movs	r2, #12
 8003240:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003242:	4b08      	ldr	r3, [pc, #32]	; (8003264 <MX_USART2_UART_Init+0x4c>)
 8003244:	2200      	movs	r2, #0
 8003246:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003248:	4b06      	ldr	r3, [pc, #24]	; (8003264 <MX_USART2_UART_Init+0x4c>)
 800324a:	2200      	movs	r2, #0
 800324c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800324e:	4805      	ldr	r0, [pc, #20]	; (8003264 <MX_USART2_UART_Init+0x4c>)
 8003250:	f006 ffc6 	bl	800a1e0 <HAL_UART_Init>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800325a:	f000 f89f 	bl	800339c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800325e:	bf00      	nop
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	20000f14 	.word	0x20000f14
 8003268:	40004400 	.word	0x40004400

0800326c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08a      	sub	sp, #40	; 0x28
 8003270:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003272:	f107 0314 	add.w	r3, r7, #20
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	605a      	str	r2, [r3, #4]
 800327c:	609a      	str	r2, [r3, #8]
 800327e:	60da      	str	r2, [r3, #12]
 8003280:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	613b      	str	r3, [r7, #16]
 8003286:	4b41      	ldr	r3, [pc, #260]	; (800338c <MX_GPIO_Init+0x120>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	4a40      	ldr	r2, [pc, #256]	; (800338c <MX_GPIO_Init+0x120>)
 800328c:	f043 0304 	orr.w	r3, r3, #4
 8003290:	6313      	str	r3, [r2, #48]	; 0x30
 8003292:	4b3e      	ldr	r3, [pc, #248]	; (800338c <MX_GPIO_Init+0x120>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	f003 0304 	and.w	r3, r3, #4
 800329a:	613b      	str	r3, [r7, #16]
 800329c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	4b3a      	ldr	r3, [pc, #232]	; (800338c <MX_GPIO_Init+0x120>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	4a39      	ldr	r2, [pc, #228]	; (800338c <MX_GPIO_Init+0x120>)
 80032a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032ac:	6313      	str	r3, [r2, #48]	; 0x30
 80032ae:	4b37      	ldr	r3, [pc, #220]	; (800338c <MX_GPIO_Init+0x120>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	4b33      	ldr	r3, [pc, #204]	; (800338c <MX_GPIO_Init+0x120>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	4a32      	ldr	r2, [pc, #200]	; (800338c <MX_GPIO_Init+0x120>)
 80032c4:	f043 0301 	orr.w	r3, r3, #1
 80032c8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ca:	4b30      	ldr	r3, [pc, #192]	; (800338c <MX_GPIO_Init+0x120>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	60bb      	str	r3, [r7, #8]
 80032d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032d6:	2300      	movs	r3, #0
 80032d8:	607b      	str	r3, [r7, #4]
 80032da:	4b2c      	ldr	r3, [pc, #176]	; (800338c <MX_GPIO_Init+0x120>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	4a2b      	ldr	r2, [pc, #172]	; (800338c <MX_GPIO_Init+0x120>)
 80032e0:	f043 0302 	orr.w	r3, r3, #2
 80032e4:	6313      	str	r3, [r2, #48]	; 0x30
 80032e6:	4b29      	ldr	r3, [pc, #164]	; (800338c <MX_GPIO_Init+0x120>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	607b      	str	r3, [r7, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OW1_GPIO_Port, OW1_Pin, GPIO_PIN_RESET);
 80032f2:	2200      	movs	r2, #0
 80032f4:	2108      	movs	r1, #8
 80032f6:	4826      	ldr	r0, [pc, #152]	; (8003390 <MX_GPIO_Init+0x124>)
 80032f8:	f001 fed2 	bl	80050a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80032fc:	2200      	movs	r2, #0
 80032fe:	2120      	movs	r1, #32
 8003300:	4824      	ldr	r0, [pc, #144]	; (8003394 <MX_GPIO_Init+0x128>)
 8003302:	f001 fecd 	bl	80050a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_B_Pin|LED_G_Pin|LED_R_Pin|BUZZ_Pin, GPIO_PIN_RESET);
 8003306:	2200      	movs	r2, #0
 8003308:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800330c:	4822      	ldr	r0, [pc, #136]	; (8003398 <MX_GPIO_Init+0x12c>)
 800330e:	f001 fec7 	bl	80050a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003312:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003318:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800331c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331e:	2300      	movs	r3, #0
 8003320:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003322:	f107 0314 	add.w	r3, r7, #20
 8003326:	4619      	mov	r1, r3
 8003328:	4819      	ldr	r0, [pc, #100]	; (8003390 <MX_GPIO_Init+0x124>)
 800332a:	f001 fd0d 	bl	8004d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : OW1_Pin */
  GPIO_InitStruct.Pin = OW1_Pin;
 800332e:	2308      	movs	r3, #8
 8003330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003332:	2311      	movs	r3, #17
 8003334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003336:	2300      	movs	r3, #0
 8003338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800333a:	2300      	movs	r3, #0
 800333c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OW1_GPIO_Port, &GPIO_InitStruct);
 800333e:	f107 0314 	add.w	r3, r7, #20
 8003342:	4619      	mov	r1, r3
 8003344:	4812      	ldr	r0, [pc, #72]	; (8003390 <MX_GPIO_Init+0x124>)
 8003346:	f001 fcff 	bl	8004d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800334a:	2320      	movs	r3, #32
 800334c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800334e:	2301      	movs	r3, #1
 8003350:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003352:	2300      	movs	r3, #0
 8003354:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003356:	2300      	movs	r3, #0
 8003358:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800335a:	f107 0314 	add.w	r3, r7, #20
 800335e:	4619      	mov	r1, r3
 8003360:	480c      	ldr	r0, [pc, #48]	; (8003394 <MX_GPIO_Init+0x128>)
 8003362:	f001 fcf1 	bl	8004d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_B_Pin LED_G_Pin LED_R_Pin BUZZ_Pin */
  GPIO_InitStruct.Pin = LED_B_Pin|LED_G_Pin|LED_R_Pin|BUZZ_Pin;
 8003366:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800336a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800336c:	2301      	movs	r3, #1
 800336e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003370:	2300      	movs	r3, #0
 8003372:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003374:	2300      	movs	r3, #0
 8003376:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003378:	f107 0314 	add.w	r3, r7, #20
 800337c:	4619      	mov	r1, r3
 800337e:	4806      	ldr	r0, [pc, #24]	; (8003398 <MX_GPIO_Init+0x12c>)
 8003380:	f001 fce2 	bl	8004d48 <HAL_GPIO_Init>

}
 8003384:	bf00      	nop
 8003386:	3728      	adds	r7, #40	; 0x28
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40023800 	.word	0x40023800
 8003390:	40020800 	.word	0x40020800
 8003394:	40020000 	.word	0x40020000
 8003398:	40020400 	.word	0x40020400

0800339c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80033a0:	b672      	cpsid	i
}
 80033a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033a4:	e7fe      	b.n	80033a4 <Error_Handler+0x8>
	...

080033a8 <Scheduler_Init>:
**********************************************************************	
	* @brief	Initialisation timimg struct
***********************************************************************
*/
void Scheduler_Init (void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
		Timer_1ms.timer_limit = 1;
 80033ac:	4b0f      	ldr	r3, [pc, #60]	; (80033ec <Scheduler_Init+0x44>)
 80033ae:	2201      	movs	r2, #1
 80033b0:	809a      	strh	r2, [r3, #4]
		Timer_5ms.timer_limit = 5;
 80033b2:	4b0f      	ldr	r3, [pc, #60]	; (80033f0 <Scheduler_Init+0x48>)
 80033b4:	2205      	movs	r2, #5
 80033b6:	809a      	strh	r2, [r3, #4]
		Timer_10ms.timer_limit = 10;
 80033b8:	4b0e      	ldr	r3, [pc, #56]	; (80033f4 <Scheduler_Init+0x4c>)
 80033ba:	220a      	movs	r2, #10
 80033bc:	809a      	strh	r2, [r3, #4]
		Timer_50ms.timer_limit = 50;
 80033be:	4b0e      	ldr	r3, [pc, #56]	; (80033f8 <Scheduler_Init+0x50>)
 80033c0:	2232      	movs	r2, #50	; 0x32
 80033c2:	809a      	strh	r2, [r3, #4]
		Timer_100ms.timer_limit = 100;
 80033c4:	4b0d      	ldr	r3, [pc, #52]	; (80033fc <Scheduler_Init+0x54>)
 80033c6:	2264      	movs	r2, #100	; 0x64
 80033c8:	809a      	strh	r2, [r3, #4]
		Timer_250ms.timer_limit = 250;
 80033ca:	4b0d      	ldr	r3, [pc, #52]	; (8003400 <Scheduler_Init+0x58>)
 80033cc:	22fa      	movs	r2, #250	; 0xfa
 80033ce:	809a      	strh	r2, [r3, #4]
		Timer_500ms.timer_limit = 500;
 80033d0:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <Scheduler_Init+0x5c>)
 80033d2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80033d6:	809a      	strh	r2, [r3, #4]
		Timer_1s.timer_limit = 1000;
 80033d8:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <Scheduler_Init+0x60>)
 80033da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033de:	809a      	strh	r2, [r3, #4]
}
 80033e0:	bf00      	nop
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	20000f58 	.word	0x20000f58
 80033f0:	20000f60 	.word	0x20000f60
 80033f4:	20000f68 	.word	0x20000f68
 80033f8:	20000f70 	.word	0x20000f70
 80033fc:	20000f78 	.word	0x20000f78
 8003400:	20000f80 	.word	0x20000f80
 8003404:	20000f88 	.word	0x20000f88
 8003408:	20000f90 	.word	0x20000f90

0800340c <Scheduler_Update_1ms>:
**********************************************************************	
	* @brief	Timer control. Calling of all defined timers
***********************************************************************
*/
void Scheduler_Update_1ms (void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
	Timer_Increment(&Timer_1ms);
 8003410:	480c      	ldr	r0, [pc, #48]	; (8003444 <Scheduler_Update_1ms+0x38>)
 8003412:	f000 f827 	bl	8003464 <Timer_Increment>
	Timer_Increment(&Timer_5ms);
 8003416:	480c      	ldr	r0, [pc, #48]	; (8003448 <Scheduler_Update_1ms+0x3c>)
 8003418:	f000 f824 	bl	8003464 <Timer_Increment>
	Timer_Increment(&Timer_10ms);
 800341c:	480b      	ldr	r0, [pc, #44]	; (800344c <Scheduler_Update_1ms+0x40>)
 800341e:	f000 f821 	bl	8003464 <Timer_Increment>
	Timer_Increment(&Timer_50ms);
 8003422:	480b      	ldr	r0, [pc, #44]	; (8003450 <Scheduler_Update_1ms+0x44>)
 8003424:	f000 f81e 	bl	8003464 <Timer_Increment>
	Timer_Increment(&Timer_100ms);
 8003428:	480a      	ldr	r0, [pc, #40]	; (8003454 <Scheduler_Update_1ms+0x48>)
 800342a:	f000 f81b 	bl	8003464 <Timer_Increment>
	Timer_Increment(&Timer_250ms);
 800342e:	480a      	ldr	r0, [pc, #40]	; (8003458 <Scheduler_Update_1ms+0x4c>)
 8003430:	f000 f818 	bl	8003464 <Timer_Increment>
	Timer_Increment(&Timer_500ms);
 8003434:	4809      	ldr	r0, [pc, #36]	; (800345c <Scheduler_Update_1ms+0x50>)
 8003436:	f000 f815 	bl	8003464 <Timer_Increment>
	Timer_Increment(&Timer_1s);
 800343a:	4809      	ldr	r0, [pc, #36]	; (8003460 <Scheduler_Update_1ms+0x54>)
 800343c:	f000 f812 	bl	8003464 <Timer_Increment>
	
}
 8003440:	bf00      	nop
 8003442:	bd80      	pop	{r7, pc}
 8003444:	20000f58 	.word	0x20000f58
 8003448:	20000f60 	.word	0x20000f60
 800344c:	20000f68 	.word	0x20000f68
 8003450:	20000f70 	.word	0x20000f70
 8003454:	20000f78 	.word	0x20000f78
 8003458:	20000f80 	.word	0x20000f80
 800345c:	20000f88 	.word	0x20000f88
 8003460:	20000f90 	.word	0x20000f90

08003464 <Timer_Increment>:
	* @brief	Incrementing of all counters and setting flags , where is condition met!
	* @param	timer: Pointer to specific timer	
***********************************************************************
*/
inline static void Timer_Increment (sTimer *timer)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
	timer->timer_cnt++;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	885b      	ldrh	r3, [r3, #2]
 8003470:	3301      	adds	r3, #1
 8003472:	b29a      	uxth	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	805a      	strh	r2, [r3, #2]
	if(timer->timer_cnt >= timer->timer_limit)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	885a      	ldrh	r2, [r3, #2]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	889b      	ldrh	r3, [r3, #4]
 8003480:	429a      	cmp	r2, r3
 8003482:	d305      	bcc.n	8003490 <Timer_Increment+0x2c>
	{
		timer->flag = eFLAG_REACHED;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	701a      	strb	r2, [r3, #0]
		timer->timer_cnt = 0;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	805a      	strh	r2, [r3, #2]
	}
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <Scheduler_Check_Flag>:
	* @brief Checking flags in structures and call specific tasks	
***********************************************************************
*/

void Scheduler_Check_Flag(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
	if(Timer_1ms.flag)
 80034a0:	4b24      	ldr	r3, [pc, #144]	; (8003534 <Scheduler_Check_Flag+0x98>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d004      	beq.n	80034b2 <Scheduler_Check_Flag+0x16>
	{
		Timer_Task_1ms();
 80034a8:	f000 f854 	bl	8003554 <Timer_Task_1ms>
		Timer_1ms.flag = eFLAG_NOT_YET;
 80034ac:	4b21      	ldr	r3, [pc, #132]	; (8003534 <Scheduler_Check_Flag+0x98>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	701a      	strb	r2, [r3, #0]
	}
	
	if(Timer_5ms.flag)
 80034b2:	4b21      	ldr	r3, [pc, #132]	; (8003538 <Scheduler_Check_Flag+0x9c>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d004      	beq.n	80034c4 <Scheduler_Check_Flag+0x28>
	{
		Timer_Task_5ms();
 80034ba:	f000 f852 	bl	8003562 <Timer_Task_5ms>
		Timer_5ms.flag = eFLAG_NOT_YET;
 80034be:	4b1e      	ldr	r3, [pc, #120]	; (8003538 <Scheduler_Check_Flag+0x9c>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	701a      	strb	r2, [r3, #0]
	}
	
	if(Timer_10ms.flag)
 80034c4:	4b1d      	ldr	r3, [pc, #116]	; (800353c <Scheduler_Check_Flag+0xa0>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d004      	beq.n	80034d6 <Scheduler_Check_Flag+0x3a>
	{
		Timer_Task_10ms();
 80034cc:	f000 f84f 	bl	800356e <Timer_Task_10ms>
		Timer_10ms.flag = eFLAG_NOT_YET;
 80034d0:	4b1a      	ldr	r3, [pc, #104]	; (800353c <Scheduler_Check_Flag+0xa0>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	701a      	strb	r2, [r3, #0]
	}
	
	if(Timer_50ms.flag)
 80034d6:	4b1a      	ldr	r3, [pc, #104]	; (8003540 <Scheduler_Check_Flag+0xa4>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d004      	beq.n	80034e8 <Scheduler_Check_Flag+0x4c>
	{
		Timer_Task_50ms();
 80034de:	f000 f850 	bl	8003582 <Timer_Task_50ms>
		Timer_50ms.flag = eFLAG_NOT_YET;
 80034e2:	4b17      	ldr	r3, [pc, #92]	; (8003540 <Scheduler_Check_Flag+0xa4>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	701a      	strb	r2, [r3, #0]
	}
	
	if(Timer_100ms.flag)
 80034e8:	4b16      	ldr	r3, [pc, #88]	; (8003544 <Scheduler_Check_Flag+0xa8>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d004      	beq.n	80034fa <Scheduler_Check_Flag+0x5e>
	{
		Timer_Task_100ms();
 80034f0:	f000 f84e 	bl	8003590 <Timer_Task_100ms>
		Timer_100ms.flag = eFLAG_NOT_YET;
 80034f4:	4b13      	ldr	r3, [pc, #76]	; (8003544 <Scheduler_Check_Flag+0xa8>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	701a      	strb	r2, [r3, #0]
	}
	
	if(Timer_250ms.flag)
 80034fa:	4b13      	ldr	r3, [pc, #76]	; (8003548 <Scheduler_Check_Flag+0xac>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d004      	beq.n	800350c <Scheduler_Check_Flag+0x70>
	{
		Timer_Task_250ms();
 8003502:	f000 f84b 	bl	800359c <Timer_Task_250ms>
		Timer_250ms.flag = eFLAG_NOT_YET;
 8003506:	4b10      	ldr	r3, [pc, #64]	; (8003548 <Scheduler_Check_Flag+0xac>)
 8003508:	2200      	movs	r2, #0
 800350a:	701a      	strb	r2, [r3, #0]
	}
	
	if(Timer_500ms.flag)
 800350c:	4b0f      	ldr	r3, [pc, #60]	; (800354c <Scheduler_Check_Flag+0xb0>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d004      	beq.n	800351e <Scheduler_Check_Flag+0x82>
	{
		Timer_Task_500ms();
 8003514:	f000 f849 	bl	80035aa <Timer_Task_500ms>
		Timer_500ms.flag = eFLAG_NOT_YET;
 8003518:	4b0c      	ldr	r3, [pc, #48]	; (800354c <Scheduler_Check_Flag+0xb0>)
 800351a:	2200      	movs	r2, #0
 800351c:	701a      	strb	r2, [r3, #0]
	}
	
	if(Timer_1s.flag)
 800351e:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <Scheduler_Check_Flag+0xb4>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d004      	beq.n	8003530 <Scheduler_Check_Flag+0x94>
	{
		Timer_Task_1s();
 8003526:	f000 f847 	bl	80035b8 <Timer_Task_1s>
		Timer_1s.flag = eFLAG_NOT_YET;
 800352a:	4b09      	ldr	r3, [pc, #36]	; (8003550 <Scheduler_Check_Flag+0xb4>)
 800352c:	2200      	movs	r2, #0
 800352e:	701a      	strb	r2, [r3, #0]
	}	
}
 8003530:	bf00      	nop
 8003532:	bd80      	pop	{r7, pc}
 8003534:	20000f58 	.word	0x20000f58
 8003538:	20000f60 	.word	0x20000f60
 800353c:	20000f68 	.word	0x20000f68
 8003540:	20000f70 	.word	0x20000f70
 8003544:	20000f78 	.word	0x20000f78
 8003548:	20000f80 	.word	0x20000f80
 800354c:	20000f88 	.word	0x20000f88
 8003550:	20000f90 	.word	0x20000f90

08003554 <Timer_Task_1ms>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_1ms(void)
{	
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
	//DI_Read_All();
}
 8003558:	bf00      	nop
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <Timer_Task_5ms>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_5ms(void)
{	
 8003562:	b580      	push	{r7, lr}
 8003564:	af00      	add	r7, sp, #0
	MCAN_Transmit();
 8003566:	f7fd fb39 	bl	8000bdc <MCAN_Transmit>
}
 800356a:	bf00      	nop
 800356c:	bd80      	pop	{r7, pc}

0800356e <Timer_Task_10ms>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_10ms(void)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	af00      	add	r7, sp, #0
	COM_Update_10ms();
 8003572:	f7fd f8a3 	bl	80006bc <COM_Update_10ms>
	UI_Update_10ms();
 8003576:	f7fe fdc3 	bl	8002100 <UI_Update_10ms>
	MCAN_Update_10ms();
 800357a:	f7fd faa3 	bl	8000ac4 <MCAN_Update_10ms>
}
 800357e:	bf00      	nop
 8003580:	bd80      	pop	{r7, pc}

08003582 <Timer_Task_50ms>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_50ms(void)
{
 8003582:	b480      	push	{r7}
 8003584:	af00      	add	r7, sp, #0
}
 8003586:	bf00      	nop
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <Timer_Task_100ms>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_100ms(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0

	TEMP_Update100ms();
 8003594:	f7fe fb92 	bl	8001cbc <TEMP_Update100ms>
}
 8003598:	bf00      	nop
 800359a:	bd80      	pop	{r7, pc}

0800359c <Timer_Task_250ms>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_250ms(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
}
 80035a0:	bf00      	nop
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <Timer_Task_500ms>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_500ms(void)
{
 80035aa:	b480      	push	{r7}
 80035ac:	af00      	add	r7, sp, #0

}
 80035ae:	bf00      	nop
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <Timer_Task_1s>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_1s(void)
{	
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
	APP_Update_1s();
 80035bc:	f7ff fad4 	bl	8002b68 <APP_Update_1s>
	WDG_Refresh();
 80035c0:	f7ff fa08 	bl	80029d4 <WDG_Refresh>
	SENS_Update_1s();
 80035c4:	f7fe f9b6 	bl	8001934 <SENS_Update_1s>
			OW_ConvertAll();
	  }*/
	//OW_ReadRom(0);
	//OW_Read(0);
	//OW_ConvertAll();
}
 80035c8:	bf00      	nop
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035d2:	2300      	movs	r3, #0
 80035d4:	607b      	str	r3, [r7, #4]
 80035d6:	4b10      	ldr	r3, [pc, #64]	; (8003618 <HAL_MspInit+0x4c>)
 80035d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035da:	4a0f      	ldr	r2, [pc, #60]	; (8003618 <HAL_MspInit+0x4c>)
 80035dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035e0:	6453      	str	r3, [r2, #68]	; 0x44
 80035e2:	4b0d      	ldr	r3, [pc, #52]	; (8003618 <HAL_MspInit+0x4c>)
 80035e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ea:	607b      	str	r3, [r7, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035ee:	2300      	movs	r3, #0
 80035f0:	603b      	str	r3, [r7, #0]
 80035f2:	4b09      	ldr	r3, [pc, #36]	; (8003618 <HAL_MspInit+0x4c>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	4a08      	ldr	r2, [pc, #32]	; (8003618 <HAL_MspInit+0x4c>)
 80035f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035fc:	6413      	str	r3, [r2, #64]	; 0x40
 80035fe:	4b06      	ldr	r3, [pc, #24]	; (8003618 <HAL_MspInit+0x4c>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003606:	603b      	str	r3, [r7, #0]
 8003608:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800360a:	2007      	movs	r0, #7
 800360c:	f001 fb2a 	bl	8004c64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003610:	bf00      	nop
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40023800 	.word	0x40023800

0800361c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08a      	sub	sp, #40	; 0x28
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003624:	f107 0314 	add.w	r3, r7, #20
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	60da      	str	r2, [r3, #12]
 8003632:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a25      	ldr	r2, [pc, #148]	; (80036d0 <HAL_CAN_MspInit+0xb4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d144      	bne.n	80036c8 <HAL_CAN_MspInit+0xac>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800363e:	2300      	movs	r3, #0
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	4b24      	ldr	r3, [pc, #144]	; (80036d4 <HAL_CAN_MspInit+0xb8>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	4a23      	ldr	r2, [pc, #140]	; (80036d4 <HAL_CAN_MspInit+0xb8>)
 8003648:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800364c:	6413      	str	r3, [r2, #64]	; 0x40
 800364e:	4b21      	ldr	r3, [pc, #132]	; (80036d4 <HAL_CAN_MspInit+0xb8>)
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003656:	613b      	str	r3, [r7, #16]
 8003658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800365a:	2300      	movs	r3, #0
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	4b1d      	ldr	r3, [pc, #116]	; (80036d4 <HAL_CAN_MspInit+0xb8>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	4a1c      	ldr	r2, [pc, #112]	; (80036d4 <HAL_CAN_MspInit+0xb8>)
 8003664:	f043 0301 	orr.w	r3, r3, #1
 8003668:	6313      	str	r3, [r2, #48]	; 0x30
 800366a:	4b1a      	ldr	r3, [pc, #104]	; (80036d4 <HAL_CAN_MspInit+0xb8>)
 800366c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003676:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800367a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367c:	2302      	movs	r3, #2
 800367e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003680:	2300      	movs	r3, #0
 8003682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003684:	2303      	movs	r3, #3
 8003686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003688:	2309      	movs	r3, #9
 800368a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800368c:	f107 0314 	add.w	r3, r7, #20
 8003690:	4619      	mov	r1, r3
 8003692:	4811      	ldr	r0, [pc, #68]	; (80036d8 <HAL_CAN_MspInit+0xbc>)
 8003694:	f001 fb58 	bl	8004d48 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8003698:	2200      	movs	r2, #0
 800369a:	2100      	movs	r1, #0
 800369c:	2013      	movs	r0, #19
 800369e:	f001 faec 	bl	8004c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80036a2:	2013      	movs	r0, #19
 80036a4:	f001 fb05 	bl	8004cb2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80036a8:	2200      	movs	r2, #0
 80036aa:	2100      	movs	r1, #0
 80036ac:	2014      	movs	r0, #20
 80036ae:	f001 fae4 	bl	8004c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80036b2:	2014      	movs	r0, #20
 80036b4:	f001 fafd 	bl	8004cb2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80036b8:	2200      	movs	r2, #0
 80036ba:	2100      	movs	r1, #0
 80036bc:	2015      	movs	r0, #21
 80036be:	f001 fadc 	bl	8004c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80036c2:	2015      	movs	r0, #21
 80036c4:	f001 faf5 	bl	8004cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80036c8:	bf00      	nop
 80036ca:	3728      	adds	r7, #40	; 0x28
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40006400 	.word	0x40006400
 80036d4:	40023800 	.word	0x40023800
 80036d8:	40020000 	.word	0x40020000

080036dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08c      	sub	sp, #48	; 0x30
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e4:	f107 031c 	add.w	r3, r7, #28
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	605a      	str	r2, [r3, #4]
 80036ee:	609a      	str	r2, [r3, #8]
 80036f0:	60da      	str	r2, [r3, #12]
 80036f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a4a      	ldr	r2, [pc, #296]	; (8003824 <HAL_I2C_MspInit+0x148>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d135      	bne.n	800376a <HAL_I2C_MspInit+0x8e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036fe:	2300      	movs	r3, #0
 8003700:	61bb      	str	r3, [r7, #24]
 8003702:	4b49      	ldr	r3, [pc, #292]	; (8003828 <HAL_I2C_MspInit+0x14c>)
 8003704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003706:	4a48      	ldr	r2, [pc, #288]	; (8003828 <HAL_I2C_MspInit+0x14c>)
 8003708:	f043 0302 	orr.w	r3, r3, #2
 800370c:	6313      	str	r3, [r2, #48]	; 0x30
 800370e:	4b46      	ldr	r3, [pc, #280]	; (8003828 <HAL_I2C_MspInit+0x14c>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	61bb      	str	r3, [r7, #24]
 8003718:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800371a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800371e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003720:	2312      	movs	r3, #18
 8003722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003724:	2300      	movs	r3, #0
 8003726:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003728:	2303      	movs	r3, #3
 800372a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800372c:	2304      	movs	r3, #4
 800372e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003730:	f107 031c 	add.w	r3, r7, #28
 8003734:	4619      	mov	r1, r3
 8003736:	483d      	ldr	r0, [pc, #244]	; (800382c <HAL_I2C_MspInit+0x150>)
 8003738:	f001 fb06 	bl	8004d48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800373c:	2300      	movs	r3, #0
 800373e:	617b      	str	r3, [r7, #20]
 8003740:	4b39      	ldr	r3, [pc, #228]	; (8003828 <HAL_I2C_MspInit+0x14c>)
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	4a38      	ldr	r2, [pc, #224]	; (8003828 <HAL_I2C_MspInit+0x14c>)
 8003746:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800374a:	6413      	str	r3, [r2, #64]	; 0x40
 800374c:	4b36      	ldr	r3, [pc, #216]	; (8003828 <HAL_I2C_MspInit+0x14c>)
 800374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003754:	617b      	str	r3, [r7, #20]
 8003756:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003758:	2200      	movs	r2, #0
 800375a:	2100      	movs	r1, #0
 800375c:	201f      	movs	r0, #31
 800375e:	f001 fa8c 	bl	8004c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003762:	201f      	movs	r0, #31
 8003764:	f001 faa5 	bl	8004cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003768:	e058      	b.n	800381c <HAL_I2C_MspInit+0x140>
  else if(hi2c->Instance==I2C2)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a30      	ldr	r2, [pc, #192]	; (8003830 <HAL_I2C_MspInit+0x154>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d153      	bne.n	800381c <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003774:	2300      	movs	r3, #0
 8003776:	613b      	str	r3, [r7, #16]
 8003778:	4b2b      	ldr	r3, [pc, #172]	; (8003828 <HAL_I2C_MspInit+0x14c>)
 800377a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377c:	4a2a      	ldr	r2, [pc, #168]	; (8003828 <HAL_I2C_MspInit+0x14c>)
 800377e:	f043 0302 	orr.w	r3, r3, #2
 8003782:	6313      	str	r3, [r2, #48]	; 0x30
 8003784:	4b28      	ldr	r3, [pc, #160]	; (8003828 <HAL_I2C_MspInit+0x14c>)
 8003786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	613b      	str	r3, [r7, #16]
 800378e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003790:	2300      	movs	r3, #0
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	4b24      	ldr	r3, [pc, #144]	; (8003828 <HAL_I2C_MspInit+0x14c>)
 8003796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003798:	4a23      	ldr	r2, [pc, #140]	; (8003828 <HAL_I2C_MspInit+0x14c>)
 800379a:	f043 0304 	orr.w	r3, r3, #4
 800379e:	6313      	str	r3, [r2, #48]	; 0x30
 80037a0:	4b21      	ldr	r3, [pc, #132]	; (8003828 <HAL_I2C_MspInit+0x14c>)
 80037a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80037ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037b2:	2312      	movs	r3, #18
 80037b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ba:	2303      	movs	r3, #3
 80037bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80037be:	2304      	movs	r3, #4
 80037c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037c2:	f107 031c 	add.w	r3, r7, #28
 80037c6:	4619      	mov	r1, r3
 80037c8:	4818      	ldr	r0, [pc, #96]	; (800382c <HAL_I2C_MspInit+0x150>)
 80037ca:	f001 fabd 	bl	8004d48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80037ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037d4:	2312      	movs	r3, #18
 80037d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d8:	2300      	movs	r3, #0
 80037da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037dc:	2303      	movs	r3, #3
 80037de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80037e0:	2304      	movs	r3, #4
 80037e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037e4:	f107 031c 	add.w	r3, r7, #28
 80037e8:	4619      	mov	r1, r3
 80037ea:	4812      	ldr	r0, [pc, #72]	; (8003834 <HAL_I2C_MspInit+0x158>)
 80037ec:	f001 faac 	bl	8004d48 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80037f0:	2300      	movs	r3, #0
 80037f2:	60bb      	str	r3, [r7, #8]
 80037f4:	4b0c      	ldr	r3, [pc, #48]	; (8003828 <HAL_I2C_MspInit+0x14c>)
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	4a0b      	ldr	r2, [pc, #44]	; (8003828 <HAL_I2C_MspInit+0x14c>)
 80037fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003800:	4b09      	ldr	r3, [pc, #36]	; (8003828 <HAL_I2C_MspInit+0x14c>)
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003808:	60bb      	str	r3, [r7, #8]
 800380a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800380c:	2200      	movs	r2, #0
 800380e:	2100      	movs	r1, #0
 8003810:	2021      	movs	r0, #33	; 0x21
 8003812:	f001 fa32 	bl	8004c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003816:	2021      	movs	r0, #33	; 0x21
 8003818:	f001 fa4b 	bl	8004cb2 <HAL_NVIC_EnableIRQ>
}
 800381c:	bf00      	nop
 800381e:	3730      	adds	r7, #48	; 0x30
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40005400 	.word	0x40005400
 8003828:	40023800 	.word	0x40023800
 800382c:	40020400 	.word	0x40020400
 8003830:	40005800 	.word	0x40005800
 8003834:	40020800 	.word	0x40020800

08003838 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b09a      	sub	sp, #104	; 0x68
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003840:	f107 030c 	add.w	r3, r7, #12
 8003844:	225c      	movs	r2, #92	; 0x5c
 8003846:	2100      	movs	r1, #0
 8003848:	4618      	mov	r0, r3
 800384a:	f007 f8e5 	bl	800aa18 <memset>
  if(hrtc->Instance==RTC)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a0c      	ldr	r2, [pc, #48]	; (8003884 <HAL_RTC_MspInit+0x4c>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d110      	bne.n	800387a <HAL_RTC_MspInit+0x42>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003858:	2320      	movs	r3, #32
 800385a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV16;
 800385c:	4b0a      	ldr	r3, [pc, #40]	; (8003888 <HAL_RTC_MspInit+0x50>)
 800385e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003860:	f107 030c 	add.w	r3, r7, #12
 8003864:	4618      	mov	r0, r3
 8003866:	f004 f915 	bl	8007a94 <HAL_RCCEx_PeriphCLKConfig>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 8003870:	f7ff fd94 	bl	800339c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003874:	4b05      	ldr	r3, [pc, #20]	; (800388c <HAL_RTC_MspInit+0x54>)
 8003876:	2201      	movs	r2, #1
 8003878:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800387a:	bf00      	nop
 800387c:	3768      	adds	r7, #104	; 0x68
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40002800 	.word	0x40002800
 8003888:	00100300 	.word	0x00100300
 800388c:	42470e3c 	.word	0x42470e3c

08003890 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a18      	ldr	r2, [pc, #96]	; (8003900 <HAL_TIM_Base_MspInit+0x70>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d10e      	bne.n	80038c0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80038a2:	2300      	movs	r3, #0
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	4b17      	ldr	r3, [pc, #92]	; (8003904 <HAL_TIM_Base_MspInit+0x74>)
 80038a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038aa:	4a16      	ldr	r2, [pc, #88]	; (8003904 <HAL_TIM_Base_MspInit+0x74>)
 80038ac:	f043 0301 	orr.w	r3, r3, #1
 80038b0:	6453      	str	r3, [r2, #68]	; 0x44
 80038b2:	4b14      	ldr	r3, [pc, #80]	; (8003904 <HAL_TIM_Base_MspInit+0x74>)
 80038b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80038be:	e01a      	b.n	80038f6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM6)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a10      	ldr	r2, [pc, #64]	; (8003908 <HAL_TIM_Base_MspInit+0x78>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d115      	bne.n	80038f6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80038ca:	2300      	movs	r3, #0
 80038cc:	60bb      	str	r3, [r7, #8]
 80038ce:	4b0d      	ldr	r3, [pc, #52]	; (8003904 <HAL_TIM_Base_MspInit+0x74>)
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	4a0c      	ldr	r2, [pc, #48]	; (8003904 <HAL_TIM_Base_MspInit+0x74>)
 80038d4:	f043 0310 	orr.w	r3, r3, #16
 80038d8:	6413      	str	r3, [r2, #64]	; 0x40
 80038da:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <HAL_TIM_Base_MspInit+0x74>)
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	f003 0310 	and.w	r3, r3, #16
 80038e2:	60bb      	str	r3, [r7, #8]
 80038e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80038e6:	2200      	movs	r2, #0
 80038e8:	2100      	movs	r1, #0
 80038ea:	2036      	movs	r0, #54	; 0x36
 80038ec:	f001 f9c5 	bl	8004c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80038f0:	2036      	movs	r0, #54	; 0x36
 80038f2:	f001 f9de 	bl	8004cb2 <HAL_NVIC_EnableIRQ>
}
 80038f6:	bf00      	nop
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	40010000 	.word	0x40010000
 8003904:	40023800 	.word	0x40023800
 8003908:	40001000 	.word	0x40001000

0800390c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b088      	sub	sp, #32
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003914:	f107 030c 	add.w	r3, r7, #12
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	605a      	str	r2, [r3, #4]
 800391e:	609a      	str	r2, [r3, #8]
 8003920:	60da      	str	r2, [r3, #12]
 8003922:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a12      	ldr	r2, [pc, #72]	; (8003974 <HAL_TIM_MspPostInit+0x68>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d11e      	bne.n	800396c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800392e:	2300      	movs	r3, #0
 8003930:	60bb      	str	r3, [r7, #8]
 8003932:	4b11      	ldr	r3, [pc, #68]	; (8003978 <HAL_TIM_MspPostInit+0x6c>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	4a10      	ldr	r2, [pc, #64]	; (8003978 <HAL_TIM_MspPostInit+0x6c>)
 8003938:	f043 0301 	orr.w	r3, r3, #1
 800393c:	6313      	str	r3, [r2, #48]	; 0x30
 800393e:	4b0e      	ldr	r3, [pc, #56]	; (8003978 <HAL_TIM_MspPostInit+0x6c>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	60bb      	str	r3, [r7, #8]
 8003948:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_FAN_IN_Pin|PWM_FAN_OUT_Pin;
 800394a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800394e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003950:	2312      	movs	r3, #18
 8003952:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003954:	2300      	movs	r3, #0
 8003956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003958:	2300      	movs	r3, #0
 800395a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800395c:	2301      	movs	r3, #1
 800395e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003960:	f107 030c 	add.w	r3, r7, #12
 8003964:	4619      	mov	r1, r3
 8003966:	4805      	ldr	r0, [pc, #20]	; (800397c <HAL_TIM_MspPostInit+0x70>)
 8003968:	f001 f9ee 	bl	8004d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800396c:	bf00      	nop
 800396e:	3720      	adds	r7, #32
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40010000 	.word	0x40010000
 8003978:	40023800 	.word	0x40023800
 800397c:	40020000 	.word	0x40020000

08003980 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b08a      	sub	sp, #40	; 0x28
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003988:	f107 0314 	add.w	r3, r7, #20
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	605a      	str	r2, [r3, #4]
 8003992:	609a      	str	r2, [r3, #8]
 8003994:	60da      	str	r2, [r3, #12]
 8003996:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a19      	ldr	r2, [pc, #100]	; (8003a04 <HAL_UART_MspInit+0x84>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d12b      	bne.n	80039fa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80039a2:	2300      	movs	r3, #0
 80039a4:	613b      	str	r3, [r7, #16]
 80039a6:	4b18      	ldr	r3, [pc, #96]	; (8003a08 <HAL_UART_MspInit+0x88>)
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	4a17      	ldr	r2, [pc, #92]	; (8003a08 <HAL_UART_MspInit+0x88>)
 80039ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039b0:	6413      	str	r3, [r2, #64]	; 0x40
 80039b2:	4b15      	ldr	r3, [pc, #84]	; (8003a08 <HAL_UART_MspInit+0x88>)
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ba:	613b      	str	r3, [r7, #16]
 80039bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039be:	2300      	movs	r3, #0
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	4b11      	ldr	r3, [pc, #68]	; (8003a08 <HAL_UART_MspInit+0x88>)
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	4a10      	ldr	r2, [pc, #64]	; (8003a08 <HAL_UART_MspInit+0x88>)
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	6313      	str	r3, [r2, #48]	; 0x30
 80039ce:	4b0e      	ldr	r3, [pc, #56]	; (8003a08 <HAL_UART_MspInit+0x88>)
 80039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	60fb      	str	r3, [r7, #12]
 80039d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80039da:	230c      	movs	r3, #12
 80039dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039de:	2302      	movs	r3, #2
 80039e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039e6:	2303      	movs	r3, #3
 80039e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80039ea:	2307      	movs	r3, #7
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ee:	f107 0314 	add.w	r3, r7, #20
 80039f2:	4619      	mov	r1, r3
 80039f4:	4805      	ldr	r0, [pc, #20]	; (8003a0c <HAL_UART_MspInit+0x8c>)
 80039f6:	f001 f9a7 	bl	8004d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80039fa:	bf00      	nop
 80039fc:	3728      	adds	r7, #40	; 0x28
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40004400 	.word	0x40004400
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	40020000 	.word	0x40020000

08003a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a14:	e7fe      	b.n	8003a14 <NMI_Handler+0x4>

08003a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a16:	b480      	push	{r7}
 8003a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a1a:	e7fe      	b.n	8003a1a <HardFault_Handler+0x4>

08003a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a20:	e7fe      	b.n	8003a20 <MemManage_Handler+0x4>

08003a22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a22:	b480      	push	{r7}
 8003a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a26:	e7fe      	b.n	8003a26 <BusFault_Handler+0x4>

08003a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a2c:	e7fe      	b.n	8003a2c <UsageFault_Handler+0x4>

08003a2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a32:	bf00      	nop
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a40:	bf00      	nop
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a4e:	bf00      	nop
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a5c:	f000 f996 	bl	8003d8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Scheduler_Update_1ms();
 8003a60:	f7ff fcd4 	bl	800340c <Scheduler_Update_1ms>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003a64:	bf00      	nop
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003a6c:	4802      	ldr	r0, [pc, #8]	; (8003a78 <CAN1_TX_IRQHandler+0x10>)
 8003a6e:	f000 fe04 	bl	800467a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8003a72:	bf00      	nop
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	20000d88 	.word	0x20000d88

08003a7c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003a80:	4802      	ldr	r0, [pc, #8]	; (8003a8c <CAN1_RX0_IRQHandler+0x10>)
 8003a82:	f000 fdfa 	bl	800467a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003a86:	bf00      	nop
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	20000d88 	.word	0x20000d88

08003a90 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003a94:	4802      	ldr	r0, [pc, #8]	; (8003aa0 <CAN1_RX1_IRQHandler+0x10>)
 8003a96:	f000 fdf0 	bl	800467a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003a9a:	bf00      	nop
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	20000d88 	.word	0x20000d88

08003aa4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003aa8:	4802      	ldr	r0, [pc, #8]	; (8003ab4 <I2C1_EV_IRQHandler+0x10>)
 8003aaa:	f001 ff95 	bl	80059d8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003aae:	bf00      	nop
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	20000db0 	.word	0x20000db0

08003ab8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003abc:	4802      	ldr	r0, [pc, #8]	; (8003ac8 <I2C2_EV_IRQHandler+0x10>)
 8003abe:	f001 ff8b 	bl	80059d8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003ac2:	bf00      	nop
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20000e04 	.word	0x20000e04

08003acc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
   OW_IRQHandler();
 8003ad0:	f7fd fc4c 	bl	800136c <OW_IRQHandler>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003ad4:	4802      	ldr	r0, [pc, #8]	; (8003ae0 <TIM6_DAC_IRQHandler+0x14>)
 8003ad6:	f005 fccd 	bl	8009474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003ada:	bf00      	nop
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	20000ecc 	.word	0x20000ecc

08003ae4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
	return 1;
 8003ae8:	2301      	movs	r3, #1
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <_kill>:

int _kill(int pid, int sig)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003afe:	f006 fe31 	bl	800a764 <__errno>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2216      	movs	r2, #22
 8003b06:	601a      	str	r2, [r3, #0]
	return -1;
 8003b08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <_exit>:

void _exit (int status)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f7ff ffe7 	bl	8003af4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b26:	e7fe      	b.n	8003b26 <_exit+0x12>

08003b28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	e00a      	b.n	8003b50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b3a:	f3af 8000 	nop.w
 8003b3e:	4601      	mov	r1, r0
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	60ba      	str	r2, [r7, #8]
 8003b46:	b2ca      	uxtb	r2, r1
 8003b48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	617b      	str	r3, [r7, #20]
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	dbf0      	blt.n	8003b3a <_read+0x12>
	}

return len;
 8003b58:	687b      	ldr	r3, [r7, #4]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3718      	adds	r7, #24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b086      	sub	sp, #24
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	60f8      	str	r0, [r7, #12]
 8003b6a:	60b9      	str	r1, [r7, #8]
 8003b6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b6e:	2300      	movs	r3, #0
 8003b70:	617b      	str	r3, [r7, #20]
 8003b72:	e009      	b.n	8003b88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	1c5a      	adds	r2, r3, #1
 8003b78:	60ba      	str	r2, [r7, #8]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	3301      	adds	r3, #1
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	dbf1      	blt.n	8003b74 <_write+0x12>
	}
	return len;
 8003b90:	687b      	ldr	r3, [r7, #4]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3718      	adds	r7, #24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <_close>:

int _close(int file)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
	return -1;
 8003ba2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
 8003bba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bc2:	605a      	str	r2, [r3, #4]
	return 0;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <_isatty>:

int _isatty(int file)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
	return 1;
 8003bda:	2301      	movs	r3, #1
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
	return 0;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
	...

08003c04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c0c:	4a14      	ldr	r2, [pc, #80]	; (8003c60 <_sbrk+0x5c>)
 8003c0e:	4b15      	ldr	r3, [pc, #84]	; (8003c64 <_sbrk+0x60>)
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c18:	4b13      	ldr	r3, [pc, #76]	; (8003c68 <_sbrk+0x64>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d102      	bne.n	8003c26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c20:	4b11      	ldr	r3, [pc, #68]	; (8003c68 <_sbrk+0x64>)
 8003c22:	4a12      	ldr	r2, [pc, #72]	; (8003c6c <_sbrk+0x68>)
 8003c24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c26:	4b10      	ldr	r3, [pc, #64]	; (8003c68 <_sbrk+0x64>)
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d207      	bcs.n	8003c44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c34:	f006 fd96 	bl	800a764 <__errno>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	220c      	movs	r2, #12
 8003c3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c42:	e009      	b.n	8003c58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c44:	4b08      	ldr	r3, [pc, #32]	; (8003c68 <_sbrk+0x64>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c4a:	4b07      	ldr	r3, [pc, #28]	; (8003c68 <_sbrk+0x64>)
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4413      	add	r3, r2
 8003c52:	4a05      	ldr	r2, [pc, #20]	; (8003c68 <_sbrk+0x64>)
 8003c54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c56:	68fb      	ldr	r3, [r7, #12]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3718      	adds	r7, #24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	20020000 	.word	0x20020000
 8003c64:	00000400 	.word	0x00000400
 8003c68:	20000f9c 	.word	0x20000f9c
 8003c6c:	20000fe0 	.word	0x20000fe0

08003c70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c74:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <SystemInit+0x20>)
 8003c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7a:	4a05      	ldr	r2, [pc, #20]	; (8003c90 <SystemInit+0x20>)
 8003c7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c84:	bf00      	nop
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	e000ed00 	.word	0xe000ed00

08003c94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003c94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ccc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c98:	480d      	ldr	r0, [pc, #52]	; (8003cd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003c9a:	490e      	ldr	r1, [pc, #56]	; (8003cd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003c9c:	4a0e      	ldr	r2, [pc, #56]	; (8003cd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ca0:	e002      	b.n	8003ca8 <LoopCopyDataInit>

08003ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ca6:	3304      	adds	r3, #4

08003ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cac:	d3f9      	bcc.n	8003ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cae:	4a0b      	ldr	r2, [pc, #44]	; (8003cdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003cb0:	4c0b      	ldr	r4, [pc, #44]	; (8003ce0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cb4:	e001      	b.n	8003cba <LoopFillZerobss>

08003cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cb8:	3204      	adds	r2, #4

08003cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cbc:	d3fb      	bcc.n	8003cb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003cbe:	f7ff ffd7 	bl	8003c70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003cc2:	f006 fd55 	bl	800a770 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003cc6:	f7ff f82b 	bl	8002d20 <main>
  bx  lr    
 8003cca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ccc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003cd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003cd4:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8003cd8:	0800ce0c 	.word	0x0800ce0c
  ldr r2, =_sbss
 8003cdc:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8003ce0:	20000fdc 	.word	0x20000fdc

08003ce4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ce4:	e7fe      	b.n	8003ce4 <ADC_IRQHandler>
	...

08003ce8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003cec:	4b0e      	ldr	r3, [pc, #56]	; (8003d28 <HAL_Init+0x40>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a0d      	ldr	r2, [pc, #52]	; (8003d28 <HAL_Init+0x40>)
 8003cf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003cf8:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <HAL_Init+0x40>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a0a      	ldr	r2, [pc, #40]	; (8003d28 <HAL_Init+0x40>)
 8003cfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d04:	4b08      	ldr	r3, [pc, #32]	; (8003d28 <HAL_Init+0x40>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a07      	ldr	r2, [pc, #28]	; (8003d28 <HAL_Init+0x40>)
 8003d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d10:	2003      	movs	r0, #3
 8003d12:	f000 ffa7 	bl	8004c64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d16:	2000      	movs	r0, #0
 8003d18:	f000 f808 	bl	8003d2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d1c:	f7ff fc56 	bl	80035cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	40023c00 	.word	0x40023c00

08003d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d34:	4b12      	ldr	r3, [pc, #72]	; (8003d80 <HAL_InitTick+0x54>)
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	4b12      	ldr	r3, [pc, #72]	; (8003d84 <HAL_InitTick+0x58>)
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 ffbf 	bl	8004cce <HAL_SYSTICK_Config>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e00e      	b.n	8003d78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b0f      	cmp	r3, #15
 8003d5e:	d80a      	bhi.n	8003d76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d60:	2200      	movs	r2, #0
 8003d62:	6879      	ldr	r1, [r7, #4]
 8003d64:	f04f 30ff 	mov.w	r0, #4294967295
 8003d68:	f000 ff87 	bl	8004c7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d6c:	4a06      	ldr	r2, [pc, #24]	; (8003d88 <HAL_InitTick+0x5c>)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
 8003d74:	e000      	b.n	8003d78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	20000148 	.word	0x20000148
 8003d84:	20000150 	.word	0x20000150
 8003d88:	2000014c 	.word	0x2000014c

08003d8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d90:	4b06      	ldr	r3, [pc, #24]	; (8003dac <HAL_IncTick+0x20>)
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	461a      	mov	r2, r3
 8003d96:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <HAL_IncTick+0x24>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	4a04      	ldr	r2, [pc, #16]	; (8003db0 <HAL_IncTick+0x24>)
 8003d9e:	6013      	str	r3, [r2, #0]
}
 8003da0:	bf00      	nop
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	20000150 	.word	0x20000150
 8003db0:	20000fa0 	.word	0x20000fa0

08003db4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  return uwTick;
 8003db8:	4b03      	ldr	r3, [pc, #12]	; (8003dc8 <HAL_GetTick+0x14>)
 8003dba:	681b      	ldr	r3, [r3, #0]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	20000fa0 	.word	0x20000fa0

08003dcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003dd4:	f7ff ffee 	bl	8003db4 <HAL_GetTick>
 8003dd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de4:	d005      	beq.n	8003df2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003de6:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <HAL_Delay+0x44>)
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	461a      	mov	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4413      	add	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003df2:	bf00      	nop
 8003df4:	f7ff ffde 	bl	8003db4 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d8f7      	bhi.n	8003df4 <HAL_Delay+0x28>
  {
  }
}
 8003e04:	bf00      	nop
 8003e06:	bf00      	nop
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	20000150 	.word	0x20000150

08003e14 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e0ed      	b.n	8004002 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d102      	bne.n	8003e38 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7ff fbf2 	bl	800361c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0201 	orr.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e48:	f7ff ffb4 	bl	8003db4 <HAL_GetTick>
 8003e4c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e4e:	e012      	b.n	8003e76 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e50:	f7ff ffb0 	bl	8003db4 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b0a      	cmp	r3, #10
 8003e5c:	d90b      	bls.n	8003e76 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2205      	movs	r2, #5
 8003e6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e0c5      	b.n	8004002 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0e5      	beq.n	8003e50 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0202 	bic.w	r2, r2, #2
 8003e92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e94:	f7ff ff8e 	bl	8003db4 <HAL_GetTick>
 8003e98:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e9a:	e012      	b.n	8003ec2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e9c:	f7ff ff8a 	bl	8003db4 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b0a      	cmp	r3, #10
 8003ea8:	d90b      	bls.n	8003ec2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2205      	movs	r2, #5
 8003eba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e09f      	b.n	8004002 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1e5      	bne.n	8003e9c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	7e1b      	ldrb	r3, [r3, #24]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d108      	bne.n	8003eea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	e007      	b.n	8003efa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ef8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	7e5b      	ldrb	r3, [r3, #25]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d108      	bne.n	8003f14 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	e007      	b.n	8003f24 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f22:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	7e9b      	ldrb	r3, [r3, #26]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d108      	bne.n	8003f3e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f042 0220 	orr.w	r2, r2, #32
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	e007      	b.n	8003f4e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 0220 	bic.w	r2, r2, #32
 8003f4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	7edb      	ldrb	r3, [r3, #27]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d108      	bne.n	8003f68 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0210 	bic.w	r2, r2, #16
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	e007      	b.n	8003f78 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0210 	orr.w	r2, r2, #16
 8003f76:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	7f1b      	ldrb	r3, [r3, #28]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d108      	bne.n	8003f92 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0208 	orr.w	r2, r2, #8
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	e007      	b.n	8003fa2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 0208 	bic.w	r2, r2, #8
 8003fa0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	7f5b      	ldrb	r3, [r3, #29]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d108      	bne.n	8003fbc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f042 0204 	orr.w	r2, r2, #4
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	e007      	b.n	8003fcc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0204 	bic.w	r2, r2, #4
 8003fca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	ea42 0103 	orr.w	r1, r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	1e5a      	subs	r2, r3, #1
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
	...

0800400c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800400c:	b480      	push	{r7}
 800400e:	b087      	sub	sp, #28
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004022:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004024:	7cfb      	ldrb	r3, [r7, #19]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d003      	beq.n	8004032 <HAL_CAN_ConfigFilter+0x26>
 800402a:	7cfb      	ldrb	r3, [r7, #19]
 800402c:	2b02      	cmp	r3, #2
 800402e:	f040 80be 	bne.w	80041ae <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004032:	4b65      	ldr	r3, [pc, #404]	; (80041c8 <HAL_CAN_ConfigFilter+0x1bc>)
 8004034:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800403c:	f043 0201 	orr.w	r2, r3, #1
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800404c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	021b      	lsls	r3, r3, #8
 8004062:	431a      	orrs	r2, r3
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	f003 031f 	and.w	r3, r3, #31
 8004072:	2201      	movs	r2, #1
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	43db      	mvns	r3, r3
 8004084:	401a      	ands	r2, r3
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d123      	bne.n	80040dc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	43db      	mvns	r3, r3
 800409e:	401a      	ands	r2, r3
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80040b6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	3248      	adds	r2, #72	; 0x48
 80040bc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040d0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040d2:	6979      	ldr	r1, [r7, #20]
 80040d4:	3348      	adds	r3, #72	; 0x48
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	440b      	add	r3, r1
 80040da:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d122      	bne.n	800412a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	431a      	orrs	r2, r3
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004104:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	3248      	adds	r2, #72	; 0x48
 800410a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800411e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004120:	6979      	ldr	r1, [r7, #20]
 8004122:	3348      	adds	r3, #72	; 0x48
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	440b      	add	r3, r1
 8004128:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d109      	bne.n	8004146 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	43db      	mvns	r3, r3
 800413c:	401a      	ands	r2, r3
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004144:	e007      	b.n	8004156 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	431a      	orrs	r2, r3
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d109      	bne.n	8004172 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	43db      	mvns	r3, r3
 8004168:	401a      	ands	r2, r3
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004170:	e007      	b.n	8004182 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	431a      	orrs	r2, r3
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d107      	bne.n	800419a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	431a      	orrs	r2, r3
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80041a0:	f023 0201 	bic.w	r2, r3, #1
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80041aa:	2300      	movs	r3, #0
 80041ac:	e006      	b.n	80041bc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
  }
}
 80041bc:	4618      	mov	r0, r3
 80041be:	371c      	adds	r7, #28
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	40006400 	.word	0x40006400

080041cc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d12e      	bne.n	800423e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2202      	movs	r2, #2
 80041e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 0201 	bic.w	r2, r2, #1
 80041f6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80041f8:	f7ff fddc 	bl	8003db4 <HAL_GetTick>
 80041fc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80041fe:	e012      	b.n	8004226 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004200:	f7ff fdd8 	bl	8003db4 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b0a      	cmp	r3, #10
 800420c:	d90b      	bls.n	8004226 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2205      	movs	r2, #5
 800421e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e012      	b.n	800424c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1e5      	bne.n	8004200 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800423a:	2300      	movs	r3, #0
 800423c:	e006      	b.n	800424c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
  }
}
 800424c:	4618      	mov	r0, r3
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004254:	b480      	push	{r7}
 8004256:	b089      	sub	sp, #36	; 0x24
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
 8004260:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004268:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004272:	7ffb      	ldrb	r3, [r7, #31]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d003      	beq.n	8004280 <HAL_CAN_AddTxMessage+0x2c>
 8004278:	7ffb      	ldrb	r3, [r7, #31]
 800427a:	2b02      	cmp	r3, #2
 800427c:	f040 80b8 	bne.w	80043f0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10a      	bne.n	80042a0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004290:	2b00      	cmp	r3, #0
 8004292:	d105      	bne.n	80042a0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 80a0 	beq.w	80043e0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	0e1b      	lsrs	r3, r3, #24
 80042a4:	f003 0303 	and.w	r3, r3, #3
 80042a8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d907      	bls.n	80042c0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e09e      	b.n	80043fe <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80042c0:	2201      	movs	r2, #1
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	409a      	lsls	r2, r3
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10d      	bne.n	80042ee <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80042dc:	68f9      	ldr	r1, [r7, #12]
 80042de:	6809      	ldr	r1, [r1, #0]
 80042e0:	431a      	orrs	r2, r3
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	3318      	adds	r3, #24
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	440b      	add	r3, r1
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	e00f      	b.n	800430e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80042f8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80042fe:	68f9      	ldr	r1, [r7, #12]
 8004300:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004302:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	3318      	adds	r3, #24
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	440b      	add	r3, r1
 800430c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6819      	ldr	r1, [r3, #0]
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	691a      	ldr	r2, [r3, #16]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	3318      	adds	r3, #24
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	440b      	add	r3, r1
 800431e:	3304      	adds	r3, #4
 8004320:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	7d1b      	ldrb	r3, [r3, #20]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d111      	bne.n	800434e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	3318      	adds	r3, #24
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	4413      	add	r3, r2
 8004336:	3304      	adds	r3, #4
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	6811      	ldr	r1, [r2, #0]
 800433e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	3318      	adds	r3, #24
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	440b      	add	r3, r1
 800434a:	3304      	adds	r3, #4
 800434c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3307      	adds	r3, #7
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	061a      	lsls	r2, r3, #24
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	3306      	adds	r3, #6
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	041b      	lsls	r3, r3, #16
 800435e:	431a      	orrs	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3305      	adds	r3, #5
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	021b      	lsls	r3, r3, #8
 8004368:	4313      	orrs	r3, r2
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	3204      	adds	r2, #4
 800436e:	7812      	ldrb	r2, [r2, #0]
 8004370:	4610      	mov	r0, r2
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	6811      	ldr	r1, [r2, #0]
 8004376:	ea43 0200 	orr.w	r2, r3, r0
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	011b      	lsls	r3, r3, #4
 800437e:	440b      	add	r3, r1
 8004380:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004384:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	3303      	adds	r3, #3
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	061a      	lsls	r2, r3, #24
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	3302      	adds	r3, #2
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	041b      	lsls	r3, r3, #16
 8004396:	431a      	orrs	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3301      	adds	r3, #1
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	021b      	lsls	r3, r3, #8
 80043a0:	4313      	orrs	r3, r2
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	7812      	ldrb	r2, [r2, #0]
 80043a6:	4610      	mov	r0, r2
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	6811      	ldr	r1, [r2, #0]
 80043ac:	ea43 0200 	orr.w	r2, r3, r0
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	440b      	add	r3, r1
 80043b6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80043ba:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	3318      	adds	r3, #24
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	4413      	add	r3, r2
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	6811      	ldr	r1, [r2, #0]
 80043ce:	f043 0201 	orr.w	r2, r3, #1
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	3318      	adds	r3, #24
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	440b      	add	r3, r1
 80043da:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80043dc:	2300      	movs	r3, #0
 80043de:	e00e      	b.n	80043fe <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e006      	b.n	80043fe <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
  }
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3724      	adds	r7, #36	; 0x24
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800440a:	b480      	push	{r7}
 800440c:	b087      	sub	sp, #28
 800440e:	af00      	add	r7, sp, #0
 8004410:	60f8      	str	r0, [r7, #12]
 8004412:	60b9      	str	r1, [r7, #8]
 8004414:	607a      	str	r2, [r7, #4]
 8004416:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800441e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004420:	7dfb      	ldrb	r3, [r7, #23]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d003      	beq.n	800442e <HAL_CAN_GetRxMessage+0x24>
 8004426:	7dfb      	ldrb	r3, [r7, #23]
 8004428:	2b02      	cmp	r3, #2
 800442a:	f040 80f3 	bne.w	8004614 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10e      	bne.n	8004452 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d116      	bne.n	8004470 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e0e7      	b.n	8004622 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	f003 0303 	and.w	r3, r3, #3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d107      	bne.n	8004470 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e0d8      	b.n	8004622 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	331b      	adds	r3, #27
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	4413      	add	r3, r2
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0204 	and.w	r2, r3, #4
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10c      	bne.n	80044a8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	331b      	adds	r3, #27
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	4413      	add	r3, r2
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	0d5b      	lsrs	r3, r3, #21
 800449e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	e00b      	b.n	80044c0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	331b      	adds	r3, #27
 80044b0:	011b      	lsls	r3, r3, #4
 80044b2:	4413      	add	r3, r2
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	08db      	lsrs	r3, r3, #3
 80044b8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	331b      	adds	r3, #27
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	4413      	add	r3, r2
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0202 	and.w	r2, r3, #2
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	331b      	adds	r3, #27
 80044de:	011b      	lsls	r3, r3, #4
 80044e0:	4413      	add	r3, r2
 80044e2:	3304      	adds	r3, #4
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 020f 	and.w	r2, r3, #15
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	331b      	adds	r3, #27
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	4413      	add	r3, r2
 80044fa:	3304      	adds	r3, #4
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	0a1b      	lsrs	r3, r3, #8
 8004500:	b2da      	uxtb	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	331b      	adds	r3, #27
 800450e:	011b      	lsls	r3, r3, #4
 8004510:	4413      	add	r3, r2
 8004512:	3304      	adds	r3, #4
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	0c1b      	lsrs	r3, r3, #16
 8004518:	b29a      	uxth	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	011b      	lsls	r3, r3, #4
 8004526:	4413      	add	r3, r2
 8004528:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	b2da      	uxtb	r2, r3
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	011b      	lsls	r3, r3, #4
 800453c:	4413      	add	r3, r2
 800453e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	0a1a      	lsrs	r2, r3, #8
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	3301      	adds	r3, #1
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	4413      	add	r3, r2
 8004558:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	0c1a      	lsrs	r2, r3, #16
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	3302      	adds	r3, #2
 8004564:	b2d2      	uxtb	r2, r2
 8004566:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	011b      	lsls	r3, r3, #4
 8004570:	4413      	add	r3, r2
 8004572:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	0e1a      	lsrs	r2, r3, #24
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	3303      	adds	r3, #3
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	011b      	lsls	r3, r3, #4
 800458a:	4413      	add	r3, r2
 800458c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	3304      	adds	r3, #4
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	011b      	lsls	r3, r3, #4
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	0a1a      	lsrs	r2, r3, #8
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	3305      	adds	r3, #5
 80045b0:	b2d2      	uxtb	r2, r2
 80045b2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	011b      	lsls	r3, r3, #4
 80045bc:	4413      	add	r3, r2
 80045be:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	0c1a      	lsrs	r2, r3, #16
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	3306      	adds	r3, #6
 80045ca:	b2d2      	uxtb	r2, r2
 80045cc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	4413      	add	r3, r2
 80045d8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	0e1a      	lsrs	r2, r3, #24
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	3307      	adds	r3, #7
 80045e4:	b2d2      	uxtb	r2, r2
 80045e6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d108      	bne.n	8004600 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f042 0220 	orr.w	r2, r2, #32
 80045fc:	60da      	str	r2, [r3, #12]
 80045fe:	e007      	b.n	8004610 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	691a      	ldr	r2, [r3, #16]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0220 	orr.w	r2, r2, #32
 800460e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004610:	2300      	movs	r3, #0
 8004612:	e006      	b.n	8004622 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
  }
}
 8004622:	4618      	mov	r0, r3
 8004624:	371c      	adds	r7, #28
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800462e:	b480      	push	{r7}
 8004630:	b085      	sub	sp, #20
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
 8004636:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800463e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004640:	7bfb      	ldrb	r3, [r7, #15]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d002      	beq.n	800464c <HAL_CAN_ActivateNotification+0x1e>
 8004646:	7bfb      	ldrb	r3, [r7, #15]
 8004648:	2b02      	cmp	r3, #2
 800464a:	d109      	bne.n	8004660 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6959      	ldr	r1, [r3, #20]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800465c:	2300      	movs	r3, #0
 800465e:	e006      	b.n	800466e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004664:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
  }
}
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b08a      	sub	sp, #40	; 0x28
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004682:	2300      	movs	r3, #0
 8004684:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80046b6:	6a3b      	ldr	r3, [r7, #32]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d07c      	beq.n	80047ba <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d023      	beq.n	8004712 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2201      	movs	r2, #1
 80046d0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d003      	beq.n	80046e4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f983 	bl	80049e8 <HAL_CAN_TxMailbox0CompleteCallback>
 80046e2:	e016      	b.n	8004712 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	f003 0304 	and.w	r3, r3, #4
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d004      	beq.n	80046f8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80046f4:	627b      	str	r3, [r7, #36]	; 0x24
 80046f6:	e00c      	b.n	8004712 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	f003 0308 	and.w	r3, r3, #8
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d004      	beq.n	800470c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004708:	627b      	str	r3, [r7, #36]	; 0x24
 800470a:	e002      	b.n	8004712 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f989 	bl	8004a24 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004718:	2b00      	cmp	r3, #0
 800471a:	d024      	beq.n	8004766 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004724:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800472c:	2b00      	cmp	r3, #0
 800472e:	d003      	beq.n	8004738 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f963 	bl	80049fc <HAL_CAN_TxMailbox1CompleteCallback>
 8004736:	e016      	b.n	8004766 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800473e:	2b00      	cmp	r3, #0
 8004740:	d004      	beq.n	800474c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004748:	627b      	str	r3, [r7, #36]	; 0x24
 800474a:	e00c      	b.n	8004766 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004752:	2b00      	cmp	r3, #0
 8004754:	d004      	beq.n	8004760 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800475c:	627b      	str	r3, [r7, #36]	; 0x24
 800475e:	e002      	b.n	8004766 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 f969 	bl	8004a38 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d024      	beq.n	80047ba <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004778:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 f943 	bl	8004a10 <HAL_CAN_TxMailbox2CompleteCallback>
 800478a:	e016      	b.n	80047ba <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d004      	beq.n	80047a0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800479c:	627b      	str	r3, [r7, #36]	; 0x24
 800479e:	e00c      	b.n	80047ba <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d004      	beq.n	80047b4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047b0:	627b      	str	r3, [r7, #36]	; 0x24
 80047b2:	e002      	b.n	80047ba <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f949 	bl	8004a4c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80047ba:	6a3b      	ldr	r3, [r7, #32]
 80047bc:	f003 0308 	and.w	r3, r3, #8
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00c      	beq.n	80047de <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f003 0310 	and.w	r3, r3, #16
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d007      	beq.n	80047de <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2210      	movs	r2, #16
 80047dc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	f003 0304 	and.w	r3, r3, #4
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00b      	beq.n	8004800 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f003 0308 	and.w	r3, r3, #8
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d006      	beq.n	8004800 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2208      	movs	r2, #8
 80047f8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f930 	bl	8004a60 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004800:	6a3b      	ldr	r3, [r7, #32]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d009      	beq.n	800481e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f003 0303 	and.w	r3, r3, #3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f7fc fa5f 	bl	8000cdc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800481e:	6a3b      	ldr	r3, [r7, #32]
 8004820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00c      	beq.n	8004842 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	f003 0310 	and.w	r3, r3, #16
 800482e:	2b00      	cmp	r3, #0
 8004830:	d007      	beq.n	8004842 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004838:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2210      	movs	r2, #16
 8004840:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004842:	6a3b      	ldr	r3, [r7, #32]
 8004844:	f003 0320 	and.w	r3, r3, #32
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00b      	beq.n	8004864 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	f003 0308 	and.w	r3, r3, #8
 8004852:	2b00      	cmp	r3, #0
 8004854:	d006      	beq.n	8004864 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2208      	movs	r2, #8
 800485c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f908 	bl	8004a74 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004864:	6a3b      	ldr	r3, [r7, #32]
 8004866:	f003 0310 	and.w	r3, r3, #16
 800486a:	2b00      	cmp	r3, #0
 800486c:	d009      	beq.n	8004882 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	f003 0303 	and.w	r3, r3, #3
 8004878:	2b00      	cmp	r3, #0
 800487a:	d002      	beq.n	8004882 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f7fc fa4d 	bl	8000d1c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00b      	beq.n	80048a4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	f003 0310 	and.w	r3, r3, #16
 8004892:	2b00      	cmp	r3, #0
 8004894:	d006      	beq.n	80048a4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2210      	movs	r2, #16
 800489c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f8f2 	bl	8004a88 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00b      	beq.n	80048c6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	f003 0308 	and.w	r3, r3, #8
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d006      	beq.n	80048c6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2208      	movs	r2, #8
 80048be:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 f8eb 	bl	8004a9c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d07b      	beq.n	80049c8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	f003 0304 	and.w	r3, r3, #4
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d072      	beq.n	80049c0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d008      	beq.n	80048f6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	f043 0301 	orr.w	r3, r3, #1
 80048f4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d008      	beq.n	8004912 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004906:	2b00      	cmp	r3, #0
 8004908:	d003      	beq.n	8004912 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	f043 0302 	orr.w	r3, r3, #2
 8004910:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004918:	2b00      	cmp	r3, #0
 800491a:	d008      	beq.n	800492e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	f043 0304 	orr.w	r3, r3, #4
 800492c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004934:	2b00      	cmp	r3, #0
 8004936:	d043      	beq.n	80049c0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800493e:	2b00      	cmp	r3, #0
 8004940:	d03e      	beq.n	80049c0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004948:	2b60      	cmp	r3, #96	; 0x60
 800494a:	d02b      	beq.n	80049a4 <HAL_CAN_IRQHandler+0x32a>
 800494c:	2b60      	cmp	r3, #96	; 0x60
 800494e:	d82e      	bhi.n	80049ae <HAL_CAN_IRQHandler+0x334>
 8004950:	2b50      	cmp	r3, #80	; 0x50
 8004952:	d022      	beq.n	800499a <HAL_CAN_IRQHandler+0x320>
 8004954:	2b50      	cmp	r3, #80	; 0x50
 8004956:	d82a      	bhi.n	80049ae <HAL_CAN_IRQHandler+0x334>
 8004958:	2b40      	cmp	r3, #64	; 0x40
 800495a:	d019      	beq.n	8004990 <HAL_CAN_IRQHandler+0x316>
 800495c:	2b40      	cmp	r3, #64	; 0x40
 800495e:	d826      	bhi.n	80049ae <HAL_CAN_IRQHandler+0x334>
 8004960:	2b30      	cmp	r3, #48	; 0x30
 8004962:	d010      	beq.n	8004986 <HAL_CAN_IRQHandler+0x30c>
 8004964:	2b30      	cmp	r3, #48	; 0x30
 8004966:	d822      	bhi.n	80049ae <HAL_CAN_IRQHandler+0x334>
 8004968:	2b10      	cmp	r3, #16
 800496a:	d002      	beq.n	8004972 <HAL_CAN_IRQHandler+0x2f8>
 800496c:	2b20      	cmp	r3, #32
 800496e:	d005      	beq.n	800497c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004970:	e01d      	b.n	80049ae <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	f043 0308 	orr.w	r3, r3, #8
 8004978:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800497a:	e019      	b.n	80049b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	f043 0310 	orr.w	r3, r3, #16
 8004982:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004984:	e014      	b.n	80049b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	f043 0320 	orr.w	r3, r3, #32
 800498c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800498e:	e00f      	b.n	80049b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004996:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004998:	e00a      	b.n	80049b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049a2:	e005      	b.n	80049b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049ac:	e000      	b.n	80049b0 <HAL_CAN_IRQHandler+0x336>
            break;
 80049ae:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	699a      	ldr	r2, [r3, #24]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80049be:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2204      	movs	r2, #4
 80049c6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d008      	beq.n	80049e0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	431a      	orrs	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f868 	bl	8004ab0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80049e0:	bf00      	nop
 80049e2:	3728      	adds	r7, #40	; 0x28
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f003 0307 	and.w	r3, r3, #7
 8004ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ad4:	4b0c      	ldr	r3, [pc, #48]	; (8004b08 <__NVIC_SetPriorityGrouping+0x44>)
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004aec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004af6:	4a04      	ldr	r2, [pc, #16]	; (8004b08 <__NVIC_SetPriorityGrouping+0x44>)
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	60d3      	str	r3, [r2, #12]
}
 8004afc:	bf00      	nop
 8004afe:	3714      	adds	r7, #20
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	e000ed00 	.word	0xe000ed00

08004b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b10:	4b04      	ldr	r3, [pc, #16]	; (8004b24 <__NVIC_GetPriorityGrouping+0x18>)
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	0a1b      	lsrs	r3, r3, #8
 8004b16:	f003 0307 	and.w	r3, r3, #7
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	e000ed00 	.word	0xe000ed00

08004b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	4603      	mov	r3, r0
 8004b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	db0b      	blt.n	8004b52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b3a:	79fb      	ldrb	r3, [r7, #7]
 8004b3c:	f003 021f 	and.w	r2, r3, #31
 8004b40:	4907      	ldr	r1, [pc, #28]	; (8004b60 <__NVIC_EnableIRQ+0x38>)
 8004b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b46:	095b      	lsrs	r3, r3, #5
 8004b48:	2001      	movs	r0, #1
 8004b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b52:	bf00      	nop
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	e000e100 	.word	0xe000e100

08004b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	6039      	str	r1, [r7, #0]
 8004b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	db0a      	blt.n	8004b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	490c      	ldr	r1, [pc, #48]	; (8004bb0 <__NVIC_SetPriority+0x4c>)
 8004b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b82:	0112      	lsls	r2, r2, #4
 8004b84:	b2d2      	uxtb	r2, r2
 8004b86:	440b      	add	r3, r1
 8004b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b8c:	e00a      	b.n	8004ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	4908      	ldr	r1, [pc, #32]	; (8004bb4 <__NVIC_SetPriority+0x50>)
 8004b94:	79fb      	ldrb	r3, [r7, #7]
 8004b96:	f003 030f 	and.w	r3, r3, #15
 8004b9a:	3b04      	subs	r3, #4
 8004b9c:	0112      	lsls	r2, r2, #4
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	440b      	add	r3, r1
 8004ba2:	761a      	strb	r2, [r3, #24]
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	e000e100 	.word	0xe000e100
 8004bb4:	e000ed00 	.word	0xe000ed00

08004bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b089      	sub	sp, #36	; 0x24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f003 0307 	and.w	r3, r3, #7
 8004bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	f1c3 0307 	rsb	r3, r3, #7
 8004bd2:	2b04      	cmp	r3, #4
 8004bd4:	bf28      	it	cs
 8004bd6:	2304      	movcs	r3, #4
 8004bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	3304      	adds	r3, #4
 8004bde:	2b06      	cmp	r3, #6
 8004be0:	d902      	bls.n	8004be8 <NVIC_EncodePriority+0x30>
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	3b03      	subs	r3, #3
 8004be6:	e000      	b.n	8004bea <NVIC_EncodePriority+0x32>
 8004be8:	2300      	movs	r3, #0
 8004bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bec:	f04f 32ff 	mov.w	r2, #4294967295
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf6:	43da      	mvns	r2, r3
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	401a      	ands	r2, r3
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c00:	f04f 31ff 	mov.w	r1, #4294967295
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	fa01 f303 	lsl.w	r3, r1, r3
 8004c0a:	43d9      	mvns	r1, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c10:	4313      	orrs	r3, r2
         );
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3724      	adds	r7, #36	; 0x24
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
	...

08004c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c30:	d301      	bcc.n	8004c36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c32:	2301      	movs	r3, #1
 8004c34:	e00f      	b.n	8004c56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c36:	4a0a      	ldr	r2, [pc, #40]	; (8004c60 <SysTick_Config+0x40>)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c3e:	210f      	movs	r1, #15
 8004c40:	f04f 30ff 	mov.w	r0, #4294967295
 8004c44:	f7ff ff8e 	bl	8004b64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c48:	4b05      	ldr	r3, [pc, #20]	; (8004c60 <SysTick_Config+0x40>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c4e:	4b04      	ldr	r3, [pc, #16]	; (8004c60 <SysTick_Config+0x40>)
 8004c50:	2207      	movs	r2, #7
 8004c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3708      	adds	r7, #8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	e000e010 	.word	0xe000e010

08004c64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f7ff ff29 	bl	8004ac4 <__NVIC_SetPriorityGrouping>
}
 8004c72:	bf00      	nop
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b086      	sub	sp, #24
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	4603      	mov	r3, r0
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	607a      	str	r2, [r7, #4]
 8004c86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c8c:	f7ff ff3e 	bl	8004b0c <__NVIC_GetPriorityGrouping>
 8004c90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	68b9      	ldr	r1, [r7, #8]
 8004c96:	6978      	ldr	r0, [r7, #20]
 8004c98:	f7ff ff8e 	bl	8004bb8 <NVIC_EncodePriority>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ca2:	4611      	mov	r1, r2
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7ff ff5d 	bl	8004b64 <__NVIC_SetPriority>
}
 8004caa:	bf00      	nop
 8004cac:	3718      	adds	r7, #24
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b082      	sub	sp, #8
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	4603      	mov	r3, r0
 8004cba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7ff ff31 	bl	8004b28 <__NVIC_EnableIRQ>
}
 8004cc6:	bf00      	nop
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b082      	sub	sp, #8
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f7ff ffa2 	bl	8004c20 <SysTick_Config>
 8004cdc:	4603      	mov	r3, r0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b083      	sub	sp, #12
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d004      	beq.n	8004d04 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2280      	movs	r2, #128	; 0x80
 8004cfe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e00c      	b.n	8004d1e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2205      	movs	r2, #5
 8004d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0201 	bic.w	r2, r2, #1
 8004d1a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b083      	sub	sp, #12
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d38:	b2db      	uxtb	r3, r3
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
	...

08004d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b089      	sub	sp, #36	; 0x24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d56:	2300      	movs	r3, #0
 8004d58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61fb      	str	r3, [r7, #28]
 8004d62:	e165      	b.n	8005030 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d64:	2201      	movs	r2, #1
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	4013      	ands	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	f040 8154 	bne.w	800502a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f003 0303 	and.w	r3, r3, #3
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d005      	beq.n	8004d9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d130      	bne.n	8004dfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	2203      	movs	r2, #3
 8004da6:	fa02 f303 	lsl.w	r3, r2, r3
 8004daa:	43db      	mvns	r3, r3
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	4013      	ands	r3, r2
 8004db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd8:	43db      	mvns	r3, r3
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	4013      	ands	r3, r2
 8004dde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	091b      	lsrs	r3, r3, #4
 8004de6:	f003 0201 	and.w	r2, r3, #1
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f003 0303 	and.w	r3, r3, #3
 8004e04:	2b03      	cmp	r3, #3
 8004e06:	d017      	beq.n	8004e38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	2203      	movs	r2, #3
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	43db      	mvns	r3, r3
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f003 0303 	and.w	r3, r3, #3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d123      	bne.n	8004e8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	08da      	lsrs	r2, r3, #3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	3208      	adds	r2, #8
 8004e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	220f      	movs	r2, #15
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	43db      	mvns	r3, r3
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	4013      	ands	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	691a      	ldr	r2, [r3, #16]
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	f003 0307 	and.w	r3, r3, #7
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	fa02 f303 	lsl.w	r3, r2, r3
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	08da      	lsrs	r2, r3, #3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	3208      	adds	r2, #8
 8004e86:	69b9      	ldr	r1, [r7, #24]
 8004e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	2203      	movs	r2, #3
 8004e98:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9c:	43db      	mvns	r3, r3
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f003 0203 	and.w	r2, r3, #3
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 80ae 	beq.w	800502a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60fb      	str	r3, [r7, #12]
 8004ed2:	4b5d      	ldr	r3, [pc, #372]	; (8005048 <HAL_GPIO_Init+0x300>)
 8004ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed6:	4a5c      	ldr	r2, [pc, #368]	; (8005048 <HAL_GPIO_Init+0x300>)
 8004ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004edc:	6453      	str	r3, [r2, #68]	; 0x44
 8004ede:	4b5a      	ldr	r3, [pc, #360]	; (8005048 <HAL_GPIO_Init+0x300>)
 8004ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ee6:	60fb      	str	r3, [r7, #12]
 8004ee8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004eea:	4a58      	ldr	r2, [pc, #352]	; (800504c <HAL_GPIO_Init+0x304>)
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	089b      	lsrs	r3, r3, #2
 8004ef0:	3302      	adds	r3, #2
 8004ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	f003 0303 	and.w	r3, r3, #3
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	220f      	movs	r2, #15
 8004f02:	fa02 f303 	lsl.w	r3, r2, r3
 8004f06:	43db      	mvns	r3, r3
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a4f      	ldr	r2, [pc, #316]	; (8005050 <HAL_GPIO_Init+0x308>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d025      	beq.n	8004f62 <HAL_GPIO_Init+0x21a>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a4e      	ldr	r2, [pc, #312]	; (8005054 <HAL_GPIO_Init+0x30c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d01f      	beq.n	8004f5e <HAL_GPIO_Init+0x216>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a4d      	ldr	r2, [pc, #308]	; (8005058 <HAL_GPIO_Init+0x310>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d019      	beq.n	8004f5a <HAL_GPIO_Init+0x212>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a4c      	ldr	r2, [pc, #304]	; (800505c <HAL_GPIO_Init+0x314>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d013      	beq.n	8004f56 <HAL_GPIO_Init+0x20e>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a4b      	ldr	r2, [pc, #300]	; (8005060 <HAL_GPIO_Init+0x318>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d00d      	beq.n	8004f52 <HAL_GPIO_Init+0x20a>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a4a      	ldr	r2, [pc, #296]	; (8005064 <HAL_GPIO_Init+0x31c>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d007      	beq.n	8004f4e <HAL_GPIO_Init+0x206>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a49      	ldr	r2, [pc, #292]	; (8005068 <HAL_GPIO_Init+0x320>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d101      	bne.n	8004f4a <HAL_GPIO_Init+0x202>
 8004f46:	2306      	movs	r3, #6
 8004f48:	e00c      	b.n	8004f64 <HAL_GPIO_Init+0x21c>
 8004f4a:	2307      	movs	r3, #7
 8004f4c:	e00a      	b.n	8004f64 <HAL_GPIO_Init+0x21c>
 8004f4e:	2305      	movs	r3, #5
 8004f50:	e008      	b.n	8004f64 <HAL_GPIO_Init+0x21c>
 8004f52:	2304      	movs	r3, #4
 8004f54:	e006      	b.n	8004f64 <HAL_GPIO_Init+0x21c>
 8004f56:	2303      	movs	r3, #3
 8004f58:	e004      	b.n	8004f64 <HAL_GPIO_Init+0x21c>
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	e002      	b.n	8004f64 <HAL_GPIO_Init+0x21c>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e000      	b.n	8004f64 <HAL_GPIO_Init+0x21c>
 8004f62:	2300      	movs	r3, #0
 8004f64:	69fa      	ldr	r2, [r7, #28]
 8004f66:	f002 0203 	and.w	r2, r2, #3
 8004f6a:	0092      	lsls	r2, r2, #2
 8004f6c:	4093      	lsls	r3, r2
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f74:	4935      	ldr	r1, [pc, #212]	; (800504c <HAL_GPIO_Init+0x304>)
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	089b      	lsrs	r3, r3, #2
 8004f7a:	3302      	adds	r3, #2
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f82:	4b3a      	ldr	r3, [pc, #232]	; (800506c <HAL_GPIO_Init+0x324>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	43db      	mvns	r3, r3
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	4013      	ands	r3, r2
 8004f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004f9e:	69ba      	ldr	r2, [r7, #24]
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004fa6:	4a31      	ldr	r2, [pc, #196]	; (800506c <HAL_GPIO_Init+0x324>)
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004fac:	4b2f      	ldr	r3, [pc, #188]	; (800506c <HAL_GPIO_Init+0x324>)
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	43db      	mvns	r3, r3
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d003      	beq.n	8004fd0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004fd0:	4a26      	ldr	r2, [pc, #152]	; (800506c <HAL_GPIO_Init+0x324>)
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004fd6:	4b25      	ldr	r3, [pc, #148]	; (800506c <HAL_GPIO_Init+0x324>)
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	43db      	mvns	r3, r3
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004ff2:	69ba      	ldr	r2, [r7, #24]
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ffa:	4a1c      	ldr	r2, [pc, #112]	; (800506c <HAL_GPIO_Init+0x324>)
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005000:	4b1a      	ldr	r3, [pc, #104]	; (800506c <HAL_GPIO_Init+0x324>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	43db      	mvns	r3, r3
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	4013      	ands	r3, r2
 800500e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d003      	beq.n	8005024 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	4313      	orrs	r3, r2
 8005022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005024:	4a11      	ldr	r2, [pc, #68]	; (800506c <HAL_GPIO_Init+0x324>)
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	3301      	adds	r3, #1
 800502e:	61fb      	str	r3, [r7, #28]
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	2b0f      	cmp	r3, #15
 8005034:	f67f ae96 	bls.w	8004d64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005038:	bf00      	nop
 800503a:	bf00      	nop
 800503c:	3724      	adds	r7, #36	; 0x24
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	40023800 	.word	0x40023800
 800504c:	40013800 	.word	0x40013800
 8005050:	40020000 	.word	0x40020000
 8005054:	40020400 	.word	0x40020400
 8005058:	40020800 	.word	0x40020800
 800505c:	40020c00 	.word	0x40020c00
 8005060:	40021000 	.word	0x40021000
 8005064:	40021400 	.word	0x40021400
 8005068:	40021800 	.word	0x40021800
 800506c:	40013c00 	.word	0x40013c00

08005070 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	460b      	mov	r3, r1
 800507a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	691a      	ldr	r2, [r3, #16]
 8005080:	887b      	ldrh	r3, [r7, #2]
 8005082:	4013      	ands	r3, r2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d002      	beq.n	800508e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005088:	2301      	movs	r3, #1
 800508a:	73fb      	strb	r3, [r7, #15]
 800508c:	e001      	b.n	8005092 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800508e:	2300      	movs	r3, #0
 8005090:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005092:	7bfb      	ldrb	r3, [r7, #15]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	460b      	mov	r3, r1
 80050aa:	807b      	strh	r3, [r7, #2]
 80050ac:	4613      	mov	r3, r2
 80050ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050b0:	787b      	ldrb	r3, [r7, #1]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050b6:	887a      	ldrh	r2, [r7, #2]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80050bc:	e003      	b.n	80050c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80050be:	887b      	ldrh	r3, [r7, #2]
 80050c0:	041a      	lsls	r2, r3, #16
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	619a      	str	r2, [r3, #24]
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b085      	sub	sp, #20
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
 80050da:	460b      	mov	r3, r1
 80050dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80050e4:	887a      	ldrh	r2, [r7, #2]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	4013      	ands	r3, r2
 80050ea:	041a      	lsls	r2, r3, #16
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	43d9      	mvns	r1, r3
 80050f0:	887b      	ldrh	r3, [r7, #2]
 80050f2:	400b      	ands	r3, r1
 80050f4:	431a      	orrs	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	619a      	str	r2, [r3, #24]
}
 80050fa:	bf00      	nop
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
	...

08005108 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e12b      	b.n	8005372 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d106      	bne.n	8005134 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7fe fad4 	bl	80036dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2224      	movs	r2, #36	; 0x24
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 0201 	bic.w	r2, r2, #1
 800514a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800515a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800516a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800516c:	f002 fc6a 	bl	8007a44 <HAL_RCC_GetPCLK1Freq>
 8005170:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	4a81      	ldr	r2, [pc, #516]	; (800537c <HAL_I2C_Init+0x274>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d807      	bhi.n	800518c <HAL_I2C_Init+0x84>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	4a80      	ldr	r2, [pc, #512]	; (8005380 <HAL_I2C_Init+0x278>)
 8005180:	4293      	cmp	r3, r2
 8005182:	bf94      	ite	ls
 8005184:	2301      	movls	r3, #1
 8005186:	2300      	movhi	r3, #0
 8005188:	b2db      	uxtb	r3, r3
 800518a:	e006      	b.n	800519a <HAL_I2C_Init+0x92>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4a7d      	ldr	r2, [pc, #500]	; (8005384 <HAL_I2C_Init+0x27c>)
 8005190:	4293      	cmp	r3, r2
 8005192:	bf94      	ite	ls
 8005194:	2301      	movls	r3, #1
 8005196:	2300      	movhi	r3, #0
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d001      	beq.n	80051a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e0e7      	b.n	8005372 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	4a78      	ldr	r2, [pc, #480]	; (8005388 <HAL_I2C_Init+0x280>)
 80051a6:	fba2 2303 	umull	r2, r3, r2, r3
 80051aa:	0c9b      	lsrs	r3, r3, #18
 80051ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	430a      	orrs	r2, r1
 80051c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	4a6a      	ldr	r2, [pc, #424]	; (800537c <HAL_I2C_Init+0x274>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d802      	bhi.n	80051dc <HAL_I2C_Init+0xd4>
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	3301      	adds	r3, #1
 80051da:	e009      	b.n	80051f0 <HAL_I2C_Init+0xe8>
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80051e2:	fb02 f303 	mul.w	r3, r2, r3
 80051e6:	4a69      	ldr	r2, [pc, #420]	; (800538c <HAL_I2C_Init+0x284>)
 80051e8:	fba2 2303 	umull	r2, r3, r2, r3
 80051ec:	099b      	lsrs	r3, r3, #6
 80051ee:	3301      	adds	r3, #1
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	6812      	ldr	r2, [r2, #0]
 80051f4:	430b      	orrs	r3, r1
 80051f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005202:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	495c      	ldr	r1, [pc, #368]	; (800537c <HAL_I2C_Init+0x274>)
 800520c:	428b      	cmp	r3, r1
 800520e:	d819      	bhi.n	8005244 <HAL_I2C_Init+0x13c>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	1e59      	subs	r1, r3, #1
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	fbb1 f3f3 	udiv	r3, r1, r3
 800521e:	1c59      	adds	r1, r3, #1
 8005220:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005224:	400b      	ands	r3, r1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00a      	beq.n	8005240 <HAL_I2C_Init+0x138>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	1e59      	subs	r1, r3, #1
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	005b      	lsls	r3, r3, #1
 8005234:	fbb1 f3f3 	udiv	r3, r1, r3
 8005238:	3301      	adds	r3, #1
 800523a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800523e:	e051      	b.n	80052e4 <HAL_I2C_Init+0x1dc>
 8005240:	2304      	movs	r3, #4
 8005242:	e04f      	b.n	80052e4 <HAL_I2C_Init+0x1dc>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d111      	bne.n	8005270 <HAL_I2C_Init+0x168>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	1e58      	subs	r0, r3, #1
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6859      	ldr	r1, [r3, #4]
 8005254:	460b      	mov	r3, r1
 8005256:	005b      	lsls	r3, r3, #1
 8005258:	440b      	add	r3, r1
 800525a:	fbb0 f3f3 	udiv	r3, r0, r3
 800525e:	3301      	adds	r3, #1
 8005260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005264:	2b00      	cmp	r3, #0
 8005266:	bf0c      	ite	eq
 8005268:	2301      	moveq	r3, #1
 800526a:	2300      	movne	r3, #0
 800526c:	b2db      	uxtb	r3, r3
 800526e:	e012      	b.n	8005296 <HAL_I2C_Init+0x18e>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	1e58      	subs	r0, r3, #1
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6859      	ldr	r1, [r3, #4]
 8005278:	460b      	mov	r3, r1
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	440b      	add	r3, r1
 800527e:	0099      	lsls	r1, r3, #2
 8005280:	440b      	add	r3, r1
 8005282:	fbb0 f3f3 	udiv	r3, r0, r3
 8005286:	3301      	adds	r3, #1
 8005288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800528c:	2b00      	cmp	r3, #0
 800528e:	bf0c      	ite	eq
 8005290:	2301      	moveq	r3, #1
 8005292:	2300      	movne	r3, #0
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <HAL_I2C_Init+0x196>
 800529a:	2301      	movs	r3, #1
 800529c:	e022      	b.n	80052e4 <HAL_I2C_Init+0x1dc>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10e      	bne.n	80052c4 <HAL_I2C_Init+0x1bc>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	1e58      	subs	r0, r3, #1
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6859      	ldr	r1, [r3, #4]
 80052ae:	460b      	mov	r3, r1
 80052b0:	005b      	lsls	r3, r3, #1
 80052b2:	440b      	add	r3, r1
 80052b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80052b8:	3301      	adds	r3, #1
 80052ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052c2:	e00f      	b.n	80052e4 <HAL_I2C_Init+0x1dc>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	1e58      	subs	r0, r3, #1
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6859      	ldr	r1, [r3, #4]
 80052cc:	460b      	mov	r3, r1
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	440b      	add	r3, r1
 80052d2:	0099      	lsls	r1, r3, #2
 80052d4:	440b      	add	r3, r1
 80052d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80052da:	3301      	adds	r3, #1
 80052dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052e4:	6879      	ldr	r1, [r7, #4]
 80052e6:	6809      	ldr	r1, [r1, #0]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69da      	ldr	r2, [r3, #28]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	431a      	orrs	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	430a      	orrs	r2, r1
 8005306:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005312:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	6911      	ldr	r1, [r2, #16]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	68d2      	ldr	r2, [r2, #12]
 800531e:	4311      	orrs	r1, r2
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6812      	ldr	r2, [r2, #0]
 8005324:	430b      	orrs	r3, r1
 8005326:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	695a      	ldr	r2, [r3, #20]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	430a      	orrs	r2, r1
 8005342:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f042 0201 	orr.w	r2, r2, #1
 8005352:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2220      	movs	r2, #32
 800535e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	000186a0 	.word	0x000186a0
 8005380:	001e847f 	.word	0x001e847f
 8005384:	003d08ff 	.word	0x003d08ff
 8005388:	431bde83 	.word	0x431bde83
 800538c:	10624dd3 	.word	0x10624dd3

08005390 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b088      	sub	sp, #32
 8005394:	af02      	add	r7, sp, #8
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	607a      	str	r2, [r7, #4]
 800539a:	461a      	mov	r2, r3
 800539c:	460b      	mov	r3, r1
 800539e:	817b      	strh	r3, [r7, #10]
 80053a0:	4613      	mov	r3, r2
 80053a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053a4:	f7fe fd06 	bl	8003db4 <HAL_GetTick>
 80053a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b20      	cmp	r3, #32
 80053b4:	f040 80e0 	bne.w	8005578 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	2319      	movs	r3, #25
 80053be:	2201      	movs	r2, #1
 80053c0:	4970      	ldr	r1, [pc, #448]	; (8005584 <HAL_I2C_Master_Transmit+0x1f4>)
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f001 ffd0 	bl	8007368 <I2C_WaitOnFlagUntilTimeout>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80053ce:	2302      	movs	r3, #2
 80053d0:	e0d3      	b.n	800557a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d101      	bne.n	80053e0 <HAL_I2C_Master_Transmit+0x50>
 80053dc:	2302      	movs	r3, #2
 80053de:	e0cc      	b.n	800557a <HAL_I2C_Master_Transmit+0x1ea>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d007      	beq.n	8005406 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f042 0201 	orr.w	r2, r2, #1
 8005404:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005414:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2221      	movs	r2, #33	; 0x21
 800541a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2210      	movs	r2, #16
 8005422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	893a      	ldrh	r2, [r7, #8]
 8005436:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800543c:	b29a      	uxth	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	4a50      	ldr	r2, [pc, #320]	; (8005588 <HAL_I2C_Master_Transmit+0x1f8>)
 8005446:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005448:	8979      	ldrh	r1, [r7, #10]
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	6a3a      	ldr	r2, [r7, #32]
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f001 fd92 	bl	8006f78 <I2C_MasterRequestWrite>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d001      	beq.n	800545e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e08d      	b.n	800557a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800545e:	2300      	movs	r3, #0
 8005460:	613b      	str	r3, [r7, #16]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	695b      	ldr	r3, [r3, #20]
 8005468:	613b      	str	r3, [r7, #16]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	613b      	str	r3, [r7, #16]
 8005472:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005474:	e066      	b.n	8005544 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	6a39      	ldr	r1, [r7, #32]
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f002 f84a 	bl	8007514 <I2C_WaitOnTXEFlagUntilTimeout>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00d      	beq.n	80054a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	2b04      	cmp	r3, #4
 800548c:	d107      	bne.n	800549e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800549c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e06b      	b.n	800557a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a6:	781a      	ldrb	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	1c5a      	adds	r2, r3, #1
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054bc:	b29b      	uxth	r3, r3
 80054be:	3b01      	subs	r3, #1
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ca:	3b01      	subs	r3, #1
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	f003 0304 	and.w	r3, r3, #4
 80054dc:	2b04      	cmp	r3, #4
 80054de:	d11b      	bne.n	8005518 <HAL_I2C_Master_Transmit+0x188>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d017      	beq.n	8005518 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	781a      	ldrb	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f8:	1c5a      	adds	r2, r3, #1
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005502:	b29b      	uxth	r3, r3
 8005504:	3b01      	subs	r3, #1
 8005506:	b29a      	uxth	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005510:	3b01      	subs	r3, #1
 8005512:	b29a      	uxth	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	6a39      	ldr	r1, [r7, #32]
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f002 f83a 	bl	8007596 <I2C_WaitOnBTFFlagUntilTimeout>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00d      	beq.n	8005544 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552c:	2b04      	cmp	r3, #4
 800552e:	d107      	bne.n	8005540 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800553e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e01a      	b.n	800557a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005548:	2b00      	cmp	r3, #0
 800554a:	d194      	bne.n	8005476 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800555a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2220      	movs	r2, #32
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005574:	2300      	movs	r3, #0
 8005576:	e000      	b.n	800557a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005578:	2302      	movs	r3, #2
  }
}
 800557a:	4618      	mov	r0, r3
 800557c:	3718      	adds	r7, #24
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	00100002 	.word	0x00100002
 8005588:	ffff0000 	.word	0xffff0000

0800558c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b08c      	sub	sp, #48	; 0x30
 8005590:	af02      	add	r7, sp, #8
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	607a      	str	r2, [r7, #4]
 8005596:	461a      	mov	r2, r3
 8005598:	460b      	mov	r3, r1
 800559a:	817b      	strh	r3, [r7, #10]
 800559c:	4613      	mov	r3, r2
 800559e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80055a0:	f7fe fc08 	bl	8003db4 <HAL_GetTick>
 80055a4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b20      	cmp	r3, #32
 80055b0:	f040 820b 	bne.w	80059ca <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	2319      	movs	r3, #25
 80055ba:	2201      	movs	r2, #1
 80055bc:	497c      	ldr	r1, [pc, #496]	; (80057b0 <HAL_I2C_Master_Receive+0x224>)
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f001 fed2 	bl	8007368 <I2C_WaitOnFlagUntilTimeout>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80055ca:	2302      	movs	r3, #2
 80055cc:	e1fe      	b.n	80059cc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d101      	bne.n	80055dc <HAL_I2C_Master_Receive+0x50>
 80055d8:	2302      	movs	r3, #2
 80055da:	e1f7      	b.n	80059cc <HAL_I2C_Master_Receive+0x440>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d007      	beq.n	8005602 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f042 0201 	orr.w	r2, r2, #1
 8005600:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005610:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2222      	movs	r2, #34	; 0x22
 8005616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2210      	movs	r2, #16
 800561e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	893a      	ldrh	r2, [r7, #8]
 8005632:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005638:	b29a      	uxth	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	4a5c      	ldr	r2, [pc, #368]	; (80057b4 <HAL_I2C_Master_Receive+0x228>)
 8005642:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005644:	8979      	ldrh	r1, [r7, #10]
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f001 fd16 	bl	800707c <I2C_MasterRequestRead>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e1b8      	b.n	80059cc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800565e:	2b00      	cmp	r3, #0
 8005660:	d113      	bne.n	800568a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005662:	2300      	movs	r3, #0
 8005664:	623b      	str	r3, [r7, #32]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	623b      	str	r3, [r7, #32]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	623b      	str	r3, [r7, #32]
 8005676:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	e18c      	b.n	80059a4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800568e:	2b01      	cmp	r3, #1
 8005690:	d11b      	bne.n	80056ca <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056a2:	2300      	movs	r3, #0
 80056a4:	61fb      	str	r3, [r7, #28]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	61fb      	str	r3, [r7, #28]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	61fb      	str	r3, [r7, #28]
 80056b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056c6:	601a      	str	r2, [r3, #0]
 80056c8:	e16c      	b.n	80059a4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d11b      	bne.n	800570a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056f2:	2300      	movs	r3, #0
 80056f4:	61bb      	str	r3, [r7, #24]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	61bb      	str	r3, [r7, #24]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	61bb      	str	r3, [r7, #24]
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	e14c      	b.n	80059a4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005718:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800571a:	2300      	movs	r3, #0
 800571c:	617b      	str	r3, [r7, #20]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	695b      	ldr	r3, [r3, #20]
 8005724:	617b      	str	r3, [r7, #20]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	617b      	str	r3, [r7, #20]
 800572e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005730:	e138      	b.n	80059a4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005736:	2b03      	cmp	r3, #3
 8005738:	f200 80f1 	bhi.w	800591e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005740:	2b01      	cmp	r3, #1
 8005742:	d123      	bne.n	800578c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005746:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f001 ff97 	bl	800767c <I2C_WaitOnRXNEFlagUntilTimeout>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d001      	beq.n	8005758 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e139      	b.n	80059cc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	691a      	ldr	r2, [r3, #16]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005762:	b2d2      	uxtb	r2, r2
 8005764:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576a:	1c5a      	adds	r2, r3, #1
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005774:	3b01      	subs	r3, #1
 8005776:	b29a      	uxth	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005780:	b29b      	uxth	r3, r3
 8005782:	3b01      	subs	r3, #1
 8005784:	b29a      	uxth	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	855a      	strh	r2, [r3, #42]	; 0x2a
 800578a:	e10b      	b.n	80059a4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005790:	2b02      	cmp	r3, #2
 8005792:	d14e      	bne.n	8005832 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579a:	2200      	movs	r2, #0
 800579c:	4906      	ldr	r1, [pc, #24]	; (80057b8 <HAL_I2C_Master_Receive+0x22c>)
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f001 fde2 	bl	8007368 <I2C_WaitOnFlagUntilTimeout>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d008      	beq.n	80057bc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e10e      	b.n	80059cc <HAL_I2C_Master_Receive+0x440>
 80057ae:	bf00      	nop
 80057b0:	00100002 	.word	0x00100002
 80057b4:	ffff0000 	.word	0xffff0000
 80057b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	691a      	ldr	r2, [r3, #16]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	b2d2      	uxtb	r2, r2
 80057d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	1c5a      	adds	r2, r3, #1
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057e8:	3b01      	subs	r3, #1
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	3b01      	subs	r3, #1
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	691a      	ldr	r2, [r3, #16]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005808:	b2d2      	uxtb	r2, r2
 800580a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005810:	1c5a      	adds	r2, r3, #1
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800581a:	3b01      	subs	r3, #1
 800581c:	b29a      	uxth	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005826:	b29b      	uxth	r3, r3
 8005828:	3b01      	subs	r3, #1
 800582a:	b29a      	uxth	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005830:	e0b8      	b.n	80059a4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005838:	2200      	movs	r2, #0
 800583a:	4966      	ldr	r1, [pc, #408]	; (80059d4 <HAL_I2C_Master_Receive+0x448>)
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f001 fd93 	bl	8007368 <I2C_WaitOnFlagUntilTimeout>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d001      	beq.n	800584c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e0bf      	b.n	80059cc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800585a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	691a      	ldr	r2, [r3, #16]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005866:	b2d2      	uxtb	r2, r2
 8005868:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586e:	1c5a      	adds	r2, r3, #1
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005878:	3b01      	subs	r3, #1
 800587a:	b29a      	uxth	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005884:	b29b      	uxth	r3, r3
 8005886:	3b01      	subs	r3, #1
 8005888:	b29a      	uxth	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005894:	2200      	movs	r2, #0
 8005896:	494f      	ldr	r1, [pc, #316]	; (80059d4 <HAL_I2C_Master_Receive+0x448>)
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f001 fd65 	bl	8007368 <I2C_WaitOnFlagUntilTimeout>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d001      	beq.n	80058a8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e091      	b.n	80059cc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	691a      	ldr	r2, [r3, #16]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058d4:	3b01      	subs	r3, #1
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	3b01      	subs	r3, #1
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	691a      	ldr	r2, [r3, #16]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fc:	1c5a      	adds	r2, r3, #1
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005906:	3b01      	subs	r3, #1
 8005908:	b29a      	uxth	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005912:	b29b      	uxth	r3, r3
 8005914:	3b01      	subs	r3, #1
 8005916:	b29a      	uxth	r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800591c:	e042      	b.n	80059a4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800591e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005920:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f001 feaa 	bl	800767c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e04c      	b.n	80059cc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	691a      	ldr	r2, [r3, #16]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593c:	b2d2      	uxtb	r2, r2
 800593e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005944:	1c5a      	adds	r2, r3, #1
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800594e:	3b01      	subs	r3, #1
 8005950:	b29a      	uxth	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800595a:	b29b      	uxth	r3, r3
 800595c:	3b01      	subs	r3, #1
 800595e:	b29a      	uxth	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	f003 0304 	and.w	r3, r3, #4
 800596e:	2b04      	cmp	r3, #4
 8005970:	d118      	bne.n	80059a4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	691a      	ldr	r2, [r3, #16]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597c:	b2d2      	uxtb	r2, r2
 800597e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005984:	1c5a      	adds	r2, r3, #1
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800598e:	3b01      	subs	r3, #1
 8005990:	b29a      	uxth	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800599a:	b29b      	uxth	r3, r3
 800599c:	3b01      	subs	r3, #1
 800599e:	b29a      	uxth	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f47f aec2 	bne.w	8005732 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2220      	movs	r2, #32
 80059b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80059c6:	2300      	movs	r3, #0
 80059c8:	e000      	b.n	80059cc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80059ca:	2302      	movs	r3, #2
  }
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3728      	adds	r7, #40	; 0x28
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	00010004 	.word	0x00010004

080059d8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b088      	sub	sp, #32
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80059e0:	2300      	movs	r3, #0
 80059e2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059f8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a00:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005a02:	7bfb      	ldrb	r3, [r7, #15]
 8005a04:	2b10      	cmp	r3, #16
 8005a06:	d003      	beq.n	8005a10 <HAL_I2C_EV_IRQHandler+0x38>
 8005a08:	7bfb      	ldrb	r3, [r7, #15]
 8005a0a:	2b40      	cmp	r3, #64	; 0x40
 8005a0c:	f040 80c1 	bne.w	8005b92 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10d      	bne.n	8005a46 <HAL_I2C_EV_IRQHandler+0x6e>
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005a30:	d003      	beq.n	8005a3a <HAL_I2C_EV_IRQHandler+0x62>
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005a38:	d101      	bne.n	8005a3e <HAL_I2C_EV_IRQHandler+0x66>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e000      	b.n	8005a40 <HAL_I2C_EV_IRQHandler+0x68>
 8005a3e:	2300      	movs	r3, #0
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	f000 8132 	beq.w	8005caa <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00c      	beq.n	8005a6a <HAL_I2C_EV_IRQHandler+0x92>
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	0a5b      	lsrs	r3, r3, #9
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d006      	beq.n	8005a6a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f001 fe92 	bl	8007786 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 fcdc 	bl	8006420 <I2C_Master_SB>
 8005a68:	e092      	b.n	8005b90 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	08db      	lsrs	r3, r3, #3
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d009      	beq.n	8005a8a <HAL_I2C_EV_IRQHandler+0xb2>
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	0a5b      	lsrs	r3, r3, #9
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fd52 	bl	800652c <I2C_Master_ADD10>
 8005a88:	e082      	b.n	8005b90 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	085b      	lsrs	r3, r3, #1
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d009      	beq.n	8005aaa <HAL_I2C_EV_IRQHandler+0xd2>
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	0a5b      	lsrs	r3, r3, #9
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fd6c 	bl	8006580 <I2C_Master_ADDR>
 8005aa8:	e072      	b.n	8005b90 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	089b      	lsrs	r3, r3, #2
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d03b      	beq.n	8005b2e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ac0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ac4:	f000 80f3 	beq.w	8005cae <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	09db      	lsrs	r3, r3, #7
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00f      	beq.n	8005af4 <HAL_I2C_EV_IRQHandler+0x11c>
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	0a9b      	lsrs	r3, r3, #10
 8005ad8:	f003 0301 	and.w	r3, r3, #1
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d009      	beq.n	8005af4 <HAL_I2C_EV_IRQHandler+0x11c>
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	089b      	lsrs	r3, r3, #2
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d103      	bne.n	8005af4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f94c 	bl	8005d8a <I2C_MasterTransmit_TXE>
 8005af2:	e04d      	b.n	8005b90 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	089b      	lsrs	r3, r3, #2
 8005af8:	f003 0301 	and.w	r3, r3, #1
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f000 80d6 	beq.w	8005cae <HAL_I2C_EV_IRQHandler+0x2d6>
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	0a5b      	lsrs	r3, r3, #9
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f000 80cf 	beq.w	8005cae <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005b10:	7bbb      	ldrb	r3, [r7, #14]
 8005b12:	2b21      	cmp	r3, #33	; 0x21
 8005b14:	d103      	bne.n	8005b1e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f9d3 	bl	8005ec2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b1c:	e0c7      	b.n	8005cae <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005b1e:	7bfb      	ldrb	r3, [r7, #15]
 8005b20:	2b40      	cmp	r3, #64	; 0x40
 8005b22:	f040 80c4 	bne.w	8005cae <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 fa41 	bl	8005fae <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b2c:	e0bf      	b.n	8005cae <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b3c:	f000 80b7 	beq.w	8005cae <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	099b      	lsrs	r3, r3, #6
 8005b44:	f003 0301 	and.w	r3, r3, #1
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00f      	beq.n	8005b6c <HAL_I2C_EV_IRQHandler+0x194>
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	0a9b      	lsrs	r3, r3, #10
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d009      	beq.n	8005b6c <HAL_I2C_EV_IRQHandler+0x194>
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	089b      	lsrs	r3, r3, #2
 8005b5c:	f003 0301 	and.w	r3, r3, #1
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d103      	bne.n	8005b6c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 fab6 	bl	80060d6 <I2C_MasterReceive_RXNE>
 8005b6a:	e011      	b.n	8005b90 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	089b      	lsrs	r3, r3, #2
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 809a 	beq.w	8005cae <HAL_I2C_EV_IRQHandler+0x2d6>
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	0a5b      	lsrs	r3, r3, #9
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f000 8093 	beq.w	8005cae <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 fb5f 	bl	800624c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b8e:	e08e      	b.n	8005cae <HAL_I2C_EV_IRQHandler+0x2d6>
 8005b90:	e08d      	b.n	8005cae <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d004      	beq.n	8005ba4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	61fb      	str	r3, [r7, #28]
 8005ba2:	e007      	b.n	8005bb4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	085b      	lsrs	r3, r3, #1
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d012      	beq.n	8005be6 <HAL_I2C_EV_IRQHandler+0x20e>
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	0a5b      	lsrs	r3, r3, #9
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00c      	beq.n	8005be6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d003      	beq.n	8005bdc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005bdc:	69b9      	ldr	r1, [r7, #24]
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 ff1d 	bl	8006a1e <I2C_Slave_ADDR>
 8005be4:	e066      	b.n	8005cb4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	091b      	lsrs	r3, r3, #4
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d009      	beq.n	8005c06 <HAL_I2C_EV_IRQHandler+0x22e>
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	0a5b      	lsrs	r3, r3, #9
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d003      	beq.n	8005c06 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 ff58 	bl	8006ab4 <I2C_Slave_STOPF>
 8005c04:	e056      	b.n	8005cb4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005c06:	7bbb      	ldrb	r3, [r7, #14]
 8005c08:	2b21      	cmp	r3, #33	; 0x21
 8005c0a:	d002      	beq.n	8005c12 <HAL_I2C_EV_IRQHandler+0x23a>
 8005c0c:	7bbb      	ldrb	r3, [r7, #14]
 8005c0e:	2b29      	cmp	r3, #41	; 0x29
 8005c10:	d125      	bne.n	8005c5e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	09db      	lsrs	r3, r3, #7
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00f      	beq.n	8005c3e <HAL_I2C_EV_IRQHandler+0x266>
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	0a9b      	lsrs	r3, r3, #10
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d009      	beq.n	8005c3e <HAL_I2C_EV_IRQHandler+0x266>
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	089b      	lsrs	r3, r3, #2
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d103      	bne.n	8005c3e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 fe33 	bl	80068a2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c3c:	e039      	b.n	8005cb2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	089b      	lsrs	r3, r3, #2
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d033      	beq.n	8005cb2 <HAL_I2C_EV_IRQHandler+0x2da>
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	0a5b      	lsrs	r3, r3, #9
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d02d      	beq.n	8005cb2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 fe60 	bl	800691c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c5c:	e029      	b.n	8005cb2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	099b      	lsrs	r3, r3, #6
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00f      	beq.n	8005c8a <HAL_I2C_EV_IRQHandler+0x2b2>
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	0a9b      	lsrs	r3, r3, #10
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d009      	beq.n	8005c8a <HAL_I2C_EV_IRQHandler+0x2b2>
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	089b      	lsrs	r3, r3, #2
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d103      	bne.n	8005c8a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 fe6b 	bl	800695e <I2C_SlaveReceive_RXNE>
 8005c88:	e014      	b.n	8005cb4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	089b      	lsrs	r3, r3, #2
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00e      	beq.n	8005cb4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	0a5b      	lsrs	r3, r3, #9
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d008      	beq.n	8005cb4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 fe99 	bl	80069da <I2C_SlaveReceive_BTF>
 8005ca8:	e004      	b.n	8005cb4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005caa:	bf00      	nop
 8005cac:	e002      	b.n	8005cb4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005cae:	bf00      	nop
 8005cb0:	e000      	b.n	8005cb4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005cb2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005cb4:	3720      	adds	r7, #32
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b083      	sub	sp, #12
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005cc2:	bf00      	nop
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b083      	sub	sp, #12
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005cd6:	bf00      	nop
 8005cd8:	370c      	adds	r7, #12
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	b083      	sub	sp, #12
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005cea:	bf00      	nop
 8005cec:	370c      	adds	r7, #12
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b083      	sub	sp, #12
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005cfe:	bf00      	nop
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b083      	sub	sp, #12
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
 8005d12:	460b      	mov	r3, r1
 8005d14:	70fb      	strb	r3, [r7, #3]
 8005d16:	4613      	mov	r3, r2
 8005d18:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005d1a:	bf00      	nop
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr

08005d26 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d26:	b480      	push	{r7}
 8005d28:	b083      	sub	sp, #12
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005d2e:	bf00      	nop
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b083      	sub	sp, #12
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005d42:	bf00      	nop
 8005d44:	370c      	adds	r7, #12
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b083      	sub	sp, #12
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005d56:	bf00      	nop
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b083      	sub	sp, #12
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005d6a:	bf00      	nop
 8005d6c:	370c      	adds	r7, #12
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b083      	sub	sp, #12
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005d7e:	bf00      	nop
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b084      	sub	sp, #16
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d98:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005da0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d150      	bne.n	8005e52 <I2C_MasterTransmit_TXE+0xc8>
 8005db0:	7bfb      	ldrb	r3, [r7, #15]
 8005db2:	2b21      	cmp	r3, #33	; 0x21
 8005db4:	d14d      	bne.n	8005e52 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	2b08      	cmp	r3, #8
 8005dba:	d01d      	beq.n	8005df8 <I2C_MasterTransmit_TXE+0x6e>
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	2b20      	cmp	r3, #32
 8005dc0:	d01a      	beq.n	8005df8 <I2C_MasterTransmit_TXE+0x6e>
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005dc8:	d016      	beq.n	8005df8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	685a      	ldr	r2, [r3, #4]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005dd8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2211      	movs	r2, #17
 8005dde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2220      	movs	r2, #32
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f7ff ff62 	bl	8005cba <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005df6:	e060      	b.n	8005eba <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e06:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e16:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2220      	movs	r2, #32
 8005e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b40      	cmp	r3, #64	; 0x40
 8005e30:	d107      	bne.n	8005e42 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f7ff ff7d 	bl	8005d3a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005e40:	e03b      	b.n	8005eba <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7ff ff35 	bl	8005cba <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005e50:	e033      	b.n	8005eba <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005e52:	7bfb      	ldrb	r3, [r7, #15]
 8005e54:	2b21      	cmp	r3, #33	; 0x21
 8005e56:	d005      	beq.n	8005e64 <I2C_MasterTransmit_TXE+0xda>
 8005e58:	7bbb      	ldrb	r3, [r7, #14]
 8005e5a:	2b40      	cmp	r3, #64	; 0x40
 8005e5c:	d12d      	bne.n	8005eba <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005e5e:	7bfb      	ldrb	r3, [r7, #15]
 8005e60:	2b22      	cmp	r3, #34	; 0x22
 8005e62:	d12a      	bne.n	8005eba <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d108      	bne.n	8005e80 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	685a      	ldr	r2, [r3, #4]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e7c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005e7e:	e01c      	b.n	8005eba <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b40      	cmp	r3, #64	; 0x40
 8005e8a:	d103      	bne.n	8005e94 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 f88e 	bl	8005fae <I2C_MemoryTransmit_TXE_BTF>
}
 8005e92:	e012      	b.n	8005eba <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e98:	781a      	ldrb	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea4:	1c5a      	adds	r2, r3, #1
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005eb8:	e7ff      	b.n	8005eba <I2C_MasterTransmit_TXE+0x130>
 8005eba:	bf00      	nop
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b084      	sub	sp, #16
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ece:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b21      	cmp	r3, #33	; 0x21
 8005eda:	d164      	bne.n	8005fa6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d012      	beq.n	8005f0c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eea:	781a      	ldrb	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	3b01      	subs	r3, #1
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005f0a:	e04c      	b.n	8005fa6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2b08      	cmp	r3, #8
 8005f10:	d01d      	beq.n	8005f4e <I2C_MasterTransmit_BTF+0x8c>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2b20      	cmp	r3, #32
 8005f16:	d01a      	beq.n	8005f4e <I2C_MasterTransmit_BTF+0x8c>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f1e:	d016      	beq.n	8005f4e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f2e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2211      	movs	r2, #17
 8005f34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2220      	movs	r2, #32
 8005f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7ff feb7 	bl	8005cba <HAL_I2C_MasterTxCpltCallback>
}
 8005f4c:	e02b      	b.n	8005fa6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f5c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f6c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2220      	movs	r2, #32
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b40      	cmp	r3, #64	; 0x40
 8005f86:	d107      	bne.n	8005f98 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7ff fed2 	bl	8005d3a <HAL_I2C_MemTxCpltCallback>
}
 8005f96:	e006      	b.n	8005fa6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7ff fe8a 	bl	8005cba <HAL_I2C_MasterTxCpltCallback>
}
 8005fa6:	bf00      	nop
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b084      	sub	sp, #16
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fbc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d11d      	bne.n	8006002 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d10b      	bne.n	8005fe6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fde:	1c9a      	adds	r2, r3, #2
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005fe4:	e073      	b.n	80060ce <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	121b      	asrs	r3, r3, #8
 8005fee:	b2da      	uxtb	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ffa:	1c5a      	adds	r2, r3, #1
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006000:	e065      	b.n	80060ce <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006006:	2b01      	cmp	r3, #1
 8006008:	d10b      	bne.n	8006022 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800600e:	b2da      	uxtb	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800601a:	1c5a      	adds	r2, r3, #1
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006020:	e055      	b.n	80060ce <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006026:	2b02      	cmp	r3, #2
 8006028:	d151      	bne.n	80060ce <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800602a:	7bfb      	ldrb	r3, [r7, #15]
 800602c:	2b22      	cmp	r3, #34	; 0x22
 800602e:	d10d      	bne.n	800604c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800603e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006044:	1c5a      	adds	r2, r3, #1
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	651a      	str	r2, [r3, #80]	; 0x50
}
 800604a:	e040      	b.n	80060ce <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006050:	b29b      	uxth	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d015      	beq.n	8006082 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006056:	7bfb      	ldrb	r3, [r7, #15]
 8006058:	2b21      	cmp	r3, #33	; 0x21
 800605a:	d112      	bne.n	8006082 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006060:	781a      	ldrb	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606c:	1c5a      	adds	r2, r3, #1
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006076:	b29b      	uxth	r3, r3
 8006078:	3b01      	subs	r3, #1
 800607a:	b29a      	uxth	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006080:	e025      	b.n	80060ce <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006086:	b29b      	uxth	r3, r3
 8006088:	2b00      	cmp	r3, #0
 800608a:	d120      	bne.n	80060ce <I2C_MemoryTransmit_TXE_BTF+0x120>
 800608c:	7bfb      	ldrb	r3, [r7, #15]
 800608e:	2b21      	cmp	r3, #33	; 0x21
 8006090:	d11d      	bne.n	80060ce <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80060a0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060b0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2220      	movs	r2, #32
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f7ff fe36 	bl	8005d3a <HAL_I2C_MemTxCpltCallback>
}
 80060ce:	bf00      	nop
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b084      	sub	sp, #16
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b22      	cmp	r3, #34	; 0x22
 80060e8:	f040 80ac 	bne.w	8006244 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2b03      	cmp	r3, #3
 80060f8:	d921      	bls.n	800613e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	691a      	ldr	r2, [r3, #16]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006104:	b2d2      	uxtb	r2, r2
 8006106:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610c:	1c5a      	adds	r2, r3, #1
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006116:	b29b      	uxth	r3, r3
 8006118:	3b01      	subs	r3, #1
 800611a:	b29a      	uxth	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006124:	b29b      	uxth	r3, r3
 8006126:	2b03      	cmp	r3, #3
 8006128:	f040 808c 	bne.w	8006244 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800613a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800613c:	e082      	b.n	8006244 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006142:	2b02      	cmp	r3, #2
 8006144:	d075      	beq.n	8006232 <I2C_MasterReceive_RXNE+0x15c>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d002      	beq.n	8006152 <I2C_MasterReceive_RXNE+0x7c>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d16f      	bne.n	8006232 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f001 fa60 	bl	8007618 <I2C_WaitOnSTOPRequestThroughIT>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d142      	bne.n	80061e4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800616c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800617c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	691a      	ldr	r2, [r3, #16]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006188:	b2d2      	uxtb	r2, r2
 800618a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006190:	1c5a      	adds	r2, r3, #1
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800619a:	b29b      	uxth	r3, r3
 800619c:	3b01      	subs	r3, #1
 800619e:	b29a      	uxth	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2220      	movs	r2, #32
 80061a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b40      	cmp	r3, #64	; 0x40
 80061b6:	d10a      	bne.n	80061ce <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f7ff fdc1 	bl	8005d4e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80061cc:	e03a      	b.n	8006244 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2212      	movs	r2, #18
 80061da:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f7ff fd76 	bl	8005cce <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80061e2:	e02f      	b.n	8006244 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	685a      	ldr	r2, [r3, #4]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061f2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	691a      	ldr	r2, [r3, #16]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fe:	b2d2      	uxtb	r2, r2
 8006200:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006206:	1c5a      	adds	r2, r3, #1
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006210:	b29b      	uxth	r3, r3
 8006212:	3b01      	subs	r3, #1
 8006214:	b29a      	uxth	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2220      	movs	r2, #32
 800621e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7ff fd99 	bl	8005d62 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006230:	e008      	b.n	8006244 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	685a      	ldr	r2, [r3, #4]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006240:	605a      	str	r2, [r3, #4]
}
 8006242:	e7ff      	b.n	8006244 <I2C_MasterReceive_RXNE+0x16e>
 8006244:	bf00      	nop
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006258:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800625e:	b29b      	uxth	r3, r3
 8006260:	2b04      	cmp	r3, #4
 8006262:	d11b      	bne.n	800629c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006272:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	691a      	ldr	r2, [r3, #16]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627e:	b2d2      	uxtb	r2, r2
 8006280:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006286:	1c5a      	adds	r2, r3, #1
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006290:	b29b      	uxth	r3, r3
 8006292:	3b01      	subs	r3, #1
 8006294:	b29a      	uxth	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800629a:	e0bd      	b.n	8006418 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	2b03      	cmp	r3, #3
 80062a4:	d129      	bne.n	80062fa <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062b4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2b04      	cmp	r3, #4
 80062ba:	d00a      	beq.n	80062d2 <I2C_MasterReceive_BTF+0x86>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d007      	beq.n	80062d2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062d0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	691a      	ldr	r2, [r3, #16]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062dc:	b2d2      	uxtb	r2, r2
 80062de:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e4:	1c5a      	adds	r2, r3, #1
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	3b01      	subs	r3, #1
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80062f8:	e08e      	b.n	8006418 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062fe:	b29b      	uxth	r3, r3
 8006300:	2b02      	cmp	r3, #2
 8006302:	d176      	bne.n	80063f2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d002      	beq.n	8006310 <I2C_MasterReceive_BTF+0xc4>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2b10      	cmp	r3, #16
 800630e:	d108      	bne.n	8006322 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	e019      	b.n	8006356 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2b04      	cmp	r3, #4
 8006326:	d002      	beq.n	800632e <I2C_MasterReceive_BTF+0xe2>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2b02      	cmp	r3, #2
 800632c:	d108      	bne.n	8006340 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800633c:	601a      	str	r2, [r3, #0]
 800633e:	e00a      	b.n	8006356 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2b10      	cmp	r3, #16
 8006344:	d007      	beq.n	8006356 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006354:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	691a      	ldr	r2, [r3, #16]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006360:	b2d2      	uxtb	r2, r2
 8006362:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006368:	1c5a      	adds	r2, r3, #1
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006372:	b29b      	uxth	r3, r3
 8006374:	3b01      	subs	r3, #1
 8006376:	b29a      	uxth	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	691a      	ldr	r2, [r3, #16]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006386:	b2d2      	uxtb	r2, r2
 8006388:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006398:	b29b      	uxth	r3, r3
 800639a:	3b01      	subs	r3, #1
 800639c:	b29a      	uxth	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	685a      	ldr	r2, [r3, #4]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80063b0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2220      	movs	r2, #32
 80063b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b40      	cmp	r3, #64	; 0x40
 80063c4:	d10a      	bne.n	80063dc <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f7ff fcba 	bl	8005d4e <HAL_I2C_MemRxCpltCallback>
}
 80063da:	e01d      	b.n	8006418 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2212      	movs	r2, #18
 80063e8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f7ff fc6f 	bl	8005cce <HAL_I2C_MasterRxCpltCallback>
}
 80063f0:	e012      	b.n	8006418 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	691a      	ldr	r2, [r3, #16]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fc:	b2d2      	uxtb	r2, r2
 80063fe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006404:	1c5a      	adds	r2, r3, #1
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800640e:	b29b      	uxth	r3, r3
 8006410:	3b01      	subs	r3, #1
 8006412:	b29a      	uxth	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006418:	bf00      	nop
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800642e:	b2db      	uxtb	r3, r3
 8006430:	2b40      	cmp	r3, #64	; 0x40
 8006432:	d117      	bne.n	8006464 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006438:	2b00      	cmp	r3, #0
 800643a:	d109      	bne.n	8006450 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006440:	b2db      	uxtb	r3, r3
 8006442:	461a      	mov	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800644c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800644e:	e067      	b.n	8006520 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006454:	b2db      	uxtb	r3, r3
 8006456:	f043 0301 	orr.w	r3, r3, #1
 800645a:	b2da      	uxtb	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	611a      	str	r2, [r3, #16]
}
 8006462:	e05d      	b.n	8006520 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800646c:	d133      	bne.n	80064d6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b21      	cmp	r3, #33	; 0x21
 8006478:	d109      	bne.n	800648e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800647e:	b2db      	uxtb	r3, r3
 8006480:	461a      	mov	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800648a:	611a      	str	r2, [r3, #16]
 800648c:	e008      	b.n	80064a0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006492:	b2db      	uxtb	r3, r3
 8006494:	f043 0301 	orr.w	r3, r3, #1
 8006498:	b2da      	uxtb	r2, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d004      	beq.n	80064b2 <I2C_Master_SB+0x92>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d108      	bne.n	80064c4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d032      	beq.n	8006520 <I2C_Master_SB+0x100>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d02d      	beq.n	8006520 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685a      	ldr	r2, [r3, #4]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064d2:	605a      	str	r2, [r3, #4]
}
 80064d4:	e024      	b.n	8006520 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10e      	bne.n	80064fc <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	11db      	asrs	r3, r3, #7
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	f003 0306 	and.w	r3, r3, #6
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	f063 030f 	orn	r3, r3, #15
 80064f2:	b2da      	uxtb	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	611a      	str	r2, [r3, #16]
}
 80064fa:	e011      	b.n	8006520 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006500:	2b01      	cmp	r3, #1
 8006502:	d10d      	bne.n	8006520 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006508:	b29b      	uxth	r3, r3
 800650a:	11db      	asrs	r3, r3, #7
 800650c:	b2db      	uxtb	r3, r3
 800650e:	f003 0306 	and.w	r3, r3, #6
 8006512:	b2db      	uxtb	r3, r3
 8006514:	f063 030e 	orn	r3, r3, #14
 8006518:	b2da      	uxtb	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	611a      	str	r2, [r3, #16]
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006538:	b2da      	uxtb	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006544:	2b00      	cmp	r3, #0
 8006546:	d004      	beq.n	8006552 <I2C_Master_ADD10+0x26>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800654c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800654e:	2b00      	cmp	r3, #0
 8006550:	d108      	bne.n	8006564 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00c      	beq.n	8006574 <I2C_Master_ADD10+0x48>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006560:	2b00      	cmp	r3, #0
 8006562:	d007      	beq.n	8006574 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006572:	605a      	str	r2, [r3, #4]
  }
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006580:	b480      	push	{r7}
 8006582:	b091      	sub	sp, #68	; 0x44
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800658e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006596:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b22      	cmp	r3, #34	; 0x22
 80065a8:	f040 8169 	bne.w	800687e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10f      	bne.n	80065d4 <I2C_Master_ADDR+0x54>
 80065b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80065b8:	2b40      	cmp	r3, #64	; 0x40
 80065ba:	d10b      	bne.n	80065d4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065bc:	2300      	movs	r3, #0
 80065be:	633b      	str	r3, [r7, #48]	; 0x30
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	695b      	ldr	r3, [r3, #20]
 80065c6:	633b      	str	r3, [r7, #48]	; 0x30
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	633b      	str	r3, [r7, #48]	; 0x30
 80065d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d2:	e160      	b.n	8006896 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d11d      	bne.n	8006618 <I2C_Master_ADDR+0x98>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80065e4:	d118      	bne.n	8006618 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065e6:	2300      	movs	r3, #0
 80065e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	695b      	ldr	r3, [r3, #20]
 80065f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800660a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006610:	1c5a      	adds	r2, r3, #1
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	651a      	str	r2, [r3, #80]	; 0x50
 8006616:	e13e      	b.n	8006896 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800661c:	b29b      	uxth	r3, r3
 800661e:	2b00      	cmp	r3, #0
 8006620:	d113      	bne.n	800664a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006622:	2300      	movs	r3, #0
 8006624:	62bb      	str	r3, [r7, #40]	; 0x28
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	62bb      	str	r3, [r7, #40]	; 0x28
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	62bb      	str	r3, [r7, #40]	; 0x28
 8006636:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006646:	601a      	str	r2, [r3, #0]
 8006648:	e115      	b.n	8006876 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800664e:	b29b      	uxth	r3, r3
 8006650:	2b01      	cmp	r3, #1
 8006652:	f040 808a 	bne.w	800676a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006658:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800665c:	d137      	bne.n	80066ce <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800666c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006678:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800667c:	d113      	bne.n	80066a6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800668c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800668e:	2300      	movs	r3, #0
 8006690:	627b      	str	r3, [r7, #36]	; 0x24
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	695b      	ldr	r3, [r3, #20]
 8006698:	627b      	str	r3, [r7, #36]	; 0x24
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	699b      	ldr	r3, [r3, #24]
 80066a0:	627b      	str	r3, [r7, #36]	; 0x24
 80066a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a4:	e0e7      	b.n	8006876 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066a6:	2300      	movs	r3, #0
 80066a8:	623b      	str	r3, [r7, #32]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	623b      	str	r3, [r7, #32]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	623b      	str	r3, [r7, #32]
 80066ba:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066ca:	601a      	str	r2, [r3, #0]
 80066cc:	e0d3      	b.n	8006876 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80066ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d0:	2b08      	cmp	r3, #8
 80066d2:	d02e      	beq.n	8006732 <I2C_Master_ADDR+0x1b2>
 80066d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d6:	2b20      	cmp	r3, #32
 80066d8:	d02b      	beq.n	8006732 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80066da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066dc:	2b12      	cmp	r3, #18
 80066de:	d102      	bne.n	80066e6 <I2C_Master_ADDR+0x166>
 80066e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d125      	bne.n	8006732 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80066e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e8:	2b04      	cmp	r3, #4
 80066ea:	d00e      	beq.n	800670a <I2C_Master_ADDR+0x18a>
 80066ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d00b      	beq.n	800670a <I2C_Master_ADDR+0x18a>
 80066f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f4:	2b10      	cmp	r3, #16
 80066f6:	d008      	beq.n	800670a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006706:	601a      	str	r2, [r3, #0]
 8006708:	e007      	b.n	800671a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006718:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800671a:	2300      	movs	r3, #0
 800671c:	61fb      	str	r3, [r7, #28]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	695b      	ldr	r3, [r3, #20]
 8006724:	61fb      	str	r3, [r7, #28]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	61fb      	str	r3, [r7, #28]
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	e0a1      	b.n	8006876 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006740:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006742:	2300      	movs	r3, #0
 8006744:	61bb      	str	r3, [r7, #24]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	61bb      	str	r3, [r7, #24]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	61bb      	str	r3, [r7, #24]
 8006756:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006766:	601a      	str	r2, [r3, #0]
 8006768:	e085      	b.n	8006876 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800676e:	b29b      	uxth	r3, r3
 8006770:	2b02      	cmp	r3, #2
 8006772:	d14d      	bne.n	8006810 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006776:	2b04      	cmp	r3, #4
 8006778:	d016      	beq.n	80067a8 <I2C_Master_ADDR+0x228>
 800677a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677c:	2b02      	cmp	r3, #2
 800677e:	d013      	beq.n	80067a8 <I2C_Master_ADDR+0x228>
 8006780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006782:	2b10      	cmp	r3, #16
 8006784:	d010      	beq.n	80067a8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006794:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067a4:	601a      	str	r2, [r3, #0]
 80067a6:	e007      	b.n	80067b8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80067b6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067c6:	d117      	bne.n	80067f8 <I2C_Master_ADDR+0x278>
 80067c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80067ce:	d00b      	beq.n	80067e8 <I2C_Master_ADDR+0x268>
 80067d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d008      	beq.n	80067e8 <I2C_Master_ADDR+0x268>
 80067d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d8:	2b08      	cmp	r3, #8
 80067da:	d005      	beq.n	80067e8 <I2C_Master_ADDR+0x268>
 80067dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067de:	2b10      	cmp	r3, #16
 80067e0:	d002      	beq.n	80067e8 <I2C_Master_ADDR+0x268>
 80067e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e4:	2b20      	cmp	r3, #32
 80067e6:	d107      	bne.n	80067f8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	685a      	ldr	r2, [r3, #4]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80067f6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067f8:	2300      	movs	r3, #0
 80067fa:	617b      	str	r3, [r7, #20]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	695b      	ldr	r3, [r3, #20]
 8006802:	617b      	str	r3, [r7, #20]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	699b      	ldr	r3, [r3, #24]
 800680a:	617b      	str	r3, [r7, #20]
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	e032      	b.n	8006876 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800681e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800682a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800682e:	d117      	bne.n	8006860 <I2C_Master_ADDR+0x2e0>
 8006830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006832:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006836:	d00b      	beq.n	8006850 <I2C_Master_ADDR+0x2d0>
 8006838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683a:	2b01      	cmp	r3, #1
 800683c:	d008      	beq.n	8006850 <I2C_Master_ADDR+0x2d0>
 800683e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006840:	2b08      	cmp	r3, #8
 8006842:	d005      	beq.n	8006850 <I2C_Master_ADDR+0x2d0>
 8006844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006846:	2b10      	cmp	r3, #16
 8006848:	d002      	beq.n	8006850 <I2C_Master_ADDR+0x2d0>
 800684a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684c:	2b20      	cmp	r3, #32
 800684e:	d107      	bne.n	8006860 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	685a      	ldr	r2, [r3, #4]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800685e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006860:	2300      	movs	r3, #0
 8006862:	613b      	str	r3, [r7, #16]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	613b      	str	r3, [r7, #16]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	613b      	str	r3, [r7, #16]
 8006874:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800687c:	e00b      	b.n	8006896 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800687e:	2300      	movs	r3, #0
 8006880:	60fb      	str	r3, [r7, #12]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	60fb      	str	r3, [r7, #12]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	60fb      	str	r3, [r7, #12]
 8006892:	68fb      	ldr	r3, [r7, #12]
}
 8006894:	e7ff      	b.n	8006896 <I2C_Master_ADDR+0x316>
 8006896:	bf00      	nop
 8006898:	3744      	adds	r7, #68	; 0x44
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b084      	sub	sp, #16
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068b0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d02b      	beq.n	8006914 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c0:	781a      	ldrb	r2, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068cc:	1c5a      	adds	r2, r3, #1
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	3b01      	subs	r3, #1
 80068da:	b29a      	uxth	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d114      	bne.n	8006914 <I2C_SlaveTransmit_TXE+0x72>
 80068ea:	7bfb      	ldrb	r3, [r7, #15]
 80068ec:	2b29      	cmp	r3, #41	; 0x29
 80068ee:	d111      	bne.n	8006914 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	685a      	ldr	r2, [r3, #4]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068fe:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2221      	movs	r2, #33	; 0x21
 8006904:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2228      	movs	r2, #40	; 0x28
 800690a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7ff f9e7 	bl	8005ce2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006914:	bf00      	nop
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006928:	b29b      	uxth	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d011      	beq.n	8006952 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006932:	781a      	ldrb	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693e:	1c5a      	adds	r2, r3, #1
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006948:	b29b      	uxth	r3, r3
 800694a:	3b01      	subs	r3, #1
 800694c:	b29a      	uxth	r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006952:	bf00      	nop
 8006954:	370c      	adds	r7, #12
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr

0800695e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b084      	sub	sp, #16
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800696c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006972:	b29b      	uxth	r3, r3
 8006974:	2b00      	cmp	r3, #0
 8006976:	d02c      	beq.n	80069d2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	691a      	ldr	r2, [r3, #16]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006982:	b2d2      	uxtb	r2, r2
 8006984:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698a:	1c5a      	adds	r2, r3, #1
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006994:	b29b      	uxth	r3, r3
 8006996:	3b01      	subs	r3, #1
 8006998:	b29a      	uxth	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d114      	bne.n	80069d2 <I2C_SlaveReceive_RXNE+0x74>
 80069a8:	7bfb      	ldrb	r3, [r7, #15]
 80069aa:	2b2a      	cmp	r3, #42	; 0x2a
 80069ac:	d111      	bne.n	80069d2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069bc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2222      	movs	r2, #34	; 0x22
 80069c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2228      	movs	r2, #40	; 0x28
 80069c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f7ff f992 	bl	8005cf6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80069d2:	bf00      	nop
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80069da:	b480      	push	{r7}
 80069dc:	b083      	sub	sp, #12
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d012      	beq.n	8006a12 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	691a      	ldr	r2, [r3, #16]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f6:	b2d2      	uxtb	r2, r2
 80069f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fe:	1c5a      	adds	r2, r3, #1
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	b29a      	uxth	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006a12:	bf00      	nop
 8006a14:	370c      	adds	r7, #12
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr

08006a1e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b084      	sub	sp, #16
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
 8006a26:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006a38:	2b28      	cmp	r3, #40	; 0x28
 8006a3a:	d127      	bne.n	8006a8c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	685a      	ldr	r2, [r3, #4]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a4a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	089b      	lsrs	r3, r3, #2
 8006a50:	f003 0301 	and.w	r3, r3, #1
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	09db      	lsrs	r3, r3, #7
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d103      	bne.n	8006a70 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	81bb      	strh	r3, [r7, #12]
 8006a6e:	e002      	b.n	8006a76 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006a7e:	89ba      	ldrh	r2, [r7, #12]
 8006a80:	7bfb      	ldrb	r3, [r7, #15]
 8006a82:	4619      	mov	r1, r3
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f7ff f940 	bl	8005d0a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006a8a:	e00e      	b.n	8006aaa <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	60bb      	str	r3, [r7, #8]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	695b      	ldr	r3, [r3, #20]
 8006a96:	60bb      	str	r3, [r7, #8]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	60bb      	str	r3, [r7, #8]
 8006aa0:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006aaa:	bf00      	nop
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
	...

08006ab4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ac2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	685a      	ldr	r2, [r3, #4]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ad2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	60bb      	str	r3, [r7, #8]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	60bb      	str	r3, [r7, #8]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f042 0201 	orr.w	r2, r2, #1
 8006aee:	601a      	str	r2, [r3, #0]
 8006af0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b00:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b10:	d172      	bne.n	8006bf8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006b12:	7bfb      	ldrb	r3, [r7, #15]
 8006b14:	2b22      	cmp	r3, #34	; 0x22
 8006b16:	d002      	beq.n	8006b1e <I2C_Slave_STOPF+0x6a>
 8006b18:	7bfb      	ldrb	r3, [r7, #15]
 8006b1a:	2b2a      	cmp	r3, #42	; 0x2a
 8006b1c:	d135      	bne.n	8006b8a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d005      	beq.n	8006b42 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3a:	f043 0204 	orr.w	r2, r3, #4
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b50:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7fe f8e7 	bl	8004d2a <HAL_DMA_GetState>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d049      	beq.n	8006bf6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b66:	4a69      	ldr	r2, [pc, #420]	; (8006d0c <I2C_Slave_STOPF+0x258>)
 8006b68:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fe f8b9 	bl	8004ce6 <HAL_DMA_Abort_IT>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d03d      	beq.n	8006bf6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b84:	4610      	mov	r0, r2
 8006b86:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b88:	e035      	b.n	8006bf6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d005      	beq.n	8006bae <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba6:	f043 0204 	orr.w	r2, r3, #4
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	685a      	ldr	r2, [r3, #4]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bbc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fe f8b1 	bl	8004d2a <HAL_DMA_GetState>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d014      	beq.n	8006bf8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bd2:	4a4e      	ldr	r2, [pc, #312]	; (8006d0c <I2C_Slave_STOPF+0x258>)
 8006bd4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7fe f883 	bl	8004ce6 <HAL_DMA_Abort_IT>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d008      	beq.n	8006bf8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006bf0:	4610      	mov	r0, r2
 8006bf2:	4798      	blx	r3
 8006bf4:	e000      	b.n	8006bf8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006bf6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d03e      	beq.n	8006c80 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	695b      	ldr	r3, [r3, #20]
 8006c08:	f003 0304 	and.w	r3, r3, #4
 8006c0c:	2b04      	cmp	r3, #4
 8006c0e:	d112      	bne.n	8006c36 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	691a      	ldr	r2, [r3, #16]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1a:	b2d2      	uxtb	r2, r2
 8006c1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c22:	1c5a      	adds	r2, r3, #1
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	b29a      	uxth	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	695b      	ldr	r3, [r3, #20]
 8006c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c40:	2b40      	cmp	r3, #64	; 0x40
 8006c42:	d112      	bne.n	8006c6a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	691a      	ldr	r2, [r3, #16]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4e:	b2d2      	uxtb	r2, r2
 8006c50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c56:	1c5a      	adds	r2, r3, #1
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	3b01      	subs	r3, #1
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d005      	beq.n	8006c80 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c78:	f043 0204 	orr.w	r2, r3, #4
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d003      	beq.n	8006c90 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 f843 	bl	8006d14 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006c8e:	e039      	b.n	8006d04 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006c90:	7bfb      	ldrb	r3, [r7, #15]
 8006c92:	2b2a      	cmp	r3, #42	; 0x2a
 8006c94:	d109      	bne.n	8006caa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2228      	movs	r2, #40	; 0x28
 8006ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f7ff f826 	bl	8005cf6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b28      	cmp	r3, #40	; 0x28
 8006cb4:	d111      	bne.n	8006cda <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a15      	ldr	r2, [pc, #84]	; (8006d10 <I2C_Slave_STOPF+0x25c>)
 8006cba:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2220      	movs	r2, #32
 8006cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7ff f827 	bl	8005d26 <HAL_I2C_ListenCpltCallback>
}
 8006cd8:	e014      	b.n	8006d04 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cde:	2b22      	cmp	r3, #34	; 0x22
 8006ce0:	d002      	beq.n	8006ce8 <I2C_Slave_STOPF+0x234>
 8006ce2:	7bfb      	ldrb	r3, [r7, #15]
 8006ce4:	2b22      	cmp	r3, #34	; 0x22
 8006ce6:	d10d      	bne.n	8006d04 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2220      	movs	r2, #32
 8006cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7fe fff9 	bl	8005cf6 <HAL_I2C_SlaveRxCpltCallback>
}
 8006d04:	bf00      	nop
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	08007219 	.word	0x08007219
 8006d10:	ffff0000 	.word	0xffff0000

08006d14 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d22:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d2a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006d2c:	7bbb      	ldrb	r3, [r7, #14]
 8006d2e:	2b10      	cmp	r3, #16
 8006d30:	d002      	beq.n	8006d38 <I2C_ITError+0x24>
 8006d32:	7bbb      	ldrb	r3, [r7, #14]
 8006d34:	2b40      	cmp	r3, #64	; 0x40
 8006d36:	d10a      	bne.n	8006d4e <I2C_ITError+0x3a>
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
 8006d3a:	2b22      	cmp	r3, #34	; 0x22
 8006d3c:	d107      	bne.n	8006d4e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d4c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d4e:	7bfb      	ldrb	r3, [r7, #15]
 8006d50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006d54:	2b28      	cmp	r3, #40	; 0x28
 8006d56:	d107      	bne.n	8006d68 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2228      	movs	r2, #40	; 0x28
 8006d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006d66:	e015      	b.n	8006d94 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d76:	d00a      	beq.n	8006d8e <I2C_ITError+0x7a>
 8006d78:	7bfb      	ldrb	r3, [r7, #15]
 8006d7a:	2b60      	cmp	r3, #96	; 0x60
 8006d7c:	d007      	beq.n	8006d8e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2220      	movs	r2, #32
 8006d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006da2:	d162      	bne.n	8006e6a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	685a      	ldr	r2, [r3, #4]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006db2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d020      	beq.n	8006e04 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dc6:	4a6a      	ldr	r2, [pc, #424]	; (8006f70 <I2C_ITError+0x25c>)
 8006dc8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f7fd ff89 	bl	8004ce6 <HAL_DMA_Abort_IT>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f000 8089 	beq.w	8006eee <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f022 0201 	bic.w	r2, r2, #1
 8006dea:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2220      	movs	r2, #32
 8006df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006dfe:	4610      	mov	r0, r2
 8006e00:	4798      	blx	r3
 8006e02:	e074      	b.n	8006eee <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e08:	4a59      	ldr	r2, [pc, #356]	; (8006f70 <I2C_ITError+0x25c>)
 8006e0a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7fd ff68 	bl	8004ce6 <HAL_DMA_Abort_IT>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d068      	beq.n	8006eee <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e26:	2b40      	cmp	r3, #64	; 0x40
 8006e28:	d10b      	bne.n	8006e42 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	691a      	ldr	r2, [r3, #16]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e34:	b2d2      	uxtb	r2, r2
 8006e36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3c:	1c5a      	adds	r2, r3, #1
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f022 0201 	bic.w	r2, r2, #1
 8006e50:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2220      	movs	r2, #32
 8006e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e64:	4610      	mov	r0, r2
 8006e66:	4798      	blx	r3
 8006e68:	e041      	b.n	8006eee <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b60      	cmp	r3, #96	; 0x60
 8006e74:	d125      	bne.n	8006ec2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2220      	movs	r2, #32
 8006e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e8e:	2b40      	cmp	r3, #64	; 0x40
 8006e90:	d10b      	bne.n	8006eaa <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	691a      	ldr	r2, [r3, #16]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9c:	b2d2      	uxtb	r2, r2
 8006e9e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea4:	1c5a      	adds	r2, r3, #1
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f022 0201 	bic.w	r2, r2, #1
 8006eb8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7fe ff5b 	bl	8005d76 <HAL_I2C_AbortCpltCallback>
 8006ec0:	e015      	b.n	8006eee <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	695b      	ldr	r3, [r3, #20]
 8006ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ecc:	2b40      	cmp	r3, #64	; 0x40
 8006ece:	d10b      	bne.n	8006ee8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	691a      	ldr	r2, [r3, #16]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eda:	b2d2      	uxtb	r2, r2
 8006edc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee2:	1c5a      	adds	r2, r3, #1
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f7fe ff3a 	bl	8005d62 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10e      	bne.n	8006f1c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d109      	bne.n	8006f1c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d104      	bne.n	8006f1c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d007      	beq.n	8006f2c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	685a      	ldr	r2, [r3, #4]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f2a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f32:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f38:	f003 0304 	and.w	r3, r3, #4
 8006f3c:	2b04      	cmp	r3, #4
 8006f3e:	d113      	bne.n	8006f68 <I2C_ITError+0x254>
 8006f40:	7bfb      	ldrb	r3, [r7, #15]
 8006f42:	2b28      	cmp	r3, #40	; 0x28
 8006f44:	d110      	bne.n	8006f68 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a0a      	ldr	r2, [pc, #40]	; (8006f74 <I2C_ITError+0x260>)
 8006f4a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2220      	movs	r2, #32
 8006f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7fe fedf 	bl	8005d26 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006f68:	bf00      	nop
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	08007219 	.word	0x08007219
 8006f74:	ffff0000 	.word	0xffff0000

08006f78 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b088      	sub	sp, #32
 8006f7c:	af02      	add	r7, sp, #8
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	607a      	str	r2, [r7, #4]
 8006f82:	603b      	str	r3, [r7, #0]
 8006f84:	460b      	mov	r3, r1
 8006f86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	2b08      	cmp	r3, #8
 8006f92:	d006      	beq.n	8006fa2 <I2C_MasterRequestWrite+0x2a>
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d003      	beq.n	8006fa2 <I2C_MasterRequestWrite+0x2a>
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006fa0:	d108      	bne.n	8006fb4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fb0:	601a      	str	r2, [r3, #0]
 8006fb2:	e00b      	b.n	8006fcc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb8:	2b12      	cmp	r3, #18
 8006fba:	d107      	bne.n	8006fcc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	9300      	str	r3, [sp, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f000 f9c5 	bl	8007368 <I2C_WaitOnFlagUntilTimeout>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00d      	beq.n	8007000 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ff2:	d103      	bne.n	8006ffc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ffa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e035      	b.n	800706c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007008:	d108      	bne.n	800701c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800700a:	897b      	ldrh	r3, [r7, #10]
 800700c:	b2db      	uxtb	r3, r3
 800700e:	461a      	mov	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007018:	611a      	str	r2, [r3, #16]
 800701a:	e01b      	b.n	8007054 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800701c:	897b      	ldrh	r3, [r7, #10]
 800701e:	11db      	asrs	r3, r3, #7
 8007020:	b2db      	uxtb	r3, r3
 8007022:	f003 0306 	and.w	r3, r3, #6
 8007026:	b2db      	uxtb	r3, r3
 8007028:	f063 030f 	orn	r3, r3, #15
 800702c:	b2da      	uxtb	r2, r3
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	490e      	ldr	r1, [pc, #56]	; (8007074 <I2C_MasterRequestWrite+0xfc>)
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 f9eb 	bl	8007416 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e010      	b.n	800706c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800704a:	897b      	ldrh	r3, [r7, #10]
 800704c:	b2da      	uxtb	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	4907      	ldr	r1, [pc, #28]	; (8007078 <I2C_MasterRequestWrite+0x100>)
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	f000 f9db 	bl	8007416 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d001      	beq.n	800706a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e000      	b.n	800706c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3718      	adds	r7, #24
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	00010008 	.word	0x00010008
 8007078:	00010002 	.word	0x00010002

0800707c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b088      	sub	sp, #32
 8007080:	af02      	add	r7, sp, #8
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	607a      	str	r2, [r7, #4]
 8007086:	603b      	str	r3, [r7, #0]
 8007088:	460b      	mov	r3, r1
 800708a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007090:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80070a0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	2b08      	cmp	r3, #8
 80070a6:	d006      	beq.n	80070b6 <I2C_MasterRequestRead+0x3a>
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d003      	beq.n	80070b6 <I2C_MasterRequestRead+0x3a>
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80070b4:	d108      	bne.n	80070c8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070c4:	601a      	str	r2, [r3, #0]
 80070c6:	e00b      	b.n	80070e0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070cc:	2b11      	cmp	r3, #17
 80070ce:	d107      	bne.n	80070e0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	9300      	str	r3, [sp, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 f93b 	bl	8007368 <I2C_WaitOnFlagUntilTimeout>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00d      	beq.n	8007114 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007106:	d103      	bne.n	8007110 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800710e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e079      	b.n	8007208 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800711c:	d108      	bne.n	8007130 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800711e:	897b      	ldrh	r3, [r7, #10]
 8007120:	b2db      	uxtb	r3, r3
 8007122:	f043 0301 	orr.w	r3, r3, #1
 8007126:	b2da      	uxtb	r2, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	611a      	str	r2, [r3, #16]
 800712e:	e05f      	b.n	80071f0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007130:	897b      	ldrh	r3, [r7, #10]
 8007132:	11db      	asrs	r3, r3, #7
 8007134:	b2db      	uxtb	r3, r3
 8007136:	f003 0306 	and.w	r3, r3, #6
 800713a:	b2db      	uxtb	r3, r3
 800713c:	f063 030f 	orn	r3, r3, #15
 8007140:	b2da      	uxtb	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	4930      	ldr	r1, [pc, #192]	; (8007210 <I2C_MasterRequestRead+0x194>)
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f000 f961 	bl	8007416 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d001      	beq.n	800715e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e054      	b.n	8007208 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800715e:	897b      	ldrh	r3, [r7, #10]
 8007160:	b2da      	uxtb	r2, r3
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	4929      	ldr	r1, [pc, #164]	; (8007214 <I2C_MasterRequestRead+0x198>)
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f000 f951 	bl	8007416 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d001      	beq.n	800717e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e044      	b.n	8007208 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800717e:	2300      	movs	r3, #0
 8007180:	613b      	str	r3, [r7, #16]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	695b      	ldr	r3, [r3, #20]
 8007188:	613b      	str	r3, [r7, #16]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	613b      	str	r3, [r7, #16]
 8007192:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071a2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	f000 f8d9 	bl	8007368 <I2C_WaitOnFlagUntilTimeout>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00d      	beq.n	80071d8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071ca:	d103      	bne.n	80071d4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071d2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80071d4:	2303      	movs	r3, #3
 80071d6:	e017      	b.n	8007208 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80071d8:	897b      	ldrh	r3, [r7, #10]
 80071da:	11db      	asrs	r3, r3, #7
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	f003 0306 	and.w	r3, r3, #6
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	f063 030e 	orn	r3, r3, #14
 80071e8:	b2da      	uxtb	r2, r3
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	4907      	ldr	r1, [pc, #28]	; (8007214 <I2C_MasterRequestRead+0x198>)
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f000 f90d 	bl	8007416 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d001      	beq.n	8007206 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e000      	b.n	8007208 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3718      	adds	r7, #24
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	00010008 	.word	0x00010008
 8007214:	00010002 	.word	0x00010002

08007218 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b086      	sub	sp, #24
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007220:	2300      	movs	r3, #0
 8007222:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007228:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007230:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007232:	4b4b      	ldr	r3, [pc, #300]	; (8007360 <I2C_DMAAbort+0x148>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	08db      	lsrs	r3, r3, #3
 8007238:	4a4a      	ldr	r2, [pc, #296]	; (8007364 <I2C_DMAAbort+0x14c>)
 800723a:	fba2 2303 	umull	r2, r3, r2, r3
 800723e:	0a1a      	lsrs	r2, r3, #8
 8007240:	4613      	mov	r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	4413      	add	r3, r2
 8007246:	00da      	lsls	r2, r3, #3
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d106      	bne.n	8007260 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007256:	f043 0220 	orr.w	r2, r3, #32
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800725e:	e00a      	b.n	8007276 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	3b01      	subs	r3, #1
 8007264:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007274:	d0ea      	beq.n	800724c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800727a:	2b00      	cmp	r3, #0
 800727c:	d003      	beq.n	8007286 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007282:	2200      	movs	r2, #0
 8007284:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728a:	2b00      	cmp	r3, #0
 800728c:	d003      	beq.n	8007296 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007292:	2200      	movs	r2, #0
 8007294:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072a4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	2200      	movs	r2, #0
 80072aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d003      	beq.n	80072bc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072b8:	2200      	movs	r2, #0
 80072ba:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d003      	beq.n	80072cc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c8:	2200      	movs	r2, #0
 80072ca:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f022 0201 	bic.w	r2, r2, #1
 80072da:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	2b60      	cmp	r3, #96	; 0x60
 80072e6:	d10e      	bne.n	8007306 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	2220      	movs	r2, #32
 80072ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	2200      	movs	r2, #0
 80072fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80072fe:	6978      	ldr	r0, [r7, #20]
 8007300:	f7fe fd39 	bl	8005d76 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007304:	e027      	b.n	8007356 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007306:	7cfb      	ldrb	r3, [r7, #19]
 8007308:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800730c:	2b28      	cmp	r3, #40	; 0x28
 800730e:	d117      	bne.n	8007340 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f042 0201 	orr.w	r2, r2, #1
 800731e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800732e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	2200      	movs	r2, #0
 8007334:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	2228      	movs	r2, #40	; 0x28
 800733a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800733e:	e007      	b.n	8007350 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	2220      	movs	r2, #32
 8007344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	2200      	movs	r2, #0
 800734c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007350:	6978      	ldr	r0, [r7, #20]
 8007352:	f7fe fd06 	bl	8005d62 <HAL_I2C_ErrorCallback>
}
 8007356:	bf00      	nop
 8007358:	3718      	adds	r7, #24
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	20000148 	.word	0x20000148
 8007364:	14f8b589 	.word	0x14f8b589

08007368 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	603b      	str	r3, [r7, #0]
 8007374:	4613      	mov	r3, r2
 8007376:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007378:	e025      	b.n	80073c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007380:	d021      	beq.n	80073c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007382:	f7fc fd17 	bl	8003db4 <HAL_GetTick>
 8007386:	4602      	mov	r2, r0
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	683a      	ldr	r2, [r7, #0]
 800738e:	429a      	cmp	r2, r3
 8007390:	d302      	bcc.n	8007398 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d116      	bne.n	80073c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2220      	movs	r2, #32
 80073a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b2:	f043 0220 	orr.w	r2, r3, #32
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e023      	b.n	800740e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	0c1b      	lsrs	r3, r3, #16
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d10d      	bne.n	80073ec <I2C_WaitOnFlagUntilTimeout+0x84>
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	43da      	mvns	r2, r3
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	4013      	ands	r3, r2
 80073dc:	b29b      	uxth	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	bf0c      	ite	eq
 80073e2:	2301      	moveq	r3, #1
 80073e4:	2300      	movne	r3, #0
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	461a      	mov	r2, r3
 80073ea:	e00c      	b.n	8007406 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	699b      	ldr	r3, [r3, #24]
 80073f2:	43da      	mvns	r2, r3
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	4013      	ands	r3, r2
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	bf0c      	ite	eq
 80073fe:	2301      	moveq	r3, #1
 8007400:	2300      	movne	r3, #0
 8007402:	b2db      	uxtb	r3, r3
 8007404:	461a      	mov	r2, r3
 8007406:	79fb      	ldrb	r3, [r7, #7]
 8007408:	429a      	cmp	r2, r3
 800740a:	d0b6      	beq.n	800737a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b084      	sub	sp, #16
 800741a:	af00      	add	r7, sp, #0
 800741c:	60f8      	str	r0, [r7, #12]
 800741e:	60b9      	str	r1, [r7, #8]
 8007420:	607a      	str	r2, [r7, #4]
 8007422:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007424:	e051      	b.n	80074ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	695b      	ldr	r3, [r3, #20]
 800742c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007434:	d123      	bne.n	800747e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007444:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800744e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2220      	movs	r2, #32
 800745a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746a:	f043 0204 	orr.w	r2, r3, #4
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e046      	b.n	800750c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007484:	d021      	beq.n	80074ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007486:	f7fc fc95 	bl	8003db4 <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	429a      	cmp	r2, r3
 8007494:	d302      	bcc.n	800749c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d116      	bne.n	80074ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2200      	movs	r2, #0
 80074a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2220      	movs	r2, #32
 80074a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b6:	f043 0220 	orr.w	r2, r3, #32
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e020      	b.n	800750c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	0c1b      	lsrs	r3, r3, #16
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d10c      	bne.n	80074ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	43da      	mvns	r2, r3
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	4013      	ands	r3, r2
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	bf14      	ite	ne
 80074e6:	2301      	movne	r3, #1
 80074e8:	2300      	moveq	r3, #0
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	e00b      	b.n	8007506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	699b      	ldr	r3, [r3, #24]
 80074f4:	43da      	mvns	r2, r3
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	4013      	ands	r3, r2
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	bf14      	ite	ne
 8007500:	2301      	movne	r3, #1
 8007502:	2300      	moveq	r3, #0
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b00      	cmp	r3, #0
 8007508:	d18d      	bne.n	8007426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007520:	e02d      	b.n	800757e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	f000 f900 	bl	8007728 <I2C_IsAcknowledgeFailed>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d001      	beq.n	8007532 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e02d      	b.n	800758e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007538:	d021      	beq.n	800757e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800753a:	f7fc fc3b 	bl	8003db4 <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	68ba      	ldr	r2, [r7, #8]
 8007546:	429a      	cmp	r2, r3
 8007548:	d302      	bcc.n	8007550 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d116      	bne.n	800757e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2220      	movs	r2, #32
 800755a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756a:	f043 0220 	orr.w	r2, r3, #32
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e007      	b.n	800758e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	695b      	ldr	r3, [r3, #20]
 8007584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007588:	2b80      	cmp	r3, #128	; 0x80
 800758a:	d1ca      	bne.n	8007522 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b084      	sub	sp, #16
 800759a:	af00      	add	r7, sp, #0
 800759c:	60f8      	str	r0, [r7, #12]
 800759e:	60b9      	str	r1, [r7, #8]
 80075a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80075a2:	e02d      	b.n	8007600 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f000 f8bf 	bl	8007728 <I2C_IsAcknowledgeFailed>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d001      	beq.n	80075b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	e02d      	b.n	8007610 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ba:	d021      	beq.n	8007600 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075bc:	f7fc fbfa 	bl	8003db4 <HAL_GetTick>
 80075c0:	4602      	mov	r2, r0
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	68ba      	ldr	r2, [r7, #8]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d302      	bcc.n	80075d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d116      	bne.n	8007600 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2200      	movs	r2, #0
 80075d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2220      	movs	r2, #32
 80075dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ec:	f043 0220 	orr.w	r2, r3, #32
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e007      	b.n	8007610 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	695b      	ldr	r3, [r3, #20]
 8007606:	f003 0304 	and.w	r3, r3, #4
 800760a:	2b04      	cmp	r3, #4
 800760c:	d1ca      	bne.n	80075a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007620:	2300      	movs	r3, #0
 8007622:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007624:	4b13      	ldr	r3, [pc, #76]	; (8007674 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	08db      	lsrs	r3, r3, #3
 800762a:	4a13      	ldr	r2, [pc, #76]	; (8007678 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800762c:	fba2 2303 	umull	r2, r3, r2, r3
 8007630:	0a1a      	lsrs	r2, r3, #8
 8007632:	4613      	mov	r3, r2
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	4413      	add	r3, r2
 8007638:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	3b01      	subs	r3, #1
 800763e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d107      	bne.n	8007656 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764a:	f043 0220 	orr.w	r2, r3, #32
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e008      	b.n	8007668 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007664:	d0e9      	beq.n	800763a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3714      	adds	r7, #20
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr
 8007674:	20000148 	.word	0x20000148
 8007678:	14f8b589 	.word	0x14f8b589

0800767c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007688:	e042      	b.n	8007710 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	695b      	ldr	r3, [r3, #20]
 8007690:	f003 0310 	and.w	r3, r3, #16
 8007694:	2b10      	cmp	r3, #16
 8007696:	d119      	bne.n	80076cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f06f 0210 	mvn.w	r2, #16
 80076a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2220      	movs	r2, #32
 80076ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e029      	b.n	8007720 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076cc:	f7fc fb72 	bl	8003db4 <HAL_GetTick>
 80076d0:	4602      	mov	r2, r0
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	68ba      	ldr	r2, [r7, #8]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d302      	bcc.n	80076e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d116      	bne.n	8007710 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2220      	movs	r2, #32
 80076ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076fc:	f043 0220 	orr.w	r2, r3, #32
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	e007      	b.n	8007720 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	695b      	ldr	r3, [r3, #20]
 8007716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800771a:	2b40      	cmp	r3, #64	; 0x40
 800771c:	d1b5      	bne.n	800768a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3710      	adds	r7, #16
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800773a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800773e:	d11b      	bne.n	8007778 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007748:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2220      	movs	r2, #32
 8007754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007764:	f043 0204 	orr.w	r2, r3, #4
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e000      	b.n	800777a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	370c      	adds	r7, #12
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007786:	b480      	push	{r7}
 8007788:	b083      	sub	sp, #12
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007792:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007796:	d103      	bne.n	80077a0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800779e:	e007      	b.n	80077b0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80077a8:	d102      	bne.n	80077b0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2208      	movs	r2, #8
 80077ae:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d101      	bne.n	80077ce <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e034      	b.n	8007838 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80077d6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f245 5255 	movw	r2, #21845	; 0x5555
 80077e0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	6852      	ldr	r2, [r2, #4]
 80077ea:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	6892      	ldr	r2, [r2, #8]
 80077f4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80077f6:	f7fc fadd 	bl	8003db4 <HAL_GetTick>
 80077fa:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80077fc:	e00f      	b.n	800781e <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80077fe:	f7fc fad9 	bl	8003db4 <HAL_GetTick>
 8007802:	4602      	mov	r2, r0
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	2b31      	cmp	r3, #49	; 0x31
 800780a:	d908      	bls.n	800781e <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	f003 0303 	and.w	r3, r3, #3
 8007816:	2b00      	cmp	r3, #0
 8007818:	d001      	beq.n	800781e <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800781a:	2303      	movs	r3, #3
 800781c:	e00c      	b.n	8007838 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	f003 0303 	and.w	r3, r3, #3
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1e8      	bne.n	80077fe <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8007834:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8007850:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d101      	bne.n	8007874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e0cc      	b.n	8007a0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007874:	4b68      	ldr	r3, [pc, #416]	; (8007a18 <HAL_RCC_ClockConfig+0x1b8>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 030f 	and.w	r3, r3, #15
 800787c:	683a      	ldr	r2, [r7, #0]
 800787e:	429a      	cmp	r2, r3
 8007880:	d90c      	bls.n	800789c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007882:	4b65      	ldr	r3, [pc, #404]	; (8007a18 <HAL_RCC_ClockConfig+0x1b8>)
 8007884:	683a      	ldr	r2, [r7, #0]
 8007886:	b2d2      	uxtb	r2, r2
 8007888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800788a:	4b63      	ldr	r3, [pc, #396]	; (8007a18 <HAL_RCC_ClockConfig+0x1b8>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 030f 	and.w	r3, r3, #15
 8007892:	683a      	ldr	r2, [r7, #0]
 8007894:	429a      	cmp	r2, r3
 8007896:	d001      	beq.n	800789c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	e0b8      	b.n	8007a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 0302 	and.w	r3, r3, #2
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d020      	beq.n	80078ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f003 0304 	and.w	r3, r3, #4
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d005      	beq.n	80078c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80078b4:	4b59      	ldr	r3, [pc, #356]	; (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	4a58      	ldr	r2, [pc, #352]	; (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 80078ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80078be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 0308 	and.w	r3, r3, #8
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d005      	beq.n	80078d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80078cc:	4b53      	ldr	r3, [pc, #332]	; (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	4a52      	ldr	r2, [pc, #328]	; (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 80078d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80078d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078d8:	4b50      	ldr	r3, [pc, #320]	; (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	494d      	ldr	r1, [pc, #308]	; (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 80078e6:	4313      	orrs	r3, r2
 80078e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0301 	and.w	r3, r3, #1
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d044      	beq.n	8007980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d107      	bne.n	800790e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078fe:	4b47      	ldr	r3, [pc, #284]	; (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007906:	2b00      	cmp	r3, #0
 8007908:	d119      	bne.n	800793e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e07f      	b.n	8007a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	2b02      	cmp	r3, #2
 8007914:	d003      	beq.n	800791e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800791a:	2b03      	cmp	r3, #3
 800791c:	d107      	bne.n	800792e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800791e:	4b3f      	ldr	r3, [pc, #252]	; (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007926:	2b00      	cmp	r3, #0
 8007928:	d109      	bne.n	800793e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e06f      	b.n	8007a0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800792e:	4b3b      	ldr	r3, [pc, #236]	; (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f003 0302 	and.w	r3, r3, #2
 8007936:	2b00      	cmp	r3, #0
 8007938:	d101      	bne.n	800793e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e067      	b.n	8007a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800793e:	4b37      	ldr	r3, [pc, #220]	; (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	f023 0203 	bic.w	r2, r3, #3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	4934      	ldr	r1, [pc, #208]	; (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 800794c:	4313      	orrs	r3, r2
 800794e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007950:	f7fc fa30 	bl	8003db4 <HAL_GetTick>
 8007954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007956:	e00a      	b.n	800796e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007958:	f7fc fa2c 	bl	8003db4 <HAL_GetTick>
 800795c:	4602      	mov	r2, r0
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	1ad3      	subs	r3, r2, r3
 8007962:	f241 3288 	movw	r2, #5000	; 0x1388
 8007966:	4293      	cmp	r3, r2
 8007968:	d901      	bls.n	800796e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e04f      	b.n	8007a0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800796e:	4b2b      	ldr	r3, [pc, #172]	; (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	f003 020c 	and.w	r2, r3, #12
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	429a      	cmp	r2, r3
 800797e:	d1eb      	bne.n	8007958 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007980:	4b25      	ldr	r3, [pc, #148]	; (8007a18 <HAL_RCC_ClockConfig+0x1b8>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 030f 	and.w	r3, r3, #15
 8007988:	683a      	ldr	r2, [r7, #0]
 800798a:	429a      	cmp	r2, r3
 800798c:	d20c      	bcs.n	80079a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800798e:	4b22      	ldr	r3, [pc, #136]	; (8007a18 <HAL_RCC_ClockConfig+0x1b8>)
 8007990:	683a      	ldr	r2, [r7, #0]
 8007992:	b2d2      	uxtb	r2, r2
 8007994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007996:	4b20      	ldr	r3, [pc, #128]	; (8007a18 <HAL_RCC_ClockConfig+0x1b8>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 030f 	and.w	r3, r3, #15
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d001      	beq.n	80079a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e032      	b.n	8007a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 0304 	and.w	r3, r3, #4
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d008      	beq.n	80079c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80079b4:	4b19      	ldr	r3, [pc, #100]	; (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	4916      	ldr	r1, [pc, #88]	; (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 80079c2:	4313      	orrs	r3, r2
 80079c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 0308 	and.w	r3, r3, #8
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d009      	beq.n	80079e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80079d2:	4b12      	ldr	r3, [pc, #72]	; (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	00db      	lsls	r3, r3, #3
 80079e0:	490e      	ldr	r1, [pc, #56]	; (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 80079e2:	4313      	orrs	r3, r2
 80079e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80079e6:	f000 fb7f 	bl	80080e8 <HAL_RCC_GetSysClockFreq>
 80079ea:	4602      	mov	r2, r0
 80079ec:	4b0b      	ldr	r3, [pc, #44]	; (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	091b      	lsrs	r3, r3, #4
 80079f2:	f003 030f 	and.w	r3, r3, #15
 80079f6:	490a      	ldr	r1, [pc, #40]	; (8007a20 <HAL_RCC_ClockConfig+0x1c0>)
 80079f8:	5ccb      	ldrb	r3, [r1, r3]
 80079fa:	fa22 f303 	lsr.w	r3, r2, r3
 80079fe:	4a09      	ldr	r2, [pc, #36]	; (8007a24 <HAL_RCC_ClockConfig+0x1c4>)
 8007a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007a02:	4b09      	ldr	r3, [pc, #36]	; (8007a28 <HAL_RCC_ClockConfig+0x1c8>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7fc f990 	bl	8003d2c <HAL_InitTick>

  return HAL_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	40023c00 	.word	0x40023c00
 8007a1c:	40023800 	.word	0x40023800
 8007a20:	0800cae4 	.word	0x0800cae4
 8007a24:	20000148 	.word	0x20000148
 8007a28:	2000014c 	.word	0x2000014c

08007a2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a30:	4b03      	ldr	r3, [pc, #12]	; (8007a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a32:	681b      	ldr	r3, [r3, #0]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop
 8007a40:	20000148 	.word	0x20000148

08007a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007a48:	f7ff fff0 	bl	8007a2c <HAL_RCC_GetHCLKFreq>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	4b05      	ldr	r3, [pc, #20]	; (8007a64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	0a9b      	lsrs	r3, r3, #10
 8007a54:	f003 0307 	and.w	r3, r3, #7
 8007a58:	4903      	ldr	r1, [pc, #12]	; (8007a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a5a:	5ccb      	ldrb	r3, [r1, r3]
 8007a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	40023800 	.word	0x40023800
 8007a68:	0800caf4 	.word	0x0800caf4

08007a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007a70:	f7ff ffdc 	bl	8007a2c <HAL_RCC_GetHCLKFreq>
 8007a74:	4602      	mov	r2, r0
 8007a76:	4b05      	ldr	r3, [pc, #20]	; (8007a8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	0b5b      	lsrs	r3, r3, #13
 8007a7c:	f003 0307 	and.w	r3, r3, #7
 8007a80:	4903      	ldr	r1, [pc, #12]	; (8007a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a82:	5ccb      	ldrb	r3, [r1, r3]
 8007a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	40023800 	.word	0x40023800
 8007a90:	0800caf4 	.word	0x0800caf4

08007a94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b08c      	sub	sp, #48	; 0x30
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8007aac:	2300      	movs	r3, #0
 8007aae:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8007abc:	2300      	movs	r3, #0
 8007abe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 0301 	and.w	r3, r3, #1
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d010      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8007acc:	4b6f      	ldr	r3, [pc, #444]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007ace:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ad2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ada:	496c      	ldr	r1, [pc, #432]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007adc:	4313      	orrs	r3, r2
 8007ade:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d101      	bne.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8007aea:	2301      	movs	r3, #1
 8007aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 0302 	and.w	r3, r3, #2
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d010      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8007afa:	4b64      	ldr	r3, [pc, #400]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b00:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b08:	4960      	ldr	r1, [pc, #384]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d101      	bne.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0304 	and.w	r3, r3, #4
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d017      	beq.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b28:	4b58      	ldr	r3, [pc, #352]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b36:	4955      	ldr	r1, [pc, #340]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b46:	d101      	bne.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d101      	bne.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8007b54:	2301      	movs	r3, #1
 8007b56:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 0308 	and.w	r3, r3, #8
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d017      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007b64:	4b49      	ldr	r3, [pc, #292]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b72:	4946      	ldr	r1, [pc, #280]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007b74:	4313      	orrs	r3, r2
 8007b76:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b82:	d101      	bne.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8007b84:	2301      	movs	r3, #1
 8007b86:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d101      	bne.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8007b90:	2301      	movs	r3, #1
 8007b92:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0320 	and.w	r3, r3, #32
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f000 808a 	beq.w	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	60bb      	str	r3, [r7, #8]
 8007ba6:	4b39      	ldr	r3, [pc, #228]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007baa:	4a38      	ldr	r2, [pc, #224]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8007bb2:	4b36      	ldr	r3, [pc, #216]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bba:	60bb      	str	r3, [r7, #8]
 8007bbc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007bbe:	4b34      	ldr	r3, [pc, #208]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a33      	ldr	r2, [pc, #204]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bc8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007bca:	f7fc f8f3 	bl	8003db4 <HAL_GetTick>
 8007bce:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007bd0:	e008      	b.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007bd2:	f7fc f8ef 	bl	8003db4 <HAL_GetTick>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bda:	1ad3      	subs	r3, r2, r3
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	d901      	bls.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8007be0:	2303      	movs	r3, #3
 8007be2:	e278      	b.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007be4:	4b2a      	ldr	r3, [pc, #168]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d0f0      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007bf0:	4b26      	ldr	r3, [pc, #152]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bf8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007bfa:	6a3b      	ldr	r3, [r7, #32]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d02f      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c08:	6a3a      	ldr	r2, [r7, #32]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d028      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c0e:	4b1f      	ldr	r3, [pc, #124]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c16:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c18:	4b1e      	ldr	r3, [pc, #120]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007c1e:	4b1d      	ldr	r3, [pc, #116]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8007c20:	2200      	movs	r2, #0
 8007c22:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007c24:	4a19      	ldr	r2, [pc, #100]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007c26:	6a3b      	ldr	r3, [r7, #32]
 8007c28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007c2a:	4b18      	ldr	r3, [pc, #96]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c2e:	f003 0301 	and.w	r3, r3, #1
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d114      	bne.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007c36:	f7fc f8bd 	bl	8003db4 <HAL_GetTick>
 8007c3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c3c:	e00a      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c3e:	f7fc f8b9 	bl	8003db4 <HAL_GetTick>
 8007c42:	4602      	mov	r2, r0
 8007c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c46:	1ad3      	subs	r3, r2, r3
 8007c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d901      	bls.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8007c50:	2303      	movs	r3, #3
 8007c52:	e240      	b.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c54:	4b0d      	ldr	r3, [pc, #52]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c58:	f003 0302 	and.w	r3, r3, #2
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d0ee      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c6c:	d114      	bne.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8007c6e:	4b07      	ldr	r3, [pc, #28]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c82:	4902      	ldr	r1, [pc, #8]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007c84:	4313      	orrs	r3, r2
 8007c86:	608b      	str	r3, [r1, #8]
 8007c88:	e00c      	b.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8007c8a:	bf00      	nop
 8007c8c:	40023800 	.word	0x40023800
 8007c90:	40007000 	.word	0x40007000
 8007c94:	42470e40 	.word	0x42470e40
 8007c98:	4b4a      	ldr	r3, [pc, #296]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	4a49      	ldr	r2, [pc, #292]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007c9e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007ca2:	6093      	str	r3, [r2, #8]
 8007ca4:	4b47      	ldr	r3, [pc, #284]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007ca6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cb0:	4944      	ldr	r1, [pc, #272]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 0310 	and.w	r3, r3, #16
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d004      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8007cc8:	4b3f      	ldr	r3, [pc, #252]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8007cca:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00a      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8007cd8:	4b3a      	ldr	r3, [pc, #232]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cde:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ce6:	4937      	ldr	r1, [pc, #220]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00a      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007cfa:	4b32      	ldr	r3, [pc, #200]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d00:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d08:	492e      	ldr	r1, [pc, #184]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d011      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007d1c:	4b29      	ldr	r3, [pc, #164]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d22:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d2a:	4926      	ldr	r1, [pc, #152]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d3a:	d101      	bne.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00a      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8007d4c:	4b1d      	ldr	r3, [pc, #116]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d52:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d5a:	491a      	ldr	r1, [pc, #104]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d011      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8007d6e:	4b15      	ldr	r3, [pc, #84]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d74:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d7c:	4911      	ldr	r1, [pc, #68]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d8c:	d101      	bne.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d005      	beq.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007da0:	f040 80ff 	bne.w	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007da4:	4b09      	ldr	r3, [pc, #36]	; (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007da6:	2200      	movs	r2, #0
 8007da8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007daa:	f7fc f803 	bl	8003db4 <HAL_GetTick>
 8007dae:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007db0:	e00e      	b.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007db2:	f7fb ffff 	bl	8003db4 <HAL_GetTick>
 8007db6:	4602      	mov	r2, r0
 8007db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d907      	bls.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e188      	b.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007dc4:	40023800 	.word	0x40023800
 8007dc8:	424711e0 	.word	0x424711e0
 8007dcc:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007dd0:	4b7e      	ldr	r3, [pc, #504]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1ea      	bne.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 0301 	and.w	r3, r3, #1
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d003      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d009      	beq.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d028      	beq.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d124      	bne.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007e04:	4b71      	ldr	r3, [pc, #452]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e0a:	0c1b      	lsrs	r3, r3, #16
 8007e0c:	f003 0303 	and.w	r3, r3, #3
 8007e10:	3301      	adds	r3, #1
 8007e12:	005b      	lsls	r3, r3, #1
 8007e14:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007e16:	4b6d      	ldr	r3, [pc, #436]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e1c:	0e1b      	lsrs	r3, r3, #24
 8007e1e:	f003 030f 	and.w	r3, r3, #15
 8007e22:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	685a      	ldr	r2, [r3, #4]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	019b      	lsls	r3, r3, #6
 8007e2e:	431a      	orrs	r2, r3
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	085b      	lsrs	r3, r3, #1
 8007e34:	3b01      	subs	r3, #1
 8007e36:	041b      	lsls	r3, r3, #16
 8007e38:	431a      	orrs	r2, r3
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	061b      	lsls	r3, r3, #24
 8007e3e:	431a      	orrs	r2, r3
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	695b      	ldr	r3, [r3, #20]
 8007e44:	071b      	lsls	r3, r3, #28
 8007e46:	4961      	ldr	r1, [pc, #388]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 0304 	and.w	r3, r3, #4
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d004      	beq.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e62:	d00a      	beq.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d035      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e78:	d130      	bne.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007e7a:	4b54      	ldr	r3, [pc, #336]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e80:	0c1b      	lsrs	r3, r3, #16
 8007e82:	f003 0303 	and.w	r3, r3, #3
 8007e86:	3301      	adds	r3, #1
 8007e88:	005b      	lsls	r3, r3, #1
 8007e8a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007e8c:	4b4f      	ldr	r3, [pc, #316]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e92:	0f1b      	lsrs	r3, r3, #28
 8007e94:	f003 0307 	and.w	r3, r3, #7
 8007e98:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	685a      	ldr	r2, [r3, #4]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	019b      	lsls	r3, r3, #6
 8007ea4:	431a      	orrs	r2, r3
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	085b      	lsrs	r3, r3, #1
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	041b      	lsls	r3, r3, #16
 8007eae:	431a      	orrs	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	061b      	lsls	r3, r3, #24
 8007eb6:	431a      	orrs	r2, r3
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	071b      	lsls	r3, r3, #28
 8007ebc:	4943      	ldr	r1, [pc, #268]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007ec4:	4b41      	ldr	r3, [pc, #260]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007ec6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007eca:	f023 021f 	bic.w	r2, r3, #31
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	493d      	ldr	r1, [pc, #244]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d029      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ef0:	d124      	bne.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007ef2:	4b36      	ldr	r3, [pc, #216]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ef8:	0c1b      	lsrs	r3, r3, #16
 8007efa:	f003 0303 	and.w	r3, r3, #3
 8007efe:	3301      	adds	r3, #1
 8007f00:	005b      	lsls	r3, r3, #1
 8007f02:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007f04:	4b31      	ldr	r3, [pc, #196]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f0a:	0f1b      	lsrs	r3, r3, #28
 8007f0c:	f003 0307 	and.w	r3, r3, #7
 8007f10:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	685a      	ldr	r2, [r3, #4]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	019b      	lsls	r3, r3, #6
 8007f1c:	431a      	orrs	r2, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	085b      	lsrs	r3, r3, #1
 8007f24:	3b01      	subs	r3, #1
 8007f26:	041b      	lsls	r3, r3, #16
 8007f28:	431a      	orrs	r2, r3
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	061b      	lsls	r3, r3, #24
 8007f2e:	431a      	orrs	r2, r3
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	071b      	lsls	r3, r3, #28
 8007f34:	4925      	ldr	r1, [pc, #148]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007f36:	4313      	orrs	r3, r2
 8007f38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d016      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	685a      	ldr	r2, [r3, #4]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	019b      	lsls	r3, r3, #6
 8007f52:	431a      	orrs	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	085b      	lsrs	r3, r3, #1
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	041b      	lsls	r3, r3, #16
 8007f5e:	431a      	orrs	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	061b      	lsls	r3, r3, #24
 8007f66:	431a      	orrs	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	695b      	ldr	r3, [r3, #20]
 8007f6c:	071b      	lsls	r3, r3, #28
 8007f6e:	4917      	ldr	r1, [pc, #92]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007f70:	4313      	orrs	r3, r2
 8007f72:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007f76:	4b16      	ldr	r3, [pc, #88]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8007f78:	2201      	movs	r2, #1
 8007f7a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007f7c:	f7fb ff1a 	bl	8003db4 <HAL_GetTick>
 8007f80:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007f82:	e008      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007f84:	f7fb ff16 	bl	8003db4 <HAL_GetTick>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8c:	1ad3      	subs	r3, r2, r3
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d901      	bls.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f92:	2303      	movs	r3, #3
 8007f94:	e09f      	b.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007f96:	4b0d      	ldr	r3, [pc, #52]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d0f0      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8007fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	f040 8095 	bne.w	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007faa:	4b0a      	ldr	r3, [pc, #40]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007fac:	2200      	movs	r2, #0
 8007fae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007fb0:	f7fb ff00 	bl	8003db4 <HAL_GetTick>
 8007fb4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007fb6:	e00f      	b.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007fb8:	f7fb fefc 	bl	8003db4 <HAL_GetTick>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d908      	bls.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	e085      	b.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007fca:	bf00      	nop
 8007fcc:	40023800 	.word	0x40023800
 8007fd0:	42470068 	.word	0x42470068
 8007fd4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007fd8:	4b41      	ldr	r3, [pc, #260]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fe0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fe4:	d0e8      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 0304 	and.w	r3, r3, #4
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d003      	beq.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x566>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d009      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8008002:	2b00      	cmp	r3, #0
 8008004:	d02b      	beq.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800800a:	2b00      	cmp	r3, #0
 800800c:	d127      	bne.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800800e:	4b34      	ldr	r3, [pc, #208]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008014:	0c1b      	lsrs	r3, r3, #16
 8008016:	f003 0303 	and.w	r3, r3, #3
 800801a:	3301      	adds	r3, #1
 800801c:	005b      	lsls	r3, r3, #1
 800801e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	699a      	ldr	r2, [r3, #24]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	69db      	ldr	r3, [r3, #28]
 8008028:	019b      	lsls	r3, r3, #6
 800802a:	431a      	orrs	r2, r3
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	085b      	lsrs	r3, r3, #1
 8008030:	3b01      	subs	r3, #1
 8008032:	041b      	lsls	r3, r3, #16
 8008034:	431a      	orrs	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803a:	061b      	lsls	r3, r3, #24
 800803c:	4928      	ldr	r1, [pc, #160]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800803e:	4313      	orrs	r3, r2
 8008040:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008044:	4b26      	ldr	r3, [pc, #152]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008046:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800804a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008052:	3b01      	subs	r3, #1
 8008054:	021b      	lsls	r3, r3, #8
 8008056:	4922      	ldr	r1, [pc, #136]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008058:	4313      	orrs	r3, r2
 800805a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008066:	2b00      	cmp	r3, #0
 8008068:	d01d      	beq.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800806e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008072:	d118      	bne.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008074:	4b1a      	ldr	r3, [pc, #104]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800807a:	0e1b      	lsrs	r3, r3, #24
 800807c:	f003 030f 	and.w	r3, r3, #15
 8008080:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	699a      	ldr	r2, [r3, #24]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	69db      	ldr	r3, [r3, #28]
 800808a:	019b      	lsls	r3, r3, #6
 800808c:	431a      	orrs	r2, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a1b      	ldr	r3, [r3, #32]
 8008092:	085b      	lsrs	r3, r3, #1
 8008094:	3b01      	subs	r3, #1
 8008096:	041b      	lsls	r3, r3, #16
 8008098:	431a      	orrs	r2, r3
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	061b      	lsls	r3, r3, #24
 800809e:	4910      	ldr	r1, [pc, #64]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80080a0:	4313      	orrs	r3, r2
 80080a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80080a6:	4b0f      	ldr	r3, [pc, #60]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80080a8:	2201      	movs	r2, #1
 80080aa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80080ac:	f7fb fe82 	bl	8003db4 <HAL_GetTick>
 80080b0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80080b2:	e008      	b.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80080b4:	f7fb fe7e 	bl	8003db4 <HAL_GetTick>
 80080b8:	4602      	mov	r2, r0
 80080ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080bc:	1ad3      	subs	r3, r2, r3
 80080be:	2b02      	cmp	r3, #2
 80080c0:	d901      	bls.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80080c2:	2303      	movs	r3, #3
 80080c4:	e007      	b.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80080c6:	4b06      	ldr	r3, [pc, #24]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080d2:	d1ef      	bne.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3730      	adds	r7, #48	; 0x30
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	40023800 	.word	0x40023800
 80080e4:	42470070 	.word	0x42470070

080080e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080ec:	b0ae      	sub	sp, #184	; 0xb8
 80080ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80080f0:	2300      	movs	r3, #0
 80080f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80080f6:	2300      	movs	r3, #0
 80080f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80080fc:	2300      	movs	r3, #0
 80080fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8008102:	2300      	movs	r3, #0
 8008104:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8008108:	2300      	movs	r3, #0
 800810a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800810e:	4bcb      	ldr	r3, [pc, #812]	; (800843c <HAL_RCC_GetSysClockFreq+0x354>)
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	f003 030c 	and.w	r3, r3, #12
 8008116:	2b0c      	cmp	r3, #12
 8008118:	f200 8206 	bhi.w	8008528 <HAL_RCC_GetSysClockFreq+0x440>
 800811c:	a201      	add	r2, pc, #4	; (adr r2, 8008124 <HAL_RCC_GetSysClockFreq+0x3c>)
 800811e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008122:	bf00      	nop
 8008124:	08008159 	.word	0x08008159
 8008128:	08008529 	.word	0x08008529
 800812c:	08008529 	.word	0x08008529
 8008130:	08008529 	.word	0x08008529
 8008134:	08008161 	.word	0x08008161
 8008138:	08008529 	.word	0x08008529
 800813c:	08008529 	.word	0x08008529
 8008140:	08008529 	.word	0x08008529
 8008144:	08008169 	.word	0x08008169
 8008148:	08008529 	.word	0x08008529
 800814c:	08008529 	.word	0x08008529
 8008150:	08008529 	.word	0x08008529
 8008154:	08008359 	.word	0x08008359
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008158:	4bb9      	ldr	r3, [pc, #740]	; (8008440 <HAL_RCC_GetSysClockFreq+0x358>)
 800815a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800815e:	e1e7      	b.n	8008530 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008160:	4bb8      	ldr	r3, [pc, #736]	; (8008444 <HAL_RCC_GetSysClockFreq+0x35c>)
 8008162:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008166:	e1e3      	b.n	8008530 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008168:	4bb4      	ldr	r3, [pc, #720]	; (800843c <HAL_RCC_GetSysClockFreq+0x354>)
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008170:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008174:	4bb1      	ldr	r3, [pc, #708]	; (800843c <HAL_RCC_GetSysClockFreq+0x354>)
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800817c:	2b00      	cmp	r3, #0
 800817e:	d071      	beq.n	8008264 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008180:	4bae      	ldr	r3, [pc, #696]	; (800843c <HAL_RCC_GetSysClockFreq+0x354>)
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	099b      	lsrs	r3, r3, #6
 8008186:	2200      	movs	r2, #0
 8008188:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800818c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8008190:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008198:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800819c:	2300      	movs	r3, #0
 800819e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80081a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80081a6:	4622      	mov	r2, r4
 80081a8:	462b      	mov	r3, r5
 80081aa:	f04f 0000 	mov.w	r0, #0
 80081ae:	f04f 0100 	mov.w	r1, #0
 80081b2:	0159      	lsls	r1, r3, #5
 80081b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80081b8:	0150      	lsls	r0, r2, #5
 80081ba:	4602      	mov	r2, r0
 80081bc:	460b      	mov	r3, r1
 80081be:	4621      	mov	r1, r4
 80081c0:	1a51      	subs	r1, r2, r1
 80081c2:	6439      	str	r1, [r7, #64]	; 0x40
 80081c4:	4629      	mov	r1, r5
 80081c6:	eb63 0301 	sbc.w	r3, r3, r1
 80081ca:	647b      	str	r3, [r7, #68]	; 0x44
 80081cc:	f04f 0200 	mov.w	r2, #0
 80081d0:	f04f 0300 	mov.w	r3, #0
 80081d4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80081d8:	4649      	mov	r1, r9
 80081da:	018b      	lsls	r3, r1, #6
 80081dc:	4641      	mov	r1, r8
 80081de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80081e2:	4641      	mov	r1, r8
 80081e4:	018a      	lsls	r2, r1, #6
 80081e6:	4641      	mov	r1, r8
 80081e8:	1a51      	subs	r1, r2, r1
 80081ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80081ec:	4649      	mov	r1, r9
 80081ee:	eb63 0301 	sbc.w	r3, r3, r1
 80081f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081f4:	f04f 0200 	mov.w	r2, #0
 80081f8:	f04f 0300 	mov.w	r3, #0
 80081fc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8008200:	4649      	mov	r1, r9
 8008202:	00cb      	lsls	r3, r1, #3
 8008204:	4641      	mov	r1, r8
 8008206:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800820a:	4641      	mov	r1, r8
 800820c:	00ca      	lsls	r2, r1, #3
 800820e:	4610      	mov	r0, r2
 8008210:	4619      	mov	r1, r3
 8008212:	4603      	mov	r3, r0
 8008214:	4622      	mov	r2, r4
 8008216:	189b      	adds	r3, r3, r2
 8008218:	633b      	str	r3, [r7, #48]	; 0x30
 800821a:	462b      	mov	r3, r5
 800821c:	460a      	mov	r2, r1
 800821e:	eb42 0303 	adc.w	r3, r2, r3
 8008222:	637b      	str	r3, [r7, #52]	; 0x34
 8008224:	f04f 0200 	mov.w	r2, #0
 8008228:	f04f 0300 	mov.w	r3, #0
 800822c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008230:	4629      	mov	r1, r5
 8008232:	024b      	lsls	r3, r1, #9
 8008234:	4621      	mov	r1, r4
 8008236:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800823a:	4621      	mov	r1, r4
 800823c:	024a      	lsls	r2, r1, #9
 800823e:	4610      	mov	r0, r2
 8008240:	4619      	mov	r1, r3
 8008242:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008246:	2200      	movs	r2, #0
 8008248:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800824c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008250:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008254:	f7f8 f894 	bl	8000380 <__aeabi_uldivmod>
 8008258:	4602      	mov	r2, r0
 800825a:	460b      	mov	r3, r1
 800825c:	4613      	mov	r3, r2
 800825e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008262:	e067      	b.n	8008334 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008264:	4b75      	ldr	r3, [pc, #468]	; (800843c <HAL_RCC_GetSysClockFreq+0x354>)
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	099b      	lsrs	r3, r3, #6
 800826a:	2200      	movs	r2, #0
 800826c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008270:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8008274:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800827c:	67bb      	str	r3, [r7, #120]	; 0x78
 800827e:	2300      	movs	r3, #0
 8008280:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008282:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8008286:	4622      	mov	r2, r4
 8008288:	462b      	mov	r3, r5
 800828a:	f04f 0000 	mov.w	r0, #0
 800828e:	f04f 0100 	mov.w	r1, #0
 8008292:	0159      	lsls	r1, r3, #5
 8008294:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008298:	0150      	lsls	r0, r2, #5
 800829a:	4602      	mov	r2, r0
 800829c:	460b      	mov	r3, r1
 800829e:	4621      	mov	r1, r4
 80082a0:	1a51      	subs	r1, r2, r1
 80082a2:	62b9      	str	r1, [r7, #40]	; 0x28
 80082a4:	4629      	mov	r1, r5
 80082a6:	eb63 0301 	sbc.w	r3, r3, r1
 80082aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082ac:	f04f 0200 	mov.w	r2, #0
 80082b0:	f04f 0300 	mov.w	r3, #0
 80082b4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80082b8:	4649      	mov	r1, r9
 80082ba:	018b      	lsls	r3, r1, #6
 80082bc:	4641      	mov	r1, r8
 80082be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80082c2:	4641      	mov	r1, r8
 80082c4:	018a      	lsls	r2, r1, #6
 80082c6:	4641      	mov	r1, r8
 80082c8:	ebb2 0a01 	subs.w	sl, r2, r1
 80082cc:	4649      	mov	r1, r9
 80082ce:	eb63 0b01 	sbc.w	fp, r3, r1
 80082d2:	f04f 0200 	mov.w	r2, #0
 80082d6:	f04f 0300 	mov.w	r3, #0
 80082da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80082de:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80082e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80082e6:	4692      	mov	sl, r2
 80082e8:	469b      	mov	fp, r3
 80082ea:	4623      	mov	r3, r4
 80082ec:	eb1a 0303 	adds.w	r3, sl, r3
 80082f0:	623b      	str	r3, [r7, #32]
 80082f2:	462b      	mov	r3, r5
 80082f4:	eb4b 0303 	adc.w	r3, fp, r3
 80082f8:	627b      	str	r3, [r7, #36]	; 0x24
 80082fa:	f04f 0200 	mov.w	r2, #0
 80082fe:	f04f 0300 	mov.w	r3, #0
 8008302:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8008306:	4629      	mov	r1, r5
 8008308:	028b      	lsls	r3, r1, #10
 800830a:	4621      	mov	r1, r4
 800830c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008310:	4621      	mov	r1, r4
 8008312:	028a      	lsls	r2, r1, #10
 8008314:	4610      	mov	r0, r2
 8008316:	4619      	mov	r1, r3
 8008318:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800831c:	2200      	movs	r2, #0
 800831e:	673b      	str	r3, [r7, #112]	; 0x70
 8008320:	677a      	str	r2, [r7, #116]	; 0x74
 8008322:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008326:	f7f8 f82b 	bl	8000380 <__aeabi_uldivmod>
 800832a:	4602      	mov	r2, r0
 800832c:	460b      	mov	r3, r1
 800832e:	4613      	mov	r3, r2
 8008330:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008334:	4b41      	ldr	r3, [pc, #260]	; (800843c <HAL_RCC_GetSysClockFreq+0x354>)
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	0c1b      	lsrs	r3, r3, #16
 800833a:	f003 0303 	and.w	r3, r3, #3
 800833e:	3301      	adds	r3, #1
 8008340:	005b      	lsls	r3, r3, #1
 8008342:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8008346:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800834a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800834e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008352:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008356:	e0eb      	b.n	8008530 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008358:	4b38      	ldr	r3, [pc, #224]	; (800843c <HAL_RCC_GetSysClockFreq+0x354>)
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008360:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008364:	4b35      	ldr	r3, [pc, #212]	; (800843c <HAL_RCC_GetSysClockFreq+0x354>)
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800836c:	2b00      	cmp	r3, #0
 800836e:	d06b      	beq.n	8008448 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008370:	4b32      	ldr	r3, [pc, #200]	; (800843c <HAL_RCC_GetSysClockFreq+0x354>)
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	099b      	lsrs	r3, r3, #6
 8008376:	2200      	movs	r2, #0
 8008378:	66bb      	str	r3, [r7, #104]	; 0x68
 800837a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800837c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800837e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008382:	663b      	str	r3, [r7, #96]	; 0x60
 8008384:	2300      	movs	r3, #0
 8008386:	667b      	str	r3, [r7, #100]	; 0x64
 8008388:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800838c:	4622      	mov	r2, r4
 800838e:	462b      	mov	r3, r5
 8008390:	f04f 0000 	mov.w	r0, #0
 8008394:	f04f 0100 	mov.w	r1, #0
 8008398:	0159      	lsls	r1, r3, #5
 800839a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800839e:	0150      	lsls	r0, r2, #5
 80083a0:	4602      	mov	r2, r0
 80083a2:	460b      	mov	r3, r1
 80083a4:	4621      	mov	r1, r4
 80083a6:	1a51      	subs	r1, r2, r1
 80083a8:	61b9      	str	r1, [r7, #24]
 80083aa:	4629      	mov	r1, r5
 80083ac:	eb63 0301 	sbc.w	r3, r3, r1
 80083b0:	61fb      	str	r3, [r7, #28]
 80083b2:	f04f 0200 	mov.w	r2, #0
 80083b6:	f04f 0300 	mov.w	r3, #0
 80083ba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80083be:	4659      	mov	r1, fp
 80083c0:	018b      	lsls	r3, r1, #6
 80083c2:	4651      	mov	r1, sl
 80083c4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80083c8:	4651      	mov	r1, sl
 80083ca:	018a      	lsls	r2, r1, #6
 80083cc:	4651      	mov	r1, sl
 80083ce:	ebb2 0801 	subs.w	r8, r2, r1
 80083d2:	4659      	mov	r1, fp
 80083d4:	eb63 0901 	sbc.w	r9, r3, r1
 80083d8:	f04f 0200 	mov.w	r2, #0
 80083dc:	f04f 0300 	mov.w	r3, #0
 80083e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80083e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80083e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80083ec:	4690      	mov	r8, r2
 80083ee:	4699      	mov	r9, r3
 80083f0:	4623      	mov	r3, r4
 80083f2:	eb18 0303 	adds.w	r3, r8, r3
 80083f6:	613b      	str	r3, [r7, #16]
 80083f8:	462b      	mov	r3, r5
 80083fa:	eb49 0303 	adc.w	r3, r9, r3
 80083fe:	617b      	str	r3, [r7, #20]
 8008400:	f04f 0200 	mov.w	r2, #0
 8008404:	f04f 0300 	mov.w	r3, #0
 8008408:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800840c:	4629      	mov	r1, r5
 800840e:	024b      	lsls	r3, r1, #9
 8008410:	4621      	mov	r1, r4
 8008412:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008416:	4621      	mov	r1, r4
 8008418:	024a      	lsls	r2, r1, #9
 800841a:	4610      	mov	r0, r2
 800841c:	4619      	mov	r1, r3
 800841e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008422:	2200      	movs	r2, #0
 8008424:	65bb      	str	r3, [r7, #88]	; 0x58
 8008426:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008428:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800842c:	f7f7 ffa8 	bl	8000380 <__aeabi_uldivmod>
 8008430:	4602      	mov	r2, r0
 8008432:	460b      	mov	r3, r1
 8008434:	4613      	mov	r3, r2
 8008436:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800843a:	e065      	b.n	8008508 <HAL_RCC_GetSysClockFreq+0x420>
 800843c:	40023800 	.word	0x40023800
 8008440:	00f42400 	.word	0x00f42400
 8008444:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008448:	4b3d      	ldr	r3, [pc, #244]	; (8008540 <HAL_RCC_GetSysClockFreq+0x458>)
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	099b      	lsrs	r3, r3, #6
 800844e:	2200      	movs	r2, #0
 8008450:	4618      	mov	r0, r3
 8008452:	4611      	mov	r1, r2
 8008454:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008458:	653b      	str	r3, [r7, #80]	; 0x50
 800845a:	2300      	movs	r3, #0
 800845c:	657b      	str	r3, [r7, #84]	; 0x54
 800845e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8008462:	4642      	mov	r2, r8
 8008464:	464b      	mov	r3, r9
 8008466:	f04f 0000 	mov.w	r0, #0
 800846a:	f04f 0100 	mov.w	r1, #0
 800846e:	0159      	lsls	r1, r3, #5
 8008470:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008474:	0150      	lsls	r0, r2, #5
 8008476:	4602      	mov	r2, r0
 8008478:	460b      	mov	r3, r1
 800847a:	4641      	mov	r1, r8
 800847c:	1a51      	subs	r1, r2, r1
 800847e:	60b9      	str	r1, [r7, #8]
 8008480:	4649      	mov	r1, r9
 8008482:	eb63 0301 	sbc.w	r3, r3, r1
 8008486:	60fb      	str	r3, [r7, #12]
 8008488:	f04f 0200 	mov.w	r2, #0
 800848c:	f04f 0300 	mov.w	r3, #0
 8008490:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008494:	4659      	mov	r1, fp
 8008496:	018b      	lsls	r3, r1, #6
 8008498:	4651      	mov	r1, sl
 800849a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800849e:	4651      	mov	r1, sl
 80084a0:	018a      	lsls	r2, r1, #6
 80084a2:	4651      	mov	r1, sl
 80084a4:	1a54      	subs	r4, r2, r1
 80084a6:	4659      	mov	r1, fp
 80084a8:	eb63 0501 	sbc.w	r5, r3, r1
 80084ac:	f04f 0200 	mov.w	r2, #0
 80084b0:	f04f 0300 	mov.w	r3, #0
 80084b4:	00eb      	lsls	r3, r5, #3
 80084b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084ba:	00e2      	lsls	r2, r4, #3
 80084bc:	4614      	mov	r4, r2
 80084be:	461d      	mov	r5, r3
 80084c0:	4643      	mov	r3, r8
 80084c2:	18e3      	adds	r3, r4, r3
 80084c4:	603b      	str	r3, [r7, #0]
 80084c6:	464b      	mov	r3, r9
 80084c8:	eb45 0303 	adc.w	r3, r5, r3
 80084cc:	607b      	str	r3, [r7, #4]
 80084ce:	f04f 0200 	mov.w	r2, #0
 80084d2:	f04f 0300 	mov.w	r3, #0
 80084d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80084da:	4629      	mov	r1, r5
 80084dc:	028b      	lsls	r3, r1, #10
 80084de:	4621      	mov	r1, r4
 80084e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80084e4:	4621      	mov	r1, r4
 80084e6:	028a      	lsls	r2, r1, #10
 80084e8:	4610      	mov	r0, r2
 80084ea:	4619      	mov	r1, r3
 80084ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084f0:	2200      	movs	r2, #0
 80084f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80084f4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80084f6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80084fa:	f7f7 ff41 	bl	8000380 <__aeabi_uldivmod>
 80084fe:	4602      	mov	r2, r0
 8008500:	460b      	mov	r3, r1
 8008502:	4613      	mov	r3, r2
 8008504:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008508:	4b0d      	ldr	r3, [pc, #52]	; (8008540 <HAL_RCC_GetSysClockFreq+0x458>)
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	0f1b      	lsrs	r3, r3, #28
 800850e:	f003 0307 	and.w	r3, r3, #7
 8008512:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8008516:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800851a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800851e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008522:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008526:	e003      	b.n	8008530 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008528:	4b06      	ldr	r3, [pc, #24]	; (8008544 <HAL_RCC_GetSysClockFreq+0x45c>)
 800852a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800852e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008530:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8008534:	4618      	mov	r0, r3
 8008536:	37b8      	adds	r7, #184	; 0xb8
 8008538:	46bd      	mov	sp, r7
 800853a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800853e:	bf00      	nop
 8008540:	40023800 	.word	0x40023800
 8008544:	00f42400 	.word	0x00f42400

08008548 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b086      	sub	sp, #24
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d101      	bne.n	800855a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	e28d      	b.n	8008a76 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 0301 	and.w	r3, r3, #1
 8008562:	2b00      	cmp	r3, #0
 8008564:	f000 8083 	beq.w	800866e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008568:	4b94      	ldr	r3, [pc, #592]	; (80087bc <HAL_RCC_OscConfig+0x274>)
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	f003 030c 	and.w	r3, r3, #12
 8008570:	2b04      	cmp	r3, #4
 8008572:	d019      	beq.n	80085a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008574:	4b91      	ldr	r3, [pc, #580]	; (80087bc <HAL_RCC_OscConfig+0x274>)
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800857c:	2b08      	cmp	r3, #8
 800857e:	d106      	bne.n	800858e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008580:	4b8e      	ldr	r3, [pc, #568]	; (80087bc <HAL_RCC_OscConfig+0x274>)
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008588:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800858c:	d00c      	beq.n	80085a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800858e:	4b8b      	ldr	r3, [pc, #556]	; (80087bc <HAL_RCC_OscConfig+0x274>)
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008596:	2b0c      	cmp	r3, #12
 8008598:	d112      	bne.n	80085c0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800859a:	4b88      	ldr	r3, [pc, #544]	; (80087bc <HAL_RCC_OscConfig+0x274>)
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085a6:	d10b      	bne.n	80085c0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085a8:	4b84      	ldr	r3, [pc, #528]	; (80087bc <HAL_RCC_OscConfig+0x274>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d05b      	beq.n	800866c <HAL_RCC_OscConfig+0x124>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d157      	bne.n	800866c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	e25a      	b.n	8008a76 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085c8:	d106      	bne.n	80085d8 <HAL_RCC_OscConfig+0x90>
 80085ca:	4b7c      	ldr	r3, [pc, #496]	; (80087bc <HAL_RCC_OscConfig+0x274>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a7b      	ldr	r2, [pc, #492]	; (80087bc <HAL_RCC_OscConfig+0x274>)
 80085d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085d4:	6013      	str	r3, [r2, #0]
 80085d6:	e01d      	b.n	8008614 <HAL_RCC_OscConfig+0xcc>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80085e0:	d10c      	bne.n	80085fc <HAL_RCC_OscConfig+0xb4>
 80085e2:	4b76      	ldr	r3, [pc, #472]	; (80087bc <HAL_RCC_OscConfig+0x274>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a75      	ldr	r2, [pc, #468]	; (80087bc <HAL_RCC_OscConfig+0x274>)
 80085e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80085ec:	6013      	str	r3, [r2, #0]
 80085ee:	4b73      	ldr	r3, [pc, #460]	; (80087bc <HAL_RCC_OscConfig+0x274>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a72      	ldr	r2, [pc, #456]	; (80087bc <HAL_RCC_OscConfig+0x274>)
 80085f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085f8:	6013      	str	r3, [r2, #0]
 80085fa:	e00b      	b.n	8008614 <HAL_RCC_OscConfig+0xcc>
 80085fc:	4b6f      	ldr	r3, [pc, #444]	; (80087bc <HAL_RCC_OscConfig+0x274>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a6e      	ldr	r2, [pc, #440]	; (80087bc <HAL_RCC_OscConfig+0x274>)
 8008602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008606:	6013      	str	r3, [r2, #0]
 8008608:	4b6c      	ldr	r3, [pc, #432]	; (80087bc <HAL_RCC_OscConfig+0x274>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a6b      	ldr	r2, [pc, #428]	; (80087bc <HAL_RCC_OscConfig+0x274>)
 800860e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d013      	beq.n	8008644 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800861c:	f7fb fbca 	bl	8003db4 <HAL_GetTick>
 8008620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008622:	e008      	b.n	8008636 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008624:	f7fb fbc6 	bl	8003db4 <HAL_GetTick>
 8008628:	4602      	mov	r2, r0
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	1ad3      	subs	r3, r2, r3
 800862e:	2b64      	cmp	r3, #100	; 0x64
 8008630:	d901      	bls.n	8008636 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008632:	2303      	movs	r3, #3
 8008634:	e21f      	b.n	8008a76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008636:	4b61      	ldr	r3, [pc, #388]	; (80087bc <HAL_RCC_OscConfig+0x274>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800863e:	2b00      	cmp	r3, #0
 8008640:	d0f0      	beq.n	8008624 <HAL_RCC_OscConfig+0xdc>
 8008642:	e014      	b.n	800866e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008644:	f7fb fbb6 	bl	8003db4 <HAL_GetTick>
 8008648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800864a:	e008      	b.n	800865e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800864c:	f7fb fbb2 	bl	8003db4 <HAL_GetTick>
 8008650:	4602      	mov	r2, r0
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	1ad3      	subs	r3, r2, r3
 8008656:	2b64      	cmp	r3, #100	; 0x64
 8008658:	d901      	bls.n	800865e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800865a:	2303      	movs	r3, #3
 800865c:	e20b      	b.n	8008a76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800865e:	4b57      	ldr	r3, [pc, #348]	; (80087bc <HAL_RCC_OscConfig+0x274>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1f0      	bne.n	800864c <HAL_RCC_OscConfig+0x104>
 800866a:	e000      	b.n	800866e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800866c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 0302 	and.w	r3, r3, #2
 8008676:	2b00      	cmp	r3, #0
 8008678:	d06f      	beq.n	800875a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800867a:	4b50      	ldr	r3, [pc, #320]	; (80087bc <HAL_RCC_OscConfig+0x274>)
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	f003 030c 	and.w	r3, r3, #12
 8008682:	2b00      	cmp	r3, #0
 8008684:	d017      	beq.n	80086b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008686:	4b4d      	ldr	r3, [pc, #308]	; (80087bc <HAL_RCC_OscConfig+0x274>)
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800868e:	2b08      	cmp	r3, #8
 8008690:	d105      	bne.n	800869e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008692:	4b4a      	ldr	r3, [pc, #296]	; (80087bc <HAL_RCC_OscConfig+0x274>)
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00b      	beq.n	80086b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800869e:	4b47      	ldr	r3, [pc, #284]	; (80087bc <HAL_RCC_OscConfig+0x274>)
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80086a6:	2b0c      	cmp	r3, #12
 80086a8:	d11c      	bne.n	80086e4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80086aa:	4b44      	ldr	r3, [pc, #272]	; (80087bc <HAL_RCC_OscConfig+0x274>)
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d116      	bne.n	80086e4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086b6:	4b41      	ldr	r3, [pc, #260]	; (80087bc <HAL_RCC_OscConfig+0x274>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f003 0302 	and.w	r3, r3, #2
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d005      	beq.n	80086ce <HAL_RCC_OscConfig+0x186>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d001      	beq.n	80086ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	e1d3      	b.n	8008a76 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086ce:	4b3b      	ldr	r3, [pc, #236]	; (80087bc <HAL_RCC_OscConfig+0x274>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	00db      	lsls	r3, r3, #3
 80086dc:	4937      	ldr	r1, [pc, #220]	; (80087bc <HAL_RCC_OscConfig+0x274>)
 80086de:	4313      	orrs	r3, r2
 80086e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086e2:	e03a      	b.n	800875a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d020      	beq.n	800872e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80086ec:	4b34      	ldr	r3, [pc, #208]	; (80087c0 <HAL_RCC_OscConfig+0x278>)
 80086ee:	2201      	movs	r2, #1
 80086f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086f2:	f7fb fb5f 	bl	8003db4 <HAL_GetTick>
 80086f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086f8:	e008      	b.n	800870c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80086fa:	f7fb fb5b 	bl	8003db4 <HAL_GetTick>
 80086fe:	4602      	mov	r2, r0
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	1ad3      	subs	r3, r2, r3
 8008704:	2b02      	cmp	r3, #2
 8008706:	d901      	bls.n	800870c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008708:	2303      	movs	r3, #3
 800870a:	e1b4      	b.n	8008a76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800870c:	4b2b      	ldr	r3, [pc, #172]	; (80087bc <HAL_RCC_OscConfig+0x274>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f003 0302 	and.w	r3, r3, #2
 8008714:	2b00      	cmp	r3, #0
 8008716:	d0f0      	beq.n	80086fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008718:	4b28      	ldr	r3, [pc, #160]	; (80087bc <HAL_RCC_OscConfig+0x274>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	00db      	lsls	r3, r3, #3
 8008726:	4925      	ldr	r1, [pc, #148]	; (80087bc <HAL_RCC_OscConfig+0x274>)
 8008728:	4313      	orrs	r3, r2
 800872a:	600b      	str	r3, [r1, #0]
 800872c:	e015      	b.n	800875a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800872e:	4b24      	ldr	r3, [pc, #144]	; (80087c0 <HAL_RCC_OscConfig+0x278>)
 8008730:	2200      	movs	r2, #0
 8008732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008734:	f7fb fb3e 	bl	8003db4 <HAL_GetTick>
 8008738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800873a:	e008      	b.n	800874e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800873c:	f7fb fb3a 	bl	8003db4 <HAL_GetTick>
 8008740:	4602      	mov	r2, r0
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	1ad3      	subs	r3, r2, r3
 8008746:	2b02      	cmp	r3, #2
 8008748:	d901      	bls.n	800874e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800874a:	2303      	movs	r3, #3
 800874c:	e193      	b.n	8008a76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800874e:	4b1b      	ldr	r3, [pc, #108]	; (80087bc <HAL_RCC_OscConfig+0x274>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f003 0302 	and.w	r3, r3, #2
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1f0      	bne.n	800873c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f003 0308 	and.w	r3, r3, #8
 8008762:	2b00      	cmp	r3, #0
 8008764:	d036      	beq.n	80087d4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	695b      	ldr	r3, [r3, #20]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d016      	beq.n	800879c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800876e:	4b15      	ldr	r3, [pc, #84]	; (80087c4 <HAL_RCC_OscConfig+0x27c>)
 8008770:	2201      	movs	r2, #1
 8008772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008774:	f7fb fb1e 	bl	8003db4 <HAL_GetTick>
 8008778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800877a:	e008      	b.n	800878e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800877c:	f7fb fb1a 	bl	8003db4 <HAL_GetTick>
 8008780:	4602      	mov	r2, r0
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	1ad3      	subs	r3, r2, r3
 8008786:	2b02      	cmp	r3, #2
 8008788:	d901      	bls.n	800878e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800878a:	2303      	movs	r3, #3
 800878c:	e173      	b.n	8008a76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800878e:	4b0b      	ldr	r3, [pc, #44]	; (80087bc <HAL_RCC_OscConfig+0x274>)
 8008790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008792:	f003 0302 	and.w	r3, r3, #2
 8008796:	2b00      	cmp	r3, #0
 8008798:	d0f0      	beq.n	800877c <HAL_RCC_OscConfig+0x234>
 800879a:	e01b      	b.n	80087d4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800879c:	4b09      	ldr	r3, [pc, #36]	; (80087c4 <HAL_RCC_OscConfig+0x27c>)
 800879e:	2200      	movs	r2, #0
 80087a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087a2:	f7fb fb07 	bl	8003db4 <HAL_GetTick>
 80087a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80087a8:	e00e      	b.n	80087c8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087aa:	f7fb fb03 	bl	8003db4 <HAL_GetTick>
 80087ae:	4602      	mov	r2, r0
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	1ad3      	subs	r3, r2, r3
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d907      	bls.n	80087c8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80087b8:	2303      	movs	r3, #3
 80087ba:	e15c      	b.n	8008a76 <HAL_RCC_OscConfig+0x52e>
 80087bc:	40023800 	.word	0x40023800
 80087c0:	42470000 	.word	0x42470000
 80087c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80087c8:	4b8a      	ldr	r3, [pc, #552]	; (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 80087ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087cc:	f003 0302 	and.w	r3, r3, #2
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1ea      	bne.n	80087aa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 0304 	and.w	r3, r3, #4
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f000 8097 	beq.w	8008910 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80087e2:	2300      	movs	r3, #0
 80087e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80087e6:	4b83      	ldr	r3, [pc, #524]	; (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 80087e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d10f      	bne.n	8008812 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80087f2:	2300      	movs	r3, #0
 80087f4:	60bb      	str	r3, [r7, #8]
 80087f6:	4b7f      	ldr	r3, [pc, #508]	; (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 80087f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fa:	4a7e      	ldr	r2, [pc, #504]	; (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 80087fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008800:	6413      	str	r3, [r2, #64]	; 0x40
 8008802:	4b7c      	ldr	r3, [pc, #496]	; (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 8008804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800880a:	60bb      	str	r3, [r7, #8]
 800880c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800880e:	2301      	movs	r3, #1
 8008810:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008812:	4b79      	ldr	r3, [pc, #484]	; (80089f8 <HAL_RCC_OscConfig+0x4b0>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800881a:	2b00      	cmp	r3, #0
 800881c:	d118      	bne.n	8008850 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800881e:	4b76      	ldr	r3, [pc, #472]	; (80089f8 <HAL_RCC_OscConfig+0x4b0>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a75      	ldr	r2, [pc, #468]	; (80089f8 <HAL_RCC_OscConfig+0x4b0>)
 8008824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800882a:	f7fb fac3 	bl	8003db4 <HAL_GetTick>
 800882e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008830:	e008      	b.n	8008844 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008832:	f7fb fabf 	bl	8003db4 <HAL_GetTick>
 8008836:	4602      	mov	r2, r0
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	1ad3      	subs	r3, r2, r3
 800883c:	2b02      	cmp	r3, #2
 800883e:	d901      	bls.n	8008844 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008840:	2303      	movs	r3, #3
 8008842:	e118      	b.n	8008a76 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008844:	4b6c      	ldr	r3, [pc, #432]	; (80089f8 <HAL_RCC_OscConfig+0x4b0>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800884c:	2b00      	cmp	r3, #0
 800884e:	d0f0      	beq.n	8008832 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	2b01      	cmp	r3, #1
 8008856:	d106      	bne.n	8008866 <HAL_RCC_OscConfig+0x31e>
 8008858:	4b66      	ldr	r3, [pc, #408]	; (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 800885a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800885c:	4a65      	ldr	r2, [pc, #404]	; (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 800885e:	f043 0301 	orr.w	r3, r3, #1
 8008862:	6713      	str	r3, [r2, #112]	; 0x70
 8008864:	e01c      	b.n	80088a0 <HAL_RCC_OscConfig+0x358>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	2b05      	cmp	r3, #5
 800886c:	d10c      	bne.n	8008888 <HAL_RCC_OscConfig+0x340>
 800886e:	4b61      	ldr	r3, [pc, #388]	; (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 8008870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008872:	4a60      	ldr	r2, [pc, #384]	; (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 8008874:	f043 0304 	orr.w	r3, r3, #4
 8008878:	6713      	str	r3, [r2, #112]	; 0x70
 800887a:	4b5e      	ldr	r3, [pc, #376]	; (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 800887c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800887e:	4a5d      	ldr	r2, [pc, #372]	; (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 8008880:	f043 0301 	orr.w	r3, r3, #1
 8008884:	6713      	str	r3, [r2, #112]	; 0x70
 8008886:	e00b      	b.n	80088a0 <HAL_RCC_OscConfig+0x358>
 8008888:	4b5a      	ldr	r3, [pc, #360]	; (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 800888a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800888c:	4a59      	ldr	r2, [pc, #356]	; (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 800888e:	f023 0301 	bic.w	r3, r3, #1
 8008892:	6713      	str	r3, [r2, #112]	; 0x70
 8008894:	4b57      	ldr	r3, [pc, #348]	; (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 8008896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008898:	4a56      	ldr	r2, [pc, #344]	; (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 800889a:	f023 0304 	bic.w	r3, r3, #4
 800889e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d015      	beq.n	80088d4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088a8:	f7fb fa84 	bl	8003db4 <HAL_GetTick>
 80088ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088ae:	e00a      	b.n	80088c6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088b0:	f7fb fa80 	bl	8003db4 <HAL_GetTick>
 80088b4:	4602      	mov	r2, r0
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	1ad3      	subs	r3, r2, r3
 80088ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80088be:	4293      	cmp	r3, r2
 80088c0:	d901      	bls.n	80088c6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80088c2:	2303      	movs	r3, #3
 80088c4:	e0d7      	b.n	8008a76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088c6:	4b4b      	ldr	r3, [pc, #300]	; (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 80088c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ca:	f003 0302 	and.w	r3, r3, #2
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d0ee      	beq.n	80088b0 <HAL_RCC_OscConfig+0x368>
 80088d2:	e014      	b.n	80088fe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088d4:	f7fb fa6e 	bl	8003db4 <HAL_GetTick>
 80088d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088da:	e00a      	b.n	80088f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088dc:	f7fb fa6a 	bl	8003db4 <HAL_GetTick>
 80088e0:	4602      	mov	r2, r0
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	1ad3      	subs	r3, r2, r3
 80088e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d901      	bls.n	80088f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80088ee:	2303      	movs	r3, #3
 80088f0:	e0c1      	b.n	8008a76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088f2:	4b40      	ldr	r3, [pc, #256]	; (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 80088f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088f6:	f003 0302 	and.w	r3, r3, #2
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d1ee      	bne.n	80088dc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80088fe:	7dfb      	ldrb	r3, [r7, #23]
 8008900:	2b01      	cmp	r3, #1
 8008902:	d105      	bne.n	8008910 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008904:	4b3b      	ldr	r3, [pc, #236]	; (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 8008906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008908:	4a3a      	ldr	r2, [pc, #232]	; (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 800890a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800890e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	699b      	ldr	r3, [r3, #24]
 8008914:	2b00      	cmp	r3, #0
 8008916:	f000 80ad 	beq.w	8008a74 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800891a:	4b36      	ldr	r3, [pc, #216]	; (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	f003 030c 	and.w	r3, r3, #12
 8008922:	2b08      	cmp	r3, #8
 8008924:	d060      	beq.n	80089e8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	699b      	ldr	r3, [r3, #24]
 800892a:	2b02      	cmp	r3, #2
 800892c:	d145      	bne.n	80089ba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800892e:	4b33      	ldr	r3, [pc, #204]	; (80089fc <HAL_RCC_OscConfig+0x4b4>)
 8008930:	2200      	movs	r2, #0
 8008932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008934:	f7fb fa3e 	bl	8003db4 <HAL_GetTick>
 8008938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800893a:	e008      	b.n	800894e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800893c:	f7fb fa3a 	bl	8003db4 <HAL_GetTick>
 8008940:	4602      	mov	r2, r0
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	1ad3      	subs	r3, r2, r3
 8008946:	2b02      	cmp	r3, #2
 8008948:	d901      	bls.n	800894e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800894a:	2303      	movs	r3, #3
 800894c:	e093      	b.n	8008a76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800894e:	4b29      	ldr	r3, [pc, #164]	; (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1f0      	bne.n	800893c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	69da      	ldr	r2, [r3, #28]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a1b      	ldr	r3, [r3, #32]
 8008962:	431a      	orrs	r2, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008968:	019b      	lsls	r3, r3, #6
 800896a:	431a      	orrs	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008970:	085b      	lsrs	r3, r3, #1
 8008972:	3b01      	subs	r3, #1
 8008974:	041b      	lsls	r3, r3, #16
 8008976:	431a      	orrs	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897c:	061b      	lsls	r3, r3, #24
 800897e:	431a      	orrs	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008984:	071b      	lsls	r3, r3, #28
 8008986:	491b      	ldr	r1, [pc, #108]	; (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 8008988:	4313      	orrs	r3, r2
 800898a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800898c:	4b1b      	ldr	r3, [pc, #108]	; (80089fc <HAL_RCC_OscConfig+0x4b4>)
 800898e:	2201      	movs	r2, #1
 8008990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008992:	f7fb fa0f 	bl	8003db4 <HAL_GetTick>
 8008996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008998:	e008      	b.n	80089ac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800899a:	f7fb fa0b 	bl	8003db4 <HAL_GetTick>
 800899e:	4602      	mov	r2, r0
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	1ad3      	subs	r3, r2, r3
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	d901      	bls.n	80089ac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80089a8:	2303      	movs	r3, #3
 80089aa:	e064      	b.n	8008a76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089ac:	4b11      	ldr	r3, [pc, #68]	; (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d0f0      	beq.n	800899a <HAL_RCC_OscConfig+0x452>
 80089b8:	e05c      	b.n	8008a74 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089ba:	4b10      	ldr	r3, [pc, #64]	; (80089fc <HAL_RCC_OscConfig+0x4b4>)
 80089bc:	2200      	movs	r2, #0
 80089be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089c0:	f7fb f9f8 	bl	8003db4 <HAL_GetTick>
 80089c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089c6:	e008      	b.n	80089da <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089c8:	f7fb f9f4 	bl	8003db4 <HAL_GetTick>
 80089cc:	4602      	mov	r2, r0
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	2b02      	cmp	r3, #2
 80089d4:	d901      	bls.n	80089da <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80089d6:	2303      	movs	r3, #3
 80089d8:	e04d      	b.n	8008a76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089da:	4b06      	ldr	r3, [pc, #24]	; (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d1f0      	bne.n	80089c8 <HAL_RCC_OscConfig+0x480>
 80089e6:	e045      	b.n	8008a74 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	699b      	ldr	r3, [r3, #24]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d107      	bne.n	8008a00 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	e040      	b.n	8008a76 <HAL_RCC_OscConfig+0x52e>
 80089f4:	40023800 	.word	0x40023800
 80089f8:	40007000 	.word	0x40007000
 80089fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008a00:	4b1f      	ldr	r3, [pc, #124]	; (8008a80 <HAL_RCC_OscConfig+0x538>)
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	699b      	ldr	r3, [r3, #24]
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d030      	beq.n	8008a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d129      	bne.n	8008a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d122      	bne.n	8008a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008a30:	4013      	ands	r3, r2
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008a36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d119      	bne.n	8008a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a46:	085b      	lsrs	r3, r3, #1
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d10f      	bne.n	8008a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d107      	bne.n	8008a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a6a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d001      	beq.n	8008a74 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e000      	b.n	8008a76 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3718      	adds	r7, #24
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	40023800 	.word	0x40023800

08008a84 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d101      	bne.n	8008a9a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	e066      	b.n	8008b68 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	7f5b      	ldrb	r3, [r3, #29]
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d105      	bne.n	8008ab0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f7fa fec4 	bl	8003838 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2202      	movs	r2, #2
 8008ab4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	22ca      	movs	r2, #202	; 0xca
 8008abc:	625a      	str	r2, [r3, #36]	; 0x24
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2253      	movs	r2, #83	; 0x53
 8008ac4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 fa45 	bl	8008f56 <RTC_EnterInitMode>
 8008acc:	4603      	mov	r3, r0
 8008ace:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008ad0:	7bfb      	ldrb	r3, [r7, #15]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d12c      	bne.n	8008b30 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	6812      	ldr	r2, [r2, #0]
 8008ae0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008ae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ae8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	6899      	ldr	r1, [r3, #8]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	685a      	ldr	r2, [r3, #4]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	691b      	ldr	r3, [r3, #16]
 8008af8:	431a      	orrs	r2, r3
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	695b      	ldr	r3, [r3, #20]
 8008afe:	431a      	orrs	r2, r3
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	430a      	orrs	r2, r1
 8008b06:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	68d2      	ldr	r2, [r2, #12]
 8008b10:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	6919      	ldr	r1, [r3, #16]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	041a      	lsls	r2, r3, #16
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	430a      	orrs	r2, r1
 8008b24:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 fa4c 	bl	8008fc4 <RTC_ExitInitMode>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d113      	bne.n	8008b5e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008b44:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	699a      	ldr	r2, [r3, #24]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	430a      	orrs	r2, r1
 8008b56:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	22ff      	movs	r2, #255	; 0xff
 8008b64:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8008b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008b70:	b590      	push	{r4, r7, lr}
 8008b72:	b087      	sub	sp, #28
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	7f1b      	ldrb	r3, [r3, #28]
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d101      	bne.n	8008b8c <HAL_RTC_SetTime+0x1c>
 8008b88:	2302      	movs	r3, #2
 8008b8a:	e087      	b.n	8008c9c <HAL_RTC_SetTime+0x12c>
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2202      	movs	r2, #2
 8008b96:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d126      	bne.n	8008bec <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d102      	bne.n	8008bb2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f000 fa29 	bl	800900e <RTC_ByteToBcd2>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	785b      	ldrb	r3, [r3, #1]
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f000 fa22 	bl	800900e <RTC_ByteToBcd2>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008bce:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	789b      	ldrb	r3, [r3, #2]
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f000 fa1a 	bl	800900e <RTC_ByteToBcd2>
 8008bda:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008bdc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	78db      	ldrb	r3, [r3, #3]
 8008be4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008be6:	4313      	orrs	r3, r2
 8008be8:	617b      	str	r3, [r7, #20]
 8008bea:	e018      	b.n	8008c1e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d102      	bne.n	8008c00 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	785b      	ldrb	r3, [r3, #1]
 8008c0a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008c0c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008c0e:	68ba      	ldr	r2, [r7, #8]
 8008c10:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008c12:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	78db      	ldrb	r3, [r3, #3]
 8008c18:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	22ca      	movs	r2, #202	; 0xca
 8008c24:	625a      	str	r2, [r3, #36]	; 0x24
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	2253      	movs	r2, #83	; 0x53
 8008c2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f000 f991 	bl	8008f56 <RTC_EnterInitMode>
 8008c34:	4603      	mov	r3, r0
 8008c36:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008c38:	7cfb      	ldrb	r3, [r7, #19]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d120      	bne.n	8008c80 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008c48:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008c4c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	689a      	ldr	r2, [r3, #8]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008c5c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	6899      	ldr	r1, [r3, #8]
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	68da      	ldr	r2, [r3, #12]
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	691b      	ldr	r3, [r3, #16]
 8008c6c:	431a      	orrs	r2, r3
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	430a      	orrs	r2, r1
 8008c74:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008c76:	68f8      	ldr	r0, [r7, #12]
 8008c78:	f000 f9a4 	bl	8008fc4 <RTC_ExitInitMode>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008c80:	7cfb      	ldrb	r3, [r7, #19]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d102      	bne.n	8008c8c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2201      	movs	r2, #1
 8008c8a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	22ff      	movs	r2, #255	; 0xff
 8008c92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	771a      	strb	r2, [r3, #28]

  return status;
 8008c9a:	7cfb      	ldrb	r3, [r7, #19]
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	371c      	adds	r7, #28
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd90      	pop	{r4, r7, pc}

08008ca4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b086      	sub	sp, #24
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008cd6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008cda:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	0c1b      	lsrs	r3, r3, #16
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ce6:	b2da      	uxtb	r2, r3
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	0a1b      	lsrs	r3, r3, #8
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cf6:	b2da      	uxtb	r2, r3
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d04:	b2da      	uxtb	r2, r3
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	0d9b      	lsrs	r3, r3, #22
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	f003 0301 	and.w	r3, r3, #1
 8008d14:	b2da      	uxtb	r2, r3
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d11a      	bne.n	8008d56 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	4618      	mov	r0, r3
 8008d26:	f000 f98f 	bl	8009048 <RTC_Bcd2ToByte>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	785b      	ldrb	r3, [r3, #1]
 8008d36:	4618      	mov	r0, r3
 8008d38:	f000 f986 	bl	8009048 <RTC_Bcd2ToByte>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	461a      	mov	r2, r3
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	789b      	ldrb	r3, [r3, #2]
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f000 f97d 	bl	8009048 <RTC_Bcd2ToByte>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	461a      	mov	r2, r3
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008d56:	2300      	movs	r3, #0
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3718      	adds	r7, #24
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008d60:	b590      	push	{r4, r7, lr}
 8008d62:	b087      	sub	sp, #28
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	7f1b      	ldrb	r3, [r3, #28]
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d101      	bne.n	8008d7c <HAL_RTC_SetDate+0x1c>
 8008d78:	2302      	movs	r3, #2
 8008d7a:	e071      	b.n	8008e60 <HAL_RTC_SetDate+0x100>
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2202      	movs	r2, #2
 8008d86:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d10e      	bne.n	8008dac <HAL_RTC_SetDate+0x4c>
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	785b      	ldrb	r3, [r3, #1]
 8008d92:	f003 0310 	and.w	r3, r3, #16
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d008      	beq.n	8008dac <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	785b      	ldrb	r3, [r3, #1]
 8008d9e:	f023 0310 	bic.w	r3, r3, #16
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	330a      	adds	r3, #10
 8008da6:	b2da      	uxtb	r2, r3
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d11c      	bne.n	8008dec <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	78db      	ldrb	r3, [r3, #3]
 8008db6:	4618      	mov	r0, r3
 8008db8:	f000 f929 	bl	800900e <RTC_ByteToBcd2>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	785b      	ldrb	r3, [r3, #1]
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f000 f922 	bl	800900e <RTC_ByteToBcd2>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008dce:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	789b      	ldrb	r3, [r3, #2]
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f000 f91a 	bl	800900e <RTC_ByteToBcd2>
 8008dda:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008ddc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008de6:	4313      	orrs	r3, r2
 8008de8:	617b      	str	r3, [r7, #20]
 8008dea:	e00e      	b.n	8008e0a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	78db      	ldrb	r3, [r3, #3]
 8008df0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	785b      	ldrb	r3, [r3, #1]
 8008df6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008df8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008dfa:	68ba      	ldr	r2, [r7, #8]
 8008dfc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008dfe:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008e06:	4313      	orrs	r3, r2
 8008e08:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	22ca      	movs	r2, #202	; 0xca
 8008e10:	625a      	str	r2, [r3, #36]	; 0x24
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2253      	movs	r2, #83	; 0x53
 8008e18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008e1a:	68f8      	ldr	r0, [r7, #12]
 8008e1c:	f000 f89b 	bl	8008f56 <RTC_EnterInitMode>
 8008e20:	4603      	mov	r3, r0
 8008e22:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008e24:	7cfb      	ldrb	r3, [r7, #19]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d10c      	bne.n	8008e44 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008e34:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008e38:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f000 f8c2 	bl	8008fc4 <RTC_ExitInitMode>
 8008e40:	4603      	mov	r3, r0
 8008e42:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008e44:	7cfb      	ldrb	r3, [r7, #19]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d102      	bne.n	8008e50 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	22ff      	movs	r2, #255	; 0xff
 8008e56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	771a      	strb	r2, [r3, #28]

  return status;
 8008e5e:	7cfb      	ldrb	r3, [r7, #19]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	371c      	adds	r7, #28
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd90      	pop	{r4, r7, pc}

08008e68 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b086      	sub	sp, #24
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008e74:	2300      	movs	r3, #0
 8008e76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008e82:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008e86:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	0c1b      	lsrs	r3, r3, #16
 8008e8c:	b2da      	uxtb	r2, r3
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	0a1b      	lsrs	r3, r3, #8
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	f003 031f 	and.w	r3, r3, #31
 8008e9c:	b2da      	uxtb	r2, r3
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008eaa:	b2da      	uxtb	r2, r3
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	0b5b      	lsrs	r3, r3, #13
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	f003 0307 	and.w	r3, r3, #7
 8008eba:	b2da      	uxtb	r2, r3
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d11a      	bne.n	8008efc <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	78db      	ldrb	r3, [r3, #3]
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f000 f8bc 	bl	8009048 <RTC_Bcd2ToByte>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	785b      	ldrb	r3, [r3, #1]
 8008edc:	4618      	mov	r0, r3
 8008ede:	f000 f8b3 	bl	8009048 <RTC_Bcd2ToByte>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	789b      	ldrb	r3, [r3, #2]
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f000 f8aa 	bl	8009048 <RTC_Bcd2ToByte>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3718      	adds	r7, #24
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}

08008f06 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b084      	sub	sp, #16
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	68da      	ldr	r2, [r3, #12]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008f20:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008f22:	f7fa ff47 	bl	8003db4 <HAL_GetTick>
 8008f26:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008f28:	e009      	b.n	8008f3e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008f2a:	f7fa ff43 	bl	8003db4 <HAL_GetTick>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	1ad3      	subs	r3, r2, r3
 8008f34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f38:	d901      	bls.n	8008f3e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008f3a:	2303      	movs	r3, #3
 8008f3c:	e007      	b.n	8008f4e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	f003 0320 	and.w	r3, r3, #32
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d0ee      	beq.n	8008f2a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b084      	sub	sp, #16
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008f62:	2300      	movs	r3, #0
 8008f64:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d122      	bne.n	8008fba <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	68da      	ldr	r2, [r3, #12]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008f82:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008f84:	f7fa ff16 	bl	8003db4 <HAL_GetTick>
 8008f88:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008f8a:	e00c      	b.n	8008fa6 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008f8c:	f7fa ff12 	bl	8003db4 <HAL_GetTick>
 8008f90:	4602      	mov	r2, r0
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	1ad3      	subs	r3, r2, r3
 8008f96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f9a:	d904      	bls.n	8008fa6 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2204      	movs	r2, #4
 8008fa0:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d102      	bne.n	8008fba <RTC_EnterInitMode+0x64>
 8008fb4:	7bfb      	ldrb	r3, [r7, #15]
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d1e8      	bne.n	8008f8c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3710      	adds	r7, #16
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68da      	ldr	r2, [r3, #12]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008fde:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	f003 0320 	and.w	r3, r3, #32
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d10a      	bne.n	8009004 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f7ff ff89 	bl	8008f06 <HAL_RTC_WaitForSynchro>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d004      	beq.n	8009004 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2204      	movs	r2, #4
 8008ffe:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8009000:	2301      	movs	r3, #1
 8009002:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009004:	7bfb      	ldrb	r3, [r7, #15]
}
 8009006:	4618      	mov	r0, r3
 8009008:	3710      	adds	r7, #16
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800900e:	b480      	push	{r7}
 8009010:	b085      	sub	sp, #20
 8009012:	af00      	add	r7, sp, #0
 8009014:	4603      	mov	r3, r0
 8009016:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8009018:	2300      	movs	r3, #0
 800901a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800901c:	e005      	b.n	800902a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800901e:	7bfb      	ldrb	r3, [r7, #15]
 8009020:	3301      	adds	r3, #1
 8009022:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8009024:	79fb      	ldrb	r3, [r7, #7]
 8009026:	3b0a      	subs	r3, #10
 8009028:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800902a:	79fb      	ldrb	r3, [r7, #7]
 800902c:	2b09      	cmp	r3, #9
 800902e:	d8f6      	bhi.n	800901e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8009030:	7bfb      	ldrb	r3, [r7, #15]
 8009032:	011b      	lsls	r3, r3, #4
 8009034:	b2da      	uxtb	r2, r3
 8009036:	79fb      	ldrb	r3, [r7, #7]
 8009038:	4313      	orrs	r3, r2
 800903a:	b2db      	uxtb	r3, r3
}
 800903c:	4618      	mov	r0, r3
 800903e:	3714      	adds	r7, #20
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8009048:	b480      	push	{r7}
 800904a:	b085      	sub	sp, #20
 800904c:	af00      	add	r7, sp, #0
 800904e:	4603      	mov	r3, r0
 8009050:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8009052:	2300      	movs	r3, #0
 8009054:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8009056:	79fb      	ldrb	r3, [r7, #7]
 8009058:	091b      	lsrs	r3, r3, #4
 800905a:	b2db      	uxtb	r3, r3
 800905c:	461a      	mov	r2, r3
 800905e:	0092      	lsls	r2, r2, #2
 8009060:	4413      	add	r3, r2
 8009062:	005b      	lsls	r3, r3, #1
 8009064:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8009066:	79fb      	ldrb	r3, [r7, #7]
 8009068:	f003 030f 	and.w	r3, r3, #15
 800906c:	b2da      	uxtb	r2, r3
 800906e:	7bfb      	ldrb	r3, [r7, #15]
 8009070:	4413      	add	r3, r2
 8009072:	b2db      	uxtb	r3, r3
}
 8009074:	4618      	mov	r0, r3
 8009076:	3714      	adds	r7, #20
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8009080:	b480      	push	{r7}
 8009082:	b087      	sub	sp, #28
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800908c:	2300      	movs	r3, #0
 800908e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	3350      	adds	r3, #80	; 0x50
 8009096:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	697a      	ldr	r2, [r7, #20]
 800909e:	4413      	add	r3, r2
 80090a0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	601a      	str	r2, [r3, #0]
}
 80090a8:	bf00      	nop
 80090aa:	371c      	adds	r7, #28
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d101      	bne.n	80090c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80090c2:	2301      	movs	r3, #1
 80090c4:	e041      	b.n	800914a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d106      	bne.n	80090e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f7fa fbd8 	bl	8003890 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2202      	movs	r2, #2
 80090e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	3304      	adds	r3, #4
 80090f0:	4619      	mov	r1, r3
 80090f2:	4610      	mov	r0, r2
 80090f4:	f000 fc82 	bl	80099fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2201      	movs	r2, #1
 800910c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2201      	movs	r2, #1
 8009114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2201      	movs	r2, #1
 800912c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2201      	movs	r2, #1
 8009134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2201      	movs	r2, #1
 800913c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2201      	movs	r2, #1
 8009144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009148:	2300      	movs	r3, #0
}
 800914a:	4618      	mov	r0, r3
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b082      	sub	sp, #8
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d101      	bne.n	8009164 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009160:	2301      	movs	r3, #1
 8009162:	e041      	b.n	80091e8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800916a:	b2db      	uxtb	r3, r3
 800916c:	2b00      	cmp	r3, #0
 800916e:	d106      	bne.n	800917e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 f839 	bl	80091f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2202      	movs	r2, #2
 8009182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	3304      	adds	r3, #4
 800918e:	4619      	mov	r1, r3
 8009190:	4610      	mov	r0, r2
 8009192:	f000 fc33 	bl	80099fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2201      	movs	r2, #1
 800919a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2201      	movs	r2, #1
 80091a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2201      	movs	r2, #1
 80091aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2201      	movs	r2, #1
 80091b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2201      	movs	r2, #1
 80091ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2201      	movs	r2, #1
 80091c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2201      	movs	r2, #1
 80091ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2201      	movs	r2, #1
 80091d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2201      	movs	r2, #1
 80091da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2201      	movs	r2, #1
 80091e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091e6:	2300      	movs	r3, #0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3708      	adds	r7, #8
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80091f8:	bf00      	nop
 80091fa:	370c      	adds	r7, #12
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d109      	bne.n	8009228 <HAL_TIM_PWM_Start+0x24>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800921a:	b2db      	uxtb	r3, r3
 800921c:	2b01      	cmp	r3, #1
 800921e:	bf14      	ite	ne
 8009220:	2301      	movne	r3, #1
 8009222:	2300      	moveq	r3, #0
 8009224:	b2db      	uxtb	r3, r3
 8009226:	e022      	b.n	800926e <HAL_TIM_PWM_Start+0x6a>
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	2b04      	cmp	r3, #4
 800922c:	d109      	bne.n	8009242 <HAL_TIM_PWM_Start+0x3e>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009234:	b2db      	uxtb	r3, r3
 8009236:	2b01      	cmp	r3, #1
 8009238:	bf14      	ite	ne
 800923a:	2301      	movne	r3, #1
 800923c:	2300      	moveq	r3, #0
 800923e:	b2db      	uxtb	r3, r3
 8009240:	e015      	b.n	800926e <HAL_TIM_PWM_Start+0x6a>
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	2b08      	cmp	r3, #8
 8009246:	d109      	bne.n	800925c <HAL_TIM_PWM_Start+0x58>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800924e:	b2db      	uxtb	r3, r3
 8009250:	2b01      	cmp	r3, #1
 8009252:	bf14      	ite	ne
 8009254:	2301      	movne	r3, #1
 8009256:	2300      	moveq	r3, #0
 8009258:	b2db      	uxtb	r3, r3
 800925a:	e008      	b.n	800926e <HAL_TIM_PWM_Start+0x6a>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009262:	b2db      	uxtb	r3, r3
 8009264:	2b01      	cmp	r3, #1
 8009266:	bf14      	ite	ne
 8009268:	2301      	movne	r3, #1
 800926a:	2300      	moveq	r3, #0
 800926c:	b2db      	uxtb	r3, r3
 800926e:	2b00      	cmp	r3, #0
 8009270:	d001      	beq.n	8009276 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009272:	2301      	movs	r3, #1
 8009274:	e07c      	b.n	8009370 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d104      	bne.n	8009286 <HAL_TIM_PWM_Start+0x82>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2202      	movs	r2, #2
 8009280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009284:	e013      	b.n	80092ae <HAL_TIM_PWM_Start+0xaa>
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	2b04      	cmp	r3, #4
 800928a:	d104      	bne.n	8009296 <HAL_TIM_PWM_Start+0x92>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2202      	movs	r2, #2
 8009290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009294:	e00b      	b.n	80092ae <HAL_TIM_PWM_Start+0xaa>
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	2b08      	cmp	r3, #8
 800929a:	d104      	bne.n	80092a6 <HAL_TIM_PWM_Start+0xa2>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2202      	movs	r2, #2
 80092a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092a4:	e003      	b.n	80092ae <HAL_TIM_PWM_Start+0xaa>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2202      	movs	r2, #2
 80092aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	2201      	movs	r2, #1
 80092b4:	6839      	ldr	r1, [r7, #0]
 80092b6:	4618      	mov	r0, r3
 80092b8:	f000 fe8a 	bl	8009fd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a2d      	ldr	r2, [pc, #180]	; (8009378 <HAL_TIM_PWM_Start+0x174>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d004      	beq.n	80092d0 <HAL_TIM_PWM_Start+0xcc>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a2c      	ldr	r2, [pc, #176]	; (800937c <HAL_TIM_PWM_Start+0x178>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d101      	bne.n	80092d4 <HAL_TIM_PWM_Start+0xd0>
 80092d0:	2301      	movs	r3, #1
 80092d2:	e000      	b.n	80092d6 <HAL_TIM_PWM_Start+0xd2>
 80092d4:	2300      	movs	r3, #0
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d007      	beq.n	80092ea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80092e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a22      	ldr	r2, [pc, #136]	; (8009378 <HAL_TIM_PWM_Start+0x174>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d022      	beq.n	800933a <HAL_TIM_PWM_Start+0x136>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092fc:	d01d      	beq.n	800933a <HAL_TIM_PWM_Start+0x136>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a1f      	ldr	r2, [pc, #124]	; (8009380 <HAL_TIM_PWM_Start+0x17c>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d018      	beq.n	800933a <HAL_TIM_PWM_Start+0x136>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a1d      	ldr	r2, [pc, #116]	; (8009384 <HAL_TIM_PWM_Start+0x180>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d013      	beq.n	800933a <HAL_TIM_PWM_Start+0x136>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a1c      	ldr	r2, [pc, #112]	; (8009388 <HAL_TIM_PWM_Start+0x184>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d00e      	beq.n	800933a <HAL_TIM_PWM_Start+0x136>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a16      	ldr	r2, [pc, #88]	; (800937c <HAL_TIM_PWM_Start+0x178>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d009      	beq.n	800933a <HAL_TIM_PWM_Start+0x136>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a18      	ldr	r2, [pc, #96]	; (800938c <HAL_TIM_PWM_Start+0x188>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d004      	beq.n	800933a <HAL_TIM_PWM_Start+0x136>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a16      	ldr	r2, [pc, #88]	; (8009390 <HAL_TIM_PWM_Start+0x18c>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d111      	bne.n	800935e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	f003 0307 	and.w	r3, r3, #7
 8009344:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2b06      	cmp	r3, #6
 800934a:	d010      	beq.n	800936e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f042 0201 	orr.w	r2, r2, #1
 800935a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800935c:	e007      	b.n	800936e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f042 0201 	orr.w	r2, r2, #1
 800936c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}
 8009378:	40010000 	.word	0x40010000
 800937c:	40010400 	.word	0x40010400
 8009380:	40000400 	.word	0x40000400
 8009384:	40000800 	.word	0x40000800
 8009388:	40000c00 	.word	0x40000c00
 800938c:	40014000 	.word	0x40014000
 8009390:	40001800 	.word	0x40001800

08009394 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2200      	movs	r2, #0
 80093a4:	6839      	ldr	r1, [r7, #0]
 80093a6:	4618      	mov	r0, r3
 80093a8:	f000 fe12 	bl	8009fd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a2e      	ldr	r2, [pc, #184]	; (800946c <HAL_TIM_PWM_Stop+0xd8>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d004      	beq.n	80093c0 <HAL_TIM_PWM_Stop+0x2c>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a2d      	ldr	r2, [pc, #180]	; (8009470 <HAL_TIM_PWM_Stop+0xdc>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d101      	bne.n	80093c4 <HAL_TIM_PWM_Stop+0x30>
 80093c0:	2301      	movs	r3, #1
 80093c2:	e000      	b.n	80093c6 <HAL_TIM_PWM_Stop+0x32>
 80093c4:	2300      	movs	r3, #0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d017      	beq.n	80093fa <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	6a1a      	ldr	r2, [r3, #32]
 80093d0:	f241 1311 	movw	r3, #4369	; 0x1111
 80093d4:	4013      	ands	r3, r2
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d10f      	bne.n	80093fa <HAL_TIM_PWM_Stop+0x66>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	6a1a      	ldr	r2, [r3, #32]
 80093e0:	f240 4344 	movw	r3, #1092	; 0x444
 80093e4:	4013      	ands	r3, r2
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d107      	bne.n	80093fa <HAL_TIM_PWM_Stop+0x66>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80093f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	6a1a      	ldr	r2, [r3, #32]
 8009400:	f241 1311 	movw	r3, #4369	; 0x1111
 8009404:	4013      	ands	r3, r2
 8009406:	2b00      	cmp	r3, #0
 8009408:	d10f      	bne.n	800942a <HAL_TIM_PWM_Stop+0x96>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	6a1a      	ldr	r2, [r3, #32]
 8009410:	f240 4344 	movw	r3, #1092	; 0x444
 8009414:	4013      	ands	r3, r2
 8009416:	2b00      	cmp	r3, #0
 8009418:	d107      	bne.n	800942a <HAL_TIM_PWM_Stop+0x96>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f022 0201 	bic.w	r2, r2, #1
 8009428:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d104      	bne.n	800943a <HAL_TIM_PWM_Stop+0xa6>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2201      	movs	r2, #1
 8009434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009438:	e013      	b.n	8009462 <HAL_TIM_PWM_Stop+0xce>
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	2b04      	cmp	r3, #4
 800943e:	d104      	bne.n	800944a <HAL_TIM_PWM_Stop+0xb6>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009448:	e00b      	b.n	8009462 <HAL_TIM_PWM_Stop+0xce>
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	2b08      	cmp	r3, #8
 800944e:	d104      	bne.n	800945a <HAL_TIM_PWM_Stop+0xc6>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2201      	movs	r2, #1
 8009454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009458:	e003      	b.n	8009462 <HAL_TIM_PWM_Stop+0xce>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2201      	movs	r2, #1
 800945e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8009462:	2300      	movs	r3, #0
}
 8009464:	4618      	mov	r0, r3
 8009466:	3708      	adds	r7, #8
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}
 800946c:	40010000 	.word	0x40010000
 8009470:	40010400 	.word	0x40010400

08009474 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	f003 0302 	and.w	r3, r3, #2
 8009486:	2b02      	cmp	r3, #2
 8009488:	d122      	bne.n	80094d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	f003 0302 	and.w	r3, r3, #2
 8009494:	2b02      	cmp	r3, #2
 8009496:	d11b      	bne.n	80094d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f06f 0202 	mvn.w	r2, #2
 80094a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2201      	movs	r2, #1
 80094a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	699b      	ldr	r3, [r3, #24]
 80094ae:	f003 0303 	and.w	r3, r3, #3
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d003      	beq.n	80094be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 fa81 	bl	80099be <HAL_TIM_IC_CaptureCallback>
 80094bc:	e005      	b.n	80094ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 fa73 	bl	80099aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 fa84 	bl	80099d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	691b      	ldr	r3, [r3, #16]
 80094d6:	f003 0304 	and.w	r3, r3, #4
 80094da:	2b04      	cmp	r3, #4
 80094dc:	d122      	bne.n	8009524 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	f003 0304 	and.w	r3, r3, #4
 80094e8:	2b04      	cmp	r3, #4
 80094ea:	d11b      	bne.n	8009524 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f06f 0204 	mvn.w	r2, #4
 80094f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2202      	movs	r2, #2
 80094fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	699b      	ldr	r3, [r3, #24]
 8009502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009506:	2b00      	cmp	r3, #0
 8009508:	d003      	beq.n	8009512 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 fa57 	bl	80099be <HAL_TIM_IC_CaptureCallback>
 8009510:	e005      	b.n	800951e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 fa49 	bl	80099aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 fa5a 	bl	80099d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	f003 0308 	and.w	r3, r3, #8
 800952e:	2b08      	cmp	r3, #8
 8009530:	d122      	bne.n	8009578 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	f003 0308 	and.w	r3, r3, #8
 800953c:	2b08      	cmp	r3, #8
 800953e:	d11b      	bne.n	8009578 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f06f 0208 	mvn.w	r2, #8
 8009548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2204      	movs	r2, #4
 800954e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	69db      	ldr	r3, [r3, #28]
 8009556:	f003 0303 	and.w	r3, r3, #3
 800955a:	2b00      	cmp	r3, #0
 800955c:	d003      	beq.n	8009566 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 fa2d 	bl	80099be <HAL_TIM_IC_CaptureCallback>
 8009564:	e005      	b.n	8009572 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 fa1f 	bl	80099aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 fa30 	bl	80099d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2200      	movs	r2, #0
 8009576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	691b      	ldr	r3, [r3, #16]
 800957e:	f003 0310 	and.w	r3, r3, #16
 8009582:	2b10      	cmp	r3, #16
 8009584:	d122      	bne.n	80095cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	f003 0310 	and.w	r3, r3, #16
 8009590:	2b10      	cmp	r3, #16
 8009592:	d11b      	bne.n	80095cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f06f 0210 	mvn.w	r2, #16
 800959c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2208      	movs	r2, #8
 80095a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	69db      	ldr	r3, [r3, #28]
 80095aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d003      	beq.n	80095ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 fa03 	bl	80099be <HAL_TIM_IC_CaptureCallback>
 80095b8:	e005      	b.n	80095c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 f9f5 	bl	80099aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 fa06 	bl	80099d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	691b      	ldr	r3, [r3, #16]
 80095d2:	f003 0301 	and.w	r3, r3, #1
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d10e      	bne.n	80095f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	f003 0301 	and.w	r3, r3, #1
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d107      	bne.n	80095f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f06f 0201 	mvn.w	r2, #1
 80095f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 f9cf 	bl	8009996 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	691b      	ldr	r3, [r3, #16]
 80095fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009602:	2b80      	cmp	r3, #128	; 0x80
 8009604:	d10e      	bne.n	8009624 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	68db      	ldr	r3, [r3, #12]
 800960c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009610:	2b80      	cmp	r3, #128	; 0x80
 8009612:	d107      	bne.n	8009624 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800961c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 fdd4 	bl	800a1cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	691b      	ldr	r3, [r3, #16]
 800962a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800962e:	2b40      	cmp	r3, #64	; 0x40
 8009630:	d10e      	bne.n	8009650 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800963c:	2b40      	cmp	r3, #64	; 0x40
 800963e:	d107      	bne.n	8009650 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 f9cb 	bl	80099e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	f003 0320 	and.w	r3, r3, #32
 800965a:	2b20      	cmp	r3, #32
 800965c:	d10e      	bne.n	800967c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	f003 0320 	and.w	r3, r3, #32
 8009668:	2b20      	cmp	r3, #32
 800966a:	d107      	bne.n	800967c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f06f 0220 	mvn.w	r2, #32
 8009674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 fd9e 	bl	800a1b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800967c:	bf00      	nop
 800967e:	3708      	adds	r7, #8
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b086      	sub	sp, #24
 8009688:	af00      	add	r7, sp, #0
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	60b9      	str	r1, [r7, #8]
 800968e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009690:	2300      	movs	r3, #0
 8009692:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800969a:	2b01      	cmp	r3, #1
 800969c:	d101      	bne.n	80096a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800969e:	2302      	movs	r3, #2
 80096a0:	e0ae      	b.n	8009800 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2201      	movs	r2, #1
 80096a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2b0c      	cmp	r3, #12
 80096ae:	f200 809f 	bhi.w	80097f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80096b2:	a201      	add	r2, pc, #4	; (adr r2, 80096b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80096b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b8:	080096ed 	.word	0x080096ed
 80096bc:	080097f1 	.word	0x080097f1
 80096c0:	080097f1 	.word	0x080097f1
 80096c4:	080097f1 	.word	0x080097f1
 80096c8:	0800972d 	.word	0x0800972d
 80096cc:	080097f1 	.word	0x080097f1
 80096d0:	080097f1 	.word	0x080097f1
 80096d4:	080097f1 	.word	0x080097f1
 80096d8:	0800976f 	.word	0x0800976f
 80096dc:	080097f1 	.word	0x080097f1
 80096e0:	080097f1 	.word	0x080097f1
 80096e4:	080097f1 	.word	0x080097f1
 80096e8:	080097af 	.word	0x080097af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	68b9      	ldr	r1, [r7, #8]
 80096f2:	4618      	mov	r0, r3
 80096f4:	f000 fa22 	bl	8009b3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	699a      	ldr	r2, [r3, #24]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f042 0208 	orr.w	r2, r2, #8
 8009706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	699a      	ldr	r2, [r3, #24]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f022 0204 	bic.w	r2, r2, #4
 8009716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	6999      	ldr	r1, [r3, #24]
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	691a      	ldr	r2, [r3, #16]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	430a      	orrs	r2, r1
 8009728:	619a      	str	r2, [r3, #24]
      break;
 800972a:	e064      	b.n	80097f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	68b9      	ldr	r1, [r7, #8]
 8009732:	4618      	mov	r0, r3
 8009734:	f000 fa72 	bl	8009c1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	699a      	ldr	r2, [r3, #24]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	699a      	ldr	r2, [r3, #24]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	6999      	ldr	r1, [r3, #24]
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	021a      	lsls	r2, r3, #8
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	430a      	orrs	r2, r1
 800976a:	619a      	str	r2, [r3, #24]
      break;
 800976c:	e043      	b.n	80097f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	68b9      	ldr	r1, [r7, #8]
 8009774:	4618      	mov	r0, r3
 8009776:	f000 fac7 	bl	8009d08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	69da      	ldr	r2, [r3, #28]
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f042 0208 	orr.w	r2, r2, #8
 8009788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	69da      	ldr	r2, [r3, #28]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f022 0204 	bic.w	r2, r2, #4
 8009798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	69d9      	ldr	r1, [r3, #28]
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	691a      	ldr	r2, [r3, #16]
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	430a      	orrs	r2, r1
 80097aa:	61da      	str	r2, [r3, #28]
      break;
 80097ac:	e023      	b.n	80097f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	68b9      	ldr	r1, [r7, #8]
 80097b4:	4618      	mov	r0, r3
 80097b6:	f000 fb1b 	bl	8009df0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	69da      	ldr	r2, [r3, #28]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	69da      	ldr	r2, [r3, #28]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	69d9      	ldr	r1, [r3, #28]
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	691b      	ldr	r3, [r3, #16]
 80097e4:	021a      	lsls	r2, r3, #8
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	430a      	orrs	r2, r1
 80097ec:	61da      	str	r2, [r3, #28]
      break;
 80097ee:	e002      	b.n	80097f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80097f0:	2301      	movs	r3, #1
 80097f2:	75fb      	strb	r3, [r7, #23]
      break;
 80097f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2200      	movs	r2, #0
 80097fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80097fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009800:	4618      	mov	r0, r3
 8009802:	3718      	adds	r7, #24
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009812:	2300      	movs	r3, #0
 8009814:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800981c:	2b01      	cmp	r3, #1
 800981e:	d101      	bne.n	8009824 <HAL_TIM_ConfigClockSource+0x1c>
 8009820:	2302      	movs	r3, #2
 8009822:	e0b4      	b.n	800998e <HAL_TIM_ConfigClockSource+0x186>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2201      	movs	r2, #1
 8009828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2202      	movs	r2, #2
 8009830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	689b      	ldr	r3, [r3, #8]
 800983a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800984a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	68ba      	ldr	r2, [r7, #8]
 8009852:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800985c:	d03e      	beq.n	80098dc <HAL_TIM_ConfigClockSource+0xd4>
 800985e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009862:	f200 8087 	bhi.w	8009974 <HAL_TIM_ConfigClockSource+0x16c>
 8009866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800986a:	f000 8086 	beq.w	800997a <HAL_TIM_ConfigClockSource+0x172>
 800986e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009872:	d87f      	bhi.n	8009974 <HAL_TIM_ConfigClockSource+0x16c>
 8009874:	2b70      	cmp	r3, #112	; 0x70
 8009876:	d01a      	beq.n	80098ae <HAL_TIM_ConfigClockSource+0xa6>
 8009878:	2b70      	cmp	r3, #112	; 0x70
 800987a:	d87b      	bhi.n	8009974 <HAL_TIM_ConfigClockSource+0x16c>
 800987c:	2b60      	cmp	r3, #96	; 0x60
 800987e:	d050      	beq.n	8009922 <HAL_TIM_ConfigClockSource+0x11a>
 8009880:	2b60      	cmp	r3, #96	; 0x60
 8009882:	d877      	bhi.n	8009974 <HAL_TIM_ConfigClockSource+0x16c>
 8009884:	2b50      	cmp	r3, #80	; 0x50
 8009886:	d03c      	beq.n	8009902 <HAL_TIM_ConfigClockSource+0xfa>
 8009888:	2b50      	cmp	r3, #80	; 0x50
 800988a:	d873      	bhi.n	8009974 <HAL_TIM_ConfigClockSource+0x16c>
 800988c:	2b40      	cmp	r3, #64	; 0x40
 800988e:	d058      	beq.n	8009942 <HAL_TIM_ConfigClockSource+0x13a>
 8009890:	2b40      	cmp	r3, #64	; 0x40
 8009892:	d86f      	bhi.n	8009974 <HAL_TIM_ConfigClockSource+0x16c>
 8009894:	2b30      	cmp	r3, #48	; 0x30
 8009896:	d064      	beq.n	8009962 <HAL_TIM_ConfigClockSource+0x15a>
 8009898:	2b30      	cmp	r3, #48	; 0x30
 800989a:	d86b      	bhi.n	8009974 <HAL_TIM_ConfigClockSource+0x16c>
 800989c:	2b20      	cmp	r3, #32
 800989e:	d060      	beq.n	8009962 <HAL_TIM_ConfigClockSource+0x15a>
 80098a0:	2b20      	cmp	r3, #32
 80098a2:	d867      	bhi.n	8009974 <HAL_TIM_ConfigClockSource+0x16c>
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d05c      	beq.n	8009962 <HAL_TIM_ConfigClockSource+0x15a>
 80098a8:	2b10      	cmp	r3, #16
 80098aa:	d05a      	beq.n	8009962 <HAL_TIM_ConfigClockSource+0x15a>
 80098ac:	e062      	b.n	8009974 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6818      	ldr	r0, [r3, #0]
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	6899      	ldr	r1, [r3, #8]
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	685a      	ldr	r2, [r3, #4]
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	68db      	ldr	r3, [r3, #12]
 80098be:	f000 fb67 	bl	8009f90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80098d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	68ba      	ldr	r2, [r7, #8]
 80098d8:	609a      	str	r2, [r3, #8]
      break;
 80098da:	e04f      	b.n	800997c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6818      	ldr	r0, [r3, #0]
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	6899      	ldr	r1, [r3, #8]
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	685a      	ldr	r2, [r3, #4]
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	68db      	ldr	r3, [r3, #12]
 80098ec:	f000 fb50 	bl	8009f90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	689a      	ldr	r2, [r3, #8]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80098fe:	609a      	str	r2, [r3, #8]
      break;
 8009900:	e03c      	b.n	800997c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6818      	ldr	r0, [r3, #0]
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	6859      	ldr	r1, [r3, #4]
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	68db      	ldr	r3, [r3, #12]
 800990e:	461a      	mov	r2, r3
 8009910:	f000 fac4 	bl	8009e9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2150      	movs	r1, #80	; 0x50
 800991a:	4618      	mov	r0, r3
 800991c:	f000 fb1d 	bl	8009f5a <TIM_ITRx_SetConfig>
      break;
 8009920:	e02c      	b.n	800997c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6818      	ldr	r0, [r3, #0]
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	6859      	ldr	r1, [r3, #4]
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	68db      	ldr	r3, [r3, #12]
 800992e:	461a      	mov	r2, r3
 8009930:	f000 fae3 	bl	8009efa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2160      	movs	r1, #96	; 0x60
 800993a:	4618      	mov	r0, r3
 800993c:	f000 fb0d 	bl	8009f5a <TIM_ITRx_SetConfig>
      break;
 8009940:	e01c      	b.n	800997c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6818      	ldr	r0, [r3, #0]
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	6859      	ldr	r1, [r3, #4]
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	461a      	mov	r2, r3
 8009950:	f000 faa4 	bl	8009e9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	2140      	movs	r1, #64	; 0x40
 800995a:	4618      	mov	r0, r3
 800995c:	f000 fafd 	bl	8009f5a <TIM_ITRx_SetConfig>
      break;
 8009960:	e00c      	b.n	800997c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4619      	mov	r1, r3
 800996c:	4610      	mov	r0, r2
 800996e:	f000 faf4 	bl	8009f5a <TIM_ITRx_SetConfig>
      break;
 8009972:	e003      	b.n	800997c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009974:	2301      	movs	r3, #1
 8009976:	73fb      	strb	r3, [r7, #15]
      break;
 8009978:	e000      	b.n	800997c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800997a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2201      	movs	r2, #1
 8009980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800998c:	7bfb      	ldrb	r3, [r7, #15]
}
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009996:	b480      	push	{r7}
 8009998:	b083      	sub	sp, #12
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800999e:	bf00      	nop
 80099a0:	370c      	adds	r7, #12
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr

080099aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80099aa:	b480      	push	{r7}
 80099ac:	b083      	sub	sp, #12
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80099b2:	bf00      	nop
 80099b4:	370c      	adds	r7, #12
 80099b6:	46bd      	mov	sp, r7
 80099b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099bc:	4770      	bx	lr

080099be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80099be:	b480      	push	{r7}
 80099c0:	b083      	sub	sp, #12
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80099c6:	bf00      	nop
 80099c8:	370c      	adds	r7, #12
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr

080099d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80099d2:	b480      	push	{r7}
 80099d4:	b083      	sub	sp, #12
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80099da:	bf00      	nop
 80099dc:	370c      	adds	r7, #12
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr

080099e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80099e6:	b480      	push	{r7}
 80099e8:	b083      	sub	sp, #12
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80099ee:	bf00      	nop
 80099f0:	370c      	adds	r7, #12
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr
	...

080099fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b085      	sub	sp, #20
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	4a40      	ldr	r2, [pc, #256]	; (8009b10 <TIM_Base_SetConfig+0x114>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d013      	beq.n	8009a3c <TIM_Base_SetConfig+0x40>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a1a:	d00f      	beq.n	8009a3c <TIM_Base_SetConfig+0x40>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	4a3d      	ldr	r2, [pc, #244]	; (8009b14 <TIM_Base_SetConfig+0x118>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d00b      	beq.n	8009a3c <TIM_Base_SetConfig+0x40>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	4a3c      	ldr	r2, [pc, #240]	; (8009b18 <TIM_Base_SetConfig+0x11c>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d007      	beq.n	8009a3c <TIM_Base_SetConfig+0x40>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	4a3b      	ldr	r2, [pc, #236]	; (8009b1c <TIM_Base_SetConfig+0x120>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d003      	beq.n	8009a3c <TIM_Base_SetConfig+0x40>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	4a3a      	ldr	r2, [pc, #232]	; (8009b20 <TIM_Base_SetConfig+0x124>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d108      	bne.n	8009a4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	68fa      	ldr	r2, [r7, #12]
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	4a2f      	ldr	r2, [pc, #188]	; (8009b10 <TIM_Base_SetConfig+0x114>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d02b      	beq.n	8009aae <TIM_Base_SetConfig+0xb2>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a5c:	d027      	beq.n	8009aae <TIM_Base_SetConfig+0xb2>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	4a2c      	ldr	r2, [pc, #176]	; (8009b14 <TIM_Base_SetConfig+0x118>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d023      	beq.n	8009aae <TIM_Base_SetConfig+0xb2>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	4a2b      	ldr	r2, [pc, #172]	; (8009b18 <TIM_Base_SetConfig+0x11c>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d01f      	beq.n	8009aae <TIM_Base_SetConfig+0xb2>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	4a2a      	ldr	r2, [pc, #168]	; (8009b1c <TIM_Base_SetConfig+0x120>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d01b      	beq.n	8009aae <TIM_Base_SetConfig+0xb2>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	4a29      	ldr	r2, [pc, #164]	; (8009b20 <TIM_Base_SetConfig+0x124>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d017      	beq.n	8009aae <TIM_Base_SetConfig+0xb2>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	4a28      	ldr	r2, [pc, #160]	; (8009b24 <TIM_Base_SetConfig+0x128>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d013      	beq.n	8009aae <TIM_Base_SetConfig+0xb2>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	4a27      	ldr	r2, [pc, #156]	; (8009b28 <TIM_Base_SetConfig+0x12c>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d00f      	beq.n	8009aae <TIM_Base_SetConfig+0xb2>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	4a26      	ldr	r2, [pc, #152]	; (8009b2c <TIM_Base_SetConfig+0x130>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d00b      	beq.n	8009aae <TIM_Base_SetConfig+0xb2>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	4a25      	ldr	r2, [pc, #148]	; (8009b30 <TIM_Base_SetConfig+0x134>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d007      	beq.n	8009aae <TIM_Base_SetConfig+0xb2>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	4a24      	ldr	r2, [pc, #144]	; (8009b34 <TIM_Base_SetConfig+0x138>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d003      	beq.n	8009aae <TIM_Base_SetConfig+0xb2>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	4a23      	ldr	r2, [pc, #140]	; (8009b38 <TIM_Base_SetConfig+0x13c>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d108      	bne.n	8009ac0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	68fa      	ldr	r2, [r7, #12]
 8009abc:	4313      	orrs	r3, r2
 8009abe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	695b      	ldr	r3, [r3, #20]
 8009aca:	4313      	orrs	r3, r2
 8009acc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	68fa      	ldr	r2, [r7, #12]
 8009ad2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	689a      	ldr	r2, [r3, #8]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	4a0a      	ldr	r2, [pc, #40]	; (8009b10 <TIM_Base_SetConfig+0x114>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d003      	beq.n	8009af4 <TIM_Base_SetConfig+0xf8>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	4a0c      	ldr	r2, [pc, #48]	; (8009b20 <TIM_Base_SetConfig+0x124>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d103      	bne.n	8009afc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	691a      	ldr	r2, [r3, #16]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2201      	movs	r2, #1
 8009b00:	615a      	str	r2, [r3, #20]
}
 8009b02:	bf00      	nop
 8009b04:	3714      	adds	r7, #20
 8009b06:	46bd      	mov	sp, r7
 8009b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0c:	4770      	bx	lr
 8009b0e:	bf00      	nop
 8009b10:	40010000 	.word	0x40010000
 8009b14:	40000400 	.word	0x40000400
 8009b18:	40000800 	.word	0x40000800
 8009b1c:	40000c00 	.word	0x40000c00
 8009b20:	40010400 	.word	0x40010400
 8009b24:	40014000 	.word	0x40014000
 8009b28:	40014400 	.word	0x40014400
 8009b2c:	40014800 	.word	0x40014800
 8009b30:	40001800 	.word	0x40001800
 8009b34:	40001c00 	.word	0x40001c00
 8009b38:	40002000 	.word	0x40002000

08009b3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b087      	sub	sp, #28
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a1b      	ldr	r3, [r3, #32]
 8009b4a:	f023 0201 	bic.w	r2, r3, #1
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a1b      	ldr	r3, [r3, #32]
 8009b56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	699b      	ldr	r3, [r3, #24]
 8009b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f023 0303 	bic.w	r3, r3, #3
 8009b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	68fa      	ldr	r2, [r7, #12]
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	f023 0302 	bic.w	r3, r3, #2
 8009b84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	697a      	ldr	r2, [r7, #20]
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	4a20      	ldr	r2, [pc, #128]	; (8009c14 <TIM_OC1_SetConfig+0xd8>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d003      	beq.n	8009ba0 <TIM_OC1_SetConfig+0x64>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	4a1f      	ldr	r2, [pc, #124]	; (8009c18 <TIM_OC1_SetConfig+0xdc>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d10c      	bne.n	8009bba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	f023 0308 	bic.w	r3, r3, #8
 8009ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	68db      	ldr	r3, [r3, #12]
 8009bac:	697a      	ldr	r2, [r7, #20]
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	f023 0304 	bic.w	r3, r3, #4
 8009bb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4a15      	ldr	r2, [pc, #84]	; (8009c14 <TIM_OC1_SetConfig+0xd8>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d003      	beq.n	8009bca <TIM_OC1_SetConfig+0x8e>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	4a14      	ldr	r2, [pc, #80]	; (8009c18 <TIM_OC1_SetConfig+0xdc>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d111      	bne.n	8009bee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009bd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	695b      	ldr	r3, [r3, #20]
 8009bde:	693a      	ldr	r2, [r7, #16]
 8009be0:	4313      	orrs	r3, r2
 8009be2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	699b      	ldr	r3, [r3, #24]
 8009be8:	693a      	ldr	r2, [r7, #16]
 8009bea:	4313      	orrs	r3, r2
 8009bec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	693a      	ldr	r2, [r7, #16]
 8009bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	68fa      	ldr	r2, [r7, #12]
 8009bf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	685a      	ldr	r2, [r3, #4]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	697a      	ldr	r2, [r7, #20]
 8009c06:	621a      	str	r2, [r3, #32]
}
 8009c08:	bf00      	nop
 8009c0a:	371c      	adds	r7, #28
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr
 8009c14:	40010000 	.word	0x40010000
 8009c18:	40010400 	.word	0x40010400

08009c1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b087      	sub	sp, #28
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6a1b      	ldr	r3, [r3, #32]
 8009c2a:	f023 0210 	bic.w	r2, r3, #16
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6a1b      	ldr	r3, [r3, #32]
 8009c36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	699b      	ldr	r3, [r3, #24]
 8009c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	021b      	lsls	r3, r3, #8
 8009c5a:	68fa      	ldr	r2, [r7, #12]
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	f023 0320 	bic.w	r3, r3, #32
 8009c66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	011b      	lsls	r3, r3, #4
 8009c6e:	697a      	ldr	r2, [r7, #20]
 8009c70:	4313      	orrs	r3, r2
 8009c72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	4a22      	ldr	r2, [pc, #136]	; (8009d00 <TIM_OC2_SetConfig+0xe4>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d003      	beq.n	8009c84 <TIM_OC2_SetConfig+0x68>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	4a21      	ldr	r2, [pc, #132]	; (8009d04 <TIM_OC2_SetConfig+0xe8>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d10d      	bne.n	8009ca0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	68db      	ldr	r3, [r3, #12]
 8009c90:	011b      	lsls	r3, r3, #4
 8009c92:	697a      	ldr	r2, [r7, #20]
 8009c94:	4313      	orrs	r3, r2
 8009c96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	4a17      	ldr	r2, [pc, #92]	; (8009d00 <TIM_OC2_SetConfig+0xe4>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d003      	beq.n	8009cb0 <TIM_OC2_SetConfig+0x94>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	4a16      	ldr	r2, [pc, #88]	; (8009d04 <TIM_OC2_SetConfig+0xe8>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d113      	bne.n	8009cd8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009cb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	695b      	ldr	r3, [r3, #20]
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	693a      	ldr	r2, [r7, #16]
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	699b      	ldr	r3, [r3, #24]
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	693a      	ldr	r2, [r7, #16]
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	693a      	ldr	r2, [r7, #16]
 8009cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	68fa      	ldr	r2, [r7, #12]
 8009ce2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	685a      	ldr	r2, [r3, #4]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	697a      	ldr	r2, [r7, #20]
 8009cf0:	621a      	str	r2, [r3, #32]
}
 8009cf2:	bf00      	nop
 8009cf4:	371c      	adds	r7, #28
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr
 8009cfe:	bf00      	nop
 8009d00:	40010000 	.word	0x40010000
 8009d04:	40010400 	.word	0x40010400

08009d08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b087      	sub	sp, #28
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6a1b      	ldr	r3, [r3, #32]
 8009d16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6a1b      	ldr	r3, [r3, #32]
 8009d22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	69db      	ldr	r3, [r3, #28]
 8009d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f023 0303 	bic.w	r3, r3, #3
 8009d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	68fa      	ldr	r2, [r7, #12]
 8009d46:	4313      	orrs	r3, r2
 8009d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	689b      	ldr	r3, [r3, #8]
 8009d56:	021b      	lsls	r3, r3, #8
 8009d58:	697a      	ldr	r2, [r7, #20]
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	4a21      	ldr	r2, [pc, #132]	; (8009de8 <TIM_OC3_SetConfig+0xe0>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d003      	beq.n	8009d6e <TIM_OC3_SetConfig+0x66>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4a20      	ldr	r2, [pc, #128]	; (8009dec <TIM_OC3_SetConfig+0xe4>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d10d      	bne.n	8009d8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	021b      	lsls	r3, r3, #8
 8009d7c:	697a      	ldr	r2, [r7, #20]
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	4a16      	ldr	r2, [pc, #88]	; (8009de8 <TIM_OC3_SetConfig+0xe0>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d003      	beq.n	8009d9a <TIM_OC3_SetConfig+0x92>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	4a15      	ldr	r2, [pc, #84]	; (8009dec <TIM_OC3_SetConfig+0xe4>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d113      	bne.n	8009dc2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009da0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009da8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	695b      	ldr	r3, [r3, #20]
 8009dae:	011b      	lsls	r3, r3, #4
 8009db0:	693a      	ldr	r2, [r7, #16]
 8009db2:	4313      	orrs	r3, r2
 8009db4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	699b      	ldr	r3, [r3, #24]
 8009dba:	011b      	lsls	r3, r3, #4
 8009dbc:	693a      	ldr	r2, [r7, #16]
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	693a      	ldr	r2, [r7, #16]
 8009dc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	685a      	ldr	r2, [r3, #4]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	697a      	ldr	r2, [r7, #20]
 8009dda:	621a      	str	r2, [r3, #32]
}
 8009ddc:	bf00      	nop
 8009dde:	371c      	adds	r7, #28
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr
 8009de8:	40010000 	.word	0x40010000
 8009dec:	40010400 	.word	0x40010400

08009df0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b087      	sub	sp, #28
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a1b      	ldr	r3, [r3, #32]
 8009dfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a1b      	ldr	r3, [r3, #32]
 8009e0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	69db      	ldr	r3, [r3, #28]
 8009e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	021b      	lsls	r3, r3, #8
 8009e2e:	68fa      	ldr	r2, [r7, #12]
 8009e30:	4313      	orrs	r3, r2
 8009e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009e3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	031b      	lsls	r3, r3, #12
 8009e42:	693a      	ldr	r2, [r7, #16]
 8009e44:	4313      	orrs	r3, r2
 8009e46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	4a12      	ldr	r2, [pc, #72]	; (8009e94 <TIM_OC4_SetConfig+0xa4>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d003      	beq.n	8009e58 <TIM_OC4_SetConfig+0x68>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	4a11      	ldr	r2, [pc, #68]	; (8009e98 <TIM_OC4_SetConfig+0xa8>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d109      	bne.n	8009e6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	695b      	ldr	r3, [r3, #20]
 8009e64:	019b      	lsls	r3, r3, #6
 8009e66:	697a      	ldr	r2, [r7, #20]
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	697a      	ldr	r2, [r7, #20]
 8009e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	68fa      	ldr	r2, [r7, #12]
 8009e76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	685a      	ldr	r2, [r3, #4]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	693a      	ldr	r2, [r7, #16]
 8009e84:	621a      	str	r2, [r3, #32]
}
 8009e86:	bf00      	nop
 8009e88:	371c      	adds	r7, #28
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr
 8009e92:	bf00      	nop
 8009e94:	40010000 	.word	0x40010000
 8009e98:	40010400 	.word	0x40010400

08009e9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b087      	sub	sp, #28
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	6a1b      	ldr	r3, [r3, #32]
 8009eac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	6a1b      	ldr	r3, [r3, #32]
 8009eb2:	f023 0201 	bic.w	r2, r3, #1
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	699b      	ldr	r3, [r3, #24]
 8009ebe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ec6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	011b      	lsls	r3, r3, #4
 8009ecc:	693a      	ldr	r2, [r7, #16]
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	f023 030a 	bic.w	r3, r3, #10
 8009ed8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009eda:	697a      	ldr	r2, [r7, #20]
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	693a      	ldr	r2, [r7, #16]
 8009ee6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	697a      	ldr	r2, [r7, #20]
 8009eec:	621a      	str	r2, [r3, #32]
}
 8009eee:	bf00      	nop
 8009ef0:	371c      	adds	r7, #28
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr

08009efa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009efa:	b480      	push	{r7}
 8009efc:	b087      	sub	sp, #28
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	60f8      	str	r0, [r7, #12]
 8009f02:	60b9      	str	r1, [r7, #8]
 8009f04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	6a1b      	ldr	r3, [r3, #32]
 8009f0a:	f023 0210 	bic.w	r2, r3, #16
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	699b      	ldr	r3, [r3, #24]
 8009f16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	6a1b      	ldr	r3, [r3, #32]
 8009f1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	031b      	lsls	r3, r3, #12
 8009f2a:	697a      	ldr	r2, [r7, #20]
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009f36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	011b      	lsls	r3, r3, #4
 8009f3c:	693a      	ldr	r2, [r7, #16]
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	697a      	ldr	r2, [r7, #20]
 8009f46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	693a      	ldr	r2, [r7, #16]
 8009f4c:	621a      	str	r2, [r3, #32]
}
 8009f4e:	bf00      	nop
 8009f50:	371c      	adds	r7, #28
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr

08009f5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f5a:	b480      	push	{r7}
 8009f5c:	b085      	sub	sp, #20
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	6078      	str	r0, [r7, #4]
 8009f62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f72:	683a      	ldr	r2, [r7, #0]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	4313      	orrs	r3, r2
 8009f78:	f043 0307 	orr.w	r3, r3, #7
 8009f7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	609a      	str	r2, [r3, #8]
}
 8009f84:	bf00      	nop
 8009f86:	3714      	adds	r7, #20
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b087      	sub	sp, #28
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	60f8      	str	r0, [r7, #12]
 8009f98:	60b9      	str	r1, [r7, #8]
 8009f9a:	607a      	str	r2, [r7, #4]
 8009f9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	689b      	ldr	r3, [r3, #8]
 8009fa2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009faa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	021a      	lsls	r2, r3, #8
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	431a      	orrs	r2, r3
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	697a      	ldr	r2, [r7, #20]
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	697a      	ldr	r2, [r7, #20]
 8009fc2:	609a      	str	r2, [r3, #8]
}
 8009fc4:	bf00      	nop
 8009fc6:	371c      	adds	r7, #28
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b087      	sub	sp, #28
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	f003 031f 	and.w	r3, r3, #31
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8009fe8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	6a1a      	ldr	r2, [r3, #32]
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	43db      	mvns	r3, r3
 8009ff2:	401a      	ands	r2, r3
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	6a1a      	ldr	r2, [r3, #32]
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	f003 031f 	and.w	r3, r3, #31
 800a002:	6879      	ldr	r1, [r7, #4]
 800a004:	fa01 f303 	lsl.w	r3, r1, r3
 800a008:	431a      	orrs	r2, r3
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	621a      	str	r2, [r3, #32]
}
 800a00e:	bf00      	nop
 800a010:	371c      	adds	r7, #28
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr
	...

0800a01c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b085      	sub	sp, #20
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d101      	bne.n	800a034 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a030:	2302      	movs	r3, #2
 800a032:	e05a      	b.n	800a0ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2201      	movs	r2, #1
 800a038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2202      	movs	r2, #2
 800a040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a05a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	68fa      	ldr	r2, [r7, #12]
 800a062:	4313      	orrs	r3, r2
 800a064:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	68fa      	ldr	r2, [r7, #12]
 800a06c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4a21      	ldr	r2, [pc, #132]	; (800a0f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d022      	beq.n	800a0be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a080:	d01d      	beq.n	800a0be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4a1d      	ldr	r2, [pc, #116]	; (800a0fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d018      	beq.n	800a0be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a1b      	ldr	r2, [pc, #108]	; (800a100 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d013      	beq.n	800a0be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4a1a      	ldr	r2, [pc, #104]	; (800a104 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d00e      	beq.n	800a0be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4a18      	ldr	r2, [pc, #96]	; (800a108 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d009      	beq.n	800a0be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4a17      	ldr	r2, [pc, #92]	; (800a10c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d004      	beq.n	800a0be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4a15      	ldr	r2, [pc, #84]	; (800a110 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d10c      	bne.n	800a0d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	68ba      	ldr	r2, [r7, #8]
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	68ba      	ldr	r2, [r7, #8]
 800a0d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a0e8:	2300      	movs	r3, #0
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3714      	adds	r7, #20
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop
 800a0f8:	40010000 	.word	0x40010000
 800a0fc:	40000400 	.word	0x40000400
 800a100:	40000800 	.word	0x40000800
 800a104:	40000c00 	.word	0x40000c00
 800a108:	40010400 	.word	0x40010400
 800a10c:	40014000 	.word	0x40014000
 800a110:	40001800 	.word	0x40001800

0800a114 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a114:	b480      	push	{r7}
 800a116:	b085      	sub	sp, #20
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a11e:	2300      	movs	r3, #0
 800a120:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d101      	bne.n	800a130 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a12c:	2302      	movs	r3, #2
 800a12e:	e03d      	b.n	800a1ac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	68db      	ldr	r3, [r3, #12]
 800a142:	4313      	orrs	r3, r2
 800a144:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	4313      	orrs	r3, r2
 800a152:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	4313      	orrs	r3, r2
 800a160:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4313      	orrs	r3, r2
 800a16e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	691b      	ldr	r3, [r3, #16]
 800a17a:	4313      	orrs	r3, r2
 800a17c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	695b      	ldr	r3, [r3, #20]
 800a188:	4313      	orrs	r3, r2
 800a18a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	69db      	ldr	r3, [r3, #28]
 800a196:	4313      	orrs	r3, r2
 800a198:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	68fa      	ldr	r2, [r7, #12]
 800a1a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a1aa:	2300      	movs	r3, #0
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3714      	adds	r7, #20
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr

0800a1b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a1c0:	bf00      	nop
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a1d4:	bf00      	nop
 800a1d6:	370c      	adds	r7, #12
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr

0800a1e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d101      	bne.n	800a1f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e03f      	b.n	800a272 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1f8:	b2db      	uxtb	r3, r3
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d106      	bne.n	800a20c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2200      	movs	r2, #0
 800a202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f7f9 fbba 	bl	8003980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2224      	movs	r2, #36	; 0x24
 800a210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	68da      	ldr	r2, [r3, #12]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a222:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 f829 	bl	800a27c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	691a      	ldr	r2, [r3, #16]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a238:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	695a      	ldr	r2, [r3, #20]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a248:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	68da      	ldr	r2, [r3, #12]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a258:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2200      	movs	r2, #0
 800a25e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2220      	movs	r2, #32
 800a264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2220      	movs	r2, #32
 800a26c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a270:	2300      	movs	r3, #0
}
 800a272:	4618      	mov	r0, r3
 800a274:	3708      	adds	r7, #8
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
	...

0800a27c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a27c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a280:	b0c0      	sub	sp, #256	; 0x100
 800a282:	af00      	add	r7, sp, #0
 800a284:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	691b      	ldr	r3, [r3, #16]
 800a290:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a298:	68d9      	ldr	r1, [r3, #12]
 800a29a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a29e:	681a      	ldr	r2, [r3, #0]
 800a2a0:	ea40 0301 	orr.w	r3, r0, r1
 800a2a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a2a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2aa:	689a      	ldr	r2, [r3, #8]
 800a2ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2b0:	691b      	ldr	r3, [r3, #16]
 800a2b2:	431a      	orrs	r2, r3
 800a2b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2b8:	695b      	ldr	r3, [r3, #20]
 800a2ba:	431a      	orrs	r2, r3
 800a2bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2c0:	69db      	ldr	r3, [r3, #28]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a2c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	68db      	ldr	r3, [r3, #12]
 800a2d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a2d4:	f021 010c 	bic.w	r1, r1, #12
 800a2d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a2e2:	430b      	orrs	r3, r1
 800a2e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a2e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	695b      	ldr	r3, [r3, #20]
 800a2ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a2f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2f6:	6999      	ldr	r1, [r3, #24]
 800a2f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2fc:	681a      	ldr	r2, [r3, #0]
 800a2fe:	ea40 0301 	orr.w	r3, r0, r1
 800a302:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	4b8f      	ldr	r3, [pc, #572]	; (800a548 <UART_SetConfig+0x2cc>)
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d005      	beq.n	800a31c <UART_SetConfig+0xa0>
 800a310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	4b8d      	ldr	r3, [pc, #564]	; (800a54c <UART_SetConfig+0x2d0>)
 800a318:	429a      	cmp	r2, r3
 800a31a:	d104      	bne.n	800a326 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a31c:	f7fd fba6 	bl	8007a6c <HAL_RCC_GetPCLK2Freq>
 800a320:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a324:	e003      	b.n	800a32e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a326:	f7fd fb8d 	bl	8007a44 <HAL_RCC_GetPCLK1Freq>
 800a32a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a32e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a332:	69db      	ldr	r3, [r3, #28]
 800a334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a338:	f040 810c 	bne.w	800a554 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a33c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a340:	2200      	movs	r2, #0
 800a342:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a346:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a34a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a34e:	4622      	mov	r2, r4
 800a350:	462b      	mov	r3, r5
 800a352:	1891      	adds	r1, r2, r2
 800a354:	65b9      	str	r1, [r7, #88]	; 0x58
 800a356:	415b      	adcs	r3, r3
 800a358:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a35a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a35e:	4621      	mov	r1, r4
 800a360:	eb12 0801 	adds.w	r8, r2, r1
 800a364:	4629      	mov	r1, r5
 800a366:	eb43 0901 	adc.w	r9, r3, r1
 800a36a:	f04f 0200 	mov.w	r2, #0
 800a36e:	f04f 0300 	mov.w	r3, #0
 800a372:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a376:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a37a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a37e:	4690      	mov	r8, r2
 800a380:	4699      	mov	r9, r3
 800a382:	4623      	mov	r3, r4
 800a384:	eb18 0303 	adds.w	r3, r8, r3
 800a388:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a38c:	462b      	mov	r3, r5
 800a38e:	eb49 0303 	adc.w	r3, r9, r3
 800a392:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a3a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a3a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a3aa:	460b      	mov	r3, r1
 800a3ac:	18db      	adds	r3, r3, r3
 800a3ae:	653b      	str	r3, [r7, #80]	; 0x50
 800a3b0:	4613      	mov	r3, r2
 800a3b2:	eb42 0303 	adc.w	r3, r2, r3
 800a3b6:	657b      	str	r3, [r7, #84]	; 0x54
 800a3b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a3bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a3c0:	f7f5 ffde 	bl	8000380 <__aeabi_uldivmod>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	460b      	mov	r3, r1
 800a3c8:	4b61      	ldr	r3, [pc, #388]	; (800a550 <UART_SetConfig+0x2d4>)
 800a3ca:	fba3 2302 	umull	r2, r3, r3, r2
 800a3ce:	095b      	lsrs	r3, r3, #5
 800a3d0:	011c      	lsls	r4, r3, #4
 800a3d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a3dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a3e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a3e4:	4642      	mov	r2, r8
 800a3e6:	464b      	mov	r3, r9
 800a3e8:	1891      	adds	r1, r2, r2
 800a3ea:	64b9      	str	r1, [r7, #72]	; 0x48
 800a3ec:	415b      	adcs	r3, r3
 800a3ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a3f4:	4641      	mov	r1, r8
 800a3f6:	eb12 0a01 	adds.w	sl, r2, r1
 800a3fa:	4649      	mov	r1, r9
 800a3fc:	eb43 0b01 	adc.w	fp, r3, r1
 800a400:	f04f 0200 	mov.w	r2, #0
 800a404:	f04f 0300 	mov.w	r3, #0
 800a408:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a40c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a410:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a414:	4692      	mov	sl, r2
 800a416:	469b      	mov	fp, r3
 800a418:	4643      	mov	r3, r8
 800a41a:	eb1a 0303 	adds.w	r3, sl, r3
 800a41e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a422:	464b      	mov	r3, r9
 800a424:	eb4b 0303 	adc.w	r3, fp, r3
 800a428:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a42c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	2200      	movs	r2, #0
 800a434:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a438:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a43c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a440:	460b      	mov	r3, r1
 800a442:	18db      	adds	r3, r3, r3
 800a444:	643b      	str	r3, [r7, #64]	; 0x40
 800a446:	4613      	mov	r3, r2
 800a448:	eb42 0303 	adc.w	r3, r2, r3
 800a44c:	647b      	str	r3, [r7, #68]	; 0x44
 800a44e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a452:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a456:	f7f5 ff93 	bl	8000380 <__aeabi_uldivmod>
 800a45a:	4602      	mov	r2, r0
 800a45c:	460b      	mov	r3, r1
 800a45e:	4611      	mov	r1, r2
 800a460:	4b3b      	ldr	r3, [pc, #236]	; (800a550 <UART_SetConfig+0x2d4>)
 800a462:	fba3 2301 	umull	r2, r3, r3, r1
 800a466:	095b      	lsrs	r3, r3, #5
 800a468:	2264      	movs	r2, #100	; 0x64
 800a46a:	fb02 f303 	mul.w	r3, r2, r3
 800a46e:	1acb      	subs	r3, r1, r3
 800a470:	00db      	lsls	r3, r3, #3
 800a472:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a476:	4b36      	ldr	r3, [pc, #216]	; (800a550 <UART_SetConfig+0x2d4>)
 800a478:	fba3 2302 	umull	r2, r3, r3, r2
 800a47c:	095b      	lsrs	r3, r3, #5
 800a47e:	005b      	lsls	r3, r3, #1
 800a480:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a484:	441c      	add	r4, r3
 800a486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a48a:	2200      	movs	r2, #0
 800a48c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a490:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a494:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a498:	4642      	mov	r2, r8
 800a49a:	464b      	mov	r3, r9
 800a49c:	1891      	adds	r1, r2, r2
 800a49e:	63b9      	str	r1, [r7, #56]	; 0x38
 800a4a0:	415b      	adcs	r3, r3
 800a4a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a4a8:	4641      	mov	r1, r8
 800a4aa:	1851      	adds	r1, r2, r1
 800a4ac:	6339      	str	r1, [r7, #48]	; 0x30
 800a4ae:	4649      	mov	r1, r9
 800a4b0:	414b      	adcs	r3, r1
 800a4b2:	637b      	str	r3, [r7, #52]	; 0x34
 800a4b4:	f04f 0200 	mov.w	r2, #0
 800a4b8:	f04f 0300 	mov.w	r3, #0
 800a4bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a4c0:	4659      	mov	r1, fp
 800a4c2:	00cb      	lsls	r3, r1, #3
 800a4c4:	4651      	mov	r1, sl
 800a4c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a4ca:	4651      	mov	r1, sl
 800a4cc:	00ca      	lsls	r2, r1, #3
 800a4ce:	4610      	mov	r0, r2
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	4642      	mov	r2, r8
 800a4d6:	189b      	adds	r3, r3, r2
 800a4d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a4dc:	464b      	mov	r3, r9
 800a4de:	460a      	mov	r2, r1
 800a4e0:	eb42 0303 	adc.w	r3, r2, r3
 800a4e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a4e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a4f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a4f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a4fc:	460b      	mov	r3, r1
 800a4fe:	18db      	adds	r3, r3, r3
 800a500:	62bb      	str	r3, [r7, #40]	; 0x28
 800a502:	4613      	mov	r3, r2
 800a504:	eb42 0303 	adc.w	r3, r2, r3
 800a508:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a50a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a50e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a512:	f7f5 ff35 	bl	8000380 <__aeabi_uldivmod>
 800a516:	4602      	mov	r2, r0
 800a518:	460b      	mov	r3, r1
 800a51a:	4b0d      	ldr	r3, [pc, #52]	; (800a550 <UART_SetConfig+0x2d4>)
 800a51c:	fba3 1302 	umull	r1, r3, r3, r2
 800a520:	095b      	lsrs	r3, r3, #5
 800a522:	2164      	movs	r1, #100	; 0x64
 800a524:	fb01 f303 	mul.w	r3, r1, r3
 800a528:	1ad3      	subs	r3, r2, r3
 800a52a:	00db      	lsls	r3, r3, #3
 800a52c:	3332      	adds	r3, #50	; 0x32
 800a52e:	4a08      	ldr	r2, [pc, #32]	; (800a550 <UART_SetConfig+0x2d4>)
 800a530:	fba2 2303 	umull	r2, r3, r2, r3
 800a534:	095b      	lsrs	r3, r3, #5
 800a536:	f003 0207 	and.w	r2, r3, #7
 800a53a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4422      	add	r2, r4
 800a542:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a544:	e105      	b.n	800a752 <UART_SetConfig+0x4d6>
 800a546:	bf00      	nop
 800a548:	40011000 	.word	0x40011000
 800a54c:	40011400 	.word	0x40011400
 800a550:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a554:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a558:	2200      	movs	r2, #0
 800a55a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a55e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a562:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a566:	4642      	mov	r2, r8
 800a568:	464b      	mov	r3, r9
 800a56a:	1891      	adds	r1, r2, r2
 800a56c:	6239      	str	r1, [r7, #32]
 800a56e:	415b      	adcs	r3, r3
 800a570:	627b      	str	r3, [r7, #36]	; 0x24
 800a572:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a576:	4641      	mov	r1, r8
 800a578:	1854      	adds	r4, r2, r1
 800a57a:	4649      	mov	r1, r9
 800a57c:	eb43 0501 	adc.w	r5, r3, r1
 800a580:	f04f 0200 	mov.w	r2, #0
 800a584:	f04f 0300 	mov.w	r3, #0
 800a588:	00eb      	lsls	r3, r5, #3
 800a58a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a58e:	00e2      	lsls	r2, r4, #3
 800a590:	4614      	mov	r4, r2
 800a592:	461d      	mov	r5, r3
 800a594:	4643      	mov	r3, r8
 800a596:	18e3      	adds	r3, r4, r3
 800a598:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a59c:	464b      	mov	r3, r9
 800a59e:	eb45 0303 	adc.w	r3, r5, r3
 800a5a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a5a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a5b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a5b6:	f04f 0200 	mov.w	r2, #0
 800a5ba:	f04f 0300 	mov.w	r3, #0
 800a5be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a5c2:	4629      	mov	r1, r5
 800a5c4:	008b      	lsls	r3, r1, #2
 800a5c6:	4621      	mov	r1, r4
 800a5c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a5cc:	4621      	mov	r1, r4
 800a5ce:	008a      	lsls	r2, r1, #2
 800a5d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a5d4:	f7f5 fed4 	bl	8000380 <__aeabi_uldivmod>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	460b      	mov	r3, r1
 800a5dc:	4b60      	ldr	r3, [pc, #384]	; (800a760 <UART_SetConfig+0x4e4>)
 800a5de:	fba3 2302 	umull	r2, r3, r3, r2
 800a5e2:	095b      	lsrs	r3, r3, #5
 800a5e4:	011c      	lsls	r4, r3, #4
 800a5e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a5f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a5f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a5f8:	4642      	mov	r2, r8
 800a5fa:	464b      	mov	r3, r9
 800a5fc:	1891      	adds	r1, r2, r2
 800a5fe:	61b9      	str	r1, [r7, #24]
 800a600:	415b      	adcs	r3, r3
 800a602:	61fb      	str	r3, [r7, #28]
 800a604:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a608:	4641      	mov	r1, r8
 800a60a:	1851      	adds	r1, r2, r1
 800a60c:	6139      	str	r1, [r7, #16]
 800a60e:	4649      	mov	r1, r9
 800a610:	414b      	adcs	r3, r1
 800a612:	617b      	str	r3, [r7, #20]
 800a614:	f04f 0200 	mov.w	r2, #0
 800a618:	f04f 0300 	mov.w	r3, #0
 800a61c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a620:	4659      	mov	r1, fp
 800a622:	00cb      	lsls	r3, r1, #3
 800a624:	4651      	mov	r1, sl
 800a626:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a62a:	4651      	mov	r1, sl
 800a62c:	00ca      	lsls	r2, r1, #3
 800a62e:	4610      	mov	r0, r2
 800a630:	4619      	mov	r1, r3
 800a632:	4603      	mov	r3, r0
 800a634:	4642      	mov	r2, r8
 800a636:	189b      	adds	r3, r3, r2
 800a638:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a63c:	464b      	mov	r3, r9
 800a63e:	460a      	mov	r2, r1
 800a640:	eb42 0303 	adc.w	r3, r2, r3
 800a644:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	2200      	movs	r2, #0
 800a650:	67bb      	str	r3, [r7, #120]	; 0x78
 800a652:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a654:	f04f 0200 	mov.w	r2, #0
 800a658:	f04f 0300 	mov.w	r3, #0
 800a65c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a660:	4649      	mov	r1, r9
 800a662:	008b      	lsls	r3, r1, #2
 800a664:	4641      	mov	r1, r8
 800a666:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a66a:	4641      	mov	r1, r8
 800a66c:	008a      	lsls	r2, r1, #2
 800a66e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a672:	f7f5 fe85 	bl	8000380 <__aeabi_uldivmod>
 800a676:	4602      	mov	r2, r0
 800a678:	460b      	mov	r3, r1
 800a67a:	4b39      	ldr	r3, [pc, #228]	; (800a760 <UART_SetConfig+0x4e4>)
 800a67c:	fba3 1302 	umull	r1, r3, r3, r2
 800a680:	095b      	lsrs	r3, r3, #5
 800a682:	2164      	movs	r1, #100	; 0x64
 800a684:	fb01 f303 	mul.w	r3, r1, r3
 800a688:	1ad3      	subs	r3, r2, r3
 800a68a:	011b      	lsls	r3, r3, #4
 800a68c:	3332      	adds	r3, #50	; 0x32
 800a68e:	4a34      	ldr	r2, [pc, #208]	; (800a760 <UART_SetConfig+0x4e4>)
 800a690:	fba2 2303 	umull	r2, r3, r2, r3
 800a694:	095b      	lsrs	r3, r3, #5
 800a696:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a69a:	441c      	add	r4, r3
 800a69c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	673b      	str	r3, [r7, #112]	; 0x70
 800a6a4:	677a      	str	r2, [r7, #116]	; 0x74
 800a6a6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a6aa:	4642      	mov	r2, r8
 800a6ac:	464b      	mov	r3, r9
 800a6ae:	1891      	adds	r1, r2, r2
 800a6b0:	60b9      	str	r1, [r7, #8]
 800a6b2:	415b      	adcs	r3, r3
 800a6b4:	60fb      	str	r3, [r7, #12]
 800a6b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a6ba:	4641      	mov	r1, r8
 800a6bc:	1851      	adds	r1, r2, r1
 800a6be:	6039      	str	r1, [r7, #0]
 800a6c0:	4649      	mov	r1, r9
 800a6c2:	414b      	adcs	r3, r1
 800a6c4:	607b      	str	r3, [r7, #4]
 800a6c6:	f04f 0200 	mov.w	r2, #0
 800a6ca:	f04f 0300 	mov.w	r3, #0
 800a6ce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a6d2:	4659      	mov	r1, fp
 800a6d4:	00cb      	lsls	r3, r1, #3
 800a6d6:	4651      	mov	r1, sl
 800a6d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a6dc:	4651      	mov	r1, sl
 800a6de:	00ca      	lsls	r2, r1, #3
 800a6e0:	4610      	mov	r0, r2
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	4642      	mov	r2, r8
 800a6e8:	189b      	adds	r3, r3, r2
 800a6ea:	66bb      	str	r3, [r7, #104]	; 0x68
 800a6ec:	464b      	mov	r3, r9
 800a6ee:	460a      	mov	r2, r1
 800a6f0:	eb42 0303 	adc.w	r3, r2, r3
 800a6f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a6f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	663b      	str	r3, [r7, #96]	; 0x60
 800a700:	667a      	str	r2, [r7, #100]	; 0x64
 800a702:	f04f 0200 	mov.w	r2, #0
 800a706:	f04f 0300 	mov.w	r3, #0
 800a70a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a70e:	4649      	mov	r1, r9
 800a710:	008b      	lsls	r3, r1, #2
 800a712:	4641      	mov	r1, r8
 800a714:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a718:	4641      	mov	r1, r8
 800a71a:	008a      	lsls	r2, r1, #2
 800a71c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a720:	f7f5 fe2e 	bl	8000380 <__aeabi_uldivmod>
 800a724:	4602      	mov	r2, r0
 800a726:	460b      	mov	r3, r1
 800a728:	4b0d      	ldr	r3, [pc, #52]	; (800a760 <UART_SetConfig+0x4e4>)
 800a72a:	fba3 1302 	umull	r1, r3, r3, r2
 800a72e:	095b      	lsrs	r3, r3, #5
 800a730:	2164      	movs	r1, #100	; 0x64
 800a732:	fb01 f303 	mul.w	r3, r1, r3
 800a736:	1ad3      	subs	r3, r2, r3
 800a738:	011b      	lsls	r3, r3, #4
 800a73a:	3332      	adds	r3, #50	; 0x32
 800a73c:	4a08      	ldr	r2, [pc, #32]	; (800a760 <UART_SetConfig+0x4e4>)
 800a73e:	fba2 2303 	umull	r2, r3, r2, r3
 800a742:	095b      	lsrs	r3, r3, #5
 800a744:	f003 020f 	and.w	r2, r3, #15
 800a748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4422      	add	r2, r4
 800a750:	609a      	str	r2, [r3, #8]
}
 800a752:	bf00      	nop
 800a754:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a758:	46bd      	mov	sp, r7
 800a75a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a75e:	bf00      	nop
 800a760:	51eb851f 	.word	0x51eb851f

0800a764 <__errno>:
 800a764:	4b01      	ldr	r3, [pc, #4]	; (800a76c <__errno+0x8>)
 800a766:	6818      	ldr	r0, [r3, #0]
 800a768:	4770      	bx	lr
 800a76a:	bf00      	nop
 800a76c:	20000154 	.word	0x20000154

0800a770 <__libc_init_array>:
 800a770:	b570      	push	{r4, r5, r6, lr}
 800a772:	4d0d      	ldr	r5, [pc, #52]	; (800a7a8 <__libc_init_array+0x38>)
 800a774:	4c0d      	ldr	r4, [pc, #52]	; (800a7ac <__libc_init_array+0x3c>)
 800a776:	1b64      	subs	r4, r4, r5
 800a778:	10a4      	asrs	r4, r4, #2
 800a77a:	2600      	movs	r6, #0
 800a77c:	42a6      	cmp	r6, r4
 800a77e:	d109      	bne.n	800a794 <__libc_init_array+0x24>
 800a780:	4d0b      	ldr	r5, [pc, #44]	; (800a7b0 <__libc_init_array+0x40>)
 800a782:	4c0c      	ldr	r4, [pc, #48]	; (800a7b4 <__libc_init_array+0x44>)
 800a784:	f002 f99c 	bl	800cac0 <_init>
 800a788:	1b64      	subs	r4, r4, r5
 800a78a:	10a4      	asrs	r4, r4, #2
 800a78c:	2600      	movs	r6, #0
 800a78e:	42a6      	cmp	r6, r4
 800a790:	d105      	bne.n	800a79e <__libc_init_array+0x2e>
 800a792:	bd70      	pop	{r4, r5, r6, pc}
 800a794:	f855 3b04 	ldr.w	r3, [r5], #4
 800a798:	4798      	blx	r3
 800a79a:	3601      	adds	r6, #1
 800a79c:	e7ee      	b.n	800a77c <__libc_init_array+0xc>
 800a79e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7a2:	4798      	blx	r3
 800a7a4:	3601      	adds	r6, #1
 800a7a6:	e7f2      	b.n	800a78e <__libc_init_array+0x1e>
 800a7a8:	0800ce04 	.word	0x0800ce04
 800a7ac:	0800ce04 	.word	0x0800ce04
 800a7b0:	0800ce04 	.word	0x0800ce04
 800a7b4:	0800ce08 	.word	0x0800ce08

0800a7b8 <localtime>:
 800a7b8:	b538      	push	{r3, r4, r5, lr}
 800a7ba:	4b0b      	ldr	r3, [pc, #44]	; (800a7e8 <localtime+0x30>)
 800a7bc:	681d      	ldr	r5, [r3, #0]
 800a7be:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800a7c0:	4604      	mov	r4, r0
 800a7c2:	b953      	cbnz	r3, 800a7da <localtime+0x22>
 800a7c4:	2024      	movs	r0, #36	; 0x24
 800a7c6:	f000 f909 	bl	800a9dc <malloc>
 800a7ca:	4602      	mov	r2, r0
 800a7cc:	63e8      	str	r0, [r5, #60]	; 0x3c
 800a7ce:	b920      	cbnz	r0, 800a7da <localtime+0x22>
 800a7d0:	4b06      	ldr	r3, [pc, #24]	; (800a7ec <localtime+0x34>)
 800a7d2:	4807      	ldr	r0, [pc, #28]	; (800a7f0 <localtime+0x38>)
 800a7d4:	2132      	movs	r1, #50	; 0x32
 800a7d6:	f000 fc53 	bl	800b080 <__assert_func>
 800a7da:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800a7dc:	4620      	mov	r0, r4
 800a7de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7e2:	f000 b807 	b.w	800a7f4 <localtime_r>
 800a7e6:	bf00      	nop
 800a7e8:	20000154 	.word	0x20000154
 800a7ec:	0800cb00 	.word	0x0800cb00
 800a7f0:	0800cb17 	.word	0x0800cb17

0800a7f4 <localtime_r>:
 800a7f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a7f8:	4680      	mov	r8, r0
 800a7fa:	9101      	str	r1, [sp, #4]
 800a7fc:	f000 fcb4 	bl	800b168 <__gettzinfo>
 800a800:	9901      	ldr	r1, [sp, #4]
 800a802:	4605      	mov	r5, r0
 800a804:	4640      	mov	r0, r8
 800a806:	f000 fcb3 	bl	800b170 <gmtime_r>
 800a80a:	6943      	ldr	r3, [r0, #20]
 800a80c:	0799      	lsls	r1, r3, #30
 800a80e:	4604      	mov	r4, r0
 800a810:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 800a814:	d105      	bne.n	800a822 <localtime_r+0x2e>
 800a816:	2264      	movs	r2, #100	; 0x64
 800a818:	fb97 f3f2 	sdiv	r3, r7, r2
 800a81c:	fb02 7313 	mls	r3, r2, r3, r7
 800a820:	bb73      	cbnz	r3, 800a880 <localtime_r+0x8c>
 800a822:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800a826:	fb97 f6f3 	sdiv	r6, r7, r3
 800a82a:	fb03 7616 	mls	r6, r3, r6, r7
 800a82e:	fab6 f386 	clz	r3, r6
 800a832:	095b      	lsrs	r3, r3, #5
 800a834:	4e67      	ldr	r6, [pc, #412]	; (800a9d4 <localtime_r+0x1e0>)
 800a836:	2230      	movs	r2, #48	; 0x30
 800a838:	fb02 6603 	mla	r6, r2, r3, r6
 800a83c:	f000 fa8e 	bl	800ad5c <__tz_lock>
 800a840:	f000 fa98 	bl	800ad74 <_tzset_unlocked>
 800a844:	4b64      	ldr	r3, [pc, #400]	; (800a9d8 <localtime_r+0x1e4>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	b34b      	cbz	r3, 800a89e <localtime_r+0xaa>
 800a84a:	686b      	ldr	r3, [r5, #4]
 800a84c:	42bb      	cmp	r3, r7
 800a84e:	d119      	bne.n	800a884 <localtime_r+0x90>
 800a850:	682f      	ldr	r7, [r5, #0]
 800a852:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a856:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 800a85a:	b9df      	cbnz	r7, 800a894 <localtime_r+0xa0>
 800a85c:	4282      	cmp	r2, r0
 800a85e:	eb73 0101 	sbcs.w	r1, r3, r1
 800a862:	da23      	bge.n	800a8ac <localtime_r+0xb8>
 800a864:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 800a868:	4282      	cmp	r2, r0
 800a86a:	eb73 0701 	sbcs.w	r7, r3, r1
 800a86e:	bfb4      	ite	lt
 800a870:	2701      	movlt	r7, #1
 800a872:	2700      	movge	r7, #0
 800a874:	4282      	cmp	r2, r0
 800a876:	418b      	sbcs	r3, r1
 800a878:	6227      	str	r7, [r4, #32]
 800a87a:	db19      	blt.n	800a8b0 <localtime_r+0xbc>
 800a87c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a87e:	e018      	b.n	800a8b2 <localtime_r+0xbe>
 800a880:	2301      	movs	r3, #1
 800a882:	e7d7      	b.n	800a834 <localtime_r+0x40>
 800a884:	4638      	mov	r0, r7
 800a886:	f000 f9bf 	bl	800ac08 <__tzcalc_limits>
 800a88a:	2800      	cmp	r0, #0
 800a88c:	d1e0      	bne.n	800a850 <localtime_r+0x5c>
 800a88e:	f04f 33ff 	mov.w	r3, #4294967295
 800a892:	e004      	b.n	800a89e <localtime_r+0xaa>
 800a894:	4282      	cmp	r2, r0
 800a896:	eb73 0101 	sbcs.w	r1, r3, r1
 800a89a:	da02      	bge.n	800a8a2 <localtime_r+0xae>
 800a89c:	2300      	movs	r3, #0
 800a89e:	6223      	str	r3, [r4, #32]
 800a8a0:	e7ec      	b.n	800a87c <localtime_r+0x88>
 800a8a2:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 800a8a6:	4282      	cmp	r2, r0
 800a8a8:	418b      	sbcs	r3, r1
 800a8aa:	daf7      	bge.n	800a89c <localtime_r+0xa8>
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	6223      	str	r3, [r4, #32]
 800a8b0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800a8b2:	6861      	ldr	r1, [r4, #4]
 800a8b4:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800a8b8:	203c      	movs	r0, #60	; 0x3c
 800a8ba:	fb93 f5f2 	sdiv	r5, r3, r2
 800a8be:	fb02 3315 	mls	r3, r2, r5, r3
 800a8c2:	fb93 f2f0 	sdiv	r2, r3, r0
 800a8c6:	fb00 3012 	mls	r0, r0, r2, r3
 800a8ca:	6823      	ldr	r3, [r4, #0]
 800a8cc:	1a89      	subs	r1, r1, r2
 800a8ce:	68a2      	ldr	r2, [r4, #8]
 800a8d0:	6061      	str	r1, [r4, #4]
 800a8d2:	1a1b      	subs	r3, r3, r0
 800a8d4:	1b52      	subs	r2, r2, r5
 800a8d6:	2b3b      	cmp	r3, #59	; 0x3b
 800a8d8:	6023      	str	r3, [r4, #0]
 800a8da:	60a2      	str	r2, [r4, #8]
 800a8dc:	dd35      	ble.n	800a94a <localtime_r+0x156>
 800a8de:	3101      	adds	r1, #1
 800a8e0:	6061      	str	r1, [r4, #4]
 800a8e2:	3b3c      	subs	r3, #60	; 0x3c
 800a8e4:	6023      	str	r3, [r4, #0]
 800a8e6:	6863      	ldr	r3, [r4, #4]
 800a8e8:	2b3b      	cmp	r3, #59	; 0x3b
 800a8ea:	dd34      	ble.n	800a956 <localtime_r+0x162>
 800a8ec:	3201      	adds	r2, #1
 800a8ee:	60a2      	str	r2, [r4, #8]
 800a8f0:	3b3c      	subs	r3, #60	; 0x3c
 800a8f2:	6063      	str	r3, [r4, #4]
 800a8f4:	68a3      	ldr	r3, [r4, #8]
 800a8f6:	2b17      	cmp	r3, #23
 800a8f8:	dd33      	ble.n	800a962 <localtime_r+0x16e>
 800a8fa:	69e2      	ldr	r2, [r4, #28]
 800a8fc:	3201      	adds	r2, #1
 800a8fe:	61e2      	str	r2, [r4, #28]
 800a900:	69a2      	ldr	r2, [r4, #24]
 800a902:	3201      	adds	r2, #1
 800a904:	2a06      	cmp	r2, #6
 800a906:	bfc8      	it	gt
 800a908:	2200      	movgt	r2, #0
 800a90a:	61a2      	str	r2, [r4, #24]
 800a90c:	68e2      	ldr	r2, [r4, #12]
 800a90e:	3b18      	subs	r3, #24
 800a910:	3201      	adds	r2, #1
 800a912:	60a3      	str	r3, [r4, #8]
 800a914:	6923      	ldr	r3, [r4, #16]
 800a916:	60e2      	str	r2, [r4, #12]
 800a918:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800a91c:	428a      	cmp	r2, r1
 800a91e:	dd0e      	ble.n	800a93e <localtime_r+0x14a>
 800a920:	2b0b      	cmp	r3, #11
 800a922:	eba2 0201 	sub.w	r2, r2, r1
 800a926:	60e2      	str	r2, [r4, #12]
 800a928:	f103 0201 	add.w	r2, r3, #1
 800a92c:	bf09      	itett	eq
 800a92e:	6963      	ldreq	r3, [r4, #20]
 800a930:	6122      	strne	r2, [r4, #16]
 800a932:	2200      	moveq	r2, #0
 800a934:	3301      	addeq	r3, #1
 800a936:	bf02      	ittt	eq
 800a938:	6122      	streq	r2, [r4, #16]
 800a93a:	6163      	streq	r3, [r4, #20]
 800a93c:	61e2      	streq	r2, [r4, #28]
 800a93e:	f000 fa13 	bl	800ad68 <__tz_unlock>
 800a942:	4620      	mov	r0, r4
 800a944:	b002      	add	sp, #8
 800a946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	dacb      	bge.n	800a8e6 <localtime_r+0xf2>
 800a94e:	3901      	subs	r1, #1
 800a950:	6061      	str	r1, [r4, #4]
 800a952:	333c      	adds	r3, #60	; 0x3c
 800a954:	e7c6      	b.n	800a8e4 <localtime_r+0xf0>
 800a956:	2b00      	cmp	r3, #0
 800a958:	dacc      	bge.n	800a8f4 <localtime_r+0x100>
 800a95a:	3a01      	subs	r2, #1
 800a95c:	60a2      	str	r2, [r4, #8]
 800a95e:	333c      	adds	r3, #60	; 0x3c
 800a960:	e7c7      	b.n	800a8f2 <localtime_r+0xfe>
 800a962:	2b00      	cmp	r3, #0
 800a964:	daeb      	bge.n	800a93e <localtime_r+0x14a>
 800a966:	69e2      	ldr	r2, [r4, #28]
 800a968:	3a01      	subs	r2, #1
 800a96a:	61e2      	str	r2, [r4, #28]
 800a96c:	69a2      	ldr	r2, [r4, #24]
 800a96e:	3a01      	subs	r2, #1
 800a970:	bf48      	it	mi
 800a972:	2206      	movmi	r2, #6
 800a974:	61a2      	str	r2, [r4, #24]
 800a976:	68e2      	ldr	r2, [r4, #12]
 800a978:	3318      	adds	r3, #24
 800a97a:	3a01      	subs	r2, #1
 800a97c:	60e2      	str	r2, [r4, #12]
 800a97e:	60a3      	str	r3, [r4, #8]
 800a980:	2a00      	cmp	r2, #0
 800a982:	d1dc      	bne.n	800a93e <localtime_r+0x14a>
 800a984:	6923      	ldr	r3, [r4, #16]
 800a986:	3b01      	subs	r3, #1
 800a988:	d405      	bmi.n	800a996 <localtime_r+0x1a2>
 800a98a:	6123      	str	r3, [r4, #16]
 800a98c:	6923      	ldr	r3, [r4, #16]
 800a98e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800a992:	60e3      	str	r3, [r4, #12]
 800a994:	e7d3      	b.n	800a93e <localtime_r+0x14a>
 800a996:	230b      	movs	r3, #11
 800a998:	6123      	str	r3, [r4, #16]
 800a99a:	6963      	ldr	r3, [r4, #20]
 800a99c:	1e5a      	subs	r2, r3, #1
 800a99e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800a9a2:	6162      	str	r2, [r4, #20]
 800a9a4:	079a      	lsls	r2, r3, #30
 800a9a6:	d105      	bne.n	800a9b4 <localtime_r+0x1c0>
 800a9a8:	2164      	movs	r1, #100	; 0x64
 800a9aa:	fb93 f2f1 	sdiv	r2, r3, r1
 800a9ae:	fb01 3212 	mls	r2, r1, r2, r3
 800a9b2:	b962      	cbnz	r2, 800a9ce <localtime_r+0x1da>
 800a9b4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a9b8:	fb93 f1f2 	sdiv	r1, r3, r2
 800a9bc:	fb02 3311 	mls	r3, r2, r1, r3
 800a9c0:	fab3 f383 	clz	r3, r3
 800a9c4:	095b      	lsrs	r3, r3, #5
 800a9c6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800a9ca:	61e3      	str	r3, [r4, #28]
 800a9cc:	e7de      	b.n	800a98c <localtime_r+0x198>
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	e7f9      	b.n	800a9c6 <localtime_r+0x1d2>
 800a9d2:	bf00      	nop
 800a9d4:	0800cb74 	.word	0x0800cb74
 800a9d8:	20000fc8 	.word	0x20000fc8

0800a9dc <malloc>:
 800a9dc:	4b02      	ldr	r3, [pc, #8]	; (800a9e8 <malloc+0xc>)
 800a9de:	4601      	mov	r1, r0
 800a9e0:	6818      	ldr	r0, [r3, #0]
 800a9e2:	f000 b88d 	b.w	800ab00 <_malloc_r>
 800a9e6:	bf00      	nop
 800a9e8:	20000154 	.word	0x20000154

0800a9ec <free>:
 800a9ec:	4b02      	ldr	r3, [pc, #8]	; (800a9f8 <free+0xc>)
 800a9ee:	4601      	mov	r1, r0
 800a9f0:	6818      	ldr	r0, [r3, #0]
 800a9f2:	f000 b819 	b.w	800aa28 <_free_r>
 800a9f6:	bf00      	nop
 800a9f8:	20000154 	.word	0x20000154

0800a9fc <memcpy>:
 800a9fc:	440a      	add	r2, r1
 800a9fe:	4291      	cmp	r1, r2
 800aa00:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa04:	d100      	bne.n	800aa08 <memcpy+0xc>
 800aa06:	4770      	bx	lr
 800aa08:	b510      	push	{r4, lr}
 800aa0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa12:	4291      	cmp	r1, r2
 800aa14:	d1f9      	bne.n	800aa0a <memcpy+0xe>
 800aa16:	bd10      	pop	{r4, pc}

0800aa18 <memset>:
 800aa18:	4402      	add	r2, r0
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d100      	bne.n	800aa22 <memset+0xa>
 800aa20:	4770      	bx	lr
 800aa22:	f803 1b01 	strb.w	r1, [r3], #1
 800aa26:	e7f9      	b.n	800aa1c <memset+0x4>

0800aa28 <_free_r>:
 800aa28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa2a:	2900      	cmp	r1, #0
 800aa2c:	d044      	beq.n	800aab8 <_free_r+0x90>
 800aa2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa32:	9001      	str	r0, [sp, #4]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	f1a1 0404 	sub.w	r4, r1, #4
 800aa3a:	bfb8      	it	lt
 800aa3c:	18e4      	addlt	r4, r4, r3
 800aa3e:	f000 fc49 	bl	800b2d4 <__malloc_lock>
 800aa42:	4a1e      	ldr	r2, [pc, #120]	; (800aabc <_free_r+0x94>)
 800aa44:	9801      	ldr	r0, [sp, #4]
 800aa46:	6813      	ldr	r3, [r2, #0]
 800aa48:	b933      	cbnz	r3, 800aa58 <_free_r+0x30>
 800aa4a:	6063      	str	r3, [r4, #4]
 800aa4c:	6014      	str	r4, [r2, #0]
 800aa4e:	b003      	add	sp, #12
 800aa50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa54:	f000 bc44 	b.w	800b2e0 <__malloc_unlock>
 800aa58:	42a3      	cmp	r3, r4
 800aa5a:	d908      	bls.n	800aa6e <_free_r+0x46>
 800aa5c:	6825      	ldr	r5, [r4, #0]
 800aa5e:	1961      	adds	r1, r4, r5
 800aa60:	428b      	cmp	r3, r1
 800aa62:	bf01      	itttt	eq
 800aa64:	6819      	ldreq	r1, [r3, #0]
 800aa66:	685b      	ldreq	r3, [r3, #4]
 800aa68:	1949      	addeq	r1, r1, r5
 800aa6a:	6021      	streq	r1, [r4, #0]
 800aa6c:	e7ed      	b.n	800aa4a <_free_r+0x22>
 800aa6e:	461a      	mov	r2, r3
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	b10b      	cbz	r3, 800aa78 <_free_r+0x50>
 800aa74:	42a3      	cmp	r3, r4
 800aa76:	d9fa      	bls.n	800aa6e <_free_r+0x46>
 800aa78:	6811      	ldr	r1, [r2, #0]
 800aa7a:	1855      	adds	r5, r2, r1
 800aa7c:	42a5      	cmp	r5, r4
 800aa7e:	d10b      	bne.n	800aa98 <_free_r+0x70>
 800aa80:	6824      	ldr	r4, [r4, #0]
 800aa82:	4421      	add	r1, r4
 800aa84:	1854      	adds	r4, r2, r1
 800aa86:	42a3      	cmp	r3, r4
 800aa88:	6011      	str	r1, [r2, #0]
 800aa8a:	d1e0      	bne.n	800aa4e <_free_r+0x26>
 800aa8c:	681c      	ldr	r4, [r3, #0]
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	6053      	str	r3, [r2, #4]
 800aa92:	4421      	add	r1, r4
 800aa94:	6011      	str	r1, [r2, #0]
 800aa96:	e7da      	b.n	800aa4e <_free_r+0x26>
 800aa98:	d902      	bls.n	800aaa0 <_free_r+0x78>
 800aa9a:	230c      	movs	r3, #12
 800aa9c:	6003      	str	r3, [r0, #0]
 800aa9e:	e7d6      	b.n	800aa4e <_free_r+0x26>
 800aaa0:	6825      	ldr	r5, [r4, #0]
 800aaa2:	1961      	adds	r1, r4, r5
 800aaa4:	428b      	cmp	r3, r1
 800aaa6:	bf04      	itt	eq
 800aaa8:	6819      	ldreq	r1, [r3, #0]
 800aaaa:	685b      	ldreq	r3, [r3, #4]
 800aaac:	6063      	str	r3, [r4, #4]
 800aaae:	bf04      	itt	eq
 800aab0:	1949      	addeq	r1, r1, r5
 800aab2:	6021      	streq	r1, [r4, #0]
 800aab4:	6054      	str	r4, [r2, #4]
 800aab6:	e7ca      	b.n	800aa4e <_free_r+0x26>
 800aab8:	b003      	add	sp, #12
 800aaba:	bd30      	pop	{r4, r5, pc}
 800aabc:	20000fa4 	.word	0x20000fa4

0800aac0 <sbrk_aligned>:
 800aac0:	b570      	push	{r4, r5, r6, lr}
 800aac2:	4e0e      	ldr	r6, [pc, #56]	; (800aafc <sbrk_aligned+0x3c>)
 800aac4:	460c      	mov	r4, r1
 800aac6:	6831      	ldr	r1, [r6, #0]
 800aac8:	4605      	mov	r5, r0
 800aaca:	b911      	cbnz	r1, 800aad2 <sbrk_aligned+0x12>
 800aacc:	f000 f88c 	bl	800abe8 <_sbrk_r>
 800aad0:	6030      	str	r0, [r6, #0]
 800aad2:	4621      	mov	r1, r4
 800aad4:	4628      	mov	r0, r5
 800aad6:	f000 f887 	bl	800abe8 <_sbrk_r>
 800aada:	1c43      	adds	r3, r0, #1
 800aadc:	d00a      	beq.n	800aaf4 <sbrk_aligned+0x34>
 800aade:	1cc4      	adds	r4, r0, #3
 800aae0:	f024 0403 	bic.w	r4, r4, #3
 800aae4:	42a0      	cmp	r0, r4
 800aae6:	d007      	beq.n	800aaf8 <sbrk_aligned+0x38>
 800aae8:	1a21      	subs	r1, r4, r0
 800aaea:	4628      	mov	r0, r5
 800aaec:	f000 f87c 	bl	800abe8 <_sbrk_r>
 800aaf0:	3001      	adds	r0, #1
 800aaf2:	d101      	bne.n	800aaf8 <sbrk_aligned+0x38>
 800aaf4:	f04f 34ff 	mov.w	r4, #4294967295
 800aaf8:	4620      	mov	r0, r4
 800aafa:	bd70      	pop	{r4, r5, r6, pc}
 800aafc:	20000fa8 	.word	0x20000fa8

0800ab00 <_malloc_r>:
 800ab00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab04:	1ccd      	adds	r5, r1, #3
 800ab06:	f025 0503 	bic.w	r5, r5, #3
 800ab0a:	3508      	adds	r5, #8
 800ab0c:	2d0c      	cmp	r5, #12
 800ab0e:	bf38      	it	cc
 800ab10:	250c      	movcc	r5, #12
 800ab12:	2d00      	cmp	r5, #0
 800ab14:	4607      	mov	r7, r0
 800ab16:	db01      	blt.n	800ab1c <_malloc_r+0x1c>
 800ab18:	42a9      	cmp	r1, r5
 800ab1a:	d905      	bls.n	800ab28 <_malloc_r+0x28>
 800ab1c:	230c      	movs	r3, #12
 800ab1e:	603b      	str	r3, [r7, #0]
 800ab20:	2600      	movs	r6, #0
 800ab22:	4630      	mov	r0, r6
 800ab24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab28:	4e2e      	ldr	r6, [pc, #184]	; (800abe4 <_malloc_r+0xe4>)
 800ab2a:	f000 fbd3 	bl	800b2d4 <__malloc_lock>
 800ab2e:	6833      	ldr	r3, [r6, #0]
 800ab30:	461c      	mov	r4, r3
 800ab32:	bb34      	cbnz	r4, 800ab82 <_malloc_r+0x82>
 800ab34:	4629      	mov	r1, r5
 800ab36:	4638      	mov	r0, r7
 800ab38:	f7ff ffc2 	bl	800aac0 <sbrk_aligned>
 800ab3c:	1c43      	adds	r3, r0, #1
 800ab3e:	4604      	mov	r4, r0
 800ab40:	d14d      	bne.n	800abde <_malloc_r+0xde>
 800ab42:	6834      	ldr	r4, [r6, #0]
 800ab44:	4626      	mov	r6, r4
 800ab46:	2e00      	cmp	r6, #0
 800ab48:	d140      	bne.n	800abcc <_malloc_r+0xcc>
 800ab4a:	6823      	ldr	r3, [r4, #0]
 800ab4c:	4631      	mov	r1, r6
 800ab4e:	4638      	mov	r0, r7
 800ab50:	eb04 0803 	add.w	r8, r4, r3
 800ab54:	f000 f848 	bl	800abe8 <_sbrk_r>
 800ab58:	4580      	cmp	r8, r0
 800ab5a:	d13a      	bne.n	800abd2 <_malloc_r+0xd2>
 800ab5c:	6821      	ldr	r1, [r4, #0]
 800ab5e:	3503      	adds	r5, #3
 800ab60:	1a6d      	subs	r5, r5, r1
 800ab62:	f025 0503 	bic.w	r5, r5, #3
 800ab66:	3508      	adds	r5, #8
 800ab68:	2d0c      	cmp	r5, #12
 800ab6a:	bf38      	it	cc
 800ab6c:	250c      	movcc	r5, #12
 800ab6e:	4629      	mov	r1, r5
 800ab70:	4638      	mov	r0, r7
 800ab72:	f7ff ffa5 	bl	800aac0 <sbrk_aligned>
 800ab76:	3001      	adds	r0, #1
 800ab78:	d02b      	beq.n	800abd2 <_malloc_r+0xd2>
 800ab7a:	6823      	ldr	r3, [r4, #0]
 800ab7c:	442b      	add	r3, r5
 800ab7e:	6023      	str	r3, [r4, #0]
 800ab80:	e00e      	b.n	800aba0 <_malloc_r+0xa0>
 800ab82:	6822      	ldr	r2, [r4, #0]
 800ab84:	1b52      	subs	r2, r2, r5
 800ab86:	d41e      	bmi.n	800abc6 <_malloc_r+0xc6>
 800ab88:	2a0b      	cmp	r2, #11
 800ab8a:	d916      	bls.n	800abba <_malloc_r+0xba>
 800ab8c:	1961      	adds	r1, r4, r5
 800ab8e:	42a3      	cmp	r3, r4
 800ab90:	6025      	str	r5, [r4, #0]
 800ab92:	bf18      	it	ne
 800ab94:	6059      	strne	r1, [r3, #4]
 800ab96:	6863      	ldr	r3, [r4, #4]
 800ab98:	bf08      	it	eq
 800ab9a:	6031      	streq	r1, [r6, #0]
 800ab9c:	5162      	str	r2, [r4, r5]
 800ab9e:	604b      	str	r3, [r1, #4]
 800aba0:	4638      	mov	r0, r7
 800aba2:	f104 060b 	add.w	r6, r4, #11
 800aba6:	f000 fb9b 	bl	800b2e0 <__malloc_unlock>
 800abaa:	f026 0607 	bic.w	r6, r6, #7
 800abae:	1d23      	adds	r3, r4, #4
 800abb0:	1af2      	subs	r2, r6, r3
 800abb2:	d0b6      	beq.n	800ab22 <_malloc_r+0x22>
 800abb4:	1b9b      	subs	r3, r3, r6
 800abb6:	50a3      	str	r3, [r4, r2]
 800abb8:	e7b3      	b.n	800ab22 <_malloc_r+0x22>
 800abba:	6862      	ldr	r2, [r4, #4]
 800abbc:	42a3      	cmp	r3, r4
 800abbe:	bf0c      	ite	eq
 800abc0:	6032      	streq	r2, [r6, #0]
 800abc2:	605a      	strne	r2, [r3, #4]
 800abc4:	e7ec      	b.n	800aba0 <_malloc_r+0xa0>
 800abc6:	4623      	mov	r3, r4
 800abc8:	6864      	ldr	r4, [r4, #4]
 800abca:	e7b2      	b.n	800ab32 <_malloc_r+0x32>
 800abcc:	4634      	mov	r4, r6
 800abce:	6876      	ldr	r6, [r6, #4]
 800abd0:	e7b9      	b.n	800ab46 <_malloc_r+0x46>
 800abd2:	230c      	movs	r3, #12
 800abd4:	603b      	str	r3, [r7, #0]
 800abd6:	4638      	mov	r0, r7
 800abd8:	f000 fb82 	bl	800b2e0 <__malloc_unlock>
 800abdc:	e7a1      	b.n	800ab22 <_malloc_r+0x22>
 800abde:	6025      	str	r5, [r4, #0]
 800abe0:	e7de      	b.n	800aba0 <_malloc_r+0xa0>
 800abe2:	bf00      	nop
 800abe4:	20000fa4 	.word	0x20000fa4

0800abe8 <_sbrk_r>:
 800abe8:	b538      	push	{r3, r4, r5, lr}
 800abea:	4d06      	ldr	r5, [pc, #24]	; (800ac04 <_sbrk_r+0x1c>)
 800abec:	2300      	movs	r3, #0
 800abee:	4604      	mov	r4, r0
 800abf0:	4608      	mov	r0, r1
 800abf2:	602b      	str	r3, [r5, #0]
 800abf4:	f7f9 f806 	bl	8003c04 <_sbrk>
 800abf8:	1c43      	adds	r3, r0, #1
 800abfa:	d102      	bne.n	800ac02 <_sbrk_r+0x1a>
 800abfc:	682b      	ldr	r3, [r5, #0]
 800abfe:	b103      	cbz	r3, 800ac02 <_sbrk_r+0x1a>
 800ac00:	6023      	str	r3, [r4, #0]
 800ac02:	bd38      	pop	{r3, r4, r5, pc}
 800ac04:	20000fd8 	.word	0x20000fd8

0800ac08 <__tzcalc_limits>:
 800ac08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac0c:	4605      	mov	r5, r0
 800ac0e:	f000 faab 	bl	800b168 <__gettzinfo>
 800ac12:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800ac16:	429d      	cmp	r5, r3
 800ac18:	f340 8099 	ble.w	800ad4e <__tzcalc_limits+0x146>
 800ac1c:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800ac20:	18ac      	adds	r4, r5, r2
 800ac22:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800ac26:	f240 126d 	movw	r2, #365	; 0x16d
 800ac2a:	10a4      	asrs	r4, r4, #2
 800ac2c:	fb02 4403 	mla	r4, r2, r3, r4
 800ac30:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800ac34:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800ac38:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac3c:	441c      	add	r4, r3
 800ac3e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800ac42:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800ac46:	fb95 fcf3 	sdiv	ip, r5, r3
 800ac4a:	fb03 5c1c 	mls	ip, r3, ip, r5
 800ac4e:	186a      	adds	r2, r5, r1
 800ac50:	fabc f68c 	clz	r6, ip
 800ac54:	fbb2 f2f3 	udiv	r2, r2, r3
 800ac58:	f005 0303 	and.w	r3, r5, #3
 800ac5c:	4414      	add	r4, r2
 800ac5e:	2264      	movs	r2, #100	; 0x64
 800ac60:	6045      	str	r5, [r0, #4]
 800ac62:	fb95 f7f2 	sdiv	r7, r5, r2
 800ac66:	0976      	lsrs	r6, r6, #5
 800ac68:	fb02 5717 	mls	r7, r2, r7, r5
 800ac6c:	4601      	mov	r1, r0
 800ac6e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800ac72:	9300      	str	r3, [sp, #0]
 800ac74:	f04f 0a07 	mov.w	sl, #7
 800ac78:	7a0d      	ldrb	r5, [r1, #8]
 800ac7a:	694b      	ldr	r3, [r1, #20]
 800ac7c:	2d4a      	cmp	r5, #74	; 0x4a
 800ac7e:	d12d      	bne.n	800acdc <__tzcalc_limits+0xd4>
 800ac80:	9a00      	ldr	r2, [sp, #0]
 800ac82:	eb04 0e03 	add.w	lr, r4, r3
 800ac86:	b902      	cbnz	r2, 800ac8a <__tzcalc_limits+0x82>
 800ac88:	b917      	cbnz	r7, 800ac90 <__tzcalc_limits+0x88>
 800ac8a:	f1bc 0f00 	cmp.w	ip, #0
 800ac8e:	d123      	bne.n	800acd8 <__tzcalc_limits+0xd0>
 800ac90:	2b3b      	cmp	r3, #59	; 0x3b
 800ac92:	bfd4      	ite	le
 800ac94:	2300      	movle	r3, #0
 800ac96:	2301      	movgt	r3, #1
 800ac98:	4473      	add	r3, lr
 800ac9a:	3b01      	subs	r3, #1
 800ac9c:	698d      	ldr	r5, [r1, #24]
 800ac9e:	4a2d      	ldr	r2, [pc, #180]	; (800ad54 <__tzcalc_limits+0x14c>)
 800aca0:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800aca4:	fbc3 5e02 	smlal	r5, lr, r3, r2
 800aca8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800acaa:	18ed      	adds	r5, r5, r3
 800acac:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800acb0:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800acb4:	3128      	adds	r1, #40	; 0x28
 800acb6:	458b      	cmp	fp, r1
 800acb8:	d1de      	bne.n	800ac78 <__tzcalc_limits+0x70>
 800acba:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800acbe:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800acc2:	428c      	cmp	r4, r1
 800acc4:	eb72 0303 	sbcs.w	r3, r2, r3
 800acc8:	bfb4      	ite	lt
 800acca:	2301      	movlt	r3, #1
 800accc:	2300      	movge	r3, #0
 800acce:	6003      	str	r3, [r0, #0]
 800acd0:	2001      	movs	r0, #1
 800acd2:	b003      	add	sp, #12
 800acd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acd8:	2300      	movs	r3, #0
 800acda:	e7dd      	b.n	800ac98 <__tzcalc_limits+0x90>
 800acdc:	2d44      	cmp	r5, #68	; 0x44
 800acde:	d101      	bne.n	800ace4 <__tzcalc_limits+0xdc>
 800ace0:	4423      	add	r3, r4
 800ace2:	e7db      	b.n	800ac9c <__tzcalc_limits+0x94>
 800ace4:	9a00      	ldr	r2, [sp, #0]
 800ace6:	bb62      	cbnz	r2, 800ad42 <__tzcalc_limits+0x13a>
 800ace8:	2f00      	cmp	r7, #0
 800acea:	bf0c      	ite	eq
 800acec:	4635      	moveq	r5, r6
 800acee:	2501      	movne	r5, #1
 800acf0:	68ca      	ldr	r2, [r1, #12]
 800acf2:	9201      	str	r2, [sp, #4]
 800acf4:	4a18      	ldr	r2, [pc, #96]	; (800ad58 <__tzcalc_limits+0x150>)
 800acf6:	f04f 0930 	mov.w	r9, #48	; 0x30
 800acfa:	fb09 2505 	mla	r5, r9, r5, r2
 800acfe:	46a6      	mov	lr, r4
 800ad00:	f04f 0800 	mov.w	r8, #0
 800ad04:	3d04      	subs	r5, #4
 800ad06:	9a01      	ldr	r2, [sp, #4]
 800ad08:	f108 0801 	add.w	r8, r8, #1
 800ad0c:	4542      	cmp	r2, r8
 800ad0e:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800ad12:	dc18      	bgt.n	800ad46 <__tzcalc_limits+0x13e>
 800ad14:	f10e 0504 	add.w	r5, lr, #4
 800ad18:	fb95 f8fa 	sdiv	r8, r5, sl
 800ad1c:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800ad20:	eba5 0808 	sub.w	r8, r5, r8
 800ad24:	ebb3 0808 	subs.w	r8, r3, r8
 800ad28:	690b      	ldr	r3, [r1, #16]
 800ad2a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ad2e:	bf48      	it	mi
 800ad30:	f108 0807 	addmi.w	r8, r8, #7
 800ad34:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800ad38:	4443      	add	r3, r8
 800ad3a:	454b      	cmp	r3, r9
 800ad3c:	da05      	bge.n	800ad4a <__tzcalc_limits+0x142>
 800ad3e:	4473      	add	r3, lr
 800ad40:	e7ac      	b.n	800ac9c <__tzcalc_limits+0x94>
 800ad42:	4635      	mov	r5, r6
 800ad44:	e7d4      	b.n	800acf0 <__tzcalc_limits+0xe8>
 800ad46:	44ce      	add	lr, r9
 800ad48:	e7dd      	b.n	800ad06 <__tzcalc_limits+0xfe>
 800ad4a:	3b07      	subs	r3, #7
 800ad4c:	e7f5      	b.n	800ad3a <__tzcalc_limits+0x132>
 800ad4e:	2000      	movs	r0, #0
 800ad50:	e7bf      	b.n	800acd2 <__tzcalc_limits+0xca>
 800ad52:	bf00      	nop
 800ad54:	00015180 	.word	0x00015180
 800ad58:	0800cb74 	.word	0x0800cb74

0800ad5c <__tz_lock>:
 800ad5c:	4801      	ldr	r0, [pc, #4]	; (800ad64 <__tz_lock+0x8>)
 800ad5e:	f000 bab4 	b.w	800b2ca <__retarget_lock_acquire>
 800ad62:	bf00      	nop
 800ad64:	20000fd4 	.word	0x20000fd4

0800ad68 <__tz_unlock>:
 800ad68:	4801      	ldr	r0, [pc, #4]	; (800ad70 <__tz_unlock+0x8>)
 800ad6a:	f000 bab0 	b.w	800b2ce <__retarget_lock_release>
 800ad6e:	bf00      	nop
 800ad70:	20000fd4 	.word	0x20000fd4

0800ad74 <_tzset_unlocked>:
 800ad74:	4b01      	ldr	r3, [pc, #4]	; (800ad7c <_tzset_unlocked+0x8>)
 800ad76:	6818      	ldr	r0, [r3, #0]
 800ad78:	f000 b802 	b.w	800ad80 <_tzset_unlocked_r>
 800ad7c:	20000154 	.word	0x20000154

0800ad80 <_tzset_unlocked_r>:
 800ad80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad84:	b08d      	sub	sp, #52	; 0x34
 800ad86:	4607      	mov	r7, r0
 800ad88:	f000 f9ee 	bl	800b168 <__gettzinfo>
 800ad8c:	49b0      	ldr	r1, [pc, #704]	; (800b050 <_tzset_unlocked_r+0x2d0>)
 800ad8e:	4eb1      	ldr	r6, [pc, #708]	; (800b054 <_tzset_unlocked_r+0x2d4>)
 800ad90:	4605      	mov	r5, r0
 800ad92:	4638      	mov	r0, r7
 800ad94:	f000 f9e0 	bl	800b158 <_getenv_r>
 800ad98:	4604      	mov	r4, r0
 800ad9a:	b970      	cbnz	r0, 800adba <_tzset_unlocked_r+0x3a>
 800ad9c:	4bae      	ldr	r3, [pc, #696]	; (800b058 <_tzset_unlocked_r+0x2d8>)
 800ad9e:	4aaf      	ldr	r2, [pc, #700]	; (800b05c <_tzset_unlocked_r+0x2dc>)
 800ada0:	6018      	str	r0, [r3, #0]
 800ada2:	4baf      	ldr	r3, [pc, #700]	; (800b060 <_tzset_unlocked_r+0x2e0>)
 800ada4:	6018      	str	r0, [r3, #0]
 800ada6:	4baf      	ldr	r3, [pc, #700]	; (800b064 <_tzset_unlocked_r+0x2e4>)
 800ada8:	6830      	ldr	r0, [r6, #0]
 800adaa:	e9c3 2200 	strd	r2, r2, [r3]
 800adae:	f7ff fe1d 	bl	800a9ec <free>
 800adb2:	6034      	str	r4, [r6, #0]
 800adb4:	b00d      	add	sp, #52	; 0x34
 800adb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adba:	6831      	ldr	r1, [r6, #0]
 800adbc:	2900      	cmp	r1, #0
 800adbe:	d162      	bne.n	800ae86 <_tzset_unlocked_r+0x106>
 800adc0:	6830      	ldr	r0, [r6, #0]
 800adc2:	f7ff fe13 	bl	800a9ec <free>
 800adc6:	4620      	mov	r0, r4
 800adc8:	f7f5 fa2c 	bl	8000224 <strlen>
 800adcc:	1c41      	adds	r1, r0, #1
 800adce:	4638      	mov	r0, r7
 800add0:	f7ff fe96 	bl	800ab00 <_malloc_r>
 800add4:	6030      	str	r0, [r6, #0]
 800add6:	2800      	cmp	r0, #0
 800add8:	d15a      	bne.n	800ae90 <_tzset_unlocked_r+0x110>
 800adda:	7823      	ldrb	r3, [r4, #0]
 800addc:	4aa2      	ldr	r2, [pc, #648]	; (800b068 <_tzset_unlocked_r+0x2e8>)
 800adde:	49a3      	ldr	r1, [pc, #652]	; (800b06c <_tzset_unlocked_r+0x2ec>)
 800ade0:	2b3a      	cmp	r3, #58	; 0x3a
 800ade2:	bf08      	it	eq
 800ade4:	3401      	addeq	r4, #1
 800ade6:	ae0a      	add	r6, sp, #40	; 0x28
 800ade8:	4633      	mov	r3, r6
 800adea:	4620      	mov	r0, r4
 800adec:	f000 fd6c 	bl	800b8c8 <siscanf>
 800adf0:	2800      	cmp	r0, #0
 800adf2:	dddf      	ble.n	800adb4 <_tzset_unlocked_r+0x34>
 800adf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adf6:	18e7      	adds	r7, r4, r3
 800adf8:	5ce3      	ldrb	r3, [r4, r3]
 800adfa:	2b2d      	cmp	r3, #45	; 0x2d
 800adfc:	d14c      	bne.n	800ae98 <_tzset_unlocked_r+0x118>
 800adfe:	3701      	adds	r7, #1
 800ae00:	f04f 38ff 	mov.w	r8, #4294967295
 800ae04:	f10d 0a20 	add.w	sl, sp, #32
 800ae08:	f10d 0b1e 	add.w	fp, sp, #30
 800ae0c:	2400      	movs	r4, #0
 800ae0e:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800ae12:	4997      	ldr	r1, [pc, #604]	; (800b070 <_tzset_unlocked_r+0x2f0>)
 800ae14:	9603      	str	r6, [sp, #12]
 800ae16:	f8cd b000 	str.w	fp, [sp]
 800ae1a:	4633      	mov	r3, r6
 800ae1c:	aa07      	add	r2, sp, #28
 800ae1e:	4638      	mov	r0, r7
 800ae20:	f8ad 401e 	strh.w	r4, [sp, #30]
 800ae24:	f8ad 4020 	strh.w	r4, [sp, #32]
 800ae28:	f000 fd4e 	bl	800b8c8 <siscanf>
 800ae2c:	42a0      	cmp	r0, r4
 800ae2e:	ddc1      	ble.n	800adb4 <_tzset_unlocked_r+0x34>
 800ae30:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800ae34:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800ae38:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800b07c <_tzset_unlocked_r+0x2fc>
 800ae3c:	213c      	movs	r1, #60	; 0x3c
 800ae3e:	fb01 3302 	mla	r3, r1, r2, r3
 800ae42:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800ae46:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800ae4a:	fb01 3302 	mla	r3, r1, r2, r3
 800ae4e:	fb08 f303 	mul.w	r3, r8, r3
 800ae52:	f8df 8210 	ldr.w	r8, [pc, #528]	; 800b064 <_tzset_unlocked_r+0x2e4>
 800ae56:	62ab      	str	r3, [r5, #40]	; 0x28
 800ae58:	4b83      	ldr	r3, [pc, #524]	; (800b068 <_tzset_unlocked_r+0x2e8>)
 800ae5a:	f8c8 3000 	str.w	r3, [r8]
 800ae5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae60:	4982      	ldr	r1, [pc, #520]	; (800b06c <_tzset_unlocked_r+0x2ec>)
 800ae62:	441f      	add	r7, r3
 800ae64:	464a      	mov	r2, r9
 800ae66:	4633      	mov	r3, r6
 800ae68:	4638      	mov	r0, r7
 800ae6a:	f000 fd2d 	bl	800b8c8 <siscanf>
 800ae6e:	42a0      	cmp	r0, r4
 800ae70:	dc18      	bgt.n	800aea4 <_tzset_unlocked_r+0x124>
 800ae72:	f8d8 3000 	ldr.w	r3, [r8]
 800ae76:	f8c8 3004 	str.w	r3, [r8, #4]
 800ae7a:	4b77      	ldr	r3, [pc, #476]	; (800b058 <_tzset_unlocked_r+0x2d8>)
 800ae7c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800ae7e:	601a      	str	r2, [r3, #0]
 800ae80:	4b77      	ldr	r3, [pc, #476]	; (800b060 <_tzset_unlocked_r+0x2e0>)
 800ae82:	601c      	str	r4, [r3, #0]
 800ae84:	e796      	b.n	800adb4 <_tzset_unlocked_r+0x34>
 800ae86:	f7f5 f9c3 	bl	8000210 <strcmp>
 800ae8a:	2800      	cmp	r0, #0
 800ae8c:	d198      	bne.n	800adc0 <_tzset_unlocked_r+0x40>
 800ae8e:	e791      	b.n	800adb4 <_tzset_unlocked_r+0x34>
 800ae90:	4621      	mov	r1, r4
 800ae92:	f000 fd8a 	bl	800b9aa <strcpy>
 800ae96:	e7a0      	b.n	800adda <_tzset_unlocked_r+0x5a>
 800ae98:	2b2b      	cmp	r3, #43	; 0x2b
 800ae9a:	bf08      	it	eq
 800ae9c:	3701      	addeq	r7, #1
 800ae9e:	f04f 0801 	mov.w	r8, #1
 800aea2:	e7af      	b.n	800ae04 <_tzset_unlocked_r+0x84>
 800aea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aea6:	f8c8 9004 	str.w	r9, [r8, #4]
 800aeaa:	18fc      	adds	r4, r7, r3
 800aeac:	5cfb      	ldrb	r3, [r7, r3]
 800aeae:	2b2d      	cmp	r3, #45	; 0x2d
 800aeb0:	f040 808b 	bne.w	800afca <_tzset_unlocked_r+0x24a>
 800aeb4:	3401      	adds	r4, #1
 800aeb6:	f04f 37ff 	mov.w	r7, #4294967295
 800aeba:	2300      	movs	r3, #0
 800aebc:	f8ad 301c 	strh.w	r3, [sp, #28]
 800aec0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800aec4:	f8ad 3020 	strh.w	r3, [sp, #32]
 800aec8:	930a      	str	r3, [sp, #40]	; 0x28
 800aeca:	e9cd a602 	strd	sl, r6, [sp, #8]
 800aece:	e9cd b600 	strd	fp, r6, [sp]
 800aed2:	4967      	ldr	r1, [pc, #412]	; (800b070 <_tzset_unlocked_r+0x2f0>)
 800aed4:	4633      	mov	r3, r6
 800aed6:	aa07      	add	r2, sp, #28
 800aed8:	4620      	mov	r0, r4
 800aeda:	f000 fcf5 	bl	800b8c8 <siscanf>
 800aede:	2800      	cmp	r0, #0
 800aee0:	dc78      	bgt.n	800afd4 <_tzset_unlocked_r+0x254>
 800aee2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800aee4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800aee8:	652b      	str	r3, [r5, #80]	; 0x50
 800aeea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aeec:	462f      	mov	r7, r5
 800aeee:	441c      	add	r4, r3
 800aef0:	f04f 0900 	mov.w	r9, #0
 800aef4:	7823      	ldrb	r3, [r4, #0]
 800aef6:	2b2c      	cmp	r3, #44	; 0x2c
 800aef8:	bf08      	it	eq
 800aefa:	3401      	addeq	r4, #1
 800aefc:	f894 8000 	ldrb.w	r8, [r4]
 800af00:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800af04:	d178      	bne.n	800aff8 <_tzset_unlocked_r+0x278>
 800af06:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800af0a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800af0e:	ab09      	add	r3, sp, #36	; 0x24
 800af10:	9300      	str	r3, [sp, #0]
 800af12:	4958      	ldr	r1, [pc, #352]	; (800b074 <_tzset_unlocked_r+0x2f4>)
 800af14:	9603      	str	r6, [sp, #12]
 800af16:	4633      	mov	r3, r6
 800af18:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800af1c:	4620      	mov	r0, r4
 800af1e:	f000 fcd3 	bl	800b8c8 <siscanf>
 800af22:	2803      	cmp	r0, #3
 800af24:	f47f af46 	bne.w	800adb4 <_tzset_unlocked_r+0x34>
 800af28:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800af2c:	1e4b      	subs	r3, r1, #1
 800af2e:	2b0b      	cmp	r3, #11
 800af30:	f63f af40 	bhi.w	800adb4 <_tzset_unlocked_r+0x34>
 800af34:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800af38:	1e53      	subs	r3, r2, #1
 800af3a:	2b04      	cmp	r3, #4
 800af3c:	f63f af3a 	bhi.w	800adb4 <_tzset_unlocked_r+0x34>
 800af40:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800af44:	2b06      	cmp	r3, #6
 800af46:	f63f af35 	bhi.w	800adb4 <_tzset_unlocked_r+0x34>
 800af4a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800af4e:	f887 8008 	strb.w	r8, [r7, #8]
 800af52:	617b      	str	r3, [r7, #20]
 800af54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af56:	eb04 0803 	add.w	r8, r4, r3
 800af5a:	2302      	movs	r3, #2
 800af5c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800af60:	2300      	movs	r3, #0
 800af62:	f8ad 301e 	strh.w	r3, [sp, #30]
 800af66:	f8ad 3020 	strh.w	r3, [sp, #32]
 800af6a:	930a      	str	r3, [sp, #40]	; 0x28
 800af6c:	f898 3000 	ldrb.w	r3, [r8]
 800af70:	2b2f      	cmp	r3, #47	; 0x2f
 800af72:	d109      	bne.n	800af88 <_tzset_unlocked_r+0x208>
 800af74:	e9cd a602 	strd	sl, r6, [sp, #8]
 800af78:	e9cd b600 	strd	fp, r6, [sp]
 800af7c:	493e      	ldr	r1, [pc, #248]	; (800b078 <_tzset_unlocked_r+0x2f8>)
 800af7e:	4633      	mov	r3, r6
 800af80:	aa07      	add	r2, sp, #28
 800af82:	4640      	mov	r0, r8
 800af84:	f000 fca0 	bl	800b8c8 <siscanf>
 800af88:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800af8c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800af90:	213c      	movs	r1, #60	; 0x3c
 800af92:	fb01 3302 	mla	r3, r1, r2, r3
 800af96:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800af9a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800af9e:	fb01 3302 	mla	r3, r1, r2, r3
 800afa2:	61bb      	str	r3, [r7, #24]
 800afa4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800afa6:	3728      	adds	r7, #40	; 0x28
 800afa8:	4444      	add	r4, r8
 800afaa:	f1b9 0f00 	cmp.w	r9, #0
 800afae:	d020      	beq.n	800aff2 <_tzset_unlocked_r+0x272>
 800afb0:	6868      	ldr	r0, [r5, #4]
 800afb2:	f7ff fe29 	bl	800ac08 <__tzcalc_limits>
 800afb6:	4b28      	ldr	r3, [pc, #160]	; (800b058 <_tzset_unlocked_r+0x2d8>)
 800afb8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800afba:	601a      	str	r2, [r3, #0]
 800afbc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800afbe:	1a9b      	subs	r3, r3, r2
 800afc0:	4a27      	ldr	r2, [pc, #156]	; (800b060 <_tzset_unlocked_r+0x2e0>)
 800afc2:	bf18      	it	ne
 800afc4:	2301      	movne	r3, #1
 800afc6:	6013      	str	r3, [r2, #0]
 800afc8:	e6f4      	b.n	800adb4 <_tzset_unlocked_r+0x34>
 800afca:	2b2b      	cmp	r3, #43	; 0x2b
 800afcc:	bf08      	it	eq
 800afce:	3401      	addeq	r4, #1
 800afd0:	2701      	movs	r7, #1
 800afd2:	e772      	b.n	800aeba <_tzset_unlocked_r+0x13a>
 800afd4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800afd8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800afdc:	213c      	movs	r1, #60	; 0x3c
 800afde:	fb01 3302 	mla	r3, r1, r2, r3
 800afe2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800afe6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800afea:	fb01 3302 	mla	r3, r1, r2, r3
 800afee:	437b      	muls	r3, r7
 800aff0:	e77a      	b.n	800aee8 <_tzset_unlocked_r+0x168>
 800aff2:	f04f 0901 	mov.w	r9, #1
 800aff6:	e77d      	b.n	800aef4 <_tzset_unlocked_r+0x174>
 800aff8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800affc:	bf06      	itte	eq
 800affe:	3401      	addeq	r4, #1
 800b000:	4643      	moveq	r3, r8
 800b002:	2344      	movne	r3, #68	; 0x44
 800b004:	220a      	movs	r2, #10
 800b006:	a90b      	add	r1, sp, #44	; 0x2c
 800b008:	4620      	mov	r0, r4
 800b00a:	9305      	str	r3, [sp, #20]
 800b00c:	f000 fd5e 	bl	800bacc <strtoul>
 800b010:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800b014:	9b05      	ldr	r3, [sp, #20]
 800b016:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800b01a:	45a0      	cmp	r8, r4
 800b01c:	d114      	bne.n	800b048 <_tzset_unlocked_r+0x2c8>
 800b01e:	234d      	movs	r3, #77	; 0x4d
 800b020:	f1b9 0f00 	cmp.w	r9, #0
 800b024:	d107      	bne.n	800b036 <_tzset_unlocked_r+0x2b6>
 800b026:	722b      	strb	r3, [r5, #8]
 800b028:	2103      	movs	r1, #3
 800b02a:	2302      	movs	r3, #2
 800b02c:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800b030:	f8c5 9014 	str.w	r9, [r5, #20]
 800b034:	e791      	b.n	800af5a <_tzset_unlocked_r+0x1da>
 800b036:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800b03a:	220b      	movs	r2, #11
 800b03c:	2301      	movs	r3, #1
 800b03e:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800b042:	2300      	movs	r3, #0
 800b044:	63eb      	str	r3, [r5, #60]	; 0x3c
 800b046:	e788      	b.n	800af5a <_tzset_unlocked_r+0x1da>
 800b048:	b280      	uxth	r0, r0
 800b04a:	723b      	strb	r3, [r7, #8]
 800b04c:	6178      	str	r0, [r7, #20]
 800b04e:	e784      	b.n	800af5a <_tzset_unlocked_r+0x1da>
 800b050:	0800cbd4 	.word	0x0800cbd4
 800b054:	20000fc4 	.word	0x20000fc4
 800b058:	20000fcc 	.word	0x20000fcc
 800b05c:	0800cbd7 	.word	0x0800cbd7
 800b060:	20000fc8 	.word	0x20000fc8
 800b064:	200001b8 	.word	0x200001b8
 800b068:	20000fb7 	.word	0x20000fb7
 800b06c:	0800cbdb 	.word	0x0800cbdb
 800b070:	0800cbfe 	.word	0x0800cbfe
 800b074:	0800cbea 	.word	0x0800cbea
 800b078:	0800cbfd 	.word	0x0800cbfd
 800b07c:	20000fac 	.word	0x20000fac

0800b080 <__assert_func>:
 800b080:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b082:	4614      	mov	r4, r2
 800b084:	461a      	mov	r2, r3
 800b086:	4b09      	ldr	r3, [pc, #36]	; (800b0ac <__assert_func+0x2c>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4605      	mov	r5, r0
 800b08c:	68d8      	ldr	r0, [r3, #12]
 800b08e:	b14c      	cbz	r4, 800b0a4 <__assert_func+0x24>
 800b090:	4b07      	ldr	r3, [pc, #28]	; (800b0b0 <__assert_func+0x30>)
 800b092:	9100      	str	r1, [sp, #0]
 800b094:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b098:	4906      	ldr	r1, [pc, #24]	; (800b0b4 <__assert_func+0x34>)
 800b09a:	462b      	mov	r3, r5
 800b09c:	f000 f80e 	bl	800b0bc <fiprintf>
 800b0a0:	f000 fdf0 	bl	800bc84 <abort>
 800b0a4:	4b04      	ldr	r3, [pc, #16]	; (800b0b8 <__assert_func+0x38>)
 800b0a6:	461c      	mov	r4, r3
 800b0a8:	e7f3      	b.n	800b092 <__assert_func+0x12>
 800b0aa:	bf00      	nop
 800b0ac:	20000154 	.word	0x20000154
 800b0b0:	0800cc10 	.word	0x0800cc10
 800b0b4:	0800cc1d 	.word	0x0800cc1d
 800b0b8:	0800cc4b 	.word	0x0800cc4b

0800b0bc <fiprintf>:
 800b0bc:	b40e      	push	{r1, r2, r3}
 800b0be:	b503      	push	{r0, r1, lr}
 800b0c0:	4601      	mov	r1, r0
 800b0c2:	ab03      	add	r3, sp, #12
 800b0c4:	4805      	ldr	r0, [pc, #20]	; (800b0dc <fiprintf+0x20>)
 800b0c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0ca:	6800      	ldr	r0, [r0, #0]
 800b0cc:	9301      	str	r3, [sp, #4]
 800b0ce:	f000 f937 	bl	800b340 <_vfiprintf_r>
 800b0d2:	b002      	add	sp, #8
 800b0d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0d8:	b003      	add	sp, #12
 800b0da:	4770      	bx	lr
 800b0dc:	20000154 	.word	0x20000154

0800b0e0 <_findenv_r>:
 800b0e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e4:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800b154 <_findenv_r+0x74>
 800b0e8:	4607      	mov	r7, r0
 800b0ea:	4689      	mov	r9, r1
 800b0ec:	4616      	mov	r6, r2
 800b0ee:	f000 fde1 	bl	800bcb4 <__env_lock>
 800b0f2:	f8da 4000 	ldr.w	r4, [sl]
 800b0f6:	b134      	cbz	r4, 800b106 <_findenv_r+0x26>
 800b0f8:	464b      	mov	r3, r9
 800b0fa:	4698      	mov	r8, r3
 800b0fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b100:	b13a      	cbz	r2, 800b112 <_findenv_r+0x32>
 800b102:	2a3d      	cmp	r2, #61	; 0x3d
 800b104:	d1f9      	bne.n	800b0fa <_findenv_r+0x1a>
 800b106:	4638      	mov	r0, r7
 800b108:	f000 fdda 	bl	800bcc0 <__env_unlock>
 800b10c:	2000      	movs	r0, #0
 800b10e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b112:	eba8 0809 	sub.w	r8, r8, r9
 800b116:	46a3      	mov	fp, r4
 800b118:	f854 0b04 	ldr.w	r0, [r4], #4
 800b11c:	2800      	cmp	r0, #0
 800b11e:	d0f2      	beq.n	800b106 <_findenv_r+0x26>
 800b120:	4642      	mov	r2, r8
 800b122:	4649      	mov	r1, r9
 800b124:	f000 fc49 	bl	800b9ba <strncmp>
 800b128:	2800      	cmp	r0, #0
 800b12a:	d1f4      	bne.n	800b116 <_findenv_r+0x36>
 800b12c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b130:	eb03 0508 	add.w	r5, r3, r8
 800b134:	f813 3008 	ldrb.w	r3, [r3, r8]
 800b138:	2b3d      	cmp	r3, #61	; 0x3d
 800b13a:	d1ec      	bne.n	800b116 <_findenv_r+0x36>
 800b13c:	f8da 3000 	ldr.w	r3, [sl]
 800b140:	ebab 0303 	sub.w	r3, fp, r3
 800b144:	109b      	asrs	r3, r3, #2
 800b146:	4638      	mov	r0, r7
 800b148:	6033      	str	r3, [r6, #0]
 800b14a:	f000 fdb9 	bl	800bcc0 <__env_unlock>
 800b14e:	1c68      	adds	r0, r5, #1
 800b150:	e7dd      	b.n	800b10e <_findenv_r+0x2e>
 800b152:	bf00      	nop
 800b154:	20000144 	.word	0x20000144

0800b158 <_getenv_r>:
 800b158:	b507      	push	{r0, r1, r2, lr}
 800b15a:	aa01      	add	r2, sp, #4
 800b15c:	f7ff ffc0 	bl	800b0e0 <_findenv_r>
 800b160:	b003      	add	sp, #12
 800b162:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800b168 <__gettzinfo>:
 800b168:	4800      	ldr	r0, [pc, #0]	; (800b16c <__gettzinfo+0x4>)
 800b16a:	4770      	bx	lr
 800b16c:	200001c0 	.word	0x200001c0

0800b170 <gmtime_r>:
 800b170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b174:	e9d0 6700 	ldrd	r6, r7, [r0]
 800b178:	460c      	mov	r4, r1
 800b17a:	4a4f      	ldr	r2, [pc, #316]	; (800b2b8 <gmtime_r+0x148>)
 800b17c:	2300      	movs	r3, #0
 800b17e:	4630      	mov	r0, r6
 800b180:	4639      	mov	r1, r7
 800b182:	f7f5 f8ad 	bl	80002e0 <__aeabi_ldivmod>
 800b186:	4639      	mov	r1, r7
 800b188:	4605      	mov	r5, r0
 800b18a:	4a4b      	ldr	r2, [pc, #300]	; (800b2b8 <gmtime_r+0x148>)
 800b18c:	4630      	mov	r0, r6
 800b18e:	2300      	movs	r3, #0
 800b190:	f7f5 f8a6 	bl	80002e0 <__aeabi_ldivmod>
 800b194:	2a00      	cmp	r2, #0
 800b196:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800b19a:	bfb7      	itett	lt
 800b19c:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800b1a0:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800b1a4:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800b1a8:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800b1ac:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800b1b0:	fbb2 f1f0 	udiv	r1, r2, r0
 800b1b4:	fb00 2211 	mls	r2, r0, r1, r2
 800b1b8:	203c      	movs	r0, #60	; 0x3c
 800b1ba:	60a1      	str	r1, [r4, #8]
 800b1bc:	fbb2 f1f0 	udiv	r1, r2, r0
 800b1c0:	fb00 2211 	mls	r2, r0, r1, r2
 800b1c4:	6061      	str	r1, [r4, #4]
 800b1c6:	6022      	str	r2, [r4, #0]
 800b1c8:	2107      	movs	r1, #7
 800b1ca:	1cda      	adds	r2, r3, #3
 800b1cc:	fb92 f1f1 	sdiv	r1, r2, r1
 800b1d0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800b1d4:	1a52      	subs	r2, r2, r1
 800b1d6:	bf48      	it	mi
 800b1d8:	3207      	addmi	r2, #7
 800b1da:	4d38      	ldr	r5, [pc, #224]	; (800b2bc <gmtime_r+0x14c>)
 800b1dc:	4838      	ldr	r0, [pc, #224]	; (800b2c0 <gmtime_r+0x150>)
 800b1de:	61a2      	str	r2, [r4, #24]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	bfb7      	itett	lt
 800b1e4:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800b1e8:	fb93 f5f5 	sdivge	r5, r3, r5
 800b1ec:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800b1f0:	fb92 f5f5 	sdivlt	r5, r2, r5
 800b1f4:	fb00 3005 	mla	r0, r0, r5, r3
 800b1f8:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800b1fc:	fbb0 f2f2 	udiv	r2, r0, r2
 800b200:	4402      	add	r2, r0
 800b202:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800b206:	fbb0 f1f3 	udiv	r1, r0, r3
 800b20a:	1a52      	subs	r2, r2, r1
 800b20c:	f240 1c6d 	movw	ip, #365	; 0x16d
 800b210:	492c      	ldr	r1, [pc, #176]	; (800b2c4 <gmtime_r+0x154>)
 800b212:	fbb0 f1f1 	udiv	r1, r0, r1
 800b216:	2764      	movs	r7, #100	; 0x64
 800b218:	1a52      	subs	r2, r2, r1
 800b21a:	fbb2 f1fc 	udiv	r1, r2, ip
 800b21e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b222:	fbb1 f6f7 	udiv	r6, r1, r7
 800b226:	1af3      	subs	r3, r6, r3
 800b228:	4403      	add	r3, r0
 800b22a:	fb0c 3311 	mls	r3, ip, r1, r3
 800b22e:	2299      	movs	r2, #153	; 0x99
 800b230:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800b234:	f10e 0e02 	add.w	lr, lr, #2
 800b238:	f103 0c01 	add.w	ip, r3, #1
 800b23c:	fbbe f0f2 	udiv	r0, lr, r2
 800b240:	4342      	muls	r2, r0
 800b242:	3202      	adds	r2, #2
 800b244:	f04f 0805 	mov.w	r8, #5
 800b248:	fbb2 f2f8 	udiv	r2, r2, r8
 800b24c:	ebac 0c02 	sub.w	ip, ip, r2
 800b250:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800b254:	4596      	cmp	lr, r2
 800b256:	bf94      	ite	ls
 800b258:	2202      	movls	r2, #2
 800b25a:	f06f 0209 	mvnhi.w	r2, #9
 800b25e:	4410      	add	r0, r2
 800b260:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b264:	fb02 1505 	mla	r5, r2, r5, r1
 800b268:	2801      	cmp	r0, #1
 800b26a:	bf98      	it	ls
 800b26c:	3501      	addls	r5, #1
 800b26e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800b272:	d30d      	bcc.n	800b290 <gmtime_r+0x120>
 800b274:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800b278:	61e3      	str	r3, [r4, #28]
 800b27a:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800b27e:	2300      	movs	r3, #0
 800b280:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800b284:	f8c4 c00c 	str.w	ip, [r4, #12]
 800b288:	6223      	str	r3, [r4, #32]
 800b28a:	4620      	mov	r0, r4
 800b28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b290:	078a      	lsls	r2, r1, #30
 800b292:	d102      	bne.n	800b29a <gmtime_r+0x12a>
 800b294:	fb07 1616 	mls	r6, r7, r6, r1
 800b298:	b95e      	cbnz	r6, 800b2b2 <gmtime_r+0x142>
 800b29a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b29e:	fbb1 f6f2 	udiv	r6, r1, r2
 800b2a2:	fb02 1216 	mls	r2, r2, r6, r1
 800b2a6:	fab2 f282 	clz	r2, r2
 800b2aa:	0952      	lsrs	r2, r2, #5
 800b2ac:	333b      	adds	r3, #59	; 0x3b
 800b2ae:	4413      	add	r3, r2
 800b2b0:	e7e2      	b.n	800b278 <gmtime_r+0x108>
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	e7fa      	b.n	800b2ac <gmtime_r+0x13c>
 800b2b6:	bf00      	nop
 800b2b8:	00015180 	.word	0x00015180
 800b2bc:	00023ab1 	.word	0x00023ab1
 800b2c0:	fffdc54f 	.word	0xfffdc54f
 800b2c4:	00023ab0 	.word	0x00023ab0

0800b2c8 <__retarget_lock_init_recursive>:
 800b2c8:	4770      	bx	lr

0800b2ca <__retarget_lock_acquire>:
 800b2ca:	4770      	bx	lr

0800b2cc <__retarget_lock_acquire_recursive>:
 800b2cc:	4770      	bx	lr

0800b2ce <__retarget_lock_release>:
 800b2ce:	4770      	bx	lr

0800b2d0 <__retarget_lock_release_recursive>:
 800b2d0:	4770      	bx	lr
	...

0800b2d4 <__malloc_lock>:
 800b2d4:	4801      	ldr	r0, [pc, #4]	; (800b2dc <__malloc_lock+0x8>)
 800b2d6:	f7ff bff9 	b.w	800b2cc <__retarget_lock_acquire_recursive>
 800b2da:	bf00      	nop
 800b2dc:	20000fd1 	.word	0x20000fd1

0800b2e0 <__malloc_unlock>:
 800b2e0:	4801      	ldr	r0, [pc, #4]	; (800b2e8 <__malloc_unlock+0x8>)
 800b2e2:	f7ff bff5 	b.w	800b2d0 <__retarget_lock_release_recursive>
 800b2e6:	bf00      	nop
 800b2e8:	20000fd1 	.word	0x20000fd1

0800b2ec <__sfputc_r>:
 800b2ec:	6893      	ldr	r3, [r2, #8]
 800b2ee:	3b01      	subs	r3, #1
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	b410      	push	{r4}
 800b2f4:	6093      	str	r3, [r2, #8]
 800b2f6:	da08      	bge.n	800b30a <__sfputc_r+0x1e>
 800b2f8:	6994      	ldr	r4, [r2, #24]
 800b2fa:	42a3      	cmp	r3, r4
 800b2fc:	db01      	blt.n	800b302 <__sfputc_r+0x16>
 800b2fe:	290a      	cmp	r1, #10
 800b300:	d103      	bne.n	800b30a <__sfputc_r+0x1e>
 800b302:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b306:	f000 bbeb 	b.w	800bae0 <__swbuf_r>
 800b30a:	6813      	ldr	r3, [r2, #0]
 800b30c:	1c58      	adds	r0, r3, #1
 800b30e:	6010      	str	r0, [r2, #0]
 800b310:	7019      	strb	r1, [r3, #0]
 800b312:	4608      	mov	r0, r1
 800b314:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b318:	4770      	bx	lr

0800b31a <__sfputs_r>:
 800b31a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b31c:	4606      	mov	r6, r0
 800b31e:	460f      	mov	r7, r1
 800b320:	4614      	mov	r4, r2
 800b322:	18d5      	adds	r5, r2, r3
 800b324:	42ac      	cmp	r4, r5
 800b326:	d101      	bne.n	800b32c <__sfputs_r+0x12>
 800b328:	2000      	movs	r0, #0
 800b32a:	e007      	b.n	800b33c <__sfputs_r+0x22>
 800b32c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b330:	463a      	mov	r2, r7
 800b332:	4630      	mov	r0, r6
 800b334:	f7ff ffda 	bl	800b2ec <__sfputc_r>
 800b338:	1c43      	adds	r3, r0, #1
 800b33a:	d1f3      	bne.n	800b324 <__sfputs_r+0xa>
 800b33c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b340 <_vfiprintf_r>:
 800b340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b344:	460d      	mov	r5, r1
 800b346:	b09d      	sub	sp, #116	; 0x74
 800b348:	4614      	mov	r4, r2
 800b34a:	4698      	mov	r8, r3
 800b34c:	4606      	mov	r6, r0
 800b34e:	b118      	cbz	r0, 800b358 <_vfiprintf_r+0x18>
 800b350:	6983      	ldr	r3, [r0, #24]
 800b352:	b90b      	cbnz	r3, 800b358 <_vfiprintf_r+0x18>
 800b354:	f000 fdd4 	bl	800bf00 <__sinit>
 800b358:	4b89      	ldr	r3, [pc, #548]	; (800b580 <_vfiprintf_r+0x240>)
 800b35a:	429d      	cmp	r5, r3
 800b35c:	d11b      	bne.n	800b396 <_vfiprintf_r+0x56>
 800b35e:	6875      	ldr	r5, [r6, #4]
 800b360:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b362:	07d9      	lsls	r1, r3, #31
 800b364:	d405      	bmi.n	800b372 <_vfiprintf_r+0x32>
 800b366:	89ab      	ldrh	r3, [r5, #12]
 800b368:	059a      	lsls	r2, r3, #22
 800b36a:	d402      	bmi.n	800b372 <_vfiprintf_r+0x32>
 800b36c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b36e:	f7ff ffad 	bl	800b2cc <__retarget_lock_acquire_recursive>
 800b372:	89ab      	ldrh	r3, [r5, #12]
 800b374:	071b      	lsls	r3, r3, #28
 800b376:	d501      	bpl.n	800b37c <_vfiprintf_r+0x3c>
 800b378:	692b      	ldr	r3, [r5, #16]
 800b37a:	b9eb      	cbnz	r3, 800b3b8 <_vfiprintf_r+0x78>
 800b37c:	4629      	mov	r1, r5
 800b37e:	4630      	mov	r0, r6
 800b380:	f000 fc12 	bl	800bba8 <__swsetup_r>
 800b384:	b1c0      	cbz	r0, 800b3b8 <_vfiprintf_r+0x78>
 800b386:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b388:	07dc      	lsls	r4, r3, #31
 800b38a:	d50e      	bpl.n	800b3aa <_vfiprintf_r+0x6a>
 800b38c:	f04f 30ff 	mov.w	r0, #4294967295
 800b390:	b01d      	add	sp, #116	; 0x74
 800b392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b396:	4b7b      	ldr	r3, [pc, #492]	; (800b584 <_vfiprintf_r+0x244>)
 800b398:	429d      	cmp	r5, r3
 800b39a:	d101      	bne.n	800b3a0 <_vfiprintf_r+0x60>
 800b39c:	68b5      	ldr	r5, [r6, #8]
 800b39e:	e7df      	b.n	800b360 <_vfiprintf_r+0x20>
 800b3a0:	4b79      	ldr	r3, [pc, #484]	; (800b588 <_vfiprintf_r+0x248>)
 800b3a2:	429d      	cmp	r5, r3
 800b3a4:	bf08      	it	eq
 800b3a6:	68f5      	ldreq	r5, [r6, #12]
 800b3a8:	e7da      	b.n	800b360 <_vfiprintf_r+0x20>
 800b3aa:	89ab      	ldrh	r3, [r5, #12]
 800b3ac:	0598      	lsls	r0, r3, #22
 800b3ae:	d4ed      	bmi.n	800b38c <_vfiprintf_r+0x4c>
 800b3b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3b2:	f7ff ff8d 	bl	800b2d0 <__retarget_lock_release_recursive>
 800b3b6:	e7e9      	b.n	800b38c <_vfiprintf_r+0x4c>
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b3bc:	2320      	movs	r3, #32
 800b3be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3c6:	2330      	movs	r3, #48	; 0x30
 800b3c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b58c <_vfiprintf_r+0x24c>
 800b3cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3d0:	f04f 0901 	mov.w	r9, #1
 800b3d4:	4623      	mov	r3, r4
 800b3d6:	469a      	mov	sl, r3
 800b3d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3dc:	b10a      	cbz	r2, 800b3e2 <_vfiprintf_r+0xa2>
 800b3de:	2a25      	cmp	r2, #37	; 0x25
 800b3e0:	d1f9      	bne.n	800b3d6 <_vfiprintf_r+0x96>
 800b3e2:	ebba 0b04 	subs.w	fp, sl, r4
 800b3e6:	d00b      	beq.n	800b400 <_vfiprintf_r+0xc0>
 800b3e8:	465b      	mov	r3, fp
 800b3ea:	4622      	mov	r2, r4
 800b3ec:	4629      	mov	r1, r5
 800b3ee:	4630      	mov	r0, r6
 800b3f0:	f7ff ff93 	bl	800b31a <__sfputs_r>
 800b3f4:	3001      	adds	r0, #1
 800b3f6:	f000 80aa 	beq.w	800b54e <_vfiprintf_r+0x20e>
 800b3fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3fc:	445a      	add	r2, fp
 800b3fe:	9209      	str	r2, [sp, #36]	; 0x24
 800b400:	f89a 3000 	ldrb.w	r3, [sl]
 800b404:	2b00      	cmp	r3, #0
 800b406:	f000 80a2 	beq.w	800b54e <_vfiprintf_r+0x20e>
 800b40a:	2300      	movs	r3, #0
 800b40c:	f04f 32ff 	mov.w	r2, #4294967295
 800b410:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b414:	f10a 0a01 	add.w	sl, sl, #1
 800b418:	9304      	str	r3, [sp, #16]
 800b41a:	9307      	str	r3, [sp, #28]
 800b41c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b420:	931a      	str	r3, [sp, #104]	; 0x68
 800b422:	4654      	mov	r4, sl
 800b424:	2205      	movs	r2, #5
 800b426:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b42a:	4858      	ldr	r0, [pc, #352]	; (800b58c <_vfiprintf_r+0x24c>)
 800b42c:	f7f4 ff08 	bl	8000240 <memchr>
 800b430:	9a04      	ldr	r2, [sp, #16]
 800b432:	b9d8      	cbnz	r0, 800b46c <_vfiprintf_r+0x12c>
 800b434:	06d1      	lsls	r1, r2, #27
 800b436:	bf44      	itt	mi
 800b438:	2320      	movmi	r3, #32
 800b43a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b43e:	0713      	lsls	r3, r2, #28
 800b440:	bf44      	itt	mi
 800b442:	232b      	movmi	r3, #43	; 0x2b
 800b444:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b448:	f89a 3000 	ldrb.w	r3, [sl]
 800b44c:	2b2a      	cmp	r3, #42	; 0x2a
 800b44e:	d015      	beq.n	800b47c <_vfiprintf_r+0x13c>
 800b450:	9a07      	ldr	r2, [sp, #28]
 800b452:	4654      	mov	r4, sl
 800b454:	2000      	movs	r0, #0
 800b456:	f04f 0c0a 	mov.w	ip, #10
 800b45a:	4621      	mov	r1, r4
 800b45c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b460:	3b30      	subs	r3, #48	; 0x30
 800b462:	2b09      	cmp	r3, #9
 800b464:	d94e      	bls.n	800b504 <_vfiprintf_r+0x1c4>
 800b466:	b1b0      	cbz	r0, 800b496 <_vfiprintf_r+0x156>
 800b468:	9207      	str	r2, [sp, #28]
 800b46a:	e014      	b.n	800b496 <_vfiprintf_r+0x156>
 800b46c:	eba0 0308 	sub.w	r3, r0, r8
 800b470:	fa09 f303 	lsl.w	r3, r9, r3
 800b474:	4313      	orrs	r3, r2
 800b476:	9304      	str	r3, [sp, #16]
 800b478:	46a2      	mov	sl, r4
 800b47a:	e7d2      	b.n	800b422 <_vfiprintf_r+0xe2>
 800b47c:	9b03      	ldr	r3, [sp, #12]
 800b47e:	1d19      	adds	r1, r3, #4
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	9103      	str	r1, [sp, #12]
 800b484:	2b00      	cmp	r3, #0
 800b486:	bfbb      	ittet	lt
 800b488:	425b      	neglt	r3, r3
 800b48a:	f042 0202 	orrlt.w	r2, r2, #2
 800b48e:	9307      	strge	r3, [sp, #28]
 800b490:	9307      	strlt	r3, [sp, #28]
 800b492:	bfb8      	it	lt
 800b494:	9204      	strlt	r2, [sp, #16]
 800b496:	7823      	ldrb	r3, [r4, #0]
 800b498:	2b2e      	cmp	r3, #46	; 0x2e
 800b49a:	d10c      	bne.n	800b4b6 <_vfiprintf_r+0x176>
 800b49c:	7863      	ldrb	r3, [r4, #1]
 800b49e:	2b2a      	cmp	r3, #42	; 0x2a
 800b4a0:	d135      	bne.n	800b50e <_vfiprintf_r+0x1ce>
 800b4a2:	9b03      	ldr	r3, [sp, #12]
 800b4a4:	1d1a      	adds	r2, r3, #4
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	9203      	str	r2, [sp, #12]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	bfb8      	it	lt
 800b4ae:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4b2:	3402      	adds	r4, #2
 800b4b4:	9305      	str	r3, [sp, #20]
 800b4b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b59c <_vfiprintf_r+0x25c>
 800b4ba:	7821      	ldrb	r1, [r4, #0]
 800b4bc:	2203      	movs	r2, #3
 800b4be:	4650      	mov	r0, sl
 800b4c0:	f7f4 febe 	bl	8000240 <memchr>
 800b4c4:	b140      	cbz	r0, 800b4d8 <_vfiprintf_r+0x198>
 800b4c6:	2340      	movs	r3, #64	; 0x40
 800b4c8:	eba0 000a 	sub.w	r0, r0, sl
 800b4cc:	fa03 f000 	lsl.w	r0, r3, r0
 800b4d0:	9b04      	ldr	r3, [sp, #16]
 800b4d2:	4303      	orrs	r3, r0
 800b4d4:	3401      	adds	r4, #1
 800b4d6:	9304      	str	r3, [sp, #16]
 800b4d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4dc:	482c      	ldr	r0, [pc, #176]	; (800b590 <_vfiprintf_r+0x250>)
 800b4de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4e2:	2206      	movs	r2, #6
 800b4e4:	f7f4 feac 	bl	8000240 <memchr>
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	d03f      	beq.n	800b56c <_vfiprintf_r+0x22c>
 800b4ec:	4b29      	ldr	r3, [pc, #164]	; (800b594 <_vfiprintf_r+0x254>)
 800b4ee:	bb1b      	cbnz	r3, 800b538 <_vfiprintf_r+0x1f8>
 800b4f0:	9b03      	ldr	r3, [sp, #12]
 800b4f2:	3307      	adds	r3, #7
 800b4f4:	f023 0307 	bic.w	r3, r3, #7
 800b4f8:	3308      	adds	r3, #8
 800b4fa:	9303      	str	r3, [sp, #12]
 800b4fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4fe:	443b      	add	r3, r7
 800b500:	9309      	str	r3, [sp, #36]	; 0x24
 800b502:	e767      	b.n	800b3d4 <_vfiprintf_r+0x94>
 800b504:	fb0c 3202 	mla	r2, ip, r2, r3
 800b508:	460c      	mov	r4, r1
 800b50a:	2001      	movs	r0, #1
 800b50c:	e7a5      	b.n	800b45a <_vfiprintf_r+0x11a>
 800b50e:	2300      	movs	r3, #0
 800b510:	3401      	adds	r4, #1
 800b512:	9305      	str	r3, [sp, #20]
 800b514:	4619      	mov	r1, r3
 800b516:	f04f 0c0a 	mov.w	ip, #10
 800b51a:	4620      	mov	r0, r4
 800b51c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b520:	3a30      	subs	r2, #48	; 0x30
 800b522:	2a09      	cmp	r2, #9
 800b524:	d903      	bls.n	800b52e <_vfiprintf_r+0x1ee>
 800b526:	2b00      	cmp	r3, #0
 800b528:	d0c5      	beq.n	800b4b6 <_vfiprintf_r+0x176>
 800b52a:	9105      	str	r1, [sp, #20]
 800b52c:	e7c3      	b.n	800b4b6 <_vfiprintf_r+0x176>
 800b52e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b532:	4604      	mov	r4, r0
 800b534:	2301      	movs	r3, #1
 800b536:	e7f0      	b.n	800b51a <_vfiprintf_r+0x1da>
 800b538:	ab03      	add	r3, sp, #12
 800b53a:	9300      	str	r3, [sp, #0]
 800b53c:	462a      	mov	r2, r5
 800b53e:	4b16      	ldr	r3, [pc, #88]	; (800b598 <_vfiprintf_r+0x258>)
 800b540:	a904      	add	r1, sp, #16
 800b542:	4630      	mov	r0, r6
 800b544:	f3af 8000 	nop.w
 800b548:	4607      	mov	r7, r0
 800b54a:	1c78      	adds	r0, r7, #1
 800b54c:	d1d6      	bne.n	800b4fc <_vfiprintf_r+0x1bc>
 800b54e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b550:	07d9      	lsls	r1, r3, #31
 800b552:	d405      	bmi.n	800b560 <_vfiprintf_r+0x220>
 800b554:	89ab      	ldrh	r3, [r5, #12]
 800b556:	059a      	lsls	r2, r3, #22
 800b558:	d402      	bmi.n	800b560 <_vfiprintf_r+0x220>
 800b55a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b55c:	f7ff feb8 	bl	800b2d0 <__retarget_lock_release_recursive>
 800b560:	89ab      	ldrh	r3, [r5, #12]
 800b562:	065b      	lsls	r3, r3, #25
 800b564:	f53f af12 	bmi.w	800b38c <_vfiprintf_r+0x4c>
 800b568:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b56a:	e711      	b.n	800b390 <_vfiprintf_r+0x50>
 800b56c:	ab03      	add	r3, sp, #12
 800b56e:	9300      	str	r3, [sp, #0]
 800b570:	462a      	mov	r2, r5
 800b572:	4b09      	ldr	r3, [pc, #36]	; (800b598 <_vfiprintf_r+0x258>)
 800b574:	a904      	add	r1, sp, #16
 800b576:	4630      	mov	r0, r6
 800b578:	f000 f880 	bl	800b67c <_printf_i>
 800b57c:	e7e4      	b.n	800b548 <_vfiprintf_r+0x208>
 800b57e:	bf00      	nop
 800b580:	0800cda0 	.word	0x0800cda0
 800b584:	0800cdc0 	.word	0x0800cdc0
 800b588:	0800cd80 	.word	0x0800cd80
 800b58c:	0800cc4c 	.word	0x0800cc4c
 800b590:	0800cc56 	.word	0x0800cc56
 800b594:	00000000 	.word	0x00000000
 800b598:	0800b31b 	.word	0x0800b31b
 800b59c:	0800cc52 	.word	0x0800cc52

0800b5a0 <_printf_common>:
 800b5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5a4:	4616      	mov	r6, r2
 800b5a6:	4699      	mov	r9, r3
 800b5a8:	688a      	ldr	r2, [r1, #8]
 800b5aa:	690b      	ldr	r3, [r1, #16]
 800b5ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	bfb8      	it	lt
 800b5b4:	4613      	movlt	r3, r2
 800b5b6:	6033      	str	r3, [r6, #0]
 800b5b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b5bc:	4607      	mov	r7, r0
 800b5be:	460c      	mov	r4, r1
 800b5c0:	b10a      	cbz	r2, 800b5c6 <_printf_common+0x26>
 800b5c2:	3301      	adds	r3, #1
 800b5c4:	6033      	str	r3, [r6, #0]
 800b5c6:	6823      	ldr	r3, [r4, #0]
 800b5c8:	0699      	lsls	r1, r3, #26
 800b5ca:	bf42      	ittt	mi
 800b5cc:	6833      	ldrmi	r3, [r6, #0]
 800b5ce:	3302      	addmi	r3, #2
 800b5d0:	6033      	strmi	r3, [r6, #0]
 800b5d2:	6825      	ldr	r5, [r4, #0]
 800b5d4:	f015 0506 	ands.w	r5, r5, #6
 800b5d8:	d106      	bne.n	800b5e8 <_printf_common+0x48>
 800b5da:	f104 0a19 	add.w	sl, r4, #25
 800b5de:	68e3      	ldr	r3, [r4, #12]
 800b5e0:	6832      	ldr	r2, [r6, #0]
 800b5e2:	1a9b      	subs	r3, r3, r2
 800b5e4:	42ab      	cmp	r3, r5
 800b5e6:	dc26      	bgt.n	800b636 <_printf_common+0x96>
 800b5e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b5ec:	1e13      	subs	r3, r2, #0
 800b5ee:	6822      	ldr	r2, [r4, #0]
 800b5f0:	bf18      	it	ne
 800b5f2:	2301      	movne	r3, #1
 800b5f4:	0692      	lsls	r2, r2, #26
 800b5f6:	d42b      	bmi.n	800b650 <_printf_common+0xb0>
 800b5f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b5fc:	4649      	mov	r1, r9
 800b5fe:	4638      	mov	r0, r7
 800b600:	47c0      	blx	r8
 800b602:	3001      	adds	r0, #1
 800b604:	d01e      	beq.n	800b644 <_printf_common+0xa4>
 800b606:	6823      	ldr	r3, [r4, #0]
 800b608:	68e5      	ldr	r5, [r4, #12]
 800b60a:	6832      	ldr	r2, [r6, #0]
 800b60c:	f003 0306 	and.w	r3, r3, #6
 800b610:	2b04      	cmp	r3, #4
 800b612:	bf08      	it	eq
 800b614:	1aad      	subeq	r5, r5, r2
 800b616:	68a3      	ldr	r3, [r4, #8]
 800b618:	6922      	ldr	r2, [r4, #16]
 800b61a:	bf0c      	ite	eq
 800b61c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b620:	2500      	movne	r5, #0
 800b622:	4293      	cmp	r3, r2
 800b624:	bfc4      	itt	gt
 800b626:	1a9b      	subgt	r3, r3, r2
 800b628:	18ed      	addgt	r5, r5, r3
 800b62a:	2600      	movs	r6, #0
 800b62c:	341a      	adds	r4, #26
 800b62e:	42b5      	cmp	r5, r6
 800b630:	d11a      	bne.n	800b668 <_printf_common+0xc8>
 800b632:	2000      	movs	r0, #0
 800b634:	e008      	b.n	800b648 <_printf_common+0xa8>
 800b636:	2301      	movs	r3, #1
 800b638:	4652      	mov	r2, sl
 800b63a:	4649      	mov	r1, r9
 800b63c:	4638      	mov	r0, r7
 800b63e:	47c0      	blx	r8
 800b640:	3001      	adds	r0, #1
 800b642:	d103      	bne.n	800b64c <_printf_common+0xac>
 800b644:	f04f 30ff 	mov.w	r0, #4294967295
 800b648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b64c:	3501      	adds	r5, #1
 800b64e:	e7c6      	b.n	800b5de <_printf_common+0x3e>
 800b650:	18e1      	adds	r1, r4, r3
 800b652:	1c5a      	adds	r2, r3, #1
 800b654:	2030      	movs	r0, #48	; 0x30
 800b656:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b65a:	4422      	add	r2, r4
 800b65c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b660:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b664:	3302      	adds	r3, #2
 800b666:	e7c7      	b.n	800b5f8 <_printf_common+0x58>
 800b668:	2301      	movs	r3, #1
 800b66a:	4622      	mov	r2, r4
 800b66c:	4649      	mov	r1, r9
 800b66e:	4638      	mov	r0, r7
 800b670:	47c0      	blx	r8
 800b672:	3001      	adds	r0, #1
 800b674:	d0e6      	beq.n	800b644 <_printf_common+0xa4>
 800b676:	3601      	adds	r6, #1
 800b678:	e7d9      	b.n	800b62e <_printf_common+0x8e>
	...

0800b67c <_printf_i>:
 800b67c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b680:	7e0f      	ldrb	r7, [r1, #24]
 800b682:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b684:	2f78      	cmp	r7, #120	; 0x78
 800b686:	4691      	mov	r9, r2
 800b688:	4680      	mov	r8, r0
 800b68a:	460c      	mov	r4, r1
 800b68c:	469a      	mov	sl, r3
 800b68e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b692:	d807      	bhi.n	800b6a4 <_printf_i+0x28>
 800b694:	2f62      	cmp	r7, #98	; 0x62
 800b696:	d80a      	bhi.n	800b6ae <_printf_i+0x32>
 800b698:	2f00      	cmp	r7, #0
 800b69a:	f000 80d8 	beq.w	800b84e <_printf_i+0x1d2>
 800b69e:	2f58      	cmp	r7, #88	; 0x58
 800b6a0:	f000 80a3 	beq.w	800b7ea <_printf_i+0x16e>
 800b6a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b6a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b6ac:	e03a      	b.n	800b724 <_printf_i+0xa8>
 800b6ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b6b2:	2b15      	cmp	r3, #21
 800b6b4:	d8f6      	bhi.n	800b6a4 <_printf_i+0x28>
 800b6b6:	a101      	add	r1, pc, #4	; (adr r1, 800b6bc <_printf_i+0x40>)
 800b6b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b6bc:	0800b715 	.word	0x0800b715
 800b6c0:	0800b729 	.word	0x0800b729
 800b6c4:	0800b6a5 	.word	0x0800b6a5
 800b6c8:	0800b6a5 	.word	0x0800b6a5
 800b6cc:	0800b6a5 	.word	0x0800b6a5
 800b6d0:	0800b6a5 	.word	0x0800b6a5
 800b6d4:	0800b729 	.word	0x0800b729
 800b6d8:	0800b6a5 	.word	0x0800b6a5
 800b6dc:	0800b6a5 	.word	0x0800b6a5
 800b6e0:	0800b6a5 	.word	0x0800b6a5
 800b6e4:	0800b6a5 	.word	0x0800b6a5
 800b6e8:	0800b835 	.word	0x0800b835
 800b6ec:	0800b759 	.word	0x0800b759
 800b6f0:	0800b817 	.word	0x0800b817
 800b6f4:	0800b6a5 	.word	0x0800b6a5
 800b6f8:	0800b6a5 	.word	0x0800b6a5
 800b6fc:	0800b857 	.word	0x0800b857
 800b700:	0800b6a5 	.word	0x0800b6a5
 800b704:	0800b759 	.word	0x0800b759
 800b708:	0800b6a5 	.word	0x0800b6a5
 800b70c:	0800b6a5 	.word	0x0800b6a5
 800b710:	0800b81f 	.word	0x0800b81f
 800b714:	682b      	ldr	r3, [r5, #0]
 800b716:	1d1a      	adds	r2, r3, #4
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	602a      	str	r2, [r5, #0]
 800b71c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b720:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b724:	2301      	movs	r3, #1
 800b726:	e0a3      	b.n	800b870 <_printf_i+0x1f4>
 800b728:	6820      	ldr	r0, [r4, #0]
 800b72a:	6829      	ldr	r1, [r5, #0]
 800b72c:	0606      	lsls	r6, r0, #24
 800b72e:	f101 0304 	add.w	r3, r1, #4
 800b732:	d50a      	bpl.n	800b74a <_printf_i+0xce>
 800b734:	680e      	ldr	r6, [r1, #0]
 800b736:	602b      	str	r3, [r5, #0]
 800b738:	2e00      	cmp	r6, #0
 800b73a:	da03      	bge.n	800b744 <_printf_i+0xc8>
 800b73c:	232d      	movs	r3, #45	; 0x2d
 800b73e:	4276      	negs	r6, r6
 800b740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b744:	485e      	ldr	r0, [pc, #376]	; (800b8c0 <_printf_i+0x244>)
 800b746:	230a      	movs	r3, #10
 800b748:	e019      	b.n	800b77e <_printf_i+0x102>
 800b74a:	680e      	ldr	r6, [r1, #0]
 800b74c:	602b      	str	r3, [r5, #0]
 800b74e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b752:	bf18      	it	ne
 800b754:	b236      	sxthne	r6, r6
 800b756:	e7ef      	b.n	800b738 <_printf_i+0xbc>
 800b758:	682b      	ldr	r3, [r5, #0]
 800b75a:	6820      	ldr	r0, [r4, #0]
 800b75c:	1d19      	adds	r1, r3, #4
 800b75e:	6029      	str	r1, [r5, #0]
 800b760:	0601      	lsls	r1, r0, #24
 800b762:	d501      	bpl.n	800b768 <_printf_i+0xec>
 800b764:	681e      	ldr	r6, [r3, #0]
 800b766:	e002      	b.n	800b76e <_printf_i+0xf2>
 800b768:	0646      	lsls	r6, r0, #25
 800b76a:	d5fb      	bpl.n	800b764 <_printf_i+0xe8>
 800b76c:	881e      	ldrh	r6, [r3, #0]
 800b76e:	4854      	ldr	r0, [pc, #336]	; (800b8c0 <_printf_i+0x244>)
 800b770:	2f6f      	cmp	r7, #111	; 0x6f
 800b772:	bf0c      	ite	eq
 800b774:	2308      	moveq	r3, #8
 800b776:	230a      	movne	r3, #10
 800b778:	2100      	movs	r1, #0
 800b77a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b77e:	6865      	ldr	r5, [r4, #4]
 800b780:	60a5      	str	r5, [r4, #8]
 800b782:	2d00      	cmp	r5, #0
 800b784:	bfa2      	ittt	ge
 800b786:	6821      	ldrge	r1, [r4, #0]
 800b788:	f021 0104 	bicge.w	r1, r1, #4
 800b78c:	6021      	strge	r1, [r4, #0]
 800b78e:	b90e      	cbnz	r6, 800b794 <_printf_i+0x118>
 800b790:	2d00      	cmp	r5, #0
 800b792:	d04d      	beq.n	800b830 <_printf_i+0x1b4>
 800b794:	4615      	mov	r5, r2
 800b796:	fbb6 f1f3 	udiv	r1, r6, r3
 800b79a:	fb03 6711 	mls	r7, r3, r1, r6
 800b79e:	5dc7      	ldrb	r7, [r0, r7]
 800b7a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b7a4:	4637      	mov	r7, r6
 800b7a6:	42bb      	cmp	r3, r7
 800b7a8:	460e      	mov	r6, r1
 800b7aa:	d9f4      	bls.n	800b796 <_printf_i+0x11a>
 800b7ac:	2b08      	cmp	r3, #8
 800b7ae:	d10b      	bne.n	800b7c8 <_printf_i+0x14c>
 800b7b0:	6823      	ldr	r3, [r4, #0]
 800b7b2:	07de      	lsls	r6, r3, #31
 800b7b4:	d508      	bpl.n	800b7c8 <_printf_i+0x14c>
 800b7b6:	6923      	ldr	r3, [r4, #16]
 800b7b8:	6861      	ldr	r1, [r4, #4]
 800b7ba:	4299      	cmp	r1, r3
 800b7bc:	bfde      	ittt	le
 800b7be:	2330      	movle	r3, #48	; 0x30
 800b7c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b7c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b7c8:	1b52      	subs	r2, r2, r5
 800b7ca:	6122      	str	r2, [r4, #16]
 800b7cc:	f8cd a000 	str.w	sl, [sp]
 800b7d0:	464b      	mov	r3, r9
 800b7d2:	aa03      	add	r2, sp, #12
 800b7d4:	4621      	mov	r1, r4
 800b7d6:	4640      	mov	r0, r8
 800b7d8:	f7ff fee2 	bl	800b5a0 <_printf_common>
 800b7dc:	3001      	adds	r0, #1
 800b7de:	d14c      	bne.n	800b87a <_printf_i+0x1fe>
 800b7e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7e4:	b004      	add	sp, #16
 800b7e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7ea:	4835      	ldr	r0, [pc, #212]	; (800b8c0 <_printf_i+0x244>)
 800b7ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b7f0:	6829      	ldr	r1, [r5, #0]
 800b7f2:	6823      	ldr	r3, [r4, #0]
 800b7f4:	f851 6b04 	ldr.w	r6, [r1], #4
 800b7f8:	6029      	str	r1, [r5, #0]
 800b7fa:	061d      	lsls	r5, r3, #24
 800b7fc:	d514      	bpl.n	800b828 <_printf_i+0x1ac>
 800b7fe:	07df      	lsls	r7, r3, #31
 800b800:	bf44      	itt	mi
 800b802:	f043 0320 	orrmi.w	r3, r3, #32
 800b806:	6023      	strmi	r3, [r4, #0]
 800b808:	b91e      	cbnz	r6, 800b812 <_printf_i+0x196>
 800b80a:	6823      	ldr	r3, [r4, #0]
 800b80c:	f023 0320 	bic.w	r3, r3, #32
 800b810:	6023      	str	r3, [r4, #0]
 800b812:	2310      	movs	r3, #16
 800b814:	e7b0      	b.n	800b778 <_printf_i+0xfc>
 800b816:	6823      	ldr	r3, [r4, #0]
 800b818:	f043 0320 	orr.w	r3, r3, #32
 800b81c:	6023      	str	r3, [r4, #0]
 800b81e:	2378      	movs	r3, #120	; 0x78
 800b820:	4828      	ldr	r0, [pc, #160]	; (800b8c4 <_printf_i+0x248>)
 800b822:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b826:	e7e3      	b.n	800b7f0 <_printf_i+0x174>
 800b828:	0659      	lsls	r1, r3, #25
 800b82a:	bf48      	it	mi
 800b82c:	b2b6      	uxthmi	r6, r6
 800b82e:	e7e6      	b.n	800b7fe <_printf_i+0x182>
 800b830:	4615      	mov	r5, r2
 800b832:	e7bb      	b.n	800b7ac <_printf_i+0x130>
 800b834:	682b      	ldr	r3, [r5, #0]
 800b836:	6826      	ldr	r6, [r4, #0]
 800b838:	6961      	ldr	r1, [r4, #20]
 800b83a:	1d18      	adds	r0, r3, #4
 800b83c:	6028      	str	r0, [r5, #0]
 800b83e:	0635      	lsls	r5, r6, #24
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	d501      	bpl.n	800b848 <_printf_i+0x1cc>
 800b844:	6019      	str	r1, [r3, #0]
 800b846:	e002      	b.n	800b84e <_printf_i+0x1d2>
 800b848:	0670      	lsls	r0, r6, #25
 800b84a:	d5fb      	bpl.n	800b844 <_printf_i+0x1c8>
 800b84c:	8019      	strh	r1, [r3, #0]
 800b84e:	2300      	movs	r3, #0
 800b850:	6123      	str	r3, [r4, #16]
 800b852:	4615      	mov	r5, r2
 800b854:	e7ba      	b.n	800b7cc <_printf_i+0x150>
 800b856:	682b      	ldr	r3, [r5, #0]
 800b858:	1d1a      	adds	r2, r3, #4
 800b85a:	602a      	str	r2, [r5, #0]
 800b85c:	681d      	ldr	r5, [r3, #0]
 800b85e:	6862      	ldr	r2, [r4, #4]
 800b860:	2100      	movs	r1, #0
 800b862:	4628      	mov	r0, r5
 800b864:	f7f4 fcec 	bl	8000240 <memchr>
 800b868:	b108      	cbz	r0, 800b86e <_printf_i+0x1f2>
 800b86a:	1b40      	subs	r0, r0, r5
 800b86c:	6060      	str	r0, [r4, #4]
 800b86e:	6863      	ldr	r3, [r4, #4]
 800b870:	6123      	str	r3, [r4, #16]
 800b872:	2300      	movs	r3, #0
 800b874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b878:	e7a8      	b.n	800b7cc <_printf_i+0x150>
 800b87a:	6923      	ldr	r3, [r4, #16]
 800b87c:	462a      	mov	r2, r5
 800b87e:	4649      	mov	r1, r9
 800b880:	4640      	mov	r0, r8
 800b882:	47d0      	blx	sl
 800b884:	3001      	adds	r0, #1
 800b886:	d0ab      	beq.n	800b7e0 <_printf_i+0x164>
 800b888:	6823      	ldr	r3, [r4, #0]
 800b88a:	079b      	lsls	r3, r3, #30
 800b88c:	d413      	bmi.n	800b8b6 <_printf_i+0x23a>
 800b88e:	68e0      	ldr	r0, [r4, #12]
 800b890:	9b03      	ldr	r3, [sp, #12]
 800b892:	4298      	cmp	r0, r3
 800b894:	bfb8      	it	lt
 800b896:	4618      	movlt	r0, r3
 800b898:	e7a4      	b.n	800b7e4 <_printf_i+0x168>
 800b89a:	2301      	movs	r3, #1
 800b89c:	4632      	mov	r2, r6
 800b89e:	4649      	mov	r1, r9
 800b8a0:	4640      	mov	r0, r8
 800b8a2:	47d0      	blx	sl
 800b8a4:	3001      	adds	r0, #1
 800b8a6:	d09b      	beq.n	800b7e0 <_printf_i+0x164>
 800b8a8:	3501      	adds	r5, #1
 800b8aa:	68e3      	ldr	r3, [r4, #12]
 800b8ac:	9903      	ldr	r1, [sp, #12]
 800b8ae:	1a5b      	subs	r3, r3, r1
 800b8b0:	42ab      	cmp	r3, r5
 800b8b2:	dcf2      	bgt.n	800b89a <_printf_i+0x21e>
 800b8b4:	e7eb      	b.n	800b88e <_printf_i+0x212>
 800b8b6:	2500      	movs	r5, #0
 800b8b8:	f104 0619 	add.w	r6, r4, #25
 800b8bc:	e7f5      	b.n	800b8aa <_printf_i+0x22e>
 800b8be:	bf00      	nop
 800b8c0:	0800cc5d 	.word	0x0800cc5d
 800b8c4:	0800cc6e 	.word	0x0800cc6e

0800b8c8 <siscanf>:
 800b8c8:	b40e      	push	{r1, r2, r3}
 800b8ca:	b510      	push	{r4, lr}
 800b8cc:	b09f      	sub	sp, #124	; 0x7c
 800b8ce:	ac21      	add	r4, sp, #132	; 0x84
 800b8d0:	f44f 7101 	mov.w	r1, #516	; 0x204
 800b8d4:	f854 2b04 	ldr.w	r2, [r4], #4
 800b8d8:	9201      	str	r2, [sp, #4]
 800b8da:	f8ad 101c 	strh.w	r1, [sp, #28]
 800b8de:	9004      	str	r0, [sp, #16]
 800b8e0:	9008      	str	r0, [sp, #32]
 800b8e2:	f7f4 fc9f 	bl	8000224 <strlen>
 800b8e6:	4b0c      	ldr	r3, [pc, #48]	; (800b918 <siscanf+0x50>)
 800b8e8:	9005      	str	r0, [sp, #20]
 800b8ea:	9009      	str	r0, [sp, #36]	; 0x24
 800b8ec:	930d      	str	r3, [sp, #52]	; 0x34
 800b8ee:	480b      	ldr	r0, [pc, #44]	; (800b91c <siscanf+0x54>)
 800b8f0:	9a01      	ldr	r2, [sp, #4]
 800b8f2:	6800      	ldr	r0, [r0, #0]
 800b8f4:	9403      	str	r4, [sp, #12]
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	9311      	str	r3, [sp, #68]	; 0x44
 800b8fa:	9316      	str	r3, [sp, #88]	; 0x58
 800b8fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b900:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b904:	a904      	add	r1, sp, #16
 800b906:	4623      	mov	r3, r4
 800b908:	f000 fc9a 	bl	800c240 <__ssvfiscanf_r>
 800b90c:	b01f      	add	sp, #124	; 0x7c
 800b90e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b912:	b003      	add	sp, #12
 800b914:	4770      	bx	lr
 800b916:	bf00      	nop
 800b918:	0800b943 	.word	0x0800b943
 800b91c:	20000154 	.word	0x20000154

0800b920 <__sread>:
 800b920:	b510      	push	{r4, lr}
 800b922:	460c      	mov	r4, r1
 800b924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b928:	f000 ff54 	bl	800c7d4 <_read_r>
 800b92c:	2800      	cmp	r0, #0
 800b92e:	bfab      	itete	ge
 800b930:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b932:	89a3      	ldrhlt	r3, [r4, #12]
 800b934:	181b      	addge	r3, r3, r0
 800b936:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b93a:	bfac      	ite	ge
 800b93c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b93e:	81a3      	strhlt	r3, [r4, #12]
 800b940:	bd10      	pop	{r4, pc}

0800b942 <__seofread>:
 800b942:	2000      	movs	r0, #0
 800b944:	4770      	bx	lr

0800b946 <__swrite>:
 800b946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b94a:	461f      	mov	r7, r3
 800b94c:	898b      	ldrh	r3, [r1, #12]
 800b94e:	05db      	lsls	r3, r3, #23
 800b950:	4605      	mov	r5, r0
 800b952:	460c      	mov	r4, r1
 800b954:	4616      	mov	r6, r2
 800b956:	d505      	bpl.n	800b964 <__swrite+0x1e>
 800b958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b95c:	2302      	movs	r3, #2
 800b95e:	2200      	movs	r2, #0
 800b960:	f000 fb6c 	bl	800c03c <_lseek_r>
 800b964:	89a3      	ldrh	r3, [r4, #12]
 800b966:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b96a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b96e:	81a3      	strh	r3, [r4, #12]
 800b970:	4632      	mov	r2, r6
 800b972:	463b      	mov	r3, r7
 800b974:	4628      	mov	r0, r5
 800b976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b97a:	f000 b903 	b.w	800bb84 <_write_r>

0800b97e <__sseek>:
 800b97e:	b510      	push	{r4, lr}
 800b980:	460c      	mov	r4, r1
 800b982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b986:	f000 fb59 	bl	800c03c <_lseek_r>
 800b98a:	1c43      	adds	r3, r0, #1
 800b98c:	89a3      	ldrh	r3, [r4, #12]
 800b98e:	bf15      	itete	ne
 800b990:	6560      	strne	r0, [r4, #84]	; 0x54
 800b992:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b996:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b99a:	81a3      	strheq	r3, [r4, #12]
 800b99c:	bf18      	it	ne
 800b99e:	81a3      	strhne	r3, [r4, #12]
 800b9a0:	bd10      	pop	{r4, pc}

0800b9a2 <__sclose>:
 800b9a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9a6:	f000 b975 	b.w	800bc94 <_close_r>

0800b9aa <strcpy>:
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9b0:	f803 2b01 	strb.w	r2, [r3], #1
 800b9b4:	2a00      	cmp	r2, #0
 800b9b6:	d1f9      	bne.n	800b9ac <strcpy+0x2>
 800b9b8:	4770      	bx	lr

0800b9ba <strncmp>:
 800b9ba:	b510      	push	{r4, lr}
 800b9bc:	b17a      	cbz	r2, 800b9de <strncmp+0x24>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	3901      	subs	r1, #1
 800b9c2:	1884      	adds	r4, r0, r2
 800b9c4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b9c8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b9cc:	4290      	cmp	r0, r2
 800b9ce:	d101      	bne.n	800b9d4 <strncmp+0x1a>
 800b9d0:	42a3      	cmp	r3, r4
 800b9d2:	d101      	bne.n	800b9d8 <strncmp+0x1e>
 800b9d4:	1a80      	subs	r0, r0, r2
 800b9d6:	bd10      	pop	{r4, pc}
 800b9d8:	2800      	cmp	r0, #0
 800b9da:	d1f3      	bne.n	800b9c4 <strncmp+0xa>
 800b9dc:	e7fa      	b.n	800b9d4 <strncmp+0x1a>
 800b9de:	4610      	mov	r0, r2
 800b9e0:	e7f9      	b.n	800b9d6 <strncmp+0x1c>
	...

0800b9e4 <_strtoul_l.constprop.0>:
 800b9e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b9e8:	4f36      	ldr	r7, [pc, #216]	; (800bac4 <_strtoul_l.constprop.0+0xe0>)
 800b9ea:	4686      	mov	lr, r0
 800b9ec:	460d      	mov	r5, r1
 800b9ee:	4628      	mov	r0, r5
 800b9f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b9f4:	5de6      	ldrb	r6, [r4, r7]
 800b9f6:	f016 0608 	ands.w	r6, r6, #8
 800b9fa:	d1f8      	bne.n	800b9ee <_strtoul_l.constprop.0+0xa>
 800b9fc:	2c2d      	cmp	r4, #45	; 0x2d
 800b9fe:	d12f      	bne.n	800ba60 <_strtoul_l.constprop.0+0x7c>
 800ba00:	782c      	ldrb	r4, [r5, #0]
 800ba02:	2601      	movs	r6, #1
 800ba04:	1c85      	adds	r5, r0, #2
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d057      	beq.n	800baba <_strtoul_l.constprop.0+0xd6>
 800ba0a:	2b10      	cmp	r3, #16
 800ba0c:	d109      	bne.n	800ba22 <_strtoul_l.constprop.0+0x3e>
 800ba0e:	2c30      	cmp	r4, #48	; 0x30
 800ba10:	d107      	bne.n	800ba22 <_strtoul_l.constprop.0+0x3e>
 800ba12:	7828      	ldrb	r0, [r5, #0]
 800ba14:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ba18:	2858      	cmp	r0, #88	; 0x58
 800ba1a:	d149      	bne.n	800bab0 <_strtoul_l.constprop.0+0xcc>
 800ba1c:	786c      	ldrb	r4, [r5, #1]
 800ba1e:	2310      	movs	r3, #16
 800ba20:	3502      	adds	r5, #2
 800ba22:	f04f 38ff 	mov.w	r8, #4294967295
 800ba26:	2700      	movs	r7, #0
 800ba28:	fbb8 f8f3 	udiv	r8, r8, r3
 800ba2c:	fb03 f908 	mul.w	r9, r3, r8
 800ba30:	ea6f 0909 	mvn.w	r9, r9
 800ba34:	4638      	mov	r0, r7
 800ba36:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ba3a:	f1bc 0f09 	cmp.w	ip, #9
 800ba3e:	d814      	bhi.n	800ba6a <_strtoul_l.constprop.0+0x86>
 800ba40:	4664      	mov	r4, ip
 800ba42:	42a3      	cmp	r3, r4
 800ba44:	dd22      	ble.n	800ba8c <_strtoul_l.constprop.0+0xa8>
 800ba46:	2f00      	cmp	r7, #0
 800ba48:	db1d      	blt.n	800ba86 <_strtoul_l.constprop.0+0xa2>
 800ba4a:	4580      	cmp	r8, r0
 800ba4c:	d31b      	bcc.n	800ba86 <_strtoul_l.constprop.0+0xa2>
 800ba4e:	d101      	bne.n	800ba54 <_strtoul_l.constprop.0+0x70>
 800ba50:	45a1      	cmp	r9, r4
 800ba52:	db18      	blt.n	800ba86 <_strtoul_l.constprop.0+0xa2>
 800ba54:	fb00 4003 	mla	r0, r0, r3, r4
 800ba58:	2701      	movs	r7, #1
 800ba5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba5e:	e7ea      	b.n	800ba36 <_strtoul_l.constprop.0+0x52>
 800ba60:	2c2b      	cmp	r4, #43	; 0x2b
 800ba62:	bf04      	itt	eq
 800ba64:	782c      	ldrbeq	r4, [r5, #0]
 800ba66:	1c85      	addeq	r5, r0, #2
 800ba68:	e7cd      	b.n	800ba06 <_strtoul_l.constprop.0+0x22>
 800ba6a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ba6e:	f1bc 0f19 	cmp.w	ip, #25
 800ba72:	d801      	bhi.n	800ba78 <_strtoul_l.constprop.0+0x94>
 800ba74:	3c37      	subs	r4, #55	; 0x37
 800ba76:	e7e4      	b.n	800ba42 <_strtoul_l.constprop.0+0x5e>
 800ba78:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ba7c:	f1bc 0f19 	cmp.w	ip, #25
 800ba80:	d804      	bhi.n	800ba8c <_strtoul_l.constprop.0+0xa8>
 800ba82:	3c57      	subs	r4, #87	; 0x57
 800ba84:	e7dd      	b.n	800ba42 <_strtoul_l.constprop.0+0x5e>
 800ba86:	f04f 37ff 	mov.w	r7, #4294967295
 800ba8a:	e7e6      	b.n	800ba5a <_strtoul_l.constprop.0+0x76>
 800ba8c:	2f00      	cmp	r7, #0
 800ba8e:	da07      	bge.n	800baa0 <_strtoul_l.constprop.0+0xbc>
 800ba90:	2322      	movs	r3, #34	; 0x22
 800ba92:	f8ce 3000 	str.w	r3, [lr]
 800ba96:	f04f 30ff 	mov.w	r0, #4294967295
 800ba9a:	b932      	cbnz	r2, 800baaa <_strtoul_l.constprop.0+0xc6>
 800ba9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800baa0:	b106      	cbz	r6, 800baa4 <_strtoul_l.constprop.0+0xc0>
 800baa2:	4240      	negs	r0, r0
 800baa4:	2a00      	cmp	r2, #0
 800baa6:	d0f9      	beq.n	800ba9c <_strtoul_l.constprop.0+0xb8>
 800baa8:	b107      	cbz	r7, 800baac <_strtoul_l.constprop.0+0xc8>
 800baaa:	1e69      	subs	r1, r5, #1
 800baac:	6011      	str	r1, [r2, #0]
 800baae:	e7f5      	b.n	800ba9c <_strtoul_l.constprop.0+0xb8>
 800bab0:	2430      	movs	r4, #48	; 0x30
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d1b5      	bne.n	800ba22 <_strtoul_l.constprop.0+0x3e>
 800bab6:	2308      	movs	r3, #8
 800bab8:	e7b3      	b.n	800ba22 <_strtoul_l.constprop.0+0x3e>
 800baba:	2c30      	cmp	r4, #48	; 0x30
 800babc:	d0a9      	beq.n	800ba12 <_strtoul_l.constprop.0+0x2e>
 800babe:	230a      	movs	r3, #10
 800bac0:	e7af      	b.n	800ba22 <_strtoul_l.constprop.0+0x3e>
 800bac2:	bf00      	nop
 800bac4:	0800cc80 	.word	0x0800cc80

0800bac8 <_strtoul_r>:
 800bac8:	f7ff bf8c 	b.w	800b9e4 <_strtoul_l.constprop.0>

0800bacc <strtoul>:
 800bacc:	4613      	mov	r3, r2
 800bace:	460a      	mov	r2, r1
 800bad0:	4601      	mov	r1, r0
 800bad2:	4802      	ldr	r0, [pc, #8]	; (800badc <strtoul+0x10>)
 800bad4:	6800      	ldr	r0, [r0, #0]
 800bad6:	f7ff bf85 	b.w	800b9e4 <_strtoul_l.constprop.0>
 800bada:	bf00      	nop
 800badc:	20000154 	.word	0x20000154

0800bae0 <__swbuf_r>:
 800bae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bae2:	460e      	mov	r6, r1
 800bae4:	4614      	mov	r4, r2
 800bae6:	4605      	mov	r5, r0
 800bae8:	b118      	cbz	r0, 800baf2 <__swbuf_r+0x12>
 800baea:	6983      	ldr	r3, [r0, #24]
 800baec:	b90b      	cbnz	r3, 800baf2 <__swbuf_r+0x12>
 800baee:	f000 fa07 	bl	800bf00 <__sinit>
 800baf2:	4b21      	ldr	r3, [pc, #132]	; (800bb78 <__swbuf_r+0x98>)
 800baf4:	429c      	cmp	r4, r3
 800baf6:	d12b      	bne.n	800bb50 <__swbuf_r+0x70>
 800baf8:	686c      	ldr	r4, [r5, #4]
 800bafa:	69a3      	ldr	r3, [r4, #24]
 800bafc:	60a3      	str	r3, [r4, #8]
 800bafe:	89a3      	ldrh	r3, [r4, #12]
 800bb00:	071a      	lsls	r2, r3, #28
 800bb02:	d52f      	bpl.n	800bb64 <__swbuf_r+0x84>
 800bb04:	6923      	ldr	r3, [r4, #16]
 800bb06:	b36b      	cbz	r3, 800bb64 <__swbuf_r+0x84>
 800bb08:	6923      	ldr	r3, [r4, #16]
 800bb0a:	6820      	ldr	r0, [r4, #0]
 800bb0c:	1ac0      	subs	r0, r0, r3
 800bb0e:	6963      	ldr	r3, [r4, #20]
 800bb10:	b2f6      	uxtb	r6, r6
 800bb12:	4283      	cmp	r3, r0
 800bb14:	4637      	mov	r7, r6
 800bb16:	dc04      	bgt.n	800bb22 <__swbuf_r+0x42>
 800bb18:	4621      	mov	r1, r4
 800bb1a:	4628      	mov	r0, r5
 800bb1c:	f000 f95c 	bl	800bdd8 <_fflush_r>
 800bb20:	bb30      	cbnz	r0, 800bb70 <__swbuf_r+0x90>
 800bb22:	68a3      	ldr	r3, [r4, #8]
 800bb24:	3b01      	subs	r3, #1
 800bb26:	60a3      	str	r3, [r4, #8]
 800bb28:	6823      	ldr	r3, [r4, #0]
 800bb2a:	1c5a      	adds	r2, r3, #1
 800bb2c:	6022      	str	r2, [r4, #0]
 800bb2e:	701e      	strb	r6, [r3, #0]
 800bb30:	6963      	ldr	r3, [r4, #20]
 800bb32:	3001      	adds	r0, #1
 800bb34:	4283      	cmp	r3, r0
 800bb36:	d004      	beq.n	800bb42 <__swbuf_r+0x62>
 800bb38:	89a3      	ldrh	r3, [r4, #12]
 800bb3a:	07db      	lsls	r3, r3, #31
 800bb3c:	d506      	bpl.n	800bb4c <__swbuf_r+0x6c>
 800bb3e:	2e0a      	cmp	r6, #10
 800bb40:	d104      	bne.n	800bb4c <__swbuf_r+0x6c>
 800bb42:	4621      	mov	r1, r4
 800bb44:	4628      	mov	r0, r5
 800bb46:	f000 f947 	bl	800bdd8 <_fflush_r>
 800bb4a:	b988      	cbnz	r0, 800bb70 <__swbuf_r+0x90>
 800bb4c:	4638      	mov	r0, r7
 800bb4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb50:	4b0a      	ldr	r3, [pc, #40]	; (800bb7c <__swbuf_r+0x9c>)
 800bb52:	429c      	cmp	r4, r3
 800bb54:	d101      	bne.n	800bb5a <__swbuf_r+0x7a>
 800bb56:	68ac      	ldr	r4, [r5, #8]
 800bb58:	e7cf      	b.n	800bafa <__swbuf_r+0x1a>
 800bb5a:	4b09      	ldr	r3, [pc, #36]	; (800bb80 <__swbuf_r+0xa0>)
 800bb5c:	429c      	cmp	r4, r3
 800bb5e:	bf08      	it	eq
 800bb60:	68ec      	ldreq	r4, [r5, #12]
 800bb62:	e7ca      	b.n	800bafa <__swbuf_r+0x1a>
 800bb64:	4621      	mov	r1, r4
 800bb66:	4628      	mov	r0, r5
 800bb68:	f000 f81e 	bl	800bba8 <__swsetup_r>
 800bb6c:	2800      	cmp	r0, #0
 800bb6e:	d0cb      	beq.n	800bb08 <__swbuf_r+0x28>
 800bb70:	f04f 37ff 	mov.w	r7, #4294967295
 800bb74:	e7ea      	b.n	800bb4c <__swbuf_r+0x6c>
 800bb76:	bf00      	nop
 800bb78:	0800cda0 	.word	0x0800cda0
 800bb7c:	0800cdc0 	.word	0x0800cdc0
 800bb80:	0800cd80 	.word	0x0800cd80

0800bb84 <_write_r>:
 800bb84:	b538      	push	{r3, r4, r5, lr}
 800bb86:	4d07      	ldr	r5, [pc, #28]	; (800bba4 <_write_r+0x20>)
 800bb88:	4604      	mov	r4, r0
 800bb8a:	4608      	mov	r0, r1
 800bb8c:	4611      	mov	r1, r2
 800bb8e:	2200      	movs	r2, #0
 800bb90:	602a      	str	r2, [r5, #0]
 800bb92:	461a      	mov	r2, r3
 800bb94:	f7f7 ffe5 	bl	8003b62 <_write>
 800bb98:	1c43      	adds	r3, r0, #1
 800bb9a:	d102      	bne.n	800bba2 <_write_r+0x1e>
 800bb9c:	682b      	ldr	r3, [r5, #0]
 800bb9e:	b103      	cbz	r3, 800bba2 <_write_r+0x1e>
 800bba0:	6023      	str	r3, [r4, #0]
 800bba2:	bd38      	pop	{r3, r4, r5, pc}
 800bba4:	20000fd8 	.word	0x20000fd8

0800bba8 <__swsetup_r>:
 800bba8:	4b32      	ldr	r3, [pc, #200]	; (800bc74 <__swsetup_r+0xcc>)
 800bbaa:	b570      	push	{r4, r5, r6, lr}
 800bbac:	681d      	ldr	r5, [r3, #0]
 800bbae:	4606      	mov	r6, r0
 800bbb0:	460c      	mov	r4, r1
 800bbb2:	b125      	cbz	r5, 800bbbe <__swsetup_r+0x16>
 800bbb4:	69ab      	ldr	r3, [r5, #24]
 800bbb6:	b913      	cbnz	r3, 800bbbe <__swsetup_r+0x16>
 800bbb8:	4628      	mov	r0, r5
 800bbba:	f000 f9a1 	bl	800bf00 <__sinit>
 800bbbe:	4b2e      	ldr	r3, [pc, #184]	; (800bc78 <__swsetup_r+0xd0>)
 800bbc0:	429c      	cmp	r4, r3
 800bbc2:	d10f      	bne.n	800bbe4 <__swsetup_r+0x3c>
 800bbc4:	686c      	ldr	r4, [r5, #4]
 800bbc6:	89a3      	ldrh	r3, [r4, #12]
 800bbc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbcc:	0719      	lsls	r1, r3, #28
 800bbce:	d42c      	bmi.n	800bc2a <__swsetup_r+0x82>
 800bbd0:	06dd      	lsls	r5, r3, #27
 800bbd2:	d411      	bmi.n	800bbf8 <__swsetup_r+0x50>
 800bbd4:	2309      	movs	r3, #9
 800bbd6:	6033      	str	r3, [r6, #0]
 800bbd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bbdc:	81a3      	strh	r3, [r4, #12]
 800bbde:	f04f 30ff 	mov.w	r0, #4294967295
 800bbe2:	e03e      	b.n	800bc62 <__swsetup_r+0xba>
 800bbe4:	4b25      	ldr	r3, [pc, #148]	; (800bc7c <__swsetup_r+0xd4>)
 800bbe6:	429c      	cmp	r4, r3
 800bbe8:	d101      	bne.n	800bbee <__swsetup_r+0x46>
 800bbea:	68ac      	ldr	r4, [r5, #8]
 800bbec:	e7eb      	b.n	800bbc6 <__swsetup_r+0x1e>
 800bbee:	4b24      	ldr	r3, [pc, #144]	; (800bc80 <__swsetup_r+0xd8>)
 800bbf0:	429c      	cmp	r4, r3
 800bbf2:	bf08      	it	eq
 800bbf4:	68ec      	ldreq	r4, [r5, #12]
 800bbf6:	e7e6      	b.n	800bbc6 <__swsetup_r+0x1e>
 800bbf8:	0758      	lsls	r0, r3, #29
 800bbfa:	d512      	bpl.n	800bc22 <__swsetup_r+0x7a>
 800bbfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbfe:	b141      	cbz	r1, 800bc12 <__swsetup_r+0x6a>
 800bc00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc04:	4299      	cmp	r1, r3
 800bc06:	d002      	beq.n	800bc0e <__swsetup_r+0x66>
 800bc08:	4630      	mov	r0, r6
 800bc0a:	f7fe ff0d 	bl	800aa28 <_free_r>
 800bc0e:	2300      	movs	r3, #0
 800bc10:	6363      	str	r3, [r4, #52]	; 0x34
 800bc12:	89a3      	ldrh	r3, [r4, #12]
 800bc14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc18:	81a3      	strh	r3, [r4, #12]
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	6063      	str	r3, [r4, #4]
 800bc1e:	6923      	ldr	r3, [r4, #16]
 800bc20:	6023      	str	r3, [r4, #0]
 800bc22:	89a3      	ldrh	r3, [r4, #12]
 800bc24:	f043 0308 	orr.w	r3, r3, #8
 800bc28:	81a3      	strh	r3, [r4, #12]
 800bc2a:	6923      	ldr	r3, [r4, #16]
 800bc2c:	b94b      	cbnz	r3, 800bc42 <__swsetup_r+0x9a>
 800bc2e:	89a3      	ldrh	r3, [r4, #12]
 800bc30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc38:	d003      	beq.n	800bc42 <__swsetup_r+0x9a>
 800bc3a:	4621      	mov	r1, r4
 800bc3c:	4630      	mov	r0, r6
 800bc3e:	f000 fa35 	bl	800c0ac <__smakebuf_r>
 800bc42:	89a0      	ldrh	r0, [r4, #12]
 800bc44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc48:	f010 0301 	ands.w	r3, r0, #1
 800bc4c:	d00a      	beq.n	800bc64 <__swsetup_r+0xbc>
 800bc4e:	2300      	movs	r3, #0
 800bc50:	60a3      	str	r3, [r4, #8]
 800bc52:	6963      	ldr	r3, [r4, #20]
 800bc54:	425b      	negs	r3, r3
 800bc56:	61a3      	str	r3, [r4, #24]
 800bc58:	6923      	ldr	r3, [r4, #16]
 800bc5a:	b943      	cbnz	r3, 800bc6e <__swsetup_r+0xc6>
 800bc5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc60:	d1ba      	bne.n	800bbd8 <__swsetup_r+0x30>
 800bc62:	bd70      	pop	{r4, r5, r6, pc}
 800bc64:	0781      	lsls	r1, r0, #30
 800bc66:	bf58      	it	pl
 800bc68:	6963      	ldrpl	r3, [r4, #20]
 800bc6a:	60a3      	str	r3, [r4, #8]
 800bc6c:	e7f4      	b.n	800bc58 <__swsetup_r+0xb0>
 800bc6e:	2000      	movs	r0, #0
 800bc70:	e7f7      	b.n	800bc62 <__swsetup_r+0xba>
 800bc72:	bf00      	nop
 800bc74:	20000154 	.word	0x20000154
 800bc78:	0800cda0 	.word	0x0800cda0
 800bc7c:	0800cdc0 	.word	0x0800cdc0
 800bc80:	0800cd80 	.word	0x0800cd80

0800bc84 <abort>:
 800bc84:	b508      	push	{r3, lr}
 800bc86:	2006      	movs	r0, #6
 800bc88:	f000 fe16 	bl	800c8b8 <raise>
 800bc8c:	2001      	movs	r0, #1
 800bc8e:	f7f7 ff41 	bl	8003b14 <_exit>
	...

0800bc94 <_close_r>:
 800bc94:	b538      	push	{r3, r4, r5, lr}
 800bc96:	4d06      	ldr	r5, [pc, #24]	; (800bcb0 <_close_r+0x1c>)
 800bc98:	2300      	movs	r3, #0
 800bc9a:	4604      	mov	r4, r0
 800bc9c:	4608      	mov	r0, r1
 800bc9e:	602b      	str	r3, [r5, #0]
 800bca0:	f7f7 ff7b 	bl	8003b9a <_close>
 800bca4:	1c43      	adds	r3, r0, #1
 800bca6:	d102      	bne.n	800bcae <_close_r+0x1a>
 800bca8:	682b      	ldr	r3, [r5, #0]
 800bcaa:	b103      	cbz	r3, 800bcae <_close_r+0x1a>
 800bcac:	6023      	str	r3, [r4, #0]
 800bcae:	bd38      	pop	{r3, r4, r5, pc}
 800bcb0:	20000fd8 	.word	0x20000fd8

0800bcb4 <__env_lock>:
 800bcb4:	4801      	ldr	r0, [pc, #4]	; (800bcbc <__env_lock+0x8>)
 800bcb6:	f7ff bb09 	b.w	800b2cc <__retarget_lock_acquire_recursive>
 800bcba:	bf00      	nop
 800bcbc:	20000fd0 	.word	0x20000fd0

0800bcc0 <__env_unlock>:
 800bcc0:	4801      	ldr	r0, [pc, #4]	; (800bcc8 <__env_unlock+0x8>)
 800bcc2:	f7ff bb05 	b.w	800b2d0 <__retarget_lock_release_recursive>
 800bcc6:	bf00      	nop
 800bcc8:	20000fd0 	.word	0x20000fd0

0800bccc <__sflush_r>:
 800bccc:	898a      	ldrh	r2, [r1, #12]
 800bcce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcd2:	4605      	mov	r5, r0
 800bcd4:	0710      	lsls	r0, r2, #28
 800bcd6:	460c      	mov	r4, r1
 800bcd8:	d458      	bmi.n	800bd8c <__sflush_r+0xc0>
 800bcda:	684b      	ldr	r3, [r1, #4]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	dc05      	bgt.n	800bcec <__sflush_r+0x20>
 800bce0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	dc02      	bgt.n	800bcec <__sflush_r+0x20>
 800bce6:	2000      	movs	r0, #0
 800bce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bcee:	2e00      	cmp	r6, #0
 800bcf0:	d0f9      	beq.n	800bce6 <__sflush_r+0x1a>
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bcf8:	682f      	ldr	r7, [r5, #0]
 800bcfa:	602b      	str	r3, [r5, #0]
 800bcfc:	d032      	beq.n	800bd64 <__sflush_r+0x98>
 800bcfe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bd00:	89a3      	ldrh	r3, [r4, #12]
 800bd02:	075a      	lsls	r2, r3, #29
 800bd04:	d505      	bpl.n	800bd12 <__sflush_r+0x46>
 800bd06:	6863      	ldr	r3, [r4, #4]
 800bd08:	1ac0      	subs	r0, r0, r3
 800bd0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd0c:	b10b      	cbz	r3, 800bd12 <__sflush_r+0x46>
 800bd0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd10:	1ac0      	subs	r0, r0, r3
 800bd12:	2300      	movs	r3, #0
 800bd14:	4602      	mov	r2, r0
 800bd16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd18:	6a21      	ldr	r1, [r4, #32]
 800bd1a:	4628      	mov	r0, r5
 800bd1c:	47b0      	blx	r6
 800bd1e:	1c43      	adds	r3, r0, #1
 800bd20:	89a3      	ldrh	r3, [r4, #12]
 800bd22:	d106      	bne.n	800bd32 <__sflush_r+0x66>
 800bd24:	6829      	ldr	r1, [r5, #0]
 800bd26:	291d      	cmp	r1, #29
 800bd28:	d82c      	bhi.n	800bd84 <__sflush_r+0xb8>
 800bd2a:	4a2a      	ldr	r2, [pc, #168]	; (800bdd4 <__sflush_r+0x108>)
 800bd2c:	40ca      	lsrs	r2, r1
 800bd2e:	07d6      	lsls	r6, r2, #31
 800bd30:	d528      	bpl.n	800bd84 <__sflush_r+0xb8>
 800bd32:	2200      	movs	r2, #0
 800bd34:	6062      	str	r2, [r4, #4]
 800bd36:	04d9      	lsls	r1, r3, #19
 800bd38:	6922      	ldr	r2, [r4, #16]
 800bd3a:	6022      	str	r2, [r4, #0]
 800bd3c:	d504      	bpl.n	800bd48 <__sflush_r+0x7c>
 800bd3e:	1c42      	adds	r2, r0, #1
 800bd40:	d101      	bne.n	800bd46 <__sflush_r+0x7a>
 800bd42:	682b      	ldr	r3, [r5, #0]
 800bd44:	b903      	cbnz	r3, 800bd48 <__sflush_r+0x7c>
 800bd46:	6560      	str	r0, [r4, #84]	; 0x54
 800bd48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd4a:	602f      	str	r7, [r5, #0]
 800bd4c:	2900      	cmp	r1, #0
 800bd4e:	d0ca      	beq.n	800bce6 <__sflush_r+0x1a>
 800bd50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd54:	4299      	cmp	r1, r3
 800bd56:	d002      	beq.n	800bd5e <__sflush_r+0x92>
 800bd58:	4628      	mov	r0, r5
 800bd5a:	f7fe fe65 	bl	800aa28 <_free_r>
 800bd5e:	2000      	movs	r0, #0
 800bd60:	6360      	str	r0, [r4, #52]	; 0x34
 800bd62:	e7c1      	b.n	800bce8 <__sflush_r+0x1c>
 800bd64:	6a21      	ldr	r1, [r4, #32]
 800bd66:	2301      	movs	r3, #1
 800bd68:	4628      	mov	r0, r5
 800bd6a:	47b0      	blx	r6
 800bd6c:	1c41      	adds	r1, r0, #1
 800bd6e:	d1c7      	bne.n	800bd00 <__sflush_r+0x34>
 800bd70:	682b      	ldr	r3, [r5, #0]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d0c4      	beq.n	800bd00 <__sflush_r+0x34>
 800bd76:	2b1d      	cmp	r3, #29
 800bd78:	d001      	beq.n	800bd7e <__sflush_r+0xb2>
 800bd7a:	2b16      	cmp	r3, #22
 800bd7c:	d101      	bne.n	800bd82 <__sflush_r+0xb6>
 800bd7e:	602f      	str	r7, [r5, #0]
 800bd80:	e7b1      	b.n	800bce6 <__sflush_r+0x1a>
 800bd82:	89a3      	ldrh	r3, [r4, #12]
 800bd84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd88:	81a3      	strh	r3, [r4, #12]
 800bd8a:	e7ad      	b.n	800bce8 <__sflush_r+0x1c>
 800bd8c:	690f      	ldr	r7, [r1, #16]
 800bd8e:	2f00      	cmp	r7, #0
 800bd90:	d0a9      	beq.n	800bce6 <__sflush_r+0x1a>
 800bd92:	0793      	lsls	r3, r2, #30
 800bd94:	680e      	ldr	r6, [r1, #0]
 800bd96:	bf08      	it	eq
 800bd98:	694b      	ldreq	r3, [r1, #20]
 800bd9a:	600f      	str	r7, [r1, #0]
 800bd9c:	bf18      	it	ne
 800bd9e:	2300      	movne	r3, #0
 800bda0:	eba6 0807 	sub.w	r8, r6, r7
 800bda4:	608b      	str	r3, [r1, #8]
 800bda6:	f1b8 0f00 	cmp.w	r8, #0
 800bdaa:	dd9c      	ble.n	800bce6 <__sflush_r+0x1a>
 800bdac:	6a21      	ldr	r1, [r4, #32]
 800bdae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bdb0:	4643      	mov	r3, r8
 800bdb2:	463a      	mov	r2, r7
 800bdb4:	4628      	mov	r0, r5
 800bdb6:	47b0      	blx	r6
 800bdb8:	2800      	cmp	r0, #0
 800bdba:	dc06      	bgt.n	800bdca <__sflush_r+0xfe>
 800bdbc:	89a3      	ldrh	r3, [r4, #12]
 800bdbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdc2:	81a3      	strh	r3, [r4, #12]
 800bdc4:	f04f 30ff 	mov.w	r0, #4294967295
 800bdc8:	e78e      	b.n	800bce8 <__sflush_r+0x1c>
 800bdca:	4407      	add	r7, r0
 800bdcc:	eba8 0800 	sub.w	r8, r8, r0
 800bdd0:	e7e9      	b.n	800bda6 <__sflush_r+0xda>
 800bdd2:	bf00      	nop
 800bdd4:	20400001 	.word	0x20400001

0800bdd8 <_fflush_r>:
 800bdd8:	b538      	push	{r3, r4, r5, lr}
 800bdda:	690b      	ldr	r3, [r1, #16]
 800bddc:	4605      	mov	r5, r0
 800bdde:	460c      	mov	r4, r1
 800bde0:	b913      	cbnz	r3, 800bde8 <_fflush_r+0x10>
 800bde2:	2500      	movs	r5, #0
 800bde4:	4628      	mov	r0, r5
 800bde6:	bd38      	pop	{r3, r4, r5, pc}
 800bde8:	b118      	cbz	r0, 800bdf2 <_fflush_r+0x1a>
 800bdea:	6983      	ldr	r3, [r0, #24]
 800bdec:	b90b      	cbnz	r3, 800bdf2 <_fflush_r+0x1a>
 800bdee:	f000 f887 	bl	800bf00 <__sinit>
 800bdf2:	4b14      	ldr	r3, [pc, #80]	; (800be44 <_fflush_r+0x6c>)
 800bdf4:	429c      	cmp	r4, r3
 800bdf6:	d11b      	bne.n	800be30 <_fflush_r+0x58>
 800bdf8:	686c      	ldr	r4, [r5, #4]
 800bdfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d0ef      	beq.n	800bde2 <_fflush_r+0xa>
 800be02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800be04:	07d0      	lsls	r0, r2, #31
 800be06:	d404      	bmi.n	800be12 <_fflush_r+0x3a>
 800be08:	0599      	lsls	r1, r3, #22
 800be0a:	d402      	bmi.n	800be12 <_fflush_r+0x3a>
 800be0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be0e:	f7ff fa5d 	bl	800b2cc <__retarget_lock_acquire_recursive>
 800be12:	4628      	mov	r0, r5
 800be14:	4621      	mov	r1, r4
 800be16:	f7ff ff59 	bl	800bccc <__sflush_r>
 800be1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be1c:	07da      	lsls	r2, r3, #31
 800be1e:	4605      	mov	r5, r0
 800be20:	d4e0      	bmi.n	800bde4 <_fflush_r+0xc>
 800be22:	89a3      	ldrh	r3, [r4, #12]
 800be24:	059b      	lsls	r3, r3, #22
 800be26:	d4dd      	bmi.n	800bde4 <_fflush_r+0xc>
 800be28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be2a:	f7ff fa51 	bl	800b2d0 <__retarget_lock_release_recursive>
 800be2e:	e7d9      	b.n	800bde4 <_fflush_r+0xc>
 800be30:	4b05      	ldr	r3, [pc, #20]	; (800be48 <_fflush_r+0x70>)
 800be32:	429c      	cmp	r4, r3
 800be34:	d101      	bne.n	800be3a <_fflush_r+0x62>
 800be36:	68ac      	ldr	r4, [r5, #8]
 800be38:	e7df      	b.n	800bdfa <_fflush_r+0x22>
 800be3a:	4b04      	ldr	r3, [pc, #16]	; (800be4c <_fflush_r+0x74>)
 800be3c:	429c      	cmp	r4, r3
 800be3e:	bf08      	it	eq
 800be40:	68ec      	ldreq	r4, [r5, #12]
 800be42:	e7da      	b.n	800bdfa <_fflush_r+0x22>
 800be44:	0800cda0 	.word	0x0800cda0
 800be48:	0800cdc0 	.word	0x0800cdc0
 800be4c:	0800cd80 	.word	0x0800cd80

0800be50 <std>:
 800be50:	2300      	movs	r3, #0
 800be52:	b510      	push	{r4, lr}
 800be54:	4604      	mov	r4, r0
 800be56:	e9c0 3300 	strd	r3, r3, [r0]
 800be5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be5e:	6083      	str	r3, [r0, #8]
 800be60:	8181      	strh	r1, [r0, #12]
 800be62:	6643      	str	r3, [r0, #100]	; 0x64
 800be64:	81c2      	strh	r2, [r0, #14]
 800be66:	6183      	str	r3, [r0, #24]
 800be68:	4619      	mov	r1, r3
 800be6a:	2208      	movs	r2, #8
 800be6c:	305c      	adds	r0, #92	; 0x5c
 800be6e:	f7fe fdd3 	bl	800aa18 <memset>
 800be72:	4b05      	ldr	r3, [pc, #20]	; (800be88 <std+0x38>)
 800be74:	6263      	str	r3, [r4, #36]	; 0x24
 800be76:	4b05      	ldr	r3, [pc, #20]	; (800be8c <std+0x3c>)
 800be78:	62a3      	str	r3, [r4, #40]	; 0x28
 800be7a:	4b05      	ldr	r3, [pc, #20]	; (800be90 <std+0x40>)
 800be7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800be7e:	4b05      	ldr	r3, [pc, #20]	; (800be94 <std+0x44>)
 800be80:	6224      	str	r4, [r4, #32]
 800be82:	6323      	str	r3, [r4, #48]	; 0x30
 800be84:	bd10      	pop	{r4, pc}
 800be86:	bf00      	nop
 800be88:	0800b921 	.word	0x0800b921
 800be8c:	0800b947 	.word	0x0800b947
 800be90:	0800b97f 	.word	0x0800b97f
 800be94:	0800b9a3 	.word	0x0800b9a3

0800be98 <_cleanup_r>:
 800be98:	4901      	ldr	r1, [pc, #4]	; (800bea0 <_cleanup_r+0x8>)
 800be9a:	f000 b8af 	b.w	800bffc <_fwalk_reent>
 800be9e:	bf00      	nop
 800bea0:	0800bdd9 	.word	0x0800bdd9

0800bea4 <__sfmoreglue>:
 800bea4:	b570      	push	{r4, r5, r6, lr}
 800bea6:	2268      	movs	r2, #104	; 0x68
 800bea8:	1e4d      	subs	r5, r1, #1
 800beaa:	4355      	muls	r5, r2
 800beac:	460e      	mov	r6, r1
 800beae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800beb2:	f7fe fe25 	bl	800ab00 <_malloc_r>
 800beb6:	4604      	mov	r4, r0
 800beb8:	b140      	cbz	r0, 800becc <__sfmoreglue+0x28>
 800beba:	2100      	movs	r1, #0
 800bebc:	e9c0 1600 	strd	r1, r6, [r0]
 800bec0:	300c      	adds	r0, #12
 800bec2:	60a0      	str	r0, [r4, #8]
 800bec4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bec8:	f7fe fda6 	bl	800aa18 <memset>
 800becc:	4620      	mov	r0, r4
 800bece:	bd70      	pop	{r4, r5, r6, pc}

0800bed0 <__sfp_lock_acquire>:
 800bed0:	4801      	ldr	r0, [pc, #4]	; (800bed8 <__sfp_lock_acquire+0x8>)
 800bed2:	f7ff b9fb 	b.w	800b2cc <__retarget_lock_acquire_recursive>
 800bed6:	bf00      	nop
 800bed8:	20000fd2 	.word	0x20000fd2

0800bedc <__sfp_lock_release>:
 800bedc:	4801      	ldr	r0, [pc, #4]	; (800bee4 <__sfp_lock_release+0x8>)
 800bede:	f7ff b9f7 	b.w	800b2d0 <__retarget_lock_release_recursive>
 800bee2:	bf00      	nop
 800bee4:	20000fd2 	.word	0x20000fd2

0800bee8 <__sinit_lock_acquire>:
 800bee8:	4801      	ldr	r0, [pc, #4]	; (800bef0 <__sinit_lock_acquire+0x8>)
 800beea:	f7ff b9ef 	b.w	800b2cc <__retarget_lock_acquire_recursive>
 800beee:	bf00      	nop
 800bef0:	20000fd3 	.word	0x20000fd3

0800bef4 <__sinit_lock_release>:
 800bef4:	4801      	ldr	r0, [pc, #4]	; (800befc <__sinit_lock_release+0x8>)
 800bef6:	f7ff b9eb 	b.w	800b2d0 <__retarget_lock_release_recursive>
 800befa:	bf00      	nop
 800befc:	20000fd3 	.word	0x20000fd3

0800bf00 <__sinit>:
 800bf00:	b510      	push	{r4, lr}
 800bf02:	4604      	mov	r4, r0
 800bf04:	f7ff fff0 	bl	800bee8 <__sinit_lock_acquire>
 800bf08:	69a3      	ldr	r3, [r4, #24]
 800bf0a:	b11b      	cbz	r3, 800bf14 <__sinit+0x14>
 800bf0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf10:	f7ff bff0 	b.w	800bef4 <__sinit_lock_release>
 800bf14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bf18:	6523      	str	r3, [r4, #80]	; 0x50
 800bf1a:	4b13      	ldr	r3, [pc, #76]	; (800bf68 <__sinit+0x68>)
 800bf1c:	4a13      	ldr	r2, [pc, #76]	; (800bf6c <__sinit+0x6c>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	62a2      	str	r2, [r4, #40]	; 0x28
 800bf22:	42a3      	cmp	r3, r4
 800bf24:	bf04      	itt	eq
 800bf26:	2301      	moveq	r3, #1
 800bf28:	61a3      	streq	r3, [r4, #24]
 800bf2a:	4620      	mov	r0, r4
 800bf2c:	f000 f820 	bl	800bf70 <__sfp>
 800bf30:	6060      	str	r0, [r4, #4]
 800bf32:	4620      	mov	r0, r4
 800bf34:	f000 f81c 	bl	800bf70 <__sfp>
 800bf38:	60a0      	str	r0, [r4, #8]
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	f000 f818 	bl	800bf70 <__sfp>
 800bf40:	2200      	movs	r2, #0
 800bf42:	60e0      	str	r0, [r4, #12]
 800bf44:	2104      	movs	r1, #4
 800bf46:	6860      	ldr	r0, [r4, #4]
 800bf48:	f7ff ff82 	bl	800be50 <std>
 800bf4c:	68a0      	ldr	r0, [r4, #8]
 800bf4e:	2201      	movs	r2, #1
 800bf50:	2109      	movs	r1, #9
 800bf52:	f7ff ff7d 	bl	800be50 <std>
 800bf56:	68e0      	ldr	r0, [r4, #12]
 800bf58:	2202      	movs	r2, #2
 800bf5a:	2112      	movs	r1, #18
 800bf5c:	f7ff ff78 	bl	800be50 <std>
 800bf60:	2301      	movs	r3, #1
 800bf62:	61a3      	str	r3, [r4, #24]
 800bf64:	e7d2      	b.n	800bf0c <__sinit+0xc>
 800bf66:	bf00      	nop
 800bf68:	0800cafc 	.word	0x0800cafc
 800bf6c:	0800be99 	.word	0x0800be99

0800bf70 <__sfp>:
 800bf70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf72:	4607      	mov	r7, r0
 800bf74:	f7ff ffac 	bl	800bed0 <__sfp_lock_acquire>
 800bf78:	4b1e      	ldr	r3, [pc, #120]	; (800bff4 <__sfp+0x84>)
 800bf7a:	681e      	ldr	r6, [r3, #0]
 800bf7c:	69b3      	ldr	r3, [r6, #24]
 800bf7e:	b913      	cbnz	r3, 800bf86 <__sfp+0x16>
 800bf80:	4630      	mov	r0, r6
 800bf82:	f7ff ffbd 	bl	800bf00 <__sinit>
 800bf86:	3648      	adds	r6, #72	; 0x48
 800bf88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bf8c:	3b01      	subs	r3, #1
 800bf8e:	d503      	bpl.n	800bf98 <__sfp+0x28>
 800bf90:	6833      	ldr	r3, [r6, #0]
 800bf92:	b30b      	cbz	r3, 800bfd8 <__sfp+0x68>
 800bf94:	6836      	ldr	r6, [r6, #0]
 800bf96:	e7f7      	b.n	800bf88 <__sfp+0x18>
 800bf98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bf9c:	b9d5      	cbnz	r5, 800bfd4 <__sfp+0x64>
 800bf9e:	4b16      	ldr	r3, [pc, #88]	; (800bff8 <__sfp+0x88>)
 800bfa0:	60e3      	str	r3, [r4, #12]
 800bfa2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bfa6:	6665      	str	r5, [r4, #100]	; 0x64
 800bfa8:	f7ff f98e 	bl	800b2c8 <__retarget_lock_init_recursive>
 800bfac:	f7ff ff96 	bl	800bedc <__sfp_lock_release>
 800bfb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bfb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bfb8:	6025      	str	r5, [r4, #0]
 800bfba:	61a5      	str	r5, [r4, #24]
 800bfbc:	2208      	movs	r2, #8
 800bfbe:	4629      	mov	r1, r5
 800bfc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bfc4:	f7fe fd28 	bl	800aa18 <memset>
 800bfc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bfcc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfd4:	3468      	adds	r4, #104	; 0x68
 800bfd6:	e7d9      	b.n	800bf8c <__sfp+0x1c>
 800bfd8:	2104      	movs	r1, #4
 800bfda:	4638      	mov	r0, r7
 800bfdc:	f7ff ff62 	bl	800bea4 <__sfmoreglue>
 800bfe0:	4604      	mov	r4, r0
 800bfe2:	6030      	str	r0, [r6, #0]
 800bfe4:	2800      	cmp	r0, #0
 800bfe6:	d1d5      	bne.n	800bf94 <__sfp+0x24>
 800bfe8:	f7ff ff78 	bl	800bedc <__sfp_lock_release>
 800bfec:	230c      	movs	r3, #12
 800bfee:	603b      	str	r3, [r7, #0]
 800bff0:	e7ee      	b.n	800bfd0 <__sfp+0x60>
 800bff2:	bf00      	nop
 800bff4:	0800cafc 	.word	0x0800cafc
 800bff8:	ffff0001 	.word	0xffff0001

0800bffc <_fwalk_reent>:
 800bffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c000:	4606      	mov	r6, r0
 800c002:	4688      	mov	r8, r1
 800c004:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c008:	2700      	movs	r7, #0
 800c00a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c00e:	f1b9 0901 	subs.w	r9, r9, #1
 800c012:	d505      	bpl.n	800c020 <_fwalk_reent+0x24>
 800c014:	6824      	ldr	r4, [r4, #0]
 800c016:	2c00      	cmp	r4, #0
 800c018:	d1f7      	bne.n	800c00a <_fwalk_reent+0xe>
 800c01a:	4638      	mov	r0, r7
 800c01c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c020:	89ab      	ldrh	r3, [r5, #12]
 800c022:	2b01      	cmp	r3, #1
 800c024:	d907      	bls.n	800c036 <_fwalk_reent+0x3a>
 800c026:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c02a:	3301      	adds	r3, #1
 800c02c:	d003      	beq.n	800c036 <_fwalk_reent+0x3a>
 800c02e:	4629      	mov	r1, r5
 800c030:	4630      	mov	r0, r6
 800c032:	47c0      	blx	r8
 800c034:	4307      	orrs	r7, r0
 800c036:	3568      	adds	r5, #104	; 0x68
 800c038:	e7e9      	b.n	800c00e <_fwalk_reent+0x12>
	...

0800c03c <_lseek_r>:
 800c03c:	b538      	push	{r3, r4, r5, lr}
 800c03e:	4d07      	ldr	r5, [pc, #28]	; (800c05c <_lseek_r+0x20>)
 800c040:	4604      	mov	r4, r0
 800c042:	4608      	mov	r0, r1
 800c044:	4611      	mov	r1, r2
 800c046:	2200      	movs	r2, #0
 800c048:	602a      	str	r2, [r5, #0]
 800c04a:	461a      	mov	r2, r3
 800c04c:	f7f7 fdcc 	bl	8003be8 <_lseek>
 800c050:	1c43      	adds	r3, r0, #1
 800c052:	d102      	bne.n	800c05a <_lseek_r+0x1e>
 800c054:	682b      	ldr	r3, [r5, #0]
 800c056:	b103      	cbz	r3, 800c05a <_lseek_r+0x1e>
 800c058:	6023      	str	r3, [r4, #0]
 800c05a:	bd38      	pop	{r3, r4, r5, pc}
 800c05c:	20000fd8 	.word	0x20000fd8

0800c060 <__swhatbuf_r>:
 800c060:	b570      	push	{r4, r5, r6, lr}
 800c062:	460e      	mov	r6, r1
 800c064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c068:	2900      	cmp	r1, #0
 800c06a:	b096      	sub	sp, #88	; 0x58
 800c06c:	4614      	mov	r4, r2
 800c06e:	461d      	mov	r5, r3
 800c070:	da08      	bge.n	800c084 <__swhatbuf_r+0x24>
 800c072:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c076:	2200      	movs	r2, #0
 800c078:	602a      	str	r2, [r5, #0]
 800c07a:	061a      	lsls	r2, r3, #24
 800c07c:	d410      	bmi.n	800c0a0 <__swhatbuf_r+0x40>
 800c07e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c082:	e00e      	b.n	800c0a2 <__swhatbuf_r+0x42>
 800c084:	466a      	mov	r2, sp
 800c086:	f000 fcf1 	bl	800ca6c <_fstat_r>
 800c08a:	2800      	cmp	r0, #0
 800c08c:	dbf1      	blt.n	800c072 <__swhatbuf_r+0x12>
 800c08e:	9a01      	ldr	r2, [sp, #4]
 800c090:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c094:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c098:	425a      	negs	r2, r3
 800c09a:	415a      	adcs	r2, r3
 800c09c:	602a      	str	r2, [r5, #0]
 800c09e:	e7ee      	b.n	800c07e <__swhatbuf_r+0x1e>
 800c0a0:	2340      	movs	r3, #64	; 0x40
 800c0a2:	2000      	movs	r0, #0
 800c0a4:	6023      	str	r3, [r4, #0]
 800c0a6:	b016      	add	sp, #88	; 0x58
 800c0a8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c0ac <__smakebuf_r>:
 800c0ac:	898b      	ldrh	r3, [r1, #12]
 800c0ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c0b0:	079d      	lsls	r5, r3, #30
 800c0b2:	4606      	mov	r6, r0
 800c0b4:	460c      	mov	r4, r1
 800c0b6:	d507      	bpl.n	800c0c8 <__smakebuf_r+0x1c>
 800c0b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c0bc:	6023      	str	r3, [r4, #0]
 800c0be:	6123      	str	r3, [r4, #16]
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	6163      	str	r3, [r4, #20]
 800c0c4:	b002      	add	sp, #8
 800c0c6:	bd70      	pop	{r4, r5, r6, pc}
 800c0c8:	ab01      	add	r3, sp, #4
 800c0ca:	466a      	mov	r2, sp
 800c0cc:	f7ff ffc8 	bl	800c060 <__swhatbuf_r>
 800c0d0:	9900      	ldr	r1, [sp, #0]
 800c0d2:	4605      	mov	r5, r0
 800c0d4:	4630      	mov	r0, r6
 800c0d6:	f7fe fd13 	bl	800ab00 <_malloc_r>
 800c0da:	b948      	cbnz	r0, 800c0f0 <__smakebuf_r+0x44>
 800c0dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0e0:	059a      	lsls	r2, r3, #22
 800c0e2:	d4ef      	bmi.n	800c0c4 <__smakebuf_r+0x18>
 800c0e4:	f023 0303 	bic.w	r3, r3, #3
 800c0e8:	f043 0302 	orr.w	r3, r3, #2
 800c0ec:	81a3      	strh	r3, [r4, #12]
 800c0ee:	e7e3      	b.n	800c0b8 <__smakebuf_r+0xc>
 800c0f0:	4b0d      	ldr	r3, [pc, #52]	; (800c128 <__smakebuf_r+0x7c>)
 800c0f2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c0f4:	89a3      	ldrh	r3, [r4, #12]
 800c0f6:	6020      	str	r0, [r4, #0]
 800c0f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0fc:	81a3      	strh	r3, [r4, #12]
 800c0fe:	9b00      	ldr	r3, [sp, #0]
 800c100:	6163      	str	r3, [r4, #20]
 800c102:	9b01      	ldr	r3, [sp, #4]
 800c104:	6120      	str	r0, [r4, #16]
 800c106:	b15b      	cbz	r3, 800c120 <__smakebuf_r+0x74>
 800c108:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c10c:	4630      	mov	r0, r6
 800c10e:	f000 fcbf 	bl	800ca90 <_isatty_r>
 800c112:	b128      	cbz	r0, 800c120 <__smakebuf_r+0x74>
 800c114:	89a3      	ldrh	r3, [r4, #12]
 800c116:	f023 0303 	bic.w	r3, r3, #3
 800c11a:	f043 0301 	orr.w	r3, r3, #1
 800c11e:	81a3      	strh	r3, [r4, #12]
 800c120:	89a0      	ldrh	r0, [r4, #12]
 800c122:	4305      	orrs	r5, r0
 800c124:	81a5      	strh	r5, [r4, #12]
 800c126:	e7cd      	b.n	800c0c4 <__smakebuf_r+0x18>
 800c128:	0800be99 	.word	0x0800be99

0800c12c <_realloc_r>:
 800c12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c130:	4680      	mov	r8, r0
 800c132:	4614      	mov	r4, r2
 800c134:	460e      	mov	r6, r1
 800c136:	b921      	cbnz	r1, 800c142 <_realloc_r+0x16>
 800c138:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c13c:	4611      	mov	r1, r2
 800c13e:	f7fe bcdf 	b.w	800ab00 <_malloc_r>
 800c142:	b92a      	cbnz	r2, 800c150 <_realloc_r+0x24>
 800c144:	f7fe fc70 	bl	800aa28 <_free_r>
 800c148:	4625      	mov	r5, r4
 800c14a:	4628      	mov	r0, r5
 800c14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c150:	f000 fcae 	bl	800cab0 <_malloc_usable_size_r>
 800c154:	4284      	cmp	r4, r0
 800c156:	4607      	mov	r7, r0
 800c158:	d802      	bhi.n	800c160 <_realloc_r+0x34>
 800c15a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c15e:	d812      	bhi.n	800c186 <_realloc_r+0x5a>
 800c160:	4621      	mov	r1, r4
 800c162:	4640      	mov	r0, r8
 800c164:	f7fe fccc 	bl	800ab00 <_malloc_r>
 800c168:	4605      	mov	r5, r0
 800c16a:	2800      	cmp	r0, #0
 800c16c:	d0ed      	beq.n	800c14a <_realloc_r+0x1e>
 800c16e:	42bc      	cmp	r4, r7
 800c170:	4622      	mov	r2, r4
 800c172:	4631      	mov	r1, r6
 800c174:	bf28      	it	cs
 800c176:	463a      	movcs	r2, r7
 800c178:	f7fe fc40 	bl	800a9fc <memcpy>
 800c17c:	4631      	mov	r1, r6
 800c17e:	4640      	mov	r0, r8
 800c180:	f7fe fc52 	bl	800aa28 <_free_r>
 800c184:	e7e1      	b.n	800c14a <_realloc_r+0x1e>
 800c186:	4635      	mov	r5, r6
 800c188:	e7df      	b.n	800c14a <_realloc_r+0x1e>

0800c18a <_sungetc_r>:
 800c18a:	b538      	push	{r3, r4, r5, lr}
 800c18c:	1c4b      	adds	r3, r1, #1
 800c18e:	4614      	mov	r4, r2
 800c190:	d103      	bne.n	800c19a <_sungetc_r+0x10>
 800c192:	f04f 35ff 	mov.w	r5, #4294967295
 800c196:	4628      	mov	r0, r5
 800c198:	bd38      	pop	{r3, r4, r5, pc}
 800c19a:	8993      	ldrh	r3, [r2, #12]
 800c19c:	f023 0320 	bic.w	r3, r3, #32
 800c1a0:	8193      	strh	r3, [r2, #12]
 800c1a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c1a4:	6852      	ldr	r2, [r2, #4]
 800c1a6:	b2cd      	uxtb	r5, r1
 800c1a8:	b18b      	cbz	r3, 800c1ce <_sungetc_r+0x44>
 800c1aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	dd08      	ble.n	800c1c2 <_sungetc_r+0x38>
 800c1b0:	6823      	ldr	r3, [r4, #0]
 800c1b2:	1e5a      	subs	r2, r3, #1
 800c1b4:	6022      	str	r2, [r4, #0]
 800c1b6:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c1ba:	6863      	ldr	r3, [r4, #4]
 800c1bc:	3301      	adds	r3, #1
 800c1be:	6063      	str	r3, [r4, #4]
 800c1c0:	e7e9      	b.n	800c196 <_sungetc_r+0xc>
 800c1c2:	4621      	mov	r1, r4
 800c1c4:	f000 fc18 	bl	800c9f8 <__submore>
 800c1c8:	2800      	cmp	r0, #0
 800c1ca:	d0f1      	beq.n	800c1b0 <_sungetc_r+0x26>
 800c1cc:	e7e1      	b.n	800c192 <_sungetc_r+0x8>
 800c1ce:	6921      	ldr	r1, [r4, #16]
 800c1d0:	6823      	ldr	r3, [r4, #0]
 800c1d2:	b151      	cbz	r1, 800c1ea <_sungetc_r+0x60>
 800c1d4:	4299      	cmp	r1, r3
 800c1d6:	d208      	bcs.n	800c1ea <_sungetc_r+0x60>
 800c1d8:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c1dc:	42a9      	cmp	r1, r5
 800c1de:	d104      	bne.n	800c1ea <_sungetc_r+0x60>
 800c1e0:	3b01      	subs	r3, #1
 800c1e2:	3201      	adds	r2, #1
 800c1e4:	6023      	str	r3, [r4, #0]
 800c1e6:	6062      	str	r2, [r4, #4]
 800c1e8:	e7d5      	b.n	800c196 <_sungetc_r+0xc>
 800c1ea:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c1ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c1f2:	6363      	str	r3, [r4, #52]	; 0x34
 800c1f4:	2303      	movs	r3, #3
 800c1f6:	63a3      	str	r3, [r4, #56]	; 0x38
 800c1f8:	4623      	mov	r3, r4
 800c1fa:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c1fe:	6023      	str	r3, [r4, #0]
 800c200:	2301      	movs	r3, #1
 800c202:	e7dc      	b.n	800c1be <_sungetc_r+0x34>

0800c204 <__ssrefill_r>:
 800c204:	b510      	push	{r4, lr}
 800c206:	460c      	mov	r4, r1
 800c208:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c20a:	b169      	cbz	r1, 800c228 <__ssrefill_r+0x24>
 800c20c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c210:	4299      	cmp	r1, r3
 800c212:	d001      	beq.n	800c218 <__ssrefill_r+0x14>
 800c214:	f7fe fc08 	bl	800aa28 <_free_r>
 800c218:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c21a:	6063      	str	r3, [r4, #4]
 800c21c:	2000      	movs	r0, #0
 800c21e:	6360      	str	r0, [r4, #52]	; 0x34
 800c220:	b113      	cbz	r3, 800c228 <__ssrefill_r+0x24>
 800c222:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c224:	6023      	str	r3, [r4, #0]
 800c226:	bd10      	pop	{r4, pc}
 800c228:	6923      	ldr	r3, [r4, #16]
 800c22a:	6023      	str	r3, [r4, #0]
 800c22c:	2300      	movs	r3, #0
 800c22e:	6063      	str	r3, [r4, #4]
 800c230:	89a3      	ldrh	r3, [r4, #12]
 800c232:	f043 0320 	orr.w	r3, r3, #32
 800c236:	81a3      	strh	r3, [r4, #12]
 800c238:	f04f 30ff 	mov.w	r0, #4294967295
 800c23c:	e7f3      	b.n	800c226 <__ssrefill_r+0x22>
	...

0800c240 <__ssvfiscanf_r>:
 800c240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c244:	460c      	mov	r4, r1
 800c246:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c24a:	2100      	movs	r1, #0
 800c24c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c250:	49a6      	ldr	r1, [pc, #664]	; (800c4ec <__ssvfiscanf_r+0x2ac>)
 800c252:	91a0      	str	r1, [sp, #640]	; 0x280
 800c254:	f10d 0804 	add.w	r8, sp, #4
 800c258:	49a5      	ldr	r1, [pc, #660]	; (800c4f0 <__ssvfiscanf_r+0x2b0>)
 800c25a:	4fa6      	ldr	r7, [pc, #664]	; (800c4f4 <__ssvfiscanf_r+0x2b4>)
 800c25c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c4f8 <__ssvfiscanf_r+0x2b8>
 800c260:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c264:	4606      	mov	r6, r0
 800c266:	91a1      	str	r1, [sp, #644]	; 0x284
 800c268:	9300      	str	r3, [sp, #0]
 800c26a:	7813      	ldrb	r3, [r2, #0]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	f000 815a 	beq.w	800c526 <__ssvfiscanf_r+0x2e6>
 800c272:	5dd9      	ldrb	r1, [r3, r7]
 800c274:	f011 0108 	ands.w	r1, r1, #8
 800c278:	f102 0501 	add.w	r5, r2, #1
 800c27c:	d019      	beq.n	800c2b2 <__ssvfiscanf_r+0x72>
 800c27e:	6863      	ldr	r3, [r4, #4]
 800c280:	2b00      	cmp	r3, #0
 800c282:	dd0f      	ble.n	800c2a4 <__ssvfiscanf_r+0x64>
 800c284:	6823      	ldr	r3, [r4, #0]
 800c286:	781a      	ldrb	r2, [r3, #0]
 800c288:	5cba      	ldrb	r2, [r7, r2]
 800c28a:	0712      	lsls	r2, r2, #28
 800c28c:	d401      	bmi.n	800c292 <__ssvfiscanf_r+0x52>
 800c28e:	462a      	mov	r2, r5
 800c290:	e7eb      	b.n	800c26a <__ssvfiscanf_r+0x2a>
 800c292:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c294:	3201      	adds	r2, #1
 800c296:	9245      	str	r2, [sp, #276]	; 0x114
 800c298:	6862      	ldr	r2, [r4, #4]
 800c29a:	3301      	adds	r3, #1
 800c29c:	3a01      	subs	r2, #1
 800c29e:	6062      	str	r2, [r4, #4]
 800c2a0:	6023      	str	r3, [r4, #0]
 800c2a2:	e7ec      	b.n	800c27e <__ssvfiscanf_r+0x3e>
 800c2a4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c2a6:	4621      	mov	r1, r4
 800c2a8:	4630      	mov	r0, r6
 800c2aa:	4798      	blx	r3
 800c2ac:	2800      	cmp	r0, #0
 800c2ae:	d0e9      	beq.n	800c284 <__ssvfiscanf_r+0x44>
 800c2b0:	e7ed      	b.n	800c28e <__ssvfiscanf_r+0x4e>
 800c2b2:	2b25      	cmp	r3, #37	; 0x25
 800c2b4:	d012      	beq.n	800c2dc <__ssvfiscanf_r+0x9c>
 800c2b6:	469a      	mov	sl, r3
 800c2b8:	6863      	ldr	r3, [r4, #4]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	f340 8091 	ble.w	800c3e2 <__ssvfiscanf_r+0x1a2>
 800c2c0:	6822      	ldr	r2, [r4, #0]
 800c2c2:	7813      	ldrb	r3, [r2, #0]
 800c2c4:	4553      	cmp	r3, sl
 800c2c6:	f040 812e 	bne.w	800c526 <__ssvfiscanf_r+0x2e6>
 800c2ca:	6863      	ldr	r3, [r4, #4]
 800c2cc:	3b01      	subs	r3, #1
 800c2ce:	6063      	str	r3, [r4, #4]
 800c2d0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c2d2:	3201      	adds	r2, #1
 800c2d4:	3301      	adds	r3, #1
 800c2d6:	6022      	str	r2, [r4, #0]
 800c2d8:	9345      	str	r3, [sp, #276]	; 0x114
 800c2da:	e7d8      	b.n	800c28e <__ssvfiscanf_r+0x4e>
 800c2dc:	9141      	str	r1, [sp, #260]	; 0x104
 800c2de:	9143      	str	r1, [sp, #268]	; 0x10c
 800c2e0:	7853      	ldrb	r3, [r2, #1]
 800c2e2:	2b2a      	cmp	r3, #42	; 0x2a
 800c2e4:	bf02      	ittt	eq
 800c2e6:	2310      	moveq	r3, #16
 800c2e8:	1c95      	addeq	r5, r2, #2
 800c2ea:	9341      	streq	r3, [sp, #260]	; 0x104
 800c2ec:	220a      	movs	r2, #10
 800c2ee:	46aa      	mov	sl, r5
 800c2f0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c2f4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c2f8:	2b09      	cmp	r3, #9
 800c2fa:	d91d      	bls.n	800c338 <__ssvfiscanf_r+0xf8>
 800c2fc:	487e      	ldr	r0, [pc, #504]	; (800c4f8 <__ssvfiscanf_r+0x2b8>)
 800c2fe:	2203      	movs	r2, #3
 800c300:	f7f3 ff9e 	bl	8000240 <memchr>
 800c304:	b140      	cbz	r0, 800c318 <__ssvfiscanf_r+0xd8>
 800c306:	2301      	movs	r3, #1
 800c308:	eba0 0009 	sub.w	r0, r0, r9
 800c30c:	fa03 f000 	lsl.w	r0, r3, r0
 800c310:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c312:	4318      	orrs	r0, r3
 800c314:	9041      	str	r0, [sp, #260]	; 0x104
 800c316:	4655      	mov	r5, sl
 800c318:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c31c:	2b78      	cmp	r3, #120	; 0x78
 800c31e:	d806      	bhi.n	800c32e <__ssvfiscanf_r+0xee>
 800c320:	2b57      	cmp	r3, #87	; 0x57
 800c322:	d810      	bhi.n	800c346 <__ssvfiscanf_r+0x106>
 800c324:	2b25      	cmp	r3, #37	; 0x25
 800c326:	d0c6      	beq.n	800c2b6 <__ssvfiscanf_r+0x76>
 800c328:	d856      	bhi.n	800c3d8 <__ssvfiscanf_r+0x198>
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d064      	beq.n	800c3f8 <__ssvfiscanf_r+0x1b8>
 800c32e:	2303      	movs	r3, #3
 800c330:	9347      	str	r3, [sp, #284]	; 0x11c
 800c332:	230a      	movs	r3, #10
 800c334:	9342      	str	r3, [sp, #264]	; 0x108
 800c336:	e071      	b.n	800c41c <__ssvfiscanf_r+0x1dc>
 800c338:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c33a:	fb02 1103 	mla	r1, r2, r3, r1
 800c33e:	3930      	subs	r1, #48	; 0x30
 800c340:	9143      	str	r1, [sp, #268]	; 0x10c
 800c342:	4655      	mov	r5, sl
 800c344:	e7d3      	b.n	800c2ee <__ssvfiscanf_r+0xae>
 800c346:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c34a:	2a20      	cmp	r2, #32
 800c34c:	d8ef      	bhi.n	800c32e <__ssvfiscanf_r+0xee>
 800c34e:	a101      	add	r1, pc, #4	; (adr r1, 800c354 <__ssvfiscanf_r+0x114>)
 800c350:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c354:	0800c407 	.word	0x0800c407
 800c358:	0800c32f 	.word	0x0800c32f
 800c35c:	0800c32f 	.word	0x0800c32f
 800c360:	0800c465 	.word	0x0800c465
 800c364:	0800c32f 	.word	0x0800c32f
 800c368:	0800c32f 	.word	0x0800c32f
 800c36c:	0800c32f 	.word	0x0800c32f
 800c370:	0800c32f 	.word	0x0800c32f
 800c374:	0800c32f 	.word	0x0800c32f
 800c378:	0800c32f 	.word	0x0800c32f
 800c37c:	0800c32f 	.word	0x0800c32f
 800c380:	0800c47b 	.word	0x0800c47b
 800c384:	0800c451 	.word	0x0800c451
 800c388:	0800c3df 	.word	0x0800c3df
 800c38c:	0800c3df 	.word	0x0800c3df
 800c390:	0800c3df 	.word	0x0800c3df
 800c394:	0800c32f 	.word	0x0800c32f
 800c398:	0800c455 	.word	0x0800c455
 800c39c:	0800c32f 	.word	0x0800c32f
 800c3a0:	0800c32f 	.word	0x0800c32f
 800c3a4:	0800c32f 	.word	0x0800c32f
 800c3a8:	0800c32f 	.word	0x0800c32f
 800c3ac:	0800c48b 	.word	0x0800c48b
 800c3b0:	0800c45d 	.word	0x0800c45d
 800c3b4:	0800c3ff 	.word	0x0800c3ff
 800c3b8:	0800c32f 	.word	0x0800c32f
 800c3bc:	0800c32f 	.word	0x0800c32f
 800c3c0:	0800c487 	.word	0x0800c487
 800c3c4:	0800c32f 	.word	0x0800c32f
 800c3c8:	0800c451 	.word	0x0800c451
 800c3cc:	0800c32f 	.word	0x0800c32f
 800c3d0:	0800c32f 	.word	0x0800c32f
 800c3d4:	0800c407 	.word	0x0800c407
 800c3d8:	3b45      	subs	r3, #69	; 0x45
 800c3da:	2b02      	cmp	r3, #2
 800c3dc:	d8a7      	bhi.n	800c32e <__ssvfiscanf_r+0xee>
 800c3de:	2305      	movs	r3, #5
 800c3e0:	e01b      	b.n	800c41a <__ssvfiscanf_r+0x1da>
 800c3e2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c3e4:	4621      	mov	r1, r4
 800c3e6:	4630      	mov	r0, r6
 800c3e8:	4798      	blx	r3
 800c3ea:	2800      	cmp	r0, #0
 800c3ec:	f43f af68 	beq.w	800c2c0 <__ssvfiscanf_r+0x80>
 800c3f0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c3f2:	2800      	cmp	r0, #0
 800c3f4:	f040 808d 	bne.w	800c512 <__ssvfiscanf_r+0x2d2>
 800c3f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3fc:	e08f      	b.n	800c51e <__ssvfiscanf_r+0x2de>
 800c3fe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c400:	f042 0220 	orr.w	r2, r2, #32
 800c404:	9241      	str	r2, [sp, #260]	; 0x104
 800c406:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c40c:	9241      	str	r2, [sp, #260]	; 0x104
 800c40e:	2210      	movs	r2, #16
 800c410:	2b6f      	cmp	r3, #111	; 0x6f
 800c412:	9242      	str	r2, [sp, #264]	; 0x108
 800c414:	bf34      	ite	cc
 800c416:	2303      	movcc	r3, #3
 800c418:	2304      	movcs	r3, #4
 800c41a:	9347      	str	r3, [sp, #284]	; 0x11c
 800c41c:	6863      	ldr	r3, [r4, #4]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	dd42      	ble.n	800c4a8 <__ssvfiscanf_r+0x268>
 800c422:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c424:	0659      	lsls	r1, r3, #25
 800c426:	d404      	bmi.n	800c432 <__ssvfiscanf_r+0x1f2>
 800c428:	6823      	ldr	r3, [r4, #0]
 800c42a:	781a      	ldrb	r2, [r3, #0]
 800c42c:	5cba      	ldrb	r2, [r7, r2]
 800c42e:	0712      	lsls	r2, r2, #28
 800c430:	d441      	bmi.n	800c4b6 <__ssvfiscanf_r+0x276>
 800c432:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c434:	2b02      	cmp	r3, #2
 800c436:	dc50      	bgt.n	800c4da <__ssvfiscanf_r+0x29a>
 800c438:	466b      	mov	r3, sp
 800c43a:	4622      	mov	r2, r4
 800c43c:	a941      	add	r1, sp, #260	; 0x104
 800c43e:	4630      	mov	r0, r6
 800c440:	f000 f876 	bl	800c530 <_scanf_chars>
 800c444:	2801      	cmp	r0, #1
 800c446:	d06e      	beq.n	800c526 <__ssvfiscanf_r+0x2e6>
 800c448:	2802      	cmp	r0, #2
 800c44a:	f47f af20 	bne.w	800c28e <__ssvfiscanf_r+0x4e>
 800c44e:	e7cf      	b.n	800c3f0 <__ssvfiscanf_r+0x1b0>
 800c450:	220a      	movs	r2, #10
 800c452:	e7dd      	b.n	800c410 <__ssvfiscanf_r+0x1d0>
 800c454:	2300      	movs	r3, #0
 800c456:	9342      	str	r3, [sp, #264]	; 0x108
 800c458:	2303      	movs	r3, #3
 800c45a:	e7de      	b.n	800c41a <__ssvfiscanf_r+0x1da>
 800c45c:	2308      	movs	r3, #8
 800c45e:	9342      	str	r3, [sp, #264]	; 0x108
 800c460:	2304      	movs	r3, #4
 800c462:	e7da      	b.n	800c41a <__ssvfiscanf_r+0x1da>
 800c464:	4629      	mov	r1, r5
 800c466:	4640      	mov	r0, r8
 800c468:	f000 f9c6 	bl	800c7f8 <__sccl>
 800c46c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c46e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c472:	9341      	str	r3, [sp, #260]	; 0x104
 800c474:	4605      	mov	r5, r0
 800c476:	2301      	movs	r3, #1
 800c478:	e7cf      	b.n	800c41a <__ssvfiscanf_r+0x1da>
 800c47a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c47c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c480:	9341      	str	r3, [sp, #260]	; 0x104
 800c482:	2300      	movs	r3, #0
 800c484:	e7c9      	b.n	800c41a <__ssvfiscanf_r+0x1da>
 800c486:	2302      	movs	r3, #2
 800c488:	e7c7      	b.n	800c41a <__ssvfiscanf_r+0x1da>
 800c48a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c48c:	06c3      	lsls	r3, r0, #27
 800c48e:	f53f aefe 	bmi.w	800c28e <__ssvfiscanf_r+0x4e>
 800c492:	9b00      	ldr	r3, [sp, #0]
 800c494:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c496:	1d19      	adds	r1, r3, #4
 800c498:	9100      	str	r1, [sp, #0]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f010 0f01 	tst.w	r0, #1
 800c4a0:	bf14      	ite	ne
 800c4a2:	801a      	strhne	r2, [r3, #0]
 800c4a4:	601a      	streq	r2, [r3, #0]
 800c4a6:	e6f2      	b.n	800c28e <__ssvfiscanf_r+0x4e>
 800c4a8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c4aa:	4621      	mov	r1, r4
 800c4ac:	4630      	mov	r0, r6
 800c4ae:	4798      	blx	r3
 800c4b0:	2800      	cmp	r0, #0
 800c4b2:	d0b6      	beq.n	800c422 <__ssvfiscanf_r+0x1e2>
 800c4b4:	e79c      	b.n	800c3f0 <__ssvfiscanf_r+0x1b0>
 800c4b6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c4b8:	3201      	adds	r2, #1
 800c4ba:	9245      	str	r2, [sp, #276]	; 0x114
 800c4bc:	6862      	ldr	r2, [r4, #4]
 800c4be:	3a01      	subs	r2, #1
 800c4c0:	2a00      	cmp	r2, #0
 800c4c2:	6062      	str	r2, [r4, #4]
 800c4c4:	dd02      	ble.n	800c4cc <__ssvfiscanf_r+0x28c>
 800c4c6:	3301      	adds	r3, #1
 800c4c8:	6023      	str	r3, [r4, #0]
 800c4ca:	e7ad      	b.n	800c428 <__ssvfiscanf_r+0x1e8>
 800c4cc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c4ce:	4621      	mov	r1, r4
 800c4d0:	4630      	mov	r0, r6
 800c4d2:	4798      	blx	r3
 800c4d4:	2800      	cmp	r0, #0
 800c4d6:	d0a7      	beq.n	800c428 <__ssvfiscanf_r+0x1e8>
 800c4d8:	e78a      	b.n	800c3f0 <__ssvfiscanf_r+0x1b0>
 800c4da:	2b04      	cmp	r3, #4
 800c4dc:	dc0e      	bgt.n	800c4fc <__ssvfiscanf_r+0x2bc>
 800c4de:	466b      	mov	r3, sp
 800c4e0:	4622      	mov	r2, r4
 800c4e2:	a941      	add	r1, sp, #260	; 0x104
 800c4e4:	4630      	mov	r0, r6
 800c4e6:	f000 f87d 	bl	800c5e4 <_scanf_i>
 800c4ea:	e7ab      	b.n	800c444 <__ssvfiscanf_r+0x204>
 800c4ec:	0800c18b 	.word	0x0800c18b
 800c4f0:	0800c205 	.word	0x0800c205
 800c4f4:	0800cc80 	.word	0x0800cc80
 800c4f8:	0800cc52 	.word	0x0800cc52
 800c4fc:	4b0b      	ldr	r3, [pc, #44]	; (800c52c <__ssvfiscanf_r+0x2ec>)
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	f43f aec5 	beq.w	800c28e <__ssvfiscanf_r+0x4e>
 800c504:	466b      	mov	r3, sp
 800c506:	4622      	mov	r2, r4
 800c508:	a941      	add	r1, sp, #260	; 0x104
 800c50a:	4630      	mov	r0, r6
 800c50c:	f3af 8000 	nop.w
 800c510:	e798      	b.n	800c444 <__ssvfiscanf_r+0x204>
 800c512:	89a3      	ldrh	r3, [r4, #12]
 800c514:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c518:	bf18      	it	ne
 800c51a:	f04f 30ff 	movne.w	r0, #4294967295
 800c51e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c526:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c528:	e7f9      	b.n	800c51e <__ssvfiscanf_r+0x2de>
 800c52a:	bf00      	nop
 800c52c:	00000000 	.word	0x00000000

0800c530 <_scanf_chars>:
 800c530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c534:	4615      	mov	r5, r2
 800c536:	688a      	ldr	r2, [r1, #8]
 800c538:	4680      	mov	r8, r0
 800c53a:	460c      	mov	r4, r1
 800c53c:	b932      	cbnz	r2, 800c54c <_scanf_chars+0x1c>
 800c53e:	698a      	ldr	r2, [r1, #24]
 800c540:	2a00      	cmp	r2, #0
 800c542:	bf0c      	ite	eq
 800c544:	2201      	moveq	r2, #1
 800c546:	f04f 32ff 	movne.w	r2, #4294967295
 800c54a:	608a      	str	r2, [r1, #8]
 800c54c:	6822      	ldr	r2, [r4, #0]
 800c54e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c5e0 <_scanf_chars+0xb0>
 800c552:	06d1      	lsls	r1, r2, #27
 800c554:	bf5f      	itttt	pl
 800c556:	681a      	ldrpl	r2, [r3, #0]
 800c558:	1d11      	addpl	r1, r2, #4
 800c55a:	6019      	strpl	r1, [r3, #0]
 800c55c:	6816      	ldrpl	r6, [r2, #0]
 800c55e:	2700      	movs	r7, #0
 800c560:	69a0      	ldr	r0, [r4, #24]
 800c562:	b188      	cbz	r0, 800c588 <_scanf_chars+0x58>
 800c564:	2801      	cmp	r0, #1
 800c566:	d107      	bne.n	800c578 <_scanf_chars+0x48>
 800c568:	682a      	ldr	r2, [r5, #0]
 800c56a:	7811      	ldrb	r1, [r2, #0]
 800c56c:	6962      	ldr	r2, [r4, #20]
 800c56e:	5c52      	ldrb	r2, [r2, r1]
 800c570:	b952      	cbnz	r2, 800c588 <_scanf_chars+0x58>
 800c572:	2f00      	cmp	r7, #0
 800c574:	d031      	beq.n	800c5da <_scanf_chars+0xaa>
 800c576:	e022      	b.n	800c5be <_scanf_chars+0x8e>
 800c578:	2802      	cmp	r0, #2
 800c57a:	d120      	bne.n	800c5be <_scanf_chars+0x8e>
 800c57c:	682b      	ldr	r3, [r5, #0]
 800c57e:	781b      	ldrb	r3, [r3, #0]
 800c580:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c584:	071b      	lsls	r3, r3, #28
 800c586:	d41a      	bmi.n	800c5be <_scanf_chars+0x8e>
 800c588:	6823      	ldr	r3, [r4, #0]
 800c58a:	06da      	lsls	r2, r3, #27
 800c58c:	bf5e      	ittt	pl
 800c58e:	682b      	ldrpl	r3, [r5, #0]
 800c590:	781b      	ldrbpl	r3, [r3, #0]
 800c592:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c596:	682a      	ldr	r2, [r5, #0]
 800c598:	686b      	ldr	r3, [r5, #4]
 800c59a:	3201      	adds	r2, #1
 800c59c:	602a      	str	r2, [r5, #0]
 800c59e:	68a2      	ldr	r2, [r4, #8]
 800c5a0:	3b01      	subs	r3, #1
 800c5a2:	3a01      	subs	r2, #1
 800c5a4:	606b      	str	r3, [r5, #4]
 800c5a6:	3701      	adds	r7, #1
 800c5a8:	60a2      	str	r2, [r4, #8]
 800c5aa:	b142      	cbz	r2, 800c5be <_scanf_chars+0x8e>
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	dcd7      	bgt.n	800c560 <_scanf_chars+0x30>
 800c5b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c5b4:	4629      	mov	r1, r5
 800c5b6:	4640      	mov	r0, r8
 800c5b8:	4798      	blx	r3
 800c5ba:	2800      	cmp	r0, #0
 800c5bc:	d0d0      	beq.n	800c560 <_scanf_chars+0x30>
 800c5be:	6823      	ldr	r3, [r4, #0]
 800c5c0:	f013 0310 	ands.w	r3, r3, #16
 800c5c4:	d105      	bne.n	800c5d2 <_scanf_chars+0xa2>
 800c5c6:	68e2      	ldr	r2, [r4, #12]
 800c5c8:	3201      	adds	r2, #1
 800c5ca:	60e2      	str	r2, [r4, #12]
 800c5cc:	69a2      	ldr	r2, [r4, #24]
 800c5ce:	b102      	cbz	r2, 800c5d2 <_scanf_chars+0xa2>
 800c5d0:	7033      	strb	r3, [r6, #0]
 800c5d2:	6923      	ldr	r3, [r4, #16]
 800c5d4:	443b      	add	r3, r7
 800c5d6:	6123      	str	r3, [r4, #16]
 800c5d8:	2000      	movs	r0, #0
 800c5da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5de:	bf00      	nop
 800c5e0:	0800cc80 	.word	0x0800cc80

0800c5e4 <_scanf_i>:
 800c5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5e8:	4698      	mov	r8, r3
 800c5ea:	4b76      	ldr	r3, [pc, #472]	; (800c7c4 <_scanf_i+0x1e0>)
 800c5ec:	460c      	mov	r4, r1
 800c5ee:	4682      	mov	sl, r0
 800c5f0:	4616      	mov	r6, r2
 800c5f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c5f6:	b087      	sub	sp, #28
 800c5f8:	ab03      	add	r3, sp, #12
 800c5fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c5fe:	4b72      	ldr	r3, [pc, #456]	; (800c7c8 <_scanf_i+0x1e4>)
 800c600:	69a1      	ldr	r1, [r4, #24]
 800c602:	4a72      	ldr	r2, [pc, #456]	; (800c7cc <_scanf_i+0x1e8>)
 800c604:	2903      	cmp	r1, #3
 800c606:	bf18      	it	ne
 800c608:	461a      	movne	r2, r3
 800c60a:	68a3      	ldr	r3, [r4, #8]
 800c60c:	9201      	str	r2, [sp, #4]
 800c60e:	1e5a      	subs	r2, r3, #1
 800c610:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c614:	bf88      	it	hi
 800c616:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c61a:	4627      	mov	r7, r4
 800c61c:	bf82      	ittt	hi
 800c61e:	eb03 0905 	addhi.w	r9, r3, r5
 800c622:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c626:	60a3      	strhi	r3, [r4, #8]
 800c628:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c62c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c630:	bf98      	it	ls
 800c632:	f04f 0900 	movls.w	r9, #0
 800c636:	6023      	str	r3, [r4, #0]
 800c638:	463d      	mov	r5, r7
 800c63a:	f04f 0b00 	mov.w	fp, #0
 800c63e:	6831      	ldr	r1, [r6, #0]
 800c640:	ab03      	add	r3, sp, #12
 800c642:	7809      	ldrb	r1, [r1, #0]
 800c644:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c648:	2202      	movs	r2, #2
 800c64a:	f7f3 fdf9 	bl	8000240 <memchr>
 800c64e:	b328      	cbz	r0, 800c69c <_scanf_i+0xb8>
 800c650:	f1bb 0f01 	cmp.w	fp, #1
 800c654:	d159      	bne.n	800c70a <_scanf_i+0x126>
 800c656:	6862      	ldr	r2, [r4, #4]
 800c658:	b92a      	cbnz	r2, 800c666 <_scanf_i+0x82>
 800c65a:	6822      	ldr	r2, [r4, #0]
 800c65c:	2308      	movs	r3, #8
 800c65e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c662:	6063      	str	r3, [r4, #4]
 800c664:	6022      	str	r2, [r4, #0]
 800c666:	6822      	ldr	r2, [r4, #0]
 800c668:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c66c:	6022      	str	r2, [r4, #0]
 800c66e:	68a2      	ldr	r2, [r4, #8]
 800c670:	1e51      	subs	r1, r2, #1
 800c672:	60a1      	str	r1, [r4, #8]
 800c674:	b192      	cbz	r2, 800c69c <_scanf_i+0xb8>
 800c676:	6832      	ldr	r2, [r6, #0]
 800c678:	1c51      	adds	r1, r2, #1
 800c67a:	6031      	str	r1, [r6, #0]
 800c67c:	7812      	ldrb	r2, [r2, #0]
 800c67e:	f805 2b01 	strb.w	r2, [r5], #1
 800c682:	6872      	ldr	r2, [r6, #4]
 800c684:	3a01      	subs	r2, #1
 800c686:	2a00      	cmp	r2, #0
 800c688:	6072      	str	r2, [r6, #4]
 800c68a:	dc07      	bgt.n	800c69c <_scanf_i+0xb8>
 800c68c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c690:	4631      	mov	r1, r6
 800c692:	4650      	mov	r0, sl
 800c694:	4790      	blx	r2
 800c696:	2800      	cmp	r0, #0
 800c698:	f040 8085 	bne.w	800c7a6 <_scanf_i+0x1c2>
 800c69c:	f10b 0b01 	add.w	fp, fp, #1
 800c6a0:	f1bb 0f03 	cmp.w	fp, #3
 800c6a4:	d1cb      	bne.n	800c63e <_scanf_i+0x5a>
 800c6a6:	6863      	ldr	r3, [r4, #4]
 800c6a8:	b90b      	cbnz	r3, 800c6ae <_scanf_i+0xca>
 800c6aa:	230a      	movs	r3, #10
 800c6ac:	6063      	str	r3, [r4, #4]
 800c6ae:	6863      	ldr	r3, [r4, #4]
 800c6b0:	4947      	ldr	r1, [pc, #284]	; (800c7d0 <_scanf_i+0x1ec>)
 800c6b2:	6960      	ldr	r0, [r4, #20]
 800c6b4:	1ac9      	subs	r1, r1, r3
 800c6b6:	f000 f89f 	bl	800c7f8 <__sccl>
 800c6ba:	f04f 0b00 	mov.w	fp, #0
 800c6be:	68a3      	ldr	r3, [r4, #8]
 800c6c0:	6822      	ldr	r2, [r4, #0]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d03d      	beq.n	800c742 <_scanf_i+0x15e>
 800c6c6:	6831      	ldr	r1, [r6, #0]
 800c6c8:	6960      	ldr	r0, [r4, #20]
 800c6ca:	f891 c000 	ldrb.w	ip, [r1]
 800c6ce:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c6d2:	2800      	cmp	r0, #0
 800c6d4:	d035      	beq.n	800c742 <_scanf_i+0x15e>
 800c6d6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c6da:	d124      	bne.n	800c726 <_scanf_i+0x142>
 800c6dc:	0510      	lsls	r0, r2, #20
 800c6de:	d522      	bpl.n	800c726 <_scanf_i+0x142>
 800c6e0:	f10b 0b01 	add.w	fp, fp, #1
 800c6e4:	f1b9 0f00 	cmp.w	r9, #0
 800c6e8:	d003      	beq.n	800c6f2 <_scanf_i+0x10e>
 800c6ea:	3301      	adds	r3, #1
 800c6ec:	f109 39ff 	add.w	r9, r9, #4294967295
 800c6f0:	60a3      	str	r3, [r4, #8]
 800c6f2:	6873      	ldr	r3, [r6, #4]
 800c6f4:	3b01      	subs	r3, #1
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	6073      	str	r3, [r6, #4]
 800c6fa:	dd1b      	ble.n	800c734 <_scanf_i+0x150>
 800c6fc:	6833      	ldr	r3, [r6, #0]
 800c6fe:	3301      	adds	r3, #1
 800c700:	6033      	str	r3, [r6, #0]
 800c702:	68a3      	ldr	r3, [r4, #8]
 800c704:	3b01      	subs	r3, #1
 800c706:	60a3      	str	r3, [r4, #8]
 800c708:	e7d9      	b.n	800c6be <_scanf_i+0xda>
 800c70a:	f1bb 0f02 	cmp.w	fp, #2
 800c70e:	d1ae      	bne.n	800c66e <_scanf_i+0x8a>
 800c710:	6822      	ldr	r2, [r4, #0]
 800c712:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c716:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c71a:	d1bf      	bne.n	800c69c <_scanf_i+0xb8>
 800c71c:	2310      	movs	r3, #16
 800c71e:	6063      	str	r3, [r4, #4]
 800c720:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c724:	e7a2      	b.n	800c66c <_scanf_i+0x88>
 800c726:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c72a:	6022      	str	r2, [r4, #0]
 800c72c:	780b      	ldrb	r3, [r1, #0]
 800c72e:	f805 3b01 	strb.w	r3, [r5], #1
 800c732:	e7de      	b.n	800c6f2 <_scanf_i+0x10e>
 800c734:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c738:	4631      	mov	r1, r6
 800c73a:	4650      	mov	r0, sl
 800c73c:	4798      	blx	r3
 800c73e:	2800      	cmp	r0, #0
 800c740:	d0df      	beq.n	800c702 <_scanf_i+0x11e>
 800c742:	6823      	ldr	r3, [r4, #0]
 800c744:	05db      	lsls	r3, r3, #23
 800c746:	d50d      	bpl.n	800c764 <_scanf_i+0x180>
 800c748:	42bd      	cmp	r5, r7
 800c74a:	d909      	bls.n	800c760 <_scanf_i+0x17c>
 800c74c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c750:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c754:	4632      	mov	r2, r6
 800c756:	4650      	mov	r0, sl
 800c758:	4798      	blx	r3
 800c75a:	f105 39ff 	add.w	r9, r5, #4294967295
 800c75e:	464d      	mov	r5, r9
 800c760:	42bd      	cmp	r5, r7
 800c762:	d02d      	beq.n	800c7c0 <_scanf_i+0x1dc>
 800c764:	6822      	ldr	r2, [r4, #0]
 800c766:	f012 0210 	ands.w	r2, r2, #16
 800c76a:	d113      	bne.n	800c794 <_scanf_i+0x1b0>
 800c76c:	702a      	strb	r2, [r5, #0]
 800c76e:	6863      	ldr	r3, [r4, #4]
 800c770:	9e01      	ldr	r6, [sp, #4]
 800c772:	4639      	mov	r1, r7
 800c774:	4650      	mov	r0, sl
 800c776:	47b0      	blx	r6
 800c778:	6821      	ldr	r1, [r4, #0]
 800c77a:	f8d8 3000 	ldr.w	r3, [r8]
 800c77e:	f011 0f20 	tst.w	r1, #32
 800c782:	d013      	beq.n	800c7ac <_scanf_i+0x1c8>
 800c784:	1d1a      	adds	r2, r3, #4
 800c786:	f8c8 2000 	str.w	r2, [r8]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	6018      	str	r0, [r3, #0]
 800c78e:	68e3      	ldr	r3, [r4, #12]
 800c790:	3301      	adds	r3, #1
 800c792:	60e3      	str	r3, [r4, #12]
 800c794:	1bed      	subs	r5, r5, r7
 800c796:	44ab      	add	fp, r5
 800c798:	6925      	ldr	r5, [r4, #16]
 800c79a:	445d      	add	r5, fp
 800c79c:	6125      	str	r5, [r4, #16]
 800c79e:	2000      	movs	r0, #0
 800c7a0:	b007      	add	sp, #28
 800c7a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7a6:	f04f 0b00 	mov.w	fp, #0
 800c7aa:	e7ca      	b.n	800c742 <_scanf_i+0x15e>
 800c7ac:	1d1a      	adds	r2, r3, #4
 800c7ae:	f8c8 2000 	str.w	r2, [r8]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	f011 0f01 	tst.w	r1, #1
 800c7b8:	bf14      	ite	ne
 800c7ba:	8018      	strhne	r0, [r3, #0]
 800c7bc:	6018      	streq	r0, [r3, #0]
 800c7be:	e7e6      	b.n	800c78e <_scanf_i+0x1aa>
 800c7c0:	2001      	movs	r0, #1
 800c7c2:	e7ed      	b.n	800c7a0 <_scanf_i+0x1bc>
 800c7c4:	0800cad8 	.word	0x0800cad8
 800c7c8:	0800bac9 	.word	0x0800bac9
 800c7cc:	0800c9f5 	.word	0x0800c9f5
 800c7d0:	0800cdf9 	.word	0x0800cdf9

0800c7d4 <_read_r>:
 800c7d4:	b538      	push	{r3, r4, r5, lr}
 800c7d6:	4d07      	ldr	r5, [pc, #28]	; (800c7f4 <_read_r+0x20>)
 800c7d8:	4604      	mov	r4, r0
 800c7da:	4608      	mov	r0, r1
 800c7dc:	4611      	mov	r1, r2
 800c7de:	2200      	movs	r2, #0
 800c7e0:	602a      	str	r2, [r5, #0]
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	f7f7 f9a0 	bl	8003b28 <_read>
 800c7e8:	1c43      	adds	r3, r0, #1
 800c7ea:	d102      	bne.n	800c7f2 <_read_r+0x1e>
 800c7ec:	682b      	ldr	r3, [r5, #0]
 800c7ee:	b103      	cbz	r3, 800c7f2 <_read_r+0x1e>
 800c7f0:	6023      	str	r3, [r4, #0]
 800c7f2:	bd38      	pop	{r3, r4, r5, pc}
 800c7f4:	20000fd8 	.word	0x20000fd8

0800c7f8 <__sccl>:
 800c7f8:	b570      	push	{r4, r5, r6, lr}
 800c7fa:	780b      	ldrb	r3, [r1, #0]
 800c7fc:	4604      	mov	r4, r0
 800c7fe:	2b5e      	cmp	r3, #94	; 0x5e
 800c800:	bf0b      	itete	eq
 800c802:	784b      	ldrbeq	r3, [r1, #1]
 800c804:	1c48      	addne	r0, r1, #1
 800c806:	1c88      	addeq	r0, r1, #2
 800c808:	2200      	movne	r2, #0
 800c80a:	bf08      	it	eq
 800c80c:	2201      	moveq	r2, #1
 800c80e:	1e61      	subs	r1, r4, #1
 800c810:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c814:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c818:	42a9      	cmp	r1, r5
 800c81a:	d1fb      	bne.n	800c814 <__sccl+0x1c>
 800c81c:	b90b      	cbnz	r3, 800c822 <__sccl+0x2a>
 800c81e:	3801      	subs	r0, #1
 800c820:	bd70      	pop	{r4, r5, r6, pc}
 800c822:	f082 0201 	eor.w	r2, r2, #1
 800c826:	54e2      	strb	r2, [r4, r3]
 800c828:	4605      	mov	r5, r0
 800c82a:	4628      	mov	r0, r5
 800c82c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800c830:	292d      	cmp	r1, #45	; 0x2d
 800c832:	d006      	beq.n	800c842 <__sccl+0x4a>
 800c834:	295d      	cmp	r1, #93	; 0x5d
 800c836:	d0f3      	beq.n	800c820 <__sccl+0x28>
 800c838:	b909      	cbnz	r1, 800c83e <__sccl+0x46>
 800c83a:	4628      	mov	r0, r5
 800c83c:	e7f0      	b.n	800c820 <__sccl+0x28>
 800c83e:	460b      	mov	r3, r1
 800c840:	e7f1      	b.n	800c826 <__sccl+0x2e>
 800c842:	786e      	ldrb	r6, [r5, #1]
 800c844:	2e5d      	cmp	r6, #93	; 0x5d
 800c846:	d0fa      	beq.n	800c83e <__sccl+0x46>
 800c848:	42b3      	cmp	r3, r6
 800c84a:	dcf8      	bgt.n	800c83e <__sccl+0x46>
 800c84c:	3502      	adds	r5, #2
 800c84e:	4619      	mov	r1, r3
 800c850:	3101      	adds	r1, #1
 800c852:	428e      	cmp	r6, r1
 800c854:	5462      	strb	r2, [r4, r1]
 800c856:	dcfb      	bgt.n	800c850 <__sccl+0x58>
 800c858:	1af1      	subs	r1, r6, r3
 800c85a:	3901      	subs	r1, #1
 800c85c:	1c58      	adds	r0, r3, #1
 800c85e:	42b3      	cmp	r3, r6
 800c860:	bfa8      	it	ge
 800c862:	2100      	movge	r1, #0
 800c864:	1843      	adds	r3, r0, r1
 800c866:	e7e0      	b.n	800c82a <__sccl+0x32>

0800c868 <_raise_r>:
 800c868:	291f      	cmp	r1, #31
 800c86a:	b538      	push	{r3, r4, r5, lr}
 800c86c:	4604      	mov	r4, r0
 800c86e:	460d      	mov	r5, r1
 800c870:	d904      	bls.n	800c87c <_raise_r+0x14>
 800c872:	2316      	movs	r3, #22
 800c874:	6003      	str	r3, [r0, #0]
 800c876:	f04f 30ff 	mov.w	r0, #4294967295
 800c87a:	bd38      	pop	{r3, r4, r5, pc}
 800c87c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c87e:	b112      	cbz	r2, 800c886 <_raise_r+0x1e>
 800c880:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c884:	b94b      	cbnz	r3, 800c89a <_raise_r+0x32>
 800c886:	4620      	mov	r0, r4
 800c888:	f000 f830 	bl	800c8ec <_getpid_r>
 800c88c:	462a      	mov	r2, r5
 800c88e:	4601      	mov	r1, r0
 800c890:	4620      	mov	r0, r4
 800c892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c896:	f000 b817 	b.w	800c8c8 <_kill_r>
 800c89a:	2b01      	cmp	r3, #1
 800c89c:	d00a      	beq.n	800c8b4 <_raise_r+0x4c>
 800c89e:	1c59      	adds	r1, r3, #1
 800c8a0:	d103      	bne.n	800c8aa <_raise_r+0x42>
 800c8a2:	2316      	movs	r3, #22
 800c8a4:	6003      	str	r3, [r0, #0]
 800c8a6:	2001      	movs	r0, #1
 800c8a8:	e7e7      	b.n	800c87a <_raise_r+0x12>
 800c8aa:	2400      	movs	r4, #0
 800c8ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c8b0:	4628      	mov	r0, r5
 800c8b2:	4798      	blx	r3
 800c8b4:	2000      	movs	r0, #0
 800c8b6:	e7e0      	b.n	800c87a <_raise_r+0x12>

0800c8b8 <raise>:
 800c8b8:	4b02      	ldr	r3, [pc, #8]	; (800c8c4 <raise+0xc>)
 800c8ba:	4601      	mov	r1, r0
 800c8bc:	6818      	ldr	r0, [r3, #0]
 800c8be:	f7ff bfd3 	b.w	800c868 <_raise_r>
 800c8c2:	bf00      	nop
 800c8c4:	20000154 	.word	0x20000154

0800c8c8 <_kill_r>:
 800c8c8:	b538      	push	{r3, r4, r5, lr}
 800c8ca:	4d07      	ldr	r5, [pc, #28]	; (800c8e8 <_kill_r+0x20>)
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	4604      	mov	r4, r0
 800c8d0:	4608      	mov	r0, r1
 800c8d2:	4611      	mov	r1, r2
 800c8d4:	602b      	str	r3, [r5, #0]
 800c8d6:	f7f7 f90d 	bl	8003af4 <_kill>
 800c8da:	1c43      	adds	r3, r0, #1
 800c8dc:	d102      	bne.n	800c8e4 <_kill_r+0x1c>
 800c8de:	682b      	ldr	r3, [r5, #0]
 800c8e0:	b103      	cbz	r3, 800c8e4 <_kill_r+0x1c>
 800c8e2:	6023      	str	r3, [r4, #0]
 800c8e4:	bd38      	pop	{r3, r4, r5, pc}
 800c8e6:	bf00      	nop
 800c8e8:	20000fd8 	.word	0x20000fd8

0800c8ec <_getpid_r>:
 800c8ec:	f7f7 b8fa 	b.w	8003ae4 <_getpid>

0800c8f0 <_strtol_l.constprop.0>:
 800c8f0:	2b01      	cmp	r3, #1
 800c8f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8f6:	d001      	beq.n	800c8fc <_strtol_l.constprop.0+0xc>
 800c8f8:	2b24      	cmp	r3, #36	; 0x24
 800c8fa:	d906      	bls.n	800c90a <_strtol_l.constprop.0+0x1a>
 800c8fc:	f7fd ff32 	bl	800a764 <__errno>
 800c900:	2316      	movs	r3, #22
 800c902:	6003      	str	r3, [r0, #0]
 800c904:	2000      	movs	r0, #0
 800c906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c90a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c9f0 <_strtol_l.constprop.0+0x100>
 800c90e:	460d      	mov	r5, r1
 800c910:	462e      	mov	r6, r5
 800c912:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c916:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c91a:	f017 0708 	ands.w	r7, r7, #8
 800c91e:	d1f7      	bne.n	800c910 <_strtol_l.constprop.0+0x20>
 800c920:	2c2d      	cmp	r4, #45	; 0x2d
 800c922:	d132      	bne.n	800c98a <_strtol_l.constprop.0+0x9a>
 800c924:	782c      	ldrb	r4, [r5, #0]
 800c926:	2701      	movs	r7, #1
 800c928:	1cb5      	adds	r5, r6, #2
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d05b      	beq.n	800c9e6 <_strtol_l.constprop.0+0xf6>
 800c92e:	2b10      	cmp	r3, #16
 800c930:	d109      	bne.n	800c946 <_strtol_l.constprop.0+0x56>
 800c932:	2c30      	cmp	r4, #48	; 0x30
 800c934:	d107      	bne.n	800c946 <_strtol_l.constprop.0+0x56>
 800c936:	782c      	ldrb	r4, [r5, #0]
 800c938:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c93c:	2c58      	cmp	r4, #88	; 0x58
 800c93e:	d14d      	bne.n	800c9dc <_strtol_l.constprop.0+0xec>
 800c940:	786c      	ldrb	r4, [r5, #1]
 800c942:	2310      	movs	r3, #16
 800c944:	3502      	adds	r5, #2
 800c946:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c94a:	f108 38ff 	add.w	r8, r8, #4294967295
 800c94e:	f04f 0c00 	mov.w	ip, #0
 800c952:	fbb8 f9f3 	udiv	r9, r8, r3
 800c956:	4666      	mov	r6, ip
 800c958:	fb03 8a19 	mls	sl, r3, r9, r8
 800c95c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c960:	f1be 0f09 	cmp.w	lr, #9
 800c964:	d816      	bhi.n	800c994 <_strtol_l.constprop.0+0xa4>
 800c966:	4674      	mov	r4, lr
 800c968:	42a3      	cmp	r3, r4
 800c96a:	dd24      	ble.n	800c9b6 <_strtol_l.constprop.0+0xc6>
 800c96c:	f1bc 0f00 	cmp.w	ip, #0
 800c970:	db1e      	blt.n	800c9b0 <_strtol_l.constprop.0+0xc0>
 800c972:	45b1      	cmp	r9, r6
 800c974:	d31c      	bcc.n	800c9b0 <_strtol_l.constprop.0+0xc0>
 800c976:	d101      	bne.n	800c97c <_strtol_l.constprop.0+0x8c>
 800c978:	45a2      	cmp	sl, r4
 800c97a:	db19      	blt.n	800c9b0 <_strtol_l.constprop.0+0xc0>
 800c97c:	fb06 4603 	mla	r6, r6, r3, r4
 800c980:	f04f 0c01 	mov.w	ip, #1
 800c984:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c988:	e7e8      	b.n	800c95c <_strtol_l.constprop.0+0x6c>
 800c98a:	2c2b      	cmp	r4, #43	; 0x2b
 800c98c:	bf04      	itt	eq
 800c98e:	782c      	ldrbeq	r4, [r5, #0]
 800c990:	1cb5      	addeq	r5, r6, #2
 800c992:	e7ca      	b.n	800c92a <_strtol_l.constprop.0+0x3a>
 800c994:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c998:	f1be 0f19 	cmp.w	lr, #25
 800c99c:	d801      	bhi.n	800c9a2 <_strtol_l.constprop.0+0xb2>
 800c99e:	3c37      	subs	r4, #55	; 0x37
 800c9a0:	e7e2      	b.n	800c968 <_strtol_l.constprop.0+0x78>
 800c9a2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c9a6:	f1be 0f19 	cmp.w	lr, #25
 800c9aa:	d804      	bhi.n	800c9b6 <_strtol_l.constprop.0+0xc6>
 800c9ac:	3c57      	subs	r4, #87	; 0x57
 800c9ae:	e7db      	b.n	800c968 <_strtol_l.constprop.0+0x78>
 800c9b0:	f04f 3cff 	mov.w	ip, #4294967295
 800c9b4:	e7e6      	b.n	800c984 <_strtol_l.constprop.0+0x94>
 800c9b6:	f1bc 0f00 	cmp.w	ip, #0
 800c9ba:	da05      	bge.n	800c9c8 <_strtol_l.constprop.0+0xd8>
 800c9bc:	2322      	movs	r3, #34	; 0x22
 800c9be:	6003      	str	r3, [r0, #0]
 800c9c0:	4646      	mov	r6, r8
 800c9c2:	b942      	cbnz	r2, 800c9d6 <_strtol_l.constprop.0+0xe6>
 800c9c4:	4630      	mov	r0, r6
 800c9c6:	e79e      	b.n	800c906 <_strtol_l.constprop.0+0x16>
 800c9c8:	b107      	cbz	r7, 800c9cc <_strtol_l.constprop.0+0xdc>
 800c9ca:	4276      	negs	r6, r6
 800c9cc:	2a00      	cmp	r2, #0
 800c9ce:	d0f9      	beq.n	800c9c4 <_strtol_l.constprop.0+0xd4>
 800c9d0:	f1bc 0f00 	cmp.w	ip, #0
 800c9d4:	d000      	beq.n	800c9d8 <_strtol_l.constprop.0+0xe8>
 800c9d6:	1e69      	subs	r1, r5, #1
 800c9d8:	6011      	str	r1, [r2, #0]
 800c9da:	e7f3      	b.n	800c9c4 <_strtol_l.constprop.0+0xd4>
 800c9dc:	2430      	movs	r4, #48	; 0x30
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d1b1      	bne.n	800c946 <_strtol_l.constprop.0+0x56>
 800c9e2:	2308      	movs	r3, #8
 800c9e4:	e7af      	b.n	800c946 <_strtol_l.constprop.0+0x56>
 800c9e6:	2c30      	cmp	r4, #48	; 0x30
 800c9e8:	d0a5      	beq.n	800c936 <_strtol_l.constprop.0+0x46>
 800c9ea:	230a      	movs	r3, #10
 800c9ec:	e7ab      	b.n	800c946 <_strtol_l.constprop.0+0x56>
 800c9ee:	bf00      	nop
 800c9f0:	0800cc80 	.word	0x0800cc80

0800c9f4 <_strtol_r>:
 800c9f4:	f7ff bf7c 	b.w	800c8f0 <_strtol_l.constprop.0>

0800c9f8 <__submore>:
 800c9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9fc:	460c      	mov	r4, r1
 800c9fe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ca00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca04:	4299      	cmp	r1, r3
 800ca06:	d11d      	bne.n	800ca44 <__submore+0x4c>
 800ca08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ca0c:	f7fe f878 	bl	800ab00 <_malloc_r>
 800ca10:	b918      	cbnz	r0, 800ca1a <__submore+0x22>
 800ca12:	f04f 30ff 	mov.w	r0, #4294967295
 800ca16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca1e:	63a3      	str	r3, [r4, #56]	; 0x38
 800ca20:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ca24:	6360      	str	r0, [r4, #52]	; 0x34
 800ca26:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ca2a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ca2e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ca32:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ca36:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ca3a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ca3e:	6020      	str	r0, [r4, #0]
 800ca40:	2000      	movs	r0, #0
 800ca42:	e7e8      	b.n	800ca16 <__submore+0x1e>
 800ca44:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ca46:	0077      	lsls	r7, r6, #1
 800ca48:	463a      	mov	r2, r7
 800ca4a:	f7ff fb6f 	bl	800c12c <_realloc_r>
 800ca4e:	4605      	mov	r5, r0
 800ca50:	2800      	cmp	r0, #0
 800ca52:	d0de      	beq.n	800ca12 <__submore+0x1a>
 800ca54:	eb00 0806 	add.w	r8, r0, r6
 800ca58:	4601      	mov	r1, r0
 800ca5a:	4632      	mov	r2, r6
 800ca5c:	4640      	mov	r0, r8
 800ca5e:	f7fd ffcd 	bl	800a9fc <memcpy>
 800ca62:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ca66:	f8c4 8000 	str.w	r8, [r4]
 800ca6a:	e7e9      	b.n	800ca40 <__submore+0x48>

0800ca6c <_fstat_r>:
 800ca6c:	b538      	push	{r3, r4, r5, lr}
 800ca6e:	4d07      	ldr	r5, [pc, #28]	; (800ca8c <_fstat_r+0x20>)
 800ca70:	2300      	movs	r3, #0
 800ca72:	4604      	mov	r4, r0
 800ca74:	4608      	mov	r0, r1
 800ca76:	4611      	mov	r1, r2
 800ca78:	602b      	str	r3, [r5, #0]
 800ca7a:	f7f7 f89a 	bl	8003bb2 <_fstat>
 800ca7e:	1c43      	adds	r3, r0, #1
 800ca80:	d102      	bne.n	800ca88 <_fstat_r+0x1c>
 800ca82:	682b      	ldr	r3, [r5, #0]
 800ca84:	b103      	cbz	r3, 800ca88 <_fstat_r+0x1c>
 800ca86:	6023      	str	r3, [r4, #0]
 800ca88:	bd38      	pop	{r3, r4, r5, pc}
 800ca8a:	bf00      	nop
 800ca8c:	20000fd8 	.word	0x20000fd8

0800ca90 <_isatty_r>:
 800ca90:	b538      	push	{r3, r4, r5, lr}
 800ca92:	4d06      	ldr	r5, [pc, #24]	; (800caac <_isatty_r+0x1c>)
 800ca94:	2300      	movs	r3, #0
 800ca96:	4604      	mov	r4, r0
 800ca98:	4608      	mov	r0, r1
 800ca9a:	602b      	str	r3, [r5, #0]
 800ca9c:	f7f7 f899 	bl	8003bd2 <_isatty>
 800caa0:	1c43      	adds	r3, r0, #1
 800caa2:	d102      	bne.n	800caaa <_isatty_r+0x1a>
 800caa4:	682b      	ldr	r3, [r5, #0]
 800caa6:	b103      	cbz	r3, 800caaa <_isatty_r+0x1a>
 800caa8:	6023      	str	r3, [r4, #0]
 800caaa:	bd38      	pop	{r3, r4, r5, pc}
 800caac:	20000fd8 	.word	0x20000fd8

0800cab0 <_malloc_usable_size_r>:
 800cab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cab4:	1f18      	subs	r0, r3, #4
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	bfbc      	itt	lt
 800caba:	580b      	ldrlt	r3, [r1, r0]
 800cabc:	18c0      	addlt	r0, r0, r3
 800cabe:	4770      	bx	lr

0800cac0 <_init>:
 800cac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cac2:	bf00      	nop
 800cac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cac6:	bc08      	pop	{r3}
 800cac8:	469e      	mov	lr, r3
 800caca:	4770      	bx	lr

0800cacc <_fini>:
 800cacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cace:	bf00      	nop
 800cad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cad2:	bc08      	pop	{r3}
 800cad4:	469e      	mov	lr, r3
 800cad6:	4770      	bx	lr
