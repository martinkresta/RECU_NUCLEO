
RECU_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b294  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000324  0800b464  0800b464  0001b464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b788  0800b788  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b788  0800b788  0001b788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b790  0800b790  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b790  0800b790  0001b790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b794  0800b794  0001b794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b798  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c54  200001e8  0800b980  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e3c  0800b980  00020e3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a23a  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e7f  00000000  00000000  0003a452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001778  00000000  00000000  0003e2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015c8  00000000  00000000  0003fa50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026731  00000000  00000000  00041018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e9ac  00000000  00000000  00067749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0096  00000000  00000000  000860f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016618b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007108  00000000  00000000  001661dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b44c 	.word	0x0800b44c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800b44c 	.word	0x0800b44c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_ldivmod>:
 80002e0:	b97b      	cbnz	r3, 8000302 <__aeabi_ldivmod+0x22>
 80002e2:	b972      	cbnz	r2, 8000302 <__aeabi_ldivmod+0x22>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bfbe      	ittt	lt
 80002e8:	2000      	movlt	r0, #0
 80002ea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ee:	e006      	blt.n	80002fe <__aeabi_ldivmod+0x1e>
 80002f0:	bf08      	it	eq
 80002f2:	2800      	cmpeq	r0, #0
 80002f4:	bf1c      	itt	ne
 80002f6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002fa:	f04f 30ff 	movne.w	r0, #4294967295
 80002fe:	f000 b9bf 	b.w	8000680 <__aeabi_idiv0>
 8000302:	f1ad 0c08 	sub.w	ip, sp, #8
 8000306:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030a:	2900      	cmp	r1, #0
 800030c:	db09      	blt.n	8000322 <__aeabi_ldivmod+0x42>
 800030e:	2b00      	cmp	r3, #0
 8000310:	db1a      	blt.n	8000348 <__aeabi_ldivmod+0x68>
 8000312:	f000 f84d 	bl	80003b0 <__udivmoddi4>
 8000316:	f8dd e004 	ldr.w	lr, [sp, #4]
 800031a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031e:	b004      	add	sp, #16
 8000320:	4770      	bx	lr
 8000322:	4240      	negs	r0, r0
 8000324:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000328:	2b00      	cmp	r3, #0
 800032a:	db1b      	blt.n	8000364 <__aeabi_ldivmod+0x84>
 800032c:	f000 f840 	bl	80003b0 <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	4252      	negs	r2, r2
 8000342:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000346:	4770      	bx	lr
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	f000 f82f 	bl	80003b0 <__udivmoddi4>
 8000352:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000356:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035a:	b004      	add	sp, #16
 800035c:	4240      	negs	r0, r0
 800035e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000362:	4770      	bx	lr
 8000364:	4252      	negs	r2, r2
 8000366:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036a:	f000 f821 	bl	80003b0 <__udivmoddi4>
 800036e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000376:	b004      	add	sp, #16
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <COM_Init>:

static void SendVariable(uint16_t id);


void COM_Init(uint8_t nodeId)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
	mNodeId = nodeId;
 800068e:	4a04      	ldr	r2, [pc, #16]	; (80006a0 <COM_Init+0x1c>)
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	7013      	strb	r3, [r2, #0]
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	2000054c 	.word	0x2000054c

080006a4 <COM_GetRxMessage>:
	return ns;
}

// just wrapper to MCAN
uint8_t COM_GetRxMessage( s_CanRxMsg* msg)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	return MCAN_GetRxMessage(msg);
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f000 fabd 	bl	8000c2c <MCAN_GetRxMessage>
 80006b2:	4603      	mov	r3, r0
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <COM_Update_10ms>:

void COM_Update_10ms(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0

	// stream the variables to CAN
	int i;
	for(i = 0; i < STREAM_LIST_SIZE; i++)
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	e017      	b.n	80006f8 <COM_Update_10ms+0x3c>
	{
		mStreamList[i].timer+=10;
 80006c8:	4934      	ldr	r1, [pc, #208]	; (800079c <COM_Update_10ms+0xe0>)
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	4613      	mov	r3, r2
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	4413      	add	r3, r2
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	440b      	add	r3, r1
 80006d6:	3306      	adds	r3, #6
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	330a      	adds	r3, #10
 80006dc:	b298      	uxth	r0, r3
 80006de:	492f      	ldr	r1, [pc, #188]	; (800079c <COM_Update_10ms+0xe0>)
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	4613      	mov	r3, r2
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	4413      	add	r3, r2
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	440b      	add	r3, r1
 80006ec:	3306      	adds	r3, #6
 80006ee:	4602      	mov	r2, r0
 80006f0:	801a      	strh	r2, [r3, #0]
	for(i = 0; i < STREAM_LIST_SIZE; i++)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	3301      	adds	r3, #1
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2b45      	cmp	r3, #69	; 0x45
 80006fc:	dde4      	ble.n	80006c8 <COM_Update_10ms+0xc>
	}
	for(i = 0; i < STREAM_LIST_SIZE; i++)
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	e042      	b.n	800078a <COM_Update_10ms+0xce>
	{
		if (mStreamList[i].enable == 1 && mStreamList[i].sendPeriod != 0)
 8000704:	4925      	ldr	r1, [pc, #148]	; (800079c <COM_Update_10ms+0xe0>)
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	4613      	mov	r3, r2
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	4413      	add	r3, r2
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	440b      	add	r3, r1
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d135      	bne.n	8000784 <COM_Update_10ms+0xc8>
 8000718:	4920      	ldr	r1, [pc, #128]	; (800079c <COM_Update_10ms+0xe0>)
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	4613      	mov	r3, r2
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	4413      	add	r3, r2
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	440b      	add	r3, r1
 8000726:	3304      	adds	r3, #4
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d02a      	beq.n	8000784 <COM_Update_10ms+0xc8>
		{
			if (mStreamList[i].timer >= mStreamList[i].sendPeriod)
 800072e:	491b      	ldr	r1, [pc, #108]	; (800079c <COM_Update_10ms+0xe0>)
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	4613      	mov	r3, r2
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	4413      	add	r3, r2
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	440b      	add	r3, r1
 800073c:	3306      	adds	r3, #6
 800073e:	8819      	ldrh	r1, [r3, #0]
 8000740:	4816      	ldr	r0, [pc, #88]	; (800079c <COM_Update_10ms+0xe0>)
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	4613      	mov	r3, r2
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	4413      	add	r3, r2
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	4403      	add	r3, r0
 800074e:	3304      	adds	r3, #4
 8000750:	881b      	ldrh	r3, [r3, #0]
 8000752:	4299      	cmp	r1, r3
 8000754:	d316      	bcc.n	8000784 <COM_Update_10ms+0xc8>
			{
				SendVariable(mStreamList[i].varId);
 8000756:	4911      	ldr	r1, [pc, #68]	; (800079c <COM_Update_10ms+0xe0>)
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	4613      	mov	r3, r2
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	4413      	add	r3, r2
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	440b      	add	r3, r1
 8000764:	3302      	adds	r3, #2
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	4618      	mov	r0, r3
 800076a:	f000 f89b 	bl	80008a4 <SendVariable>
				mStreamList[i].timer = 0;
 800076e:	490b      	ldr	r1, [pc, #44]	; (800079c <COM_Update_10ms+0xe0>)
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	4613      	mov	r3, r2
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	4413      	add	r3, r2
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	440b      	add	r3, r1
 800077c:	3306      	adds	r3, #6
 800077e:	2200      	movs	r2, #0
 8000780:	801a      	strh	r2, [r3, #0]
				break;  // send just 1 value every 10ms
 8000782:	e006      	b.n	8000792 <COM_Update_10ms+0xd6>
	for(i = 0; i < STREAM_LIST_SIZE; i++)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	3301      	adds	r3, #1
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b45      	cmp	r3, #69	; 0x45
 800078e:	ddb9      	ble.n	8000704 <COM_Update_10ms+0x48>
			}
		}
	}
}
 8000790:	bf00      	nop
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000204 	.word	0x20000204

080007a0 <COM_AddStreamedVariable>:
	MCAN_SendFrame(cobid + mNodeId, data, dlc);
}


void COM_AddStreamedVariable(uint16_t varId, uint16_t period)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	460a      	mov	r2, r1
 80007aa:	80fb      	strh	r3, [r7, #6]
 80007ac:	4613      	mov	r3, r2
 80007ae:	80bb      	strh	r3, [r7, #4]
	// go thru the list to find if entry already exists
	int i;
	for(i = 0; i < STREAM_LIST_SIZE; i++)
 80007b0:	2300      	movs	r3, #0
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	e038      	b.n	8000828 <COM_AddStreamedVariable+0x88>
	{
		if(mStreamList[i].varId == varId)
 80007b6:	493a      	ldr	r1, [pc, #232]	; (80008a0 <COM_AddStreamedVariable+0x100>)
 80007b8:	68fa      	ldr	r2, [r7, #12]
 80007ba:	4613      	mov	r3, r2
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	4413      	add	r3, r2
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	440b      	add	r3, r1
 80007c4:	3302      	adds	r3, #2
 80007c6:	881b      	ldrh	r3, [r3, #0]
 80007c8:	88fa      	ldrh	r2, [r7, #6]
 80007ca:	429a      	cmp	r2, r3
 80007cc:	d129      	bne.n	8000822 <COM_AddStreamedVariable+0x82>
		{
			if(period != 0)
 80007ce:	88bb      	ldrh	r3, [r7, #4]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d013      	beq.n	80007fc <COM_AddStreamedVariable+0x5c>
			{
				mStreamList[i].sendPeriod = period;
 80007d4:	4932      	ldr	r1, [pc, #200]	; (80008a0 <COM_AddStreamedVariable+0x100>)
 80007d6:	68fa      	ldr	r2, [r7, #12]
 80007d8:	4613      	mov	r3, r2
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	4413      	add	r3, r2
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	440b      	add	r3, r1
 80007e2:	3304      	adds	r3, #4
 80007e4:	88ba      	ldrh	r2, [r7, #4]
 80007e6:	801a      	strh	r2, [r3, #0]
				mStreamList[i].enable = 1;
 80007e8:	492d      	ldr	r1, [pc, #180]	; (80008a0 <COM_AddStreamedVariable+0x100>)
 80007ea:	68fa      	ldr	r2, [r7, #12]
 80007ec:	4613      	mov	r3, r2
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	4413      	add	r3, r2
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	440b      	add	r3, r1
 80007f6:	2201      	movs	r2, #1
 80007f8:	701a      	strb	r2, [r3, #0]
				return;
 80007fa:	e04c      	b.n	8000896 <COM_AddStreamedVariable+0xf6>
			}
			else
			{
				mStreamList[i].sendPeriod = 0;
 80007fc:	4928      	ldr	r1, [pc, #160]	; (80008a0 <COM_AddStreamedVariable+0x100>)
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	4613      	mov	r3, r2
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	4413      	add	r3, r2
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	440b      	add	r3, r1
 800080a:	3304      	adds	r3, #4
 800080c:	2200      	movs	r2, #0
 800080e:	801a      	strh	r2, [r3, #0]
				mStreamList[i].enable = 0;
 8000810:	4923      	ldr	r1, [pc, #140]	; (80008a0 <COM_AddStreamedVariable+0x100>)
 8000812:	68fa      	ldr	r2, [r7, #12]
 8000814:	4613      	mov	r3, r2
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	4413      	add	r3, r2
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	440b      	add	r3, r1
 800081e:	2200      	movs	r2, #0
 8000820:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < STREAM_LIST_SIZE; i++)
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	3301      	adds	r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	2b45      	cmp	r3, #69	; 0x45
 800082c:	ddc3      	ble.n	80007b6 <COM_AddStreamedVariable+0x16>
			}
		}
	}

	// if not add variable to the list
	for(i = 0; i < STREAM_LIST_SIZE; i++)
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	e02d      	b.n	8000890 <COM_AddStreamedVariable+0xf0>
	{
		if(mStreamList[i].enable == 0)
 8000834:	491a      	ldr	r1, [pc, #104]	; (80008a0 <COM_AddStreamedVariable+0x100>)
 8000836:	68fa      	ldr	r2, [r7, #12]
 8000838:	4613      	mov	r3, r2
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	4413      	add	r3, r2
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	440b      	add	r3, r1
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d120      	bne.n	800088a <COM_AddStreamedVariable+0xea>
		{
			if(period != 0)
 8000848:	88bb      	ldrh	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d01d      	beq.n	800088a <COM_AddStreamedVariable+0xea>
			{
				mStreamList[i].varId = varId;
 800084e:	4914      	ldr	r1, [pc, #80]	; (80008a0 <COM_AddStreamedVariable+0x100>)
 8000850:	68fa      	ldr	r2, [r7, #12]
 8000852:	4613      	mov	r3, r2
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	4413      	add	r3, r2
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	440b      	add	r3, r1
 800085c:	3302      	adds	r3, #2
 800085e:	88fa      	ldrh	r2, [r7, #6]
 8000860:	801a      	strh	r2, [r3, #0]
				mStreamList[i].sendPeriod = period;
 8000862:	490f      	ldr	r1, [pc, #60]	; (80008a0 <COM_AddStreamedVariable+0x100>)
 8000864:	68fa      	ldr	r2, [r7, #12]
 8000866:	4613      	mov	r3, r2
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	4413      	add	r3, r2
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	440b      	add	r3, r1
 8000870:	3304      	adds	r3, #4
 8000872:	88ba      	ldrh	r2, [r7, #4]
 8000874:	801a      	strh	r2, [r3, #0]
				mStreamList[i].enable = 1;
 8000876:	490a      	ldr	r1, [pc, #40]	; (80008a0 <COM_AddStreamedVariable+0x100>)
 8000878:	68fa      	ldr	r2, [r7, #12]
 800087a:	4613      	mov	r3, r2
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	4413      	add	r3, r2
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	440b      	add	r3, r1
 8000884:	2201      	movs	r2, #1
 8000886:	701a      	strb	r2, [r3, #0]
				return;
 8000888:	e005      	b.n	8000896 <COM_AddStreamedVariable+0xf6>
	for(i = 0; i < STREAM_LIST_SIZE; i++)
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	3301      	adds	r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	2b45      	cmp	r3, #69	; 0x45
 8000894:	ddce      	ble.n	8000834 <COM_AddStreamedVariable+0x94>
			}
		}
	}
}
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	20000204 	.word	0x20000204

080008a4 <SendVariable>:

/*Private methods*/
static void SendVariable(uint16_t id)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	80fb      	strh	r3, [r7, #6]
	uint16_t invalid = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	827b      	strh	r3, [r7, #18]
	uint16_t validflag = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	82fb      	strh	r3, [r7, #22]
	int16_t tmp = VAR_GetVariable(id, &invalid);
 80008b6:	f107 0212 	add.w	r2, r7, #18
 80008ba:	88fb      	ldrh	r3, [r7, #6]
 80008bc:	4611      	mov	r1, r2
 80008be:	4618      	mov	r0, r3
 80008c0:	f001 fca0 	bl	8002204 <VAR_GetVariable>
 80008c4:	4603      	mov	r3, r0
 80008c6:	82bb      	strh	r3, [r7, #20]
	validflag = (invalid == INVALID_FLAG ? 0 : 1);
 80008c8:	8a7b      	ldrh	r3, [r7, #18]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	bf14      	ite	ne
 80008ce:	2301      	movne	r3, #1
 80008d0:	2300      	moveq	r3, #0
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	82fb      	strh	r3, [r7, #22]
	uint8_t data[8];
	data[0] = id >> 8;
 80008d6:	88fb      	ldrh	r3, [r7, #6]
 80008d8:	0a1b      	lsrs	r3, r3, #8
 80008da:	b29b      	uxth	r3, r3
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	723b      	strb	r3, [r7, #8]
	data[1] = id  & 0xFF;
 80008e0:	88fb      	ldrh	r3, [r7, #6]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	727b      	strb	r3, [r7, #9]
	data[2] = tmp >> 8;
 80008e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80008ea:	121b      	asrs	r3, r3, #8
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	72bb      	strb	r3, [r7, #10]
	data[3] = tmp & 0xFF;
 80008f2:	8abb      	ldrh	r3, [r7, #20]
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	72fb      	strb	r3, [r7, #11]
	data[4] = validflag >> 8;
 80008f8:	8afb      	ldrh	r3, [r7, #22]
 80008fa:	0a1b      	lsrs	r3, r3, #8
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	733b      	strb	r3, [r7, #12]
	data[5] = validflag & 0xFF;
 8000902:	8afb      	ldrh	r3, [r7, #22]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	737b      	strb	r3, [r7, #13]
	data[6] = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	73bb      	strb	r3, [r7, #14]
	data[7] = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	73fb      	strb	r3, [r7, #15]
	MCAN_SendFrame(CMD_VAR_VALUE + mNodeId, data, 8);
 8000910:	4b07      	ldr	r3, [pc, #28]	; (8000930 <SendVariable+0x8c>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	b29b      	uxth	r3, r3
 8000916:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800091a:	b29b      	uxth	r3, r3
 800091c:	f107 0108 	add.w	r1, r7, #8
 8000920:	2208      	movs	r2, #8
 8000922:	4618      	mov	r0, r3
 8000924:	f000 f998 	bl	8000c58 <MCAN_SendFrame>
}
 8000928:	bf00      	nop
 800092a:	3718      	adds	r7, #24
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	2000054c 	.word	0x2000054c

08000934 <MCAN_Init>:



// initialization of CAN node, and buffers
void MCAN_Init(CAN_HandleTypeDef	* can, uint8_t id)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b088      	sub	sp, #32
 8000938:	af04      	add	r7, sp, #16
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	460b      	mov	r3, r1
 800093e:	70fb      	strb	r3, [r7, #3]
	uint8_t bank_offset = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	73fb      	strb	r3, [r7, #15]
	uint8_t i;

	mMcan.Rx0Buf = CB_Create(sizeof(s_CanRxMsg),RX_NMT_BUFF_SIZE);
 8000944:	21c8      	movs	r1, #200	; 0xc8
 8000946:	2024      	movs	r0, #36	; 0x24
 8000948:	f001 fcb0 	bl	80022ac <CB_Create>
 800094c:	4603      	mov	r3, r0
 800094e:	4a4d      	ldr	r2, [pc, #308]	; (8000a84 <MCAN_Init+0x150>)
 8000950:	60d3      	str	r3, [r2, #12]
	mMcan.Rx1Buf = CB_Create(sizeof(s_CanRxMsg),RX_BUFF_SIZE);
 8000952:	2150      	movs	r1, #80	; 0x50
 8000954:	2024      	movs	r0, #36	; 0x24
 8000956:	f001 fca9 	bl	80022ac <CB_Create>
 800095a:	4603      	mov	r3, r0
 800095c:	4a49      	ldr	r2, [pc, #292]	; (8000a84 <MCAN_Init+0x150>)
 800095e:	6113      	str	r3, [r2, #16]
	mMcan.TxBuf = CB_Create(sizeof(s_CanTxMsg),TX_BUFF_SIZE);
 8000960:	2164      	movs	r1, #100	; 0x64
 8000962:	2020      	movs	r0, #32
 8000964:	f001 fca2 	bl	80022ac <CB_Create>
 8000968:	4603      	mov	r3, r0
 800096a:	4a46      	ldr	r2, [pc, #280]	; (8000a84 <MCAN_Init+0x150>)
 800096c:	6153      	str	r3, [r2, #20]
	if (mMcan.Rx0Buf == NULL || mMcan.Rx1Buf == NULL ||mMcan.TxBuf == NULL)
 800096e:	4b45      	ldr	r3, [pc, #276]	; (8000a84 <MCAN_Init+0x150>)
 8000970:	68db      	ldr	r3, [r3, #12]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d002      	beq.n	800097c <MCAN_Init+0x48>
 8000976:	4b43      	ldr	r3, [pc, #268]	; (8000a84 <MCAN_Init+0x150>)
 8000978:	691b      	ldr	r3, [r3, #16]
 800097a:	2b00      	cmp	r3, #0
	{
		// TBD
	}

	mMcan.CanHw = can;
 800097c:	4a41      	ldr	r2, [pc, #260]	; (8000a84 <MCAN_Init+0x150>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6093      	str	r3, [r2, #8]
	// for devices with two cans check which HW is used and adjust filter banks offset
	#ifdef CAN2
	if(mMcan.CanHw->Instance == CAN2)
 8000982:	4b40      	ldr	r3, [pc, #256]	; (8000a84 <MCAN_Init+0x150>)
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a3f      	ldr	r2, [pc, #252]	; (8000a88 <MCAN_Init+0x154>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d101      	bne.n	8000992 <MCAN_Init+0x5e>
	{
		bank_offset = 15;
 800098e:	230f      	movs	r3, #15
 8000990:	73fb      	strb	r3, [r7, #15]
	}
	#endif


	mMcan.Node.nodeId = id;
 8000992:	4a3c      	ldr	r2, [pc, #240]	; (8000a84 <MCAN_Init+0x150>)
 8000994:	78fb      	ldrb	r3, [r7, #3]
 8000996:	7013      	strb	r3, [r2, #0]
	mMcan.Node.timeout = CO_DEFAULT_HB_TO/2;
 8000998:	4b3a      	ldr	r3, [pc, #232]	; (8000a84 <MCAN_Init+0x150>)
 800099a:	f241 3288 	movw	r2, #5000	; 0x1388
 800099e:	809a      	strh	r2, [r3, #4]
	mMcan.Node.timeout_cnt = 0;
 80009a0:	4b38      	ldr	r3, [pc, #224]	; (8000a84 <MCAN_Init+0x150>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	805a      	strh	r2, [r3, #2]

	mMcan.HbMsg.header.DLC = 1;
 80009a6:	4b37      	ldr	r3, [pc, #220]	; (8000a84 <MCAN_Init+0x150>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	629a      	str	r2, [r3, #40]	; 0x28
	mMcan.HbMsg.header.StdId = HB + mMcan.Node.nodeId;
 80009ac:	4b35      	ldr	r3, [pc, #212]	; (8000a84 <MCAN_Init+0x150>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 80009b4:	461a      	mov	r2, r3
 80009b6:	4b33      	ldr	r3, [pc, #204]	; (8000a84 <MCAN_Init+0x150>)
 80009b8:	619a      	str	r2, [r3, #24]
	mMcan.HbMsg.header.ExtId = 0x00;
 80009ba:	4b32      	ldr	r3, [pc, #200]	; (8000a84 <MCAN_Init+0x150>)
 80009bc:	2200      	movs	r2, #0
 80009be:	61da      	str	r2, [r3, #28]
	mMcan.HbMsg.header.RTR = CAN_RTR_DATA;
 80009c0:	4b30      	ldr	r3, [pc, #192]	; (8000a84 <MCAN_Init+0x150>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	; 0x24
	mMcan.HbMsg.header.IDE = CAN_ID_STD;
 80009c6:	4b2f      	ldr	r3, [pc, #188]	; (8000a84 <MCAN_Init+0x150>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	621a      	str	r2, [r3, #32]

	// init network
	for (i = 0; i < MAX_NUM_OF_NODES; i++)
 80009cc:	2300      	movs	r3, #0
 80009ce:	73bb      	strb	r3, [r7, #14]
 80009d0:	e014      	b.n	80009fc <MCAN_Init+0xc8>
	{
		mNodes[i].timeout = CO_DEFAULT_HB_TO;
 80009d2:	7bbb      	ldrb	r3, [r7, #14]
 80009d4:	4a2d      	ldr	r2, [pc, #180]	; (8000a8c <MCAN_Init+0x158>)
 80009d6:	00db      	lsls	r3, r3, #3
 80009d8:	4413      	add	r3, r2
 80009da:	f242 7210 	movw	r2, #10000	; 0x2710
 80009de:	809a      	strh	r2, [r3, #4]
		mNodes[i].canStatus = eNS_NMT_UNKNOWN;
 80009e0:	7bbb      	ldrb	r3, [r7, #14]
 80009e2:	4a2a      	ldr	r2, [pc, #168]	; (8000a8c <MCAN_Init+0x158>)
 80009e4:	00db      	lsls	r3, r3, #3
 80009e6:	4413      	add	r3, r2
 80009e8:	22ff      	movs	r2, #255	; 0xff
 80009ea:	719a      	strb	r2, [r3, #6]
		mNodes[i].nodeId = i;
 80009ec:	7bbb      	ldrb	r3, [r7, #14]
 80009ee:	4927      	ldr	r1, [pc, #156]	; (8000a8c <MCAN_Init+0x158>)
 80009f0:	7bba      	ldrb	r2, [r7, #14]
 80009f2:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
	for (i = 0; i < MAX_NUM_OF_NODES; i++)
 80009f6:	7bbb      	ldrb	r3, [r7, #14]
 80009f8:	3301      	adds	r3, #1
 80009fa:	73bb      	strb	r3, [r7, #14]
 80009fc:	7bbb      	ldrb	r3, [r7, #14]
 80009fe:	2b07      	cmp	r3, #7
 8000a00:	d9e7      	bls.n	80009d2 <MCAN_Init+0x9e>
	}
	mNodes[mMcan.Node.nodeId].canStatus = mMcan.Node.canStatus;
 8000a02:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <MCAN_Init+0x150>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	4618      	mov	r0, r3
 8000a08:	4b1e      	ldr	r3, [pc, #120]	; (8000a84 <MCAN_Init+0x150>)
 8000a0a:	7999      	ldrb	r1, [r3, #6]
 8000a0c:	4a1f      	ldr	r2, [pc, #124]	; (8000a8c <MCAN_Init+0x158>)
 8000a0e:	00c3      	lsls	r3, r0, #3
 8000a10:	4413      	add	r3, r2
 8000a12:	460a      	mov	r2, r1
 8000a14:	719a      	strb	r2, [r3, #6]



	// set the filter of FIFO0 for hearbeats (0x700 - 0x70F)
	Set_Filter_Id_Mask(mMcan.CanHw, CAN_FILTER_FIFO0, 1 + bank_offset , HB, HB+ID_RANGE, 0,0); // HeartBeats from all devices => FMI = 0/4
 8000a16:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <MCAN_Init+0x150>)
 8000a18:	6898      	ldr	r0, [r3, #8]
 8000a1a:	7bfb      	ldrb	r3, [r7, #15]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	2300      	movs	r3, #0
 8000a22:	9302      	str	r3, [sp, #8]
 8000a24:	2300      	movs	r3, #0
 8000a26:	9301      	str	r3, [sp, #4]
 8000a28:	f240 730f 	movw	r3, #1807	; 0x70f
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000a32:	2100      	movs	r1, #0
 8000a34:	f000 f992 	bl	8000d5c <Set_Filter_Id_Mask>

	// set the filter of FIFO1 for all other messages (0x000 - 0x6FF)
	Set_Filter_Id_Mask(mMcan.CanHw, CAN_FILTER_FIFO1, 2 + bank_offset , 0x000, 0x6FF, 0,0);
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <MCAN_Init+0x150>)
 8000a3a:	6898      	ldr	r0, [r3, #8]
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	3302      	adds	r3, #2
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	2300      	movs	r3, #0
 8000a44:	9302      	str	r3, [sp, #8]
 8000a46:	2300      	movs	r3, #0
 8000a48:	9301      	str	r3, [sp, #4]
 8000a4a:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	2300      	movs	r3, #0
 8000a52:	2101      	movs	r1, #1
 8000a54:	f000 f982 	bl	8000d5c <Set_Filter_Id_Mask>


	HAL_CAN_ActivateNotification(mMcan.CanHw, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING | CAN_IT_LAST_ERROR_CODE| CAN_IT_ERROR);
 8000a58:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <MCAN_Init+0x150>)
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	f648 0112 	movw	r1, #34834	; 0x8812
 8000a60:	4618      	mov	r0, r3
 8000a62:	f003 fa58 	bl	8003f16 <HAL_CAN_ActivateNotification>

	mMcan.CanHw->Instance->MCR &= ~0x00010000;	// enable CAN in debug mode (clear DBF bit)
 8000a66:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <MCAN_Init+0x150>)
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <MCAN_Init+0x150>)
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000a78:	601a      	str	r2, [r3, #0]
}
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000550 	.word	0x20000550
 8000a88:	40006800 	.word	0x40006800
 8000a8c:	2000058c 	.word	0x2000058c

08000a90 <MCAN_Start>:



// Start CANOPEN protocols
void MCAN_Start(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
	HAL_CAN_Start(mMcan.CanHw);  // start can
 8000a94:	4b09      	ldr	r3, [pc, #36]	; (8000abc <MCAN_Start+0x2c>)
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f003 f80b 	bl	8003ab4 <HAL_CAN_Start>
	mMcan.Node.canStatus = eNS_NMT_RUN;
 8000a9e:	4b07      	ldr	r3, [pc, #28]	; (8000abc <MCAN_Start+0x2c>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	719a      	strb	r2, [r3, #6]
	mNodes[mMcan.Node.nodeId].canStatus = mMcan.Node.canStatus;
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <MCAN_Start+0x2c>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	4b04      	ldr	r3, [pc, #16]	; (8000abc <MCAN_Start+0x2c>)
 8000aac:	7999      	ldrb	r1, [r3, #6]
 8000aae:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <MCAN_Start+0x30>)
 8000ab0:	00c3      	lsls	r3, r0, #3
 8000ab2:	4413      	add	r3, r2
 8000ab4:	460a      	mov	r2, r1
 8000ab6:	719a      	strb	r2, [r3, #6]
}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000550 	.word	0x20000550
 8000ac0:	2000058c 	.word	0x2000058c

08000ac4 <MCAN_Update_10ms>:
	return mNodes;
}

// Periodic update function for synchronous CAN handling
void MCAN_Update_10ms(void)
{
 8000ac4:	b5b0      	push	{r4, r5, r7, lr}
 8000ac6:	b098      	sub	sp, #96	; 0x60
 8000ac8:	af04      	add	r7, sp, #16
	uint32_t	TxMailbox;


	// Check messages from FIFO 0 (NMT, HB)

	while(0 == CB_Get(mMcan.Rx0Buf,(uint8_t*)&msg))  // process all messages in buffer
 8000aca:	e01e      	b.n	8000b0a <MCAN_Update_10ms+0x46>
	{
		if (msg.header.StdId >= HB && msg.header.StdId <= HB + ID_RANGE) // received HB
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8000ad2:	d31a      	bcc.n	8000b0a <MCAN_Update_10ms+0x46>
 8000ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad6:	f5b3 6fe2 	cmp.w	r3, #1808	; 0x710
 8000ada:	d216      	bcs.n	8000b0a <MCAN_Update_10ms+0x46>
		{
			uint8_t nodeId = msg.header.StdId - HB;
 8000adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ade:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			if (nodeId < MAX_NUM_OF_NODES)  // valid heartbeat received
 8000ae2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000ae6:	2b07      	cmp	r3, #7
 8000ae8:	d80f      	bhi.n	8000b0a <MCAN_Update_10ms+0x46>
			{
				mNodes[nodeId].canStatus = (e_NodeStatus)msg.data[0];
 8000aea:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000aee:	f897 1040 	ldrb.w	r1, [r7, #64]	; 0x40
 8000af2:	4a38      	ldr	r2, [pc, #224]	; (8000bd4 <MCAN_Update_10ms+0x110>)
 8000af4:	00db      	lsls	r3, r3, #3
 8000af6:	4413      	add	r3, r2
 8000af8:	460a      	mov	r2, r1
 8000afa:	719a      	strb	r2, [r3, #6]
				mNodes[nodeId].timeout_cnt = 0;
 8000afc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000b00:	4a34      	ldr	r2, [pc, #208]	; (8000bd4 <MCAN_Update_10ms+0x110>)
 8000b02:	00db      	lsls	r3, r3, #3
 8000b04:	4413      	add	r3, r2
 8000b06:	2200      	movs	r2, #0
 8000b08:	805a      	strh	r2, [r3, #2]
	while(0 == CB_Get(mMcan.Rx0Buf,(uint8_t*)&msg))  // process all messages in buffer
 8000b0a:	4b33      	ldr	r3, [pc, #204]	; (8000bd8 <MCAN_Update_10ms+0x114>)
 8000b0c:	68db      	ldr	r3, [r3, #12]
 8000b0e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000b12:	4611      	mov	r1, r2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f001 fc6b 	bl	80023f0 <CB_Get>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d0d5      	beq.n	8000acc <MCAN_Update_10ms+0x8>
			}
		}
	}

	// Check timeout of all nodes
	for(i = 0; i < MAX_NUM_OF_NODES; i++)
 8000b20:	2300      	movs	r3, #0
 8000b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b24:	e02e      	b.n	8000b84 <MCAN_Update_10ms+0xc0>
	{
		mNodes[i].timeout_cnt += 10;  // 10ms period of execution of this fcn
 8000b26:	4a2b      	ldr	r2, [pc, #172]	; (8000bd4 <MCAN_Update_10ms+0x110>)
 8000b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b2a:	00db      	lsls	r3, r3, #3
 8000b2c:	4413      	add	r3, r2
 8000b2e:	885b      	ldrh	r3, [r3, #2]
 8000b30:	330a      	adds	r3, #10
 8000b32:	b299      	uxth	r1, r3
 8000b34:	4a27      	ldr	r2, [pc, #156]	; (8000bd4 <MCAN_Update_10ms+0x110>)
 8000b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b38:	00db      	lsls	r3, r3, #3
 8000b3a:	4413      	add	r3, r2
 8000b3c:	460a      	mov	r2, r1
 8000b3e:	805a      	strh	r2, [r3, #2]
		if (mNodes[i].timeout_cnt > mNodes[i].timeout &&  // HB period elapsed
 8000b40:	4a24      	ldr	r2, [pc, #144]	; (8000bd4 <MCAN_Update_10ms+0x110>)
 8000b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	4413      	add	r3, r2
 8000b48:	885a      	ldrh	r2, [r3, #2]
 8000b4a:	4922      	ldr	r1, [pc, #136]	; (8000bd4 <MCAN_Update_10ms+0x110>)
 8000b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b4e:	00db      	lsls	r3, r3, #3
 8000b50:	440b      	add	r3, r1
 8000b52:	889b      	ldrh	r3, [r3, #4]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d912      	bls.n	8000b7e <MCAN_Update_10ms+0xba>
				mNodes[i].canStatus != eNS_NMT_UNKNOWN)
 8000b58:	4a1e      	ldr	r2, [pc, #120]	; (8000bd4 <MCAN_Update_10ms+0x110>)
 8000b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	4413      	add	r3, r2
 8000b60:	799b      	ldrb	r3, [r3, #6]
		if (mNodes[i].timeout_cnt > mNodes[i].timeout &&  // HB period elapsed
 8000b62:	2bff      	cmp	r3, #255	; 0xff
 8000b64:	d00b      	beq.n	8000b7e <MCAN_Update_10ms+0xba>
		{
			mNodes[i].timeout_cnt = 0;
 8000b66:	4a1b      	ldr	r2, [pc, #108]	; (8000bd4 <MCAN_Update_10ms+0x110>)
 8000b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b6a:	00db      	lsls	r3, r3, #3
 8000b6c:	4413      	add	r3, r2
 8000b6e:	2200      	movs	r2, #0
 8000b70:	805a      	strh	r2, [r3, #2]
			mNodes[i].canStatus = eNS_NMT_UNKNOWN;
 8000b72:	4a18      	ldr	r2, [pc, #96]	; (8000bd4 <MCAN_Update_10ms+0x110>)
 8000b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	4413      	add	r3, r2
 8000b7a:	22ff      	movs	r2, #255	; 0xff
 8000b7c:	719a      	strb	r2, [r3, #6]
	for(i = 0; i < MAX_NUM_OF_NODES; i++)
 8000b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b80:	3301      	adds	r3, #1
 8000b82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b86:	2b07      	cmp	r3, #7
 8000b88:	ddcd      	ble.n	8000b26 <MCAN_Update_10ms+0x62>
		}
	}

	// Send heartbeat if it's time
	mMcan.Node.timeout_cnt += 10;
 8000b8a:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <MCAN_Update_10ms+0x114>)
 8000b8c:	885b      	ldrh	r3, [r3, #2]
 8000b8e:	330a      	adds	r3, #10
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MCAN_Update_10ms+0x114>)
 8000b94:	805a      	strh	r2, [r3, #2]
	if (mMcan.Node.timeout_cnt >= mMcan.Node.timeout)
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <MCAN_Update_10ms+0x114>)
 8000b98:	885a      	ldrh	r2, [r3, #2]
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <MCAN_Update_10ms+0x114>)
 8000b9c:	889b      	ldrh	r3, [r3, #4]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d313      	bcc.n	8000bca <MCAN_Update_10ms+0x106>
	{
		mMcan.Node.timeout_cnt = 0;
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <MCAN_Update_10ms+0x114>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	805a      	strh	r2, [r3, #2]
		mMcan.HbMsg.data[0] = mMcan.Node.canStatus;
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <MCAN_Update_10ms+0x114>)
 8000baa:	799a      	ldrb	r2, [r3, #6]
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <MCAN_Update_10ms+0x114>)
 8000bae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		Send(mMcan.HbMsg);
 8000bb2:	4d09      	ldr	r5, [pc, #36]	; (8000bd8 <MCAN_Update_10ms+0x114>)
 8000bb4:	466c      	mov	r4, sp
 8000bb6:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8000bba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000bc0:	f105 0318 	add.w	r3, r5, #24
 8000bc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bc6:	f000 f871 	bl	8000cac <Send>
	}

}
 8000bca:	bf00      	nop
 8000bcc:	3750      	adds	r7, #80	; 0x50
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	2000058c 	.word	0x2000058c
 8000bd8:	20000550 	.word	0x20000550

08000bdc <MCAN_Transmit>:


// function to be called periodically at a rate of transmitting can messages. (for example every 5 ms)
// One CAN message is is sent if TX buffer is not empty
void MCAN_Transmit(void)
{
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	b08b      	sub	sp, #44	; 0x2c
 8000be0:	af00      	add	r7, sp, #0
	s_CanTxMsg TxMsg;
	s_CanNode* tmp;
	uint32_t	TxMailbox;

	if  (0 == CB_Probe(mMcan.TxBuf,(uint8_t*)&TxMsg))  // fetch the message from the buffer
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MCAN_Transmit+0x4c>)
 8000be4:	695b      	ldr	r3, [r3, #20]
 8000be6:	f107 0208 	add.w	r2, r7, #8
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f001 fba6 	bl	800233e <CB_Probe>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d113      	bne.n	8000c20 <MCAN_Transmit+0x44>
	{
		if (HAL_OK == HAL_CAN_AddTxMessage(mMcan.CanHw, &TxMsg.header, TxMsg.data, &TxMailbox))  // transmit the message
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <MCAN_Transmit+0x4c>)
 8000bfa:	6898      	ldr	r0, [r3, #8]
 8000bfc:	1d3c      	adds	r4, r7, #4
 8000bfe:	f107 0308 	add.w	r3, r7, #8
 8000c02:	f103 0218 	add.w	r2, r3, #24
 8000c06:	f107 0108 	add.w	r1, r7, #8
 8000c0a:	4623      	mov	r3, r4
 8000c0c:	f002 ff96 	bl	8003b3c <HAL_CAN_AddTxMessage>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d104      	bne.n	8000c20 <MCAN_Transmit+0x44>
		{
			CB_Remove(mMcan.TxBuf);  // remove the message from the buffer only if transmission was succesfull
 8000c16:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <MCAN_Transmit+0x4c>)
 8000c18:	695b      	ldr	r3, [r3, #20]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f001 fbbc 	bl	8002398 <CB_Remove>
		}
	}
}
 8000c20:	bf00      	nop
 8000c22:	372c      	adds	r7, #44	; 0x2c
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd90      	pop	{r4, r7, pc}
 8000c28:	20000550 	.word	0x20000550

08000c2c <MCAN_GetRxMessage>:

// Gets a message from receive buffer to be processed by application
// returns 1 if message is available, otherwise return 0
uint8_t MCAN_GetRxMessage( s_CanRxMsg* msg)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	if (0 == CB_Get(mMcan.Rx1Buf,(uint8_t*)msg))
 8000c34:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <MCAN_GetRxMessage+0x28>)
 8000c36:	691b      	ldr	r3, [r3, #16]
 8000c38:	6879      	ldr	r1, [r7, #4]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f001 fbd8 	bl	80023f0 <CB_Get>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d101      	bne.n	8000c4a <MCAN_GetRxMessage+0x1e>
	{
		return 1;
 8000c46:	2301      	movs	r3, #1
 8000c48:	e000      	b.n	8000c4c <MCAN_GetRxMessage+0x20>
	}
	return 0;
 8000c4a:	2300      	movs	r3, #0
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000550 	.word	0x20000550

08000c58 <MCAN_SendFrame>:
}


// Sends general CAN data message
uint8_t MCAN_SendFrame(uint16_t cobid, uint8_t* data, uint8_t dlc)
{
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b08f      	sub	sp, #60	; 0x3c
 8000c5c:	af04      	add	r7, sp, #16
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	80fb      	strh	r3, [r7, #6]
 8000c64:	4613      	mov	r3, r2
 8000c66:	717b      	strb	r3, [r7, #5]
	s_CanTxMsg msg;
	msg.header.DLC = dlc;
 8000c68:	797b      	ldrb	r3, [r7, #5]
 8000c6a:	61bb      	str	r3, [r7, #24]
	msg.header.StdId = cobid;
 8000c6c:	88fb      	ldrh	r3, [r7, #6]
 8000c6e:	60bb      	str	r3, [r7, #8]
	msg.header.ExtId = 0x00;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
	msg.header.RTR = CAN_RTR_DATA;
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
	msg.header.IDE = CAN_ID_STD;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	613b      	str	r3, [r7, #16]

	memcpy(&msg.data[0], data, dlc);
 8000c7c:	797a      	ldrb	r2, [r7, #5]
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	3318      	adds	r3, #24
 8000c84:	6839      	ldr	r1, [r7, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f008 fb7e 	bl	8009388 <memcpy>
	return Send(msg);
 8000c8c:	466c      	mov	r4, sp
 8000c8e:	f107 0318 	add.w	r3, r7, #24
 8000c92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000c98:	f107 0308 	add.w	r3, r7, #8
 8000c9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c9e:	f000 f805 	bl	8000cac <Send>
 8000ca2:	4603      	mov	r3, r0
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	372c      	adds	r7, #44	; 0x2c
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd90      	pop	{r4, r7, pc}

08000cac <Send>:

/*************** Private Fcns **************/

// CAN transmit
static uint8_t Send(s_CanTxMsg msg)
{
 8000cac:	b084      	sub	sp, #16
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	f107 0c08 	add.w	ip, r7, #8
 8000cb6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// instert to Tx buffer
	CB_Put(mMcan.TxBuf,(uint8_t*) &msg);
 8000cba:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <Send+0x2c>)
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	f107 0108 	add.w	r1, r7, #8
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f001 fbd1 	bl	800246a <CB_Put>
}
 8000cc8:	bf00      	nop
 8000cca:	4618      	mov	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000550 	.word	0x20000550

08000cdc <HAL_CAN_RxFifo0MsgPendingCallback>:


// interrupt handlers - callbacks
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
 {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08c      	sub	sp, #48	; 0x30
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	s_CanRxMsg tmp;
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &tmp.header, tmp.data);
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	331c      	adds	r3, #28
 8000cea:	f107 020c 	add.w	r2, r7, #12
 8000cee:	2100      	movs	r1, #0
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f002 fffe 	bl	8003cf2 <HAL_CAN_GetRxMessage>
	if (mMcan.CanHw == hcan)
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d107      	bne.n	8000d10 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
	{
		CB_Put(mMcan.Rx0Buf,(uint8_t*) &tmp);
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	f107 020c 	add.w	r2, r7, #12
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f001 fbad 	bl	800246a <CB_Put>
		//UI_LED_B_SetMode(eUI_BLINK_ONCE);  // blue blink
	}

}
 8000d10:	bf00      	nop
 8000d12:	3730      	adds	r7, #48	; 0x30
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000550 	.word	0x20000550

08000d1c <HAL_CAN_RxFifo1MsgPendingCallback>:


void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08c      	sub	sp, #48	; 0x30
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	s_CanRxMsg tmp;
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &tmp.header, tmp.data);
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	331c      	adds	r3, #28
 8000d2a:	f107 020c 	add.w	r2, r7, #12
 8000d2e:	2101      	movs	r1, #1
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f002 ffde 	bl	8003cf2 <HAL_CAN_GetRxMessage>
	if (mMcan.CanHw == hcan)
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d107      	bne.n	8000d50 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>
	{
		CB_Put(mMcan.Rx1Buf,(uint8_t*) &tmp);
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 8000d42:	691b      	ldr	r3, [r3, #16]
 8000d44:	f107 020c 	add.w	r2, r7, #12
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f001 fb8d 	bl	800246a <CB_Put>
		//UI_LED_B_SetMode(eUI_BLINK_ONCE);  // blue blink
	}

}
 8000d50:	bf00      	nop
 8000d52:	3730      	adds	r7, #48	; 0x30
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000550 	.word	0x20000550

08000d5c <Set_Filter_Id_Mask>:
  Input		 		: -
  Output	  	: -
  Description : -
************************************************************************/
void Set_Filter_Id_Mask (CAN_HandleTypeDef *hcan, uint8_t fifo,  uint8_t bank, uint16_t id_1_from, uint16_t id_1_to, uint16_t id_2_from, uint16_t id_2_to)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08c      	sub	sp, #48	; 0x30
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	4608      	mov	r0, r1
 8000d66:	4611      	mov	r1, r2
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	70fb      	strb	r3, [r7, #3]
 8000d6e:	460b      	mov	r3, r1
 8000d70:	70bb      	strb	r3, [r7, #2]
 8000d72:	4613      	mov	r3, r2
 8000d74:	803b      	strh	r3, [r7, #0]
	CAN_FilterTypeDef			 filterInitStructure;

	filterInitStructure.SlaveStartFilterBank  = 14;
 8000d76:	230e      	movs	r3, #14
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c


	filterInitStructure.FilterBank									= bank;
 8000d7a:	78bb      	ldrb	r3, [r7, #2]
 8000d7c:	61fb      	str	r3, [r7, #28]


	filterInitStructure.FilterMode									=	CAN_FILTERMODE_IDMASK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	623b      	str	r3, [r7, #32]
	filterInitStructure.FilterScale									=	CAN_FILTERSCALE_16BIT;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
	filterInitStructure.FilterFIFOAssignment				=	fifo;
 8000d86:	78fb      	ldrb	r3, [r7, #3]
 8000d88:	61bb      	str	r3, [r7, #24]

	filterInitStructure.FilterIdHigh								=	id_2_from << 5;
 8000d8a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000d8c:	015b      	lsls	r3, r3, #5
 8000d8e:	60bb      	str	r3, [r7, #8]
	filterInitStructure.FilterIdLow 								=	id_1_from << 5;
 8000d90:	883b      	ldrh	r3, [r7, #0]
 8000d92:	015b      	lsls	r3, r3, #5
 8000d94:	60fb      	str	r3, [r7, #12]
	filterInitStructure.FilterMaskIdHigh						= Filter_Calc_Mask_Code(id_2_from,id_2_to);
 8000d96:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000d9a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000d9c:	4611      	mov	r1, r2
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 f816 	bl	8000dd0 <Filter_Calc_Mask_Code>
 8000da4:	4603      	mov	r3, r0
 8000da6:	613b      	str	r3, [r7, #16]
	filterInitStructure.FilterMaskIdLow 						= Filter_Calc_Mask_Code(id_1_from,id_1_to);
 8000da8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000daa:	883b      	ldrh	r3, [r7, #0]
 8000dac:	4611      	mov	r1, r2
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 f80e 	bl	8000dd0 <Filter_Calc_Mask_Code>
 8000db4:	4603      	mov	r3, r0
 8000db6:	617b      	str	r3, [r7, #20]

	filterInitStructure.FilterActivation						=	ENABLE;
 8000db8:	2301      	movs	r3, #1
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28

	HAL_CAN_ConfigFilter(hcan,&filterInitStructure);
 8000dbc:	f107 0308 	add.w	r3, r7, #8
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f002 fd96 	bl	80038f4 <HAL_CAN_ConfigFilter>
}
 8000dc8:	bf00      	nop
 8000dca:	3730      	adds	r7, #48	; 0x30
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <Filter_Calc_Mask_Code>:
  Input		 		: -
  Output	  	: -
  Description : -
************************************************************************/
uint16_t Filter_Calc_Mask_Code (uint16_t from,uint16_t to)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	460a      	mov	r2, r1
 8000dda:	80fb      	strh	r3, [r7, #6]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	80bb      	strh	r3, [r7, #4]
	uint16_t	help			 	= 0x00;
 8000de0:	2300      	movs	r3, #0
 8000de2:	81fb      	strh	r3, [r7, #14]
	uint8_t		shift_cnt		= 0x00;
 8000de4:	2300      	movs	r3, #0
 8000de6:	737b      	strb	r3, [r7, #13]
	uint8_t			first			= FALSE;
 8000de8:	2300      	movs	r3, #0
 8000dea:	733b      	strb	r3, [r7, #12]

	for (shift_cnt = 0; shift_cnt < 16; shift_cnt++)
 8000dec:	2300      	movs	r3, #0
 8000dee:	737b      	strb	r3, [r7, #13]
 8000df0:	e022      	b.n	8000e38 <Filter_Calc_Mask_Code+0x68>
	{
		if(((from & 0x8000) == (to & 0x8000)) && (!first))
 8000df2:	88fa      	ldrh	r2, [r7, #6]
 8000df4:	88bb      	ldrh	r3, [r7, #4]
 8000df6:	4053      	eors	r3, r2
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	b21b      	sxth	r3, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	db09      	blt.n	8000e14 <Filter_Calc_Mask_Code+0x44>
 8000e00:	7b3b      	ldrb	r3, [r7, #12]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d106      	bne.n	8000e14 <Filter_Calc_Mask_Code+0x44>
		{
			from = from << 1;
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	80fb      	strh	r3, [r7, #6]
			to = to << 1;
 8000e0c:	88bb      	ldrh	r3, [r7, #4]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	80bb      	strh	r3, [r7, #4]
 8000e12:	e00e      	b.n	8000e32 <Filter_Calc_Mask_Code+0x62>
		}
		else
		{
			help = help << 1;
 8000e14:	89fb      	ldrh	r3, [r7, #14]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	81fb      	strh	r3, [r7, #14]
			first = TRUE;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	733b      	strb	r3, [r7, #12]
			help |= 0x01;
 8000e1e:	89fb      	ldrh	r3, [r7, #14]
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	81fb      	strh	r3, [r7, #14]

			from = from << 1;
 8000e26:	88fb      	ldrh	r3, [r7, #6]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	80fb      	strh	r3, [r7, #6]
			to = to << 1;
 8000e2c:	88bb      	ldrh	r3, [r7, #4]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	80bb      	strh	r3, [r7, #4]
	for (shift_cnt = 0; shift_cnt < 16; shift_cnt++)
 8000e32:	7b7b      	ldrb	r3, [r7, #13]
 8000e34:	3301      	adds	r3, #1
 8000e36:	737b      	strb	r3, [r7, #13]
 8000e38:	7b7b      	ldrb	r3, [r7, #13]
 8000e3a:	2b0f      	cmp	r3, #15
 8000e3c:	d9d9      	bls.n	8000df2 <Filter_Calc_Mask_Code+0x22>
		}
	}
	help = (~help) << 5;
 8000e3e:	89fb      	ldrh	r3, [r7, #14]
 8000e40:	43db      	mvns	r3, r3
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	015b      	lsls	r3, r3, #5
 8000e46:	81fb      	strh	r3, [r7, #14]
	return help;
 8000e48:	89fb      	ldrh	r3, [r7, #14]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <ActivateBus>:
uint8_t mROM[8];



static void ActivateBus(uint8_t mBusId)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
	mOwPort = mBus[mBusId].Port;
 8000e62:	79fa      	ldrb	r2, [r7, #7]
 8000e64:	4912      	ldr	r1, [pc, #72]	; (8000eb0 <ActivateBus+0x58>)
 8000e66:	4613      	mov	r3, r2
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	4413      	add	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	440b      	add	r3, r1
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a10      	ldr	r2, [pc, #64]	; (8000eb4 <ActivateBus+0x5c>)
 8000e74:	6013      	str	r3, [r2, #0]
	mOwClearMask = mBus[mBusId].ClearBitMask;
 8000e76:	79fa      	ldrb	r2, [r7, #7]
 8000e78:	490d      	ldr	r1, [pc, #52]	; (8000eb0 <ActivateBus+0x58>)
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	4413      	add	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	440b      	add	r3, r1
 8000e84:	3304      	adds	r3, #4
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <ActivateBus+0x60>)
 8000e8a:	6013      	str	r3, [r2, #0]
	mOwSetMask = mBus[mBusId].SetBitMask;
 8000e8c:	79fa      	ldrb	r2, [r7, #7]
 8000e8e:	4908      	ldr	r1, [pc, #32]	; (8000eb0 <ActivateBus+0x58>)
 8000e90:	4613      	mov	r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	4413      	add	r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	440b      	add	r3, r1
 8000e9a:	3308      	adds	r3, #8
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a07      	ldr	r2, [pc, #28]	; (8000ebc <ActivateBus+0x64>)
 8000ea0:	6013      	str	r3, [r2, #0]
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000610 	.word	0x20000610
 8000eb4:	20000634 	.word	0x20000634
 8000eb8:	20000638 	.word	0x20000638
 8000ebc:	2000063c 	.word	0x2000063c

08000ec0 <OW_Init>:

//initialization of GPIO, Timer, and timing of OW bus;
void OW_Init(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
//reset list of busses
	uint8_t i;
	for (i = 0; i < MAX_NUM_OF_BUSES; i++)
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	71fb      	strb	r3, [r7, #7]
 8000eca:	e00b      	b.n	8000ee4 <OW_Init+0x24>
	{
		mBus[i].Port = NULL;
 8000ecc:	79fa      	ldrb	r2, [r7, #7]
 8000ece:	4921      	ldr	r1, [pc, #132]	; (8000f54 <OW_Init+0x94>)
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	4413      	add	r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	440b      	add	r3, r1
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < MAX_NUM_OF_BUSES; i++)
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	71fb      	strb	r3, [r7, #7]
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d9f0      	bls.n	8000ecc <OW_Init+0xc>
 // debug support (stop Timer when halted)
//	DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_TIM6_STOP;
// configure the OW pin as a open drain output


	OW_TIM->DIER |= TIM_DIER_UIE;
 8000eea:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <OW_Init+0x98>)
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	4a1a      	ldr	r2, [pc, #104]	; (8000f58 <OW_Init+0x98>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	60d3      	str	r3, [r2, #12]
	OW_TIM->PSC = 4;
 8000ef6:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <OW_Init+0x98>)
 8000ef8:	2204      	movs	r2, #4
 8000efa:	629a      	str	r2, [r3, #40]	; 0x28
	OW_TIM->CR1 |= TIM_CR1_ARPE;  // preload enable
 8000efc:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <OW_Init+0x98>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a15      	ldr	r2, [pc, #84]	; (8000f58 <OW_Init+0x98>)
 8000f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f06:	6013      	str	r3, [r2, #0]

	mTimReset[0] = DEL_RES_PULSE * TIM_CLK_PER_US;
 8000f08:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <OW_Init+0x9c>)
 8000f0a:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8000f0e:	801a      	strh	r2, [r3, #0]
	mTimReset[1] = DEL_RES_SAMPLE * TIM_CLK_PER_US;
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <OW_Init+0x9c>)
 8000f12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f16:	805a      	strh	r2, [r3, #2]
	mTimReset[2] = DEL_RES_REST * TIM_CLK_PER_US;
 8000f18:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <OW_Init+0x9c>)
 8000f1a:	f640 62d8 	movw	r2, #3800	; 0xed8
 8000f1e:	809a      	strh	r2, [r3, #4]

	mTimWriteBit[0] = DEL_WB_PULSE * TIM_CLK_PER_US;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <OW_Init+0xa0>)
 8000f22:	223c      	movs	r2, #60	; 0x3c
 8000f24:	801a      	strh	r2, [r3, #0]
	mTimWriteBit[1] = DEL_WB_WRITE * TIM_CLK_PER_US;
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <OW_Init+0xa0>)
 8000f28:	f240 228a 	movw	r2, #650	; 0x28a
 8000f2c:	805a      	strh	r2, [r3, #2]
	mTimWriteBit[2] = DEL_WB_REST * TIM_CLK_PER_US;
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <OW_Init+0xa0>)
 8000f30:	2296      	movs	r2, #150	; 0x96
 8000f32:	809a      	strh	r2, [r3, #4]

	mTimReadBit[0] = DEL_RB_PULSE * TIM_CLK_PER_US;
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <OW_Init+0xa4>)
 8000f36:	220a      	movs	r2, #10
 8000f38:	801a      	strh	r2, [r3, #0]
	mTimReadBit[1] = DEL_RB_SAMPLE * TIM_CLK_PER_US;
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <OW_Init+0xa4>)
 8000f3c:	226e      	movs	r2, #110	; 0x6e
 8000f3e:	805a      	strh	r2, [r3, #2]
	mTimReadBit[2] = DEL_RB_REST * TIM_CLK_PER_US;
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <OW_Init+0xa4>)
 8000f42:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000f46:	809a      	strh	r2, [r3, #4]

}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	20000610 	.word	0x20000610
 8000f58:	40001000 	.word	0x40001000
 8000f5c:	200005d8 	.word	0x200005d8
 8000f60:	200005e0 	.word	0x200005e0
 8000f64:	200005e8 	.word	0x200005e8

08000f68 <OW_AddBus>:


// define bus connected to some GPIO pin
void OW_AddBus(uint8_t busId, GPIO_TypeDef* port, uint32_t pin)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	73fb      	strb	r3, [r7, #15]
	if (busId < MAX_NUM_OF_BUSES)
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d832      	bhi.n	8000fe2 <OW_AddBus+0x7a>
	{
		// store the Bus - Pin assignment
		mBus[busId].Port = port;
 8000f7c:	7bfa      	ldrb	r2, [r7, #15]
 8000f7e:	491b      	ldr	r1, [pc, #108]	; (8000fec <OW_AddBus+0x84>)
 8000f80:	4613      	mov	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	4413      	add	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	440b      	add	r3, r1
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	601a      	str	r2, [r3, #0]
		mBus[busId].SetBitMask = pin;
 8000f8e:	7bfa      	ldrb	r2, [r7, #15]
 8000f90:	4916      	ldr	r1, [pc, #88]	; (8000fec <OW_AddBus+0x84>)
 8000f92:	4613      	mov	r3, r2
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	4413      	add	r3, r2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	3308      	adds	r3, #8
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	601a      	str	r2, [r3, #0]
		mBus[busId].ClearBitMask = pin << 16;
 8000fa2:	7bfa      	ldrb	r2, [r7, #15]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	0419      	lsls	r1, r3, #16
 8000fa8:	4810      	ldr	r0, [pc, #64]	; (8000fec <OW_AddBus+0x84>)
 8000faa:	4613      	mov	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	4413      	add	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	4403      	add	r3, r0
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	6019      	str	r1, [r3, #0]

		// configure the pin
		 /*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	68b8      	ldr	r0, [r7, #8]
 8000fc2:	f003 fce1 	bl	8004988 <HAL_GPIO_WritePin>

		GPIO_InitTypeDef GPIO_InitStruct;
		GPIO_InitStruct.Pin = pin;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000fca:	2311      	movs	r3, #17
 8000fcc:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(port, &GPIO_InitStruct);
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4619      	mov	r1, r3
 8000fdc:	68b8      	ldr	r0, [r7, #8]
 8000fde:	f003 fb27 	bl	8004630 <HAL_GPIO_Init>
	}
}
 8000fe2:	bf00      	nop
 8000fe4:	3728      	adds	r7, #40	; 0x28
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000610 	.word	0x20000610

08000ff0 <ClearRxBuffer>:


void ClearRxBuffer()
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
	mRxBuff[0] = 0;
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <ClearRxBuffer+0x40>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
	mRxBuff[1] = 0;
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <ClearRxBuffer+0x40>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	705a      	strb	r2, [r3, #1]
	mRxBuff[2] = 0;
 8001000:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <ClearRxBuffer+0x40>)
 8001002:	2200      	movs	r2, #0
 8001004:	709a      	strb	r2, [r3, #2]
	mRxBuff[3] = 0;
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <ClearRxBuffer+0x40>)
 8001008:	2200      	movs	r2, #0
 800100a:	70da      	strb	r2, [r3, #3]
	mRxBuff[4] = 0;
 800100c:	4b08      	ldr	r3, [pc, #32]	; (8001030 <ClearRxBuffer+0x40>)
 800100e:	2200      	movs	r2, #0
 8001010:	711a      	strb	r2, [r3, #4]
	mRxBuff[5] = 0;
 8001012:	4b07      	ldr	r3, [pc, #28]	; (8001030 <ClearRxBuffer+0x40>)
 8001014:	2200      	movs	r2, #0
 8001016:	715a      	strb	r2, [r3, #5]
	mRxBuff[6] = 0;
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <ClearRxBuffer+0x40>)
 800101a:	2200      	movs	r2, #0
 800101c:	719a      	strb	r2, [r3, #6]
	mRxBuff[7] = 0;
 800101e:	4b04      	ldr	r3, [pc, #16]	; (8001030 <ClearRxBuffer+0x40>)
 8001020:	2200      	movs	r2, #0
 8001022:	71da      	strb	r2, [r3, #7]
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	200005fc 	.word	0x200005fc

08001034 <OW_ReadSensor>:

eOwResult OW_ReadSensor(uint8_t busId, uint8_t* address, int16_t* result)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
 8001040:	73fb      	strb	r3, [r7, #15]
	eOwResult res = etr_OK;
 8001042:	2300      	movs	r3, #0
 8001044:	75fb      	strb	r3, [r7, #23]

	if (mBus[busId].Port == NULL)
 8001046:	7bfa      	ldrb	r2, [r7, #15]
 8001048:	493a      	ldr	r1, [pc, #232]	; (8001134 <OW_ReadSensor+0x100>)
 800104a:	4613      	mov	r3, r2
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	4413      	add	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	440b      	add	r3, r1
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d102      	bne.n	8001060 <OW_ReadSensor+0x2c>
	{
		res = etr_UnknownBus;
 800105a:	2302      	movs	r3, #2
 800105c:	75fb      	strb	r3, [r7, #23]
 800105e:	e060      	b.n	8001122 <OW_ReadSensor+0xee>
	}
	else if (mBusy)
 8001060:	4b35      	ldr	r3, [pc, #212]	; (8001138 <OW_ReadSensor+0x104>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d002      	beq.n	800106e <OW_ReadSensor+0x3a>
	{
		res = etr_Busy;
 8001068:	2301      	movs	r3, #1
 800106a:	75fb      	strb	r3, [r7, #23]
 800106c:	e059      	b.n	8001122 <OW_ReadSensor+0xee>
	}
	else // all OK
	{
		ActivateBus(busId);  // asign active bus
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fef1 	bl	8000e58 <ActivateBus>
		ClearRxBuffer();
 8001076:	f7ff ffbb 	bl	8000ff0 <ClearRxBuffer>
		// initialize transfer parameters
		mResultPtr = result;
 800107a:	4a30      	ldr	r2, [pc, #192]	; (800113c <OW_ReadSensor+0x108>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6013      	str	r3, [r2, #0]
		mTxBuff[0] = CMD_MATCH_ROM;
 8001080:	4b2f      	ldr	r3, [pc, #188]	; (8001140 <OW_ReadSensor+0x10c>)
 8001082:	2255      	movs	r2, #85	; 0x55
 8001084:	701a      	strb	r2, [r3, #0]
		mTxBuff[1] = address[0];
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	781a      	ldrb	r2, [r3, #0]
 800108a:	4b2d      	ldr	r3, [pc, #180]	; (8001140 <OW_ReadSensor+0x10c>)
 800108c:	705a      	strb	r2, [r3, #1]
		mTxBuff[2] = address[1];
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	785a      	ldrb	r2, [r3, #1]
 8001092:	4b2b      	ldr	r3, [pc, #172]	; (8001140 <OW_ReadSensor+0x10c>)
 8001094:	709a      	strb	r2, [r3, #2]
		mTxBuff[3] = address[2];
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	789a      	ldrb	r2, [r3, #2]
 800109a:	4b29      	ldr	r3, [pc, #164]	; (8001140 <OW_ReadSensor+0x10c>)
 800109c:	70da      	strb	r2, [r3, #3]
		mTxBuff[4] = address[3];
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	78da      	ldrb	r2, [r3, #3]
 80010a2:	4b27      	ldr	r3, [pc, #156]	; (8001140 <OW_ReadSensor+0x10c>)
 80010a4:	711a      	strb	r2, [r3, #4]
		mTxBuff[5] = address[4];
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	791a      	ldrb	r2, [r3, #4]
 80010aa:	4b25      	ldr	r3, [pc, #148]	; (8001140 <OW_ReadSensor+0x10c>)
 80010ac:	715a      	strb	r2, [r3, #5]
		mTxBuff[6] = address[5];
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	795a      	ldrb	r2, [r3, #5]
 80010b2:	4b23      	ldr	r3, [pc, #140]	; (8001140 <OW_ReadSensor+0x10c>)
 80010b4:	719a      	strb	r2, [r3, #6]
		mTxBuff[7] = address[6];
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	799a      	ldrb	r2, [r3, #6]
 80010ba:	4b21      	ldr	r3, [pc, #132]	; (8001140 <OW_ReadSensor+0x10c>)
 80010bc:	71da      	strb	r2, [r3, #7]
		mTxBuff[8] = address[7];
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	79da      	ldrb	r2, [r3, #7]
 80010c2:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <OW_ReadSensor+0x10c>)
 80010c4:	721a      	strb	r2, [r3, #8]
		mTxBuff[9] = CMD_READ_SCRATCHPAD;
 80010c6:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <OW_ReadSensor+0x10c>)
 80010c8:	22be      	movs	r2, #190	; 0xbe
 80010ca:	725a      	strb	r2, [r3, #9]


		mTrStage = ets_Reset;
 80010cc:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <OW_ReadSensor+0x110>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
		mResetStage = ers_ResetPulse;
 80010d2:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <OW_ReadSensor+0x114>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
		mBitStage = ebs_Init;
 80010d8:	4b1c      	ldr	r3, [pc, #112]	; (800114c <OW_ReadSensor+0x118>)
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
		mPresencePulse = 0;
 80010de:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <OW_ReadSensor+0x11c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
		mBytesToWrite = 10;
 80010e4:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <OW_ReadSensor+0x120>)
 80010e6:	220a      	movs	r2, #10
 80010e8:	701a      	strb	r2, [r3, #0]
		mBytesToRead = 2;
 80010ea:	4b1b      	ldr	r3, [pc, #108]	; (8001158 <OW_ReadSensor+0x124>)
 80010ec:	2202      	movs	r2, #2
 80010ee:	701a      	strb	r2, [r3, #0]
		mCurrBit = 0;
 80010f0:	4b1a      	ldr	r3, [pc, #104]	; (800115c <OW_ReadSensor+0x128>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]
		mCurrByte = 0;
 80010f6:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <OW_ReadSensor+0x12c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
		mCurrentTranfer = ett_ReadTemp;
 80010fc:	4b19      	ldr	r3, [pc, #100]	; (8001164 <OW_ReadSensor+0x130>)
 80010fe:	2201      	movs	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]

		mBusy = 1;
 8001102:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <OW_ReadSensor+0x104>)
 8001104:	2201      	movs	r2, #1
 8001106:	701a      	strb	r2, [r3, #0]
		OW_TIM->ARR = mTimReset[ers_ResetPulse];  // first timed period
 8001108:	4b17      	ldr	r3, [pc, #92]	; (8001168 <OW_ReadSensor+0x134>)
 800110a:	881a      	ldrh	r2, [r3, #0]
 800110c:	4b17      	ldr	r3, [pc, #92]	; (800116c <OW_ReadSensor+0x138>)
 800110e:	62da      	str	r2, [r3, #44]	; 0x2c
		OW_TIM->CR1 |= TIM_CR1_CEN;
 8001110:	4b16      	ldr	r3, [pc, #88]	; (800116c <OW_ReadSensor+0x138>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a15      	ldr	r2, [pc, #84]	; (800116c <OW_ReadSensor+0x138>)
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	6013      	str	r3, [r2, #0]
		OW_TIM->EGR = 1;
 800111c:	4b13      	ldr	r3, [pc, #76]	; (800116c <OW_ReadSensor+0x138>)
 800111e:	2201      	movs	r2, #1
 8001120:	615a      	str	r2, [r3, #20]
	}
	mLastTransferResult = res;
 8001122:	4a13      	ldr	r2, [pc, #76]	; (8001170 <OW_ReadSensor+0x13c>)
 8001124:	7dfb      	ldrb	r3, [r7, #23]
 8001126:	7013      	strb	r3, [r2, #0]
	return res;
 8001128:	7dfb      	ldrb	r3, [r7, #23]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000610 	.word	0x20000610
 8001138:	2000060c 	.word	0x2000060c
 800113c:	20000608 	.word	0x20000608
 8001140:	200005f0 	.word	0x200005f0
 8001144:	200005d2 	.word	0x200005d2
 8001148:	200005d0 	.word	0x200005d0
 800114c:	200005d1 	.word	0x200005d1
 8001150:	200005d4 	.word	0x200005d4
 8001154:	200005cc 	.word	0x200005cc
 8001158:	200005cd 	.word	0x200005cd
 800115c:	200005ce 	.word	0x200005ce
 8001160:	200005cf 	.word	0x200005cf
 8001164:	200005d3 	.word	0x200005d3
 8001168:	200005d8 	.word	0x200005d8
 800116c:	40001000 	.word	0x40001000
 8001170:	200005d5 	.word	0x200005d5

08001174 <OW_ConvertAll>:
	OW_ReadSensor(busId, mROM, &mTemp);
}


eOwResult OW_ConvertAll(uint8_t busId)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
	eOwResult res = etr_OK;
 800117e:	2300      	movs	r3, #0
 8001180:	73fb      	strb	r3, [r7, #15]

	if (mBus[busId].Port == NULL)
 8001182:	79fa      	ldrb	r2, [r7, #7]
 8001184:	4928      	ldr	r1, [pc, #160]	; (8001228 <OW_ConvertAll+0xb4>)
 8001186:	4613      	mov	r3, r2
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	4413      	add	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	440b      	add	r3, r1
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d102      	bne.n	800119c <OW_ConvertAll+0x28>
	{
		res = etr_UnknownBus;
 8001196:	2302      	movs	r3, #2
 8001198:	73fb      	strb	r3, [r7, #15]
 800119a:	e03d      	b.n	8001218 <OW_ConvertAll+0xa4>
	}
	else if (mBusy)
 800119c:	4b23      	ldr	r3, [pc, #140]	; (800122c <OW_ConvertAll+0xb8>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d002      	beq.n	80011aa <OW_ConvertAll+0x36>
	{
		res = etr_Busy;
 80011a4:	2301      	movs	r3, #1
 80011a6:	73fb      	strb	r3, [r7, #15]
 80011a8:	e036      	b.n	8001218 <OW_ConvertAll+0xa4>
	}
	else // all OK
	{
		ActivateBus(busId);  // asign active bus
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fe53 	bl	8000e58 <ActivateBus>
		ClearRxBuffer();
 80011b2:	f7ff ff1d 	bl	8000ff0 <ClearRxBuffer>
		// initialize transfer parameters
		mTxBuff[0] = CMD_SKIP_ROM;
 80011b6:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <OW_ConvertAll+0xbc>)
 80011b8:	22cc      	movs	r2, #204	; 0xcc
 80011ba:	701a      	strb	r2, [r3, #0]
		mTxBuff[1] = CMD_CONVERT;
 80011bc:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <OW_ConvertAll+0xbc>)
 80011be:	2244      	movs	r2, #68	; 0x44
 80011c0:	705a      	strb	r2, [r3, #1]

		mTrStage = ets_Reset;
 80011c2:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <OW_ConvertAll+0xc0>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
		mResetStage = ers_ResetPulse;
 80011c8:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <OW_ConvertAll+0xc4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
		mBitStage = ebs_Init;
 80011ce:	4b1b      	ldr	r3, [pc, #108]	; (800123c <OW_ConvertAll+0xc8>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
		mPresencePulse = 0;
 80011d4:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <OW_ConvertAll+0xcc>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	701a      	strb	r2, [r3, #0]
		mBytesToWrite = 2;
 80011da:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <OW_ConvertAll+0xd0>)
 80011dc:	2202      	movs	r2, #2
 80011de:	701a      	strb	r2, [r3, #0]
		mBytesToRead = 0;
 80011e0:	4b19      	ldr	r3, [pc, #100]	; (8001248 <OW_ConvertAll+0xd4>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	701a      	strb	r2, [r3, #0]
		mCurrBit = 0;
 80011e6:	4b19      	ldr	r3, [pc, #100]	; (800124c <OW_ConvertAll+0xd8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]
		mCurrByte = 0;
 80011ec:	4b18      	ldr	r3, [pc, #96]	; (8001250 <OW_ConvertAll+0xdc>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	701a      	strb	r2, [r3, #0]
		mCurrentTranfer = ett_Convert;
 80011f2:	4b18      	ldr	r3, [pc, #96]	; (8001254 <OW_ConvertAll+0xe0>)
 80011f4:	2202      	movs	r2, #2
 80011f6:	701a      	strb	r2, [r3, #0]

		mBusy = 1;
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <OW_ConvertAll+0xb8>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	701a      	strb	r2, [r3, #0]
		OW_TIM->ARR = mTimReset[ers_ResetPulse];  // first timed period
 80011fe:	4b16      	ldr	r3, [pc, #88]	; (8001258 <OW_ConvertAll+0xe4>)
 8001200:	881a      	ldrh	r2, [r3, #0]
 8001202:	4b16      	ldr	r3, [pc, #88]	; (800125c <OW_ConvertAll+0xe8>)
 8001204:	62da      	str	r2, [r3, #44]	; 0x2c
		OW_TIM->CR1 |= TIM_CR1_CEN;
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <OW_ConvertAll+0xe8>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a14      	ldr	r2, [pc, #80]	; (800125c <OW_ConvertAll+0xe8>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6013      	str	r3, [r2, #0]
		OW_TIM->EGR = 1;
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <OW_ConvertAll+0xe8>)
 8001214:	2201      	movs	r2, #1
 8001216:	615a      	str	r2, [r3, #20]
	}
	mLastTransferResult = res;
 8001218:	4a11      	ldr	r2, [pc, #68]	; (8001260 <OW_ConvertAll+0xec>)
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	7013      	strb	r3, [r2, #0]
	return res;
 800121e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000610 	.word	0x20000610
 800122c:	2000060c 	.word	0x2000060c
 8001230:	200005f0 	.word	0x200005f0
 8001234:	200005d2 	.word	0x200005d2
 8001238:	200005d0 	.word	0x200005d0
 800123c:	200005d1 	.word	0x200005d1
 8001240:	200005d4 	.word	0x200005d4
 8001244:	200005cc 	.word	0x200005cc
 8001248:	200005cd 	.word	0x200005cd
 800124c:	200005ce 	.word	0x200005ce
 8001250:	200005cf 	.word	0x200005cf
 8001254:	200005d3 	.word	0x200005d3
 8001258:	200005d8 	.word	0x200005d8
 800125c:	40001000 	.word	0x40001000
 8001260:	200005d5 	.word	0x200005d5

08001264 <TransferComplete>:
}


// private fcn called from last IRQ of OW transfer
void TransferComplete()
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
	uint16_t rawbits;
	int16_t rawvalue;

	if (mPresencePulse == 0)
 800126a:	4b24      	ldr	r3, [pc, #144]	; (80012fc <TransferComplete+0x98>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d102      	bne.n	8001278 <TransferComplete+0x14>
	{
		mLastTransferResult = etr_NotPresent;
 8001272:	4b23      	ldr	r3, [pc, #140]	; (8001300 <TransferComplete+0x9c>)
 8001274:	2203      	movs	r2, #3
 8001276:	701a      	strb	r2, [r3, #0]
	}
	switch (mCurrentTranfer)
 8001278:	4b22      	ldr	r3, [pc, #136]	; (8001304 <TransferComplete+0xa0>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b02      	cmp	r3, #2
 800127e:	d030      	beq.n	80012e2 <TransferComplete+0x7e>
 8001280:	2b02      	cmp	r3, #2
 8001282:	dc31      	bgt.n	80012e8 <TransferComplete+0x84>
 8001284:	2b00      	cmp	r3, #0
 8001286:	d002      	beq.n	800128e <TransferComplete+0x2a>
 8001288:	2b01      	cmp	r3, #1
 800128a:	d007      	beq.n	800129c <TransferComplete+0x38>
 800128c:	e02c      	b.n	80012e8 <TransferComplete+0x84>
	{
		case ett_ReadRom:
			memcpy(mROM, mRxBuff, 8);
 800128e:	4b1e      	ldr	r3, [pc, #120]	; (8001308 <TransferComplete+0xa4>)
 8001290:	4a1e      	ldr	r2, [pc, #120]	; (800130c <TransferComplete+0xa8>)
 8001292:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001296:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 800129a:	e025      	b.n	80012e8 <TransferComplete+0x84>
		case ett_Convert:
			// nothing
			break;
		case ett_ReadTemp:
			if (mResultPtr != NULL)
 800129c:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <TransferComplete+0xac>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d020      	beq.n	80012e6 <TransferComplete+0x82>
			{
				rawbits = (uint16_t)mRxBuff[0]  |   ((uint16_t)mRxBuff[1]) << 8;
 80012a4:	4b19      	ldr	r3, [pc, #100]	; (800130c <TransferComplete+0xa8>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b21a      	sxth	r2, r3
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <TransferComplete+0xa8>)
 80012ac:	785b      	ldrb	r3, [r3, #1]
 80012ae:	021b      	lsls	r3, r3, #8
 80012b0:	b21b      	sxth	r3, r3
 80012b2:	4313      	orrs	r3, r2
 80012b4:	b21b      	sxth	r3, r3
 80012b6:	80fb      	strh	r3, [r7, #6]
				rawvalue = (int16_t)rawbits;
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	80bb      	strh	r3, [r7, #4]
				*mResultPtr = (rawvalue * 10) / 16;
 80012bc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80012c0:	4613      	mov	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	da00      	bge.n	80012ce <TransferComplete+0x6a>
 80012cc:	330f      	adds	r3, #15
 80012ce:	111b      	asrs	r3, r3, #4
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <TransferComplete+0xac>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	b212      	sxth	r2, r2
 80012d8:	801a      	strh	r2, [r3, #0]
				//*mResultPtr = (int16_t)((double)(((uint16_t)mRxBuff[0] | ((uint16_t)mRxBuff[1]) << 8)) / 1.6);

				mResultPtr = NULL; // clear the pointer to prevent overwrite in next cycle.
 80012da:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <TransferComplete+0xac>)
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
			}
			break;
 80012e0:	e001      	b.n	80012e6 <TransferComplete+0x82>
			break;
 80012e2:	bf00      	nop
 80012e4:	e000      	b.n	80012e8 <TransferComplete+0x84>
			break;
 80012e6:	bf00      	nop
	}
	mBusy = 0;
 80012e8:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <TransferComplete+0xb0>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	701a      	strb	r2, [r3, #0]
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	200005d4 	.word	0x200005d4
 8001300:	200005d5 	.word	0x200005d5
 8001304:	200005d3 	.word	0x200005d3
 8001308:	20000640 	.word	0x20000640
 800130c:	200005fc 	.word	0x200005fc
 8001310:	20000608 	.word	0x20000608
 8001314:	2000060c 	.word	0x2000060c

08001318 <OW_IRQHandler>:
	return mROM;
}


void OW_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
	OW_TIM->SR = 0;  // Clear the UIF flag
 800131c:	4b8d      	ldr	r3, [pc, #564]	; (8001554 <OW_IRQHandler+0x23c>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]

	if (mTrStage == ets_Write)
 8001322:	4b8d      	ldr	r3, [pc, #564]	; (8001558 <OW_IRQHandler+0x240>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b01      	cmp	r3, #1
 8001328:	f040 8086 	bne.w	8001438 <OW_IRQHandler+0x120>
	{
		switch (mBitStage)
 800132c:	4b8b      	ldr	r3, [pc, #556]	; (800155c <OW_IRQHandler+0x244>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b02      	cmp	r3, #2
 8001332:	d026      	beq.n	8001382 <OW_IRQHandler+0x6a>
 8001334:	2b02      	cmp	r3, #2
 8001336:	dc2a      	bgt.n	800138e <OW_IRQHandler+0x76>
 8001338:	2b00      	cmp	r3, #0
 800133a:	d002      	beq.n	8001342 <OW_IRQHandler+0x2a>
 800133c:	2b01      	cmp	r3, #1
 800133e:	d006      	beq.n	800134e <OW_IRQHandler+0x36>
 8001340:	e025      	b.n	800138e <OW_IRQHandler+0x76>
		{
			case ebs_Init:
				// write 0 to GPIO
				mOwPort->BSRR = mOwClearMask;
 8001342:	4b87      	ldr	r3, [pc, #540]	; (8001560 <OW_IRQHandler+0x248>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a87      	ldr	r2, [pc, #540]	; (8001564 <OW_IRQHandler+0x24c>)
 8001348:	6812      	ldr	r2, [r2, #0]
 800134a:	619a      	str	r2, [r3, #24]
				break;
 800134c:	e01f      	b.n	800138e <OW_IRQHandler+0x76>
			case ebs_WriteSample:
				// write the bit  value to the GPIO
				if (mTxBuff[mCurrByte] & (1 << mCurrBit))
 800134e:	4b86      	ldr	r3, [pc, #536]	; (8001568 <OW_IRQHandler+0x250>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	461a      	mov	r2, r3
 8001354:	4b85      	ldr	r3, [pc, #532]	; (800156c <OW_IRQHandler+0x254>)
 8001356:	5c9b      	ldrb	r3, [r3, r2]
 8001358:	461a      	mov	r2, r3
 800135a:	4b85      	ldr	r3, [pc, #532]	; (8001570 <OW_IRQHandler+0x258>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	fa42 f303 	asr.w	r3, r2, r3
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b00      	cmp	r3, #0
 8001368:	d005      	beq.n	8001376 <OW_IRQHandler+0x5e>
				{  // write 1
					mOwPort->BSRR = mOwSetMask;
 800136a:	4b7d      	ldr	r3, [pc, #500]	; (8001560 <OW_IRQHandler+0x248>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a81      	ldr	r2, [pc, #516]	; (8001574 <OW_IRQHandler+0x25c>)
 8001370:	6812      	ldr	r2, [r2, #0]
 8001372:	619a      	str	r2, [r3, #24]
				else
				{
					//write 0;
					mOwPort->BSRR = mOwClearMask;
				}
				break;
 8001374:	e00b      	b.n	800138e <OW_IRQHandler+0x76>
					mOwPort->BSRR = mOwClearMask;
 8001376:	4b7a      	ldr	r3, [pc, #488]	; (8001560 <OW_IRQHandler+0x248>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a7a      	ldr	r2, [pc, #488]	; (8001564 <OW_IRQHandler+0x24c>)
 800137c:	6812      	ldr	r2, [r2, #0]
 800137e:	619a      	str	r2, [r3, #24]
				break;
 8001380:	e005      	b.n	800138e <OW_IRQHandler+0x76>
			case ebs_Rest:
				// write 1 to GPIO
				mOwPort->BSRR = mOwSetMask;
 8001382:	4b77      	ldr	r3, [pc, #476]	; (8001560 <OW_IRQHandler+0x248>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a7b      	ldr	r2, [pc, #492]	; (8001574 <OW_IRQHandler+0x25c>)
 8001388:	6812      	ldr	r2, [r2, #0]
 800138a:	619a      	str	r2, [r3, #24]
				// increment CurrBit
				break;
 800138c:	bf00      	nop
		}

		mBitStage++;
 800138e:	4b73      	ldr	r3, [pc, #460]	; (800155c <OW_IRQHandler+0x244>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	3301      	adds	r3, #1
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4b71      	ldr	r3, [pc, #452]	; (800155c <OW_IRQHandler+0x244>)
 8001398:	701a      	strb	r2, [r3, #0]
		if (mBitStage <=2)
 800139a:	4b70      	ldr	r3, [pc, #448]	; (800155c <OW_IRQHandler+0x244>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d808      	bhi.n	80013b4 <OW_IRQHandler+0x9c>
		{
			OW_TIM->ARR = mTimWriteBit[mBitStage];   // prepare ARR for next bit stage
 80013a2:	4b6e      	ldr	r3, [pc, #440]	; (800155c <OW_IRQHandler+0x244>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	461a      	mov	r2, r3
 80013a8:	4b73      	ldr	r3, [pc, #460]	; (8001578 <OW_IRQHandler+0x260>)
 80013aa:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80013ae:	4b69      	ldr	r3, [pc, #420]	; (8001554 <OW_IRQHandler+0x23c>)
 80013b0:	62da      	str	r2, [r3, #44]	; 0x2c
				mBusy = 0;
			}
		}
	}

}
 80013b2:	e14a      	b.n	800164a <OW_IRQHandler+0x332>
			mBitStage = 0;
 80013b4:	4b69      	ldr	r3, [pc, #420]	; (800155c <OW_IRQHandler+0x244>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]
			OW_TIM->ARR = mTimWriteBit[mBitStage];   // prepare ARR for first stage of next write bit
 80013ba:	4b68      	ldr	r3, [pc, #416]	; (800155c <OW_IRQHandler+0x244>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	4b6d      	ldr	r3, [pc, #436]	; (8001578 <OW_IRQHandler+0x260>)
 80013c2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80013c6:	4b63      	ldr	r3, [pc, #396]	; (8001554 <OW_IRQHandler+0x23c>)
 80013c8:	62da      	str	r2, [r3, #44]	; 0x2c
			mCurrBit++;
 80013ca:	4b69      	ldr	r3, [pc, #420]	; (8001570 <OW_IRQHandler+0x258>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	3301      	adds	r3, #1
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4b67      	ldr	r3, [pc, #412]	; (8001570 <OW_IRQHandler+0x258>)
 80013d4:	701a      	strb	r2, [r3, #0]
			if (mCurrBit > 7)
 80013d6:	4b66      	ldr	r3, [pc, #408]	; (8001570 <OW_IRQHandler+0x258>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b07      	cmp	r3, #7
 80013dc:	f240 8135 	bls.w	800164a <OW_IRQHandler+0x332>
				mCurrBit = 0;
 80013e0:	4b63      	ldr	r3, [pc, #396]	; (8001570 <OW_IRQHandler+0x258>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	701a      	strb	r2, [r3, #0]
				mCurrByte++;
 80013e6:	4b60      	ldr	r3, [pc, #384]	; (8001568 <OW_IRQHandler+0x250>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	3301      	adds	r3, #1
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4b5e      	ldr	r3, [pc, #376]	; (8001568 <OW_IRQHandler+0x250>)
 80013f0:	701a      	strb	r2, [r3, #0]
				if (mCurrByte >= mBytesToWrite)  // all bytes written
 80013f2:	4b5d      	ldr	r3, [pc, #372]	; (8001568 <OW_IRQHandler+0x250>)
 80013f4:	781a      	ldrb	r2, [r3, #0]
 80013f6:	4b61      	ldr	r3, [pc, #388]	; (800157c <OW_IRQHandler+0x264>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	f0c0 8125 	bcc.w	800164a <OW_IRQHandler+0x332>
					mCurrByte = 0;
 8001400:	4b59      	ldr	r3, [pc, #356]	; (8001568 <OW_IRQHandler+0x250>)
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
					if (mBytesToRead > 0)
 8001406:	4b5e      	ldr	r3, [pc, #376]	; (8001580 <OW_IRQHandler+0x268>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d00b      	beq.n	8001426 <OW_IRQHandler+0x10e>
						mTrStage = ets_Read;   // switch to reading stage
 800140e:	4b52      	ldr	r3, [pc, #328]	; (8001558 <OW_IRQHandler+0x240>)
 8001410:	2202      	movs	r2, #2
 8001412:	701a      	strb	r2, [r3, #0]
						OW_TIM->ARR = mTimReadBit[mBitStage];   // prepare ARR for first stage of first read bit
 8001414:	4b51      	ldr	r3, [pc, #324]	; (800155c <OW_IRQHandler+0x244>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	461a      	mov	r2, r3
 800141a:	4b5a      	ldr	r3, [pc, #360]	; (8001584 <OW_IRQHandler+0x26c>)
 800141c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001420:	4b4c      	ldr	r3, [pc, #304]	; (8001554 <OW_IRQHandler+0x23c>)
 8001422:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001424:	e111      	b.n	800164a <OW_IRQHandler+0x332>
						OW_TIM->CR1 &= ~TIM_CR1_CEN;
 8001426:	4b4b      	ldr	r3, [pc, #300]	; (8001554 <OW_IRQHandler+0x23c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a4a      	ldr	r2, [pc, #296]	; (8001554 <OW_IRQHandler+0x23c>)
 800142c:	f023 0301 	bic.w	r3, r3, #1
 8001430:	6013      	str	r3, [r2, #0]
						TransferComplete();
 8001432:	f7ff ff17 	bl	8001264 <TransferComplete>
}
 8001436:	e108      	b.n	800164a <OW_IRQHandler+0x332>
	else if (mTrStage == ets_Read)
 8001438:	4b47      	ldr	r3, [pc, #284]	; (8001558 <OW_IRQHandler+0x240>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b02      	cmp	r3, #2
 800143e:	f040 80a7 	bne.w	8001590 <OW_IRQHandler+0x278>
		switch (mBitStage)
 8001442:	4b46      	ldr	r3, [pc, #280]	; (800155c <OW_IRQHandler+0x244>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b02      	cmp	r3, #2
 8001448:	d012      	beq.n	8001470 <OW_IRQHandler+0x158>
 800144a:	2b02      	cmp	r3, #2
 800144c:	dc44      	bgt.n	80014d8 <OW_IRQHandler+0x1c0>
 800144e:	2b00      	cmp	r3, #0
 8001450:	d002      	beq.n	8001458 <OW_IRQHandler+0x140>
 8001452:	2b01      	cmp	r3, #1
 8001454:	d006      	beq.n	8001464 <OW_IRQHandler+0x14c>
 8001456:	e03f      	b.n	80014d8 <OW_IRQHandler+0x1c0>
					mOwPort->BSRR = mOwClearMask;
 8001458:	4b41      	ldr	r3, [pc, #260]	; (8001560 <OW_IRQHandler+0x248>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a41      	ldr	r2, [pc, #260]	; (8001564 <OW_IRQHandler+0x24c>)
 800145e:	6812      	ldr	r2, [r2, #0]
 8001460:	619a      	str	r2, [r3, #24]
					break;
 8001462:	e039      	b.n	80014d8 <OW_IRQHandler+0x1c0>
					mOwPort->BSRR = mOwSetMask;
 8001464:	4b3e      	ldr	r3, [pc, #248]	; (8001560 <OW_IRQHandler+0x248>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a42      	ldr	r2, [pc, #264]	; (8001574 <OW_IRQHandler+0x25c>)
 800146a:	6812      	ldr	r2, [r2, #0]
 800146c:	619a      	str	r2, [r3, #24]
					break;
 800146e:	e033      	b.n	80014d8 <OW_IRQHandler+0x1c0>
					if (mOwPort->IDR & mOwSetMask)
 8001470:	4b3b      	ldr	r3, [pc, #236]	; (8001560 <OW_IRQHandler+0x248>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	691a      	ldr	r2, [r3, #16]
 8001476:	4b3f      	ldr	r3, [pc, #252]	; (8001574 <OW_IRQHandler+0x25c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4013      	ands	r3, r2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d014      	beq.n	80014aa <OW_IRQHandler+0x192>
						mRxBuff[mCurrByte] |= (1 << mCurrBit);
 8001480:	4b39      	ldr	r3, [pc, #228]	; (8001568 <OW_IRQHandler+0x250>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	461a      	mov	r2, r3
 8001486:	4b40      	ldr	r3, [pc, #256]	; (8001588 <OW_IRQHandler+0x270>)
 8001488:	5c9b      	ldrb	r3, [r3, r2]
 800148a:	b25a      	sxtb	r2, r3
 800148c:	4b38      	ldr	r3, [pc, #224]	; (8001570 <OW_IRQHandler+0x258>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4619      	mov	r1, r3
 8001492:	2301      	movs	r3, #1
 8001494:	408b      	lsls	r3, r1
 8001496:	b25b      	sxtb	r3, r3
 8001498:	4313      	orrs	r3, r2
 800149a:	b259      	sxtb	r1, r3
 800149c:	4b32      	ldr	r3, [pc, #200]	; (8001568 <OW_IRQHandler+0x250>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	b2c9      	uxtb	r1, r1
 80014a4:	4b38      	ldr	r3, [pc, #224]	; (8001588 <OW_IRQHandler+0x270>)
 80014a6:	5499      	strb	r1, [r3, r2]
					break;
 80014a8:	e015      	b.n	80014d6 <OW_IRQHandler+0x1be>
						mRxBuff[mCurrByte] &= ~(1 << mCurrBit);
 80014aa:	4b2f      	ldr	r3, [pc, #188]	; (8001568 <OW_IRQHandler+0x250>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b35      	ldr	r3, [pc, #212]	; (8001588 <OW_IRQHandler+0x270>)
 80014b2:	5c9b      	ldrb	r3, [r3, r2]
 80014b4:	b25a      	sxtb	r2, r3
 80014b6:	4b2e      	ldr	r3, [pc, #184]	; (8001570 <OW_IRQHandler+0x258>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	4619      	mov	r1, r3
 80014bc:	2301      	movs	r3, #1
 80014be:	408b      	lsls	r3, r1
 80014c0:	b25b      	sxtb	r3, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	b25b      	sxtb	r3, r3
 80014c6:	4013      	ands	r3, r2
 80014c8:	b259      	sxtb	r1, r3
 80014ca:	4b27      	ldr	r3, [pc, #156]	; (8001568 <OW_IRQHandler+0x250>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	b2c9      	uxtb	r1, r1
 80014d2:	4b2d      	ldr	r3, [pc, #180]	; (8001588 <OW_IRQHandler+0x270>)
 80014d4:	5499      	strb	r1, [r3, r2]
					break;
 80014d6:	bf00      	nop
				mBitStage++;
 80014d8:	4b20      	ldr	r3, [pc, #128]	; (800155c <OW_IRQHandler+0x244>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	3301      	adds	r3, #1
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	4b1e      	ldr	r3, [pc, #120]	; (800155c <OW_IRQHandler+0x244>)
 80014e2:	701a      	strb	r2, [r3, #0]
				if (mBitStage > 2)
 80014e4:	4b1d      	ldr	r3, [pc, #116]	; (800155c <OW_IRQHandler+0x244>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d929      	bls.n	8001540 <OW_IRQHandler+0x228>
					mBitStage = 0;
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <OW_IRQHandler+0x244>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]
					mCurrBit++;
 80014f2:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <OW_IRQHandler+0x258>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	3301      	adds	r3, #1
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <OW_IRQHandler+0x258>)
 80014fc:	701a      	strb	r2, [r3, #0]
					if (mCurrBit > 7)
 80014fe:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <OW_IRQHandler+0x258>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b07      	cmp	r3, #7
 8001504:	d91c      	bls.n	8001540 <OW_IRQHandler+0x228>
						mCurrBit = 0;
 8001506:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <OW_IRQHandler+0x258>)
 8001508:	2200      	movs	r2, #0
 800150a:	701a      	strb	r2, [r3, #0]
						mCurrByte++;
 800150c:	4b16      	ldr	r3, [pc, #88]	; (8001568 <OW_IRQHandler+0x250>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	3301      	adds	r3, #1
 8001512:	b2da      	uxtb	r2, r3
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <OW_IRQHandler+0x250>)
 8001516:	701a      	strb	r2, [r3, #0]
						if (mCurrByte >= mBytesToRead)  // all bytes written
 8001518:	4b13      	ldr	r3, [pc, #76]	; (8001568 <OW_IRQHandler+0x250>)
 800151a:	781a      	ldrb	r2, [r3, #0]
 800151c:	4b18      	ldr	r3, [pc, #96]	; (8001580 <OW_IRQHandler+0x268>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	429a      	cmp	r2, r3
 8001522:	d30d      	bcc.n	8001540 <OW_IRQHandler+0x228>
							OW_TIM->CR1 &= ~TIM_CR1_CEN;
 8001524:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <OW_IRQHandler+0x23c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <OW_IRQHandler+0x23c>)
 800152a:	f023 0301 	bic.w	r3, r3, #1
 800152e:	6013      	str	r3, [r2, #0]
							TransferComplete();
 8001530:	f7ff fe98 	bl	8001264 <TransferComplete>
							mCurrByte = 0;
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <OW_IRQHandler+0x250>)
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
							mBusy  = 0;
 800153a:	4b14      	ldr	r3, [pc, #80]	; (800158c <OW_IRQHandler+0x274>)
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]
				OW_TIM->ARR = mTimReadBit[mBitStage]; // prepare ARR for next period
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <OW_IRQHandler+0x244>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <OW_IRQHandler+0x26c>)
 8001548:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800154c:	4b01      	ldr	r3, [pc, #4]	; (8001554 <OW_IRQHandler+0x23c>)
 800154e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001550:	e07b      	b.n	800164a <OW_IRQHandler+0x332>
 8001552:	bf00      	nop
 8001554:	40001000 	.word	0x40001000
 8001558:	200005d2 	.word	0x200005d2
 800155c:	200005d1 	.word	0x200005d1
 8001560:	20000634 	.word	0x20000634
 8001564:	20000638 	.word	0x20000638
 8001568:	200005cf 	.word	0x200005cf
 800156c:	200005f0 	.word	0x200005f0
 8001570:	200005ce 	.word	0x200005ce
 8001574:	2000063c 	.word	0x2000063c
 8001578:	200005e0 	.word	0x200005e0
 800157c:	200005cc 	.word	0x200005cc
 8001580:	200005cd 	.word	0x200005cd
 8001584:	200005e8 	.word	0x200005e8
 8001588:	200005fc 	.word	0x200005fc
 800158c:	2000060c 	.word	0x2000060c
	else if (mTrStage == ets_Reset)
 8001590:	4b2f      	ldr	r3, [pc, #188]	; (8001650 <OW_IRQHandler+0x338>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d158      	bne.n	800164a <OW_IRQHandler+0x332>
		switch (mResetStage)
 8001598:	4b2e      	ldr	r3, [pc, #184]	; (8001654 <OW_IRQHandler+0x33c>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b02      	cmp	r3, #2
 800159e:	d012      	beq.n	80015c6 <OW_IRQHandler+0x2ae>
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	dc20      	bgt.n	80015e6 <OW_IRQHandler+0x2ce>
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d002      	beq.n	80015ae <OW_IRQHandler+0x296>
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d006      	beq.n	80015ba <OW_IRQHandler+0x2a2>
 80015ac:	e01b      	b.n	80015e6 <OW_IRQHandler+0x2ce>
				mOwPort->BSRR = mOwClearMask;
 80015ae:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <OW_IRQHandler+0x340>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a2a      	ldr	r2, [pc, #168]	; (800165c <OW_IRQHandler+0x344>)
 80015b4:	6812      	ldr	r2, [r2, #0]
 80015b6:	619a      	str	r2, [r3, #24]
				break;
 80015b8:	e015      	b.n	80015e6 <OW_IRQHandler+0x2ce>
				mOwPort->BSRR = mOwSetMask;
 80015ba:	4b27      	ldr	r3, [pc, #156]	; (8001658 <OW_IRQHandler+0x340>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a28      	ldr	r2, [pc, #160]	; (8001660 <OW_IRQHandler+0x348>)
 80015c0:	6812      	ldr	r2, [r2, #0]
 80015c2:	619a      	str	r2, [r3, #24]
				break;
 80015c4:	e00f      	b.n	80015e6 <OW_IRQHandler+0x2ce>
				if (mOwPort->IDR & mOwSetMask)
 80015c6:	4b24      	ldr	r3, [pc, #144]	; (8001658 <OW_IRQHandler+0x340>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	691a      	ldr	r2, [r3, #16]
 80015cc:	4b24      	ldr	r3, [pc, #144]	; (8001660 <OW_IRQHandler+0x348>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4013      	ands	r3, r2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <OW_IRQHandler+0x2c6>
					mPresencePulse = 0;
 80015d6:	4b23      	ldr	r3, [pc, #140]	; (8001664 <OW_IRQHandler+0x34c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	701a      	strb	r2, [r3, #0]
				break;
 80015dc:	e002      	b.n	80015e4 <OW_IRQHandler+0x2cc>
					mPresencePulse = 1;
 80015de:	4b21      	ldr	r3, [pc, #132]	; (8001664 <OW_IRQHandler+0x34c>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	701a      	strb	r2, [r3, #0]
				break;
 80015e4:	bf00      	nop
		mResetStage++;
 80015e6:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <OW_IRQHandler+0x33c>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	3301      	adds	r3, #1
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	4b19      	ldr	r3, [pc, #100]	; (8001654 <OW_IRQHandler+0x33c>)
 80015f0:	701a      	strb	r2, [r3, #0]
		if (mResetStage <= 2)   // still in Reset phase
 80015f2:	4b18      	ldr	r3, [pc, #96]	; (8001654 <OW_IRQHandler+0x33c>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d808      	bhi.n	800160c <OW_IRQHandler+0x2f4>
			OW_TIM->ARR = mTimReset[mResetStage];  // prepare period for next reset stage
 80015fa:	4b16      	ldr	r3, [pc, #88]	; (8001654 <OW_IRQHandler+0x33c>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	461a      	mov	r2, r3
 8001600:	4b19      	ldr	r3, [pc, #100]	; (8001668 <OW_IRQHandler+0x350>)
 8001602:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001606:	4b19      	ldr	r3, [pc, #100]	; (800166c <OW_IRQHandler+0x354>)
 8001608:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800160a:	e01e      	b.n	800164a <OW_IRQHandler+0x332>
			mResetStage = 0;
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <OW_IRQHandler+0x33c>)
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
			mBitStage = 0;   // reset the bit stage for next phase
 8001612:	4b17      	ldr	r3, [pc, #92]	; (8001670 <OW_IRQHandler+0x358>)
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]
			if (mPresencePulse)  // device detected switch to write phase
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <OW_IRQHandler+0x34c>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d00b      	beq.n	8001638 <OW_IRQHandler+0x320>
				mTrStage = ets_Write;
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <OW_IRQHandler+0x338>)
 8001622:	2201      	movs	r2, #1
 8001624:	701a      	strb	r2, [r3, #0]
				OW_TIM->ARR = mTimWriteBit[mBitStage];  // prepare period for first write bit stage
 8001626:	4b12      	ldr	r3, [pc, #72]	; (8001670 <OW_IRQHandler+0x358>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	4b11      	ldr	r3, [pc, #68]	; (8001674 <OW_IRQHandler+0x35c>)
 800162e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <OW_IRQHandler+0x354>)
 8001634:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001636:	e008      	b.n	800164a <OW_IRQHandler+0x332>
				OW_TIM->CR1 &= ~TIM_CR1_CEN;
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <OW_IRQHandler+0x354>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a0b      	ldr	r2, [pc, #44]	; (800166c <OW_IRQHandler+0x354>)
 800163e:	f023 0301 	bic.w	r3, r3, #1
 8001642:	6013      	str	r3, [r2, #0]
				mBusy = 0;
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <OW_IRQHandler+0x360>)
 8001646:	2200      	movs	r2, #0
 8001648:	701a      	strb	r2, [r3, #0]
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200005d2 	.word	0x200005d2
 8001654:	200005d0 	.word	0x200005d0
 8001658:	20000634 	.word	0x20000634
 800165c:	20000638 	.word	0x20000638
 8001660:	2000063c 	.word	0x2000063c
 8001664:	200005d4 	.word	0x200005d4
 8001668:	200005d8 	.word	0x200005d8
 800166c:	40001000 	.word	0x40001000
 8001670:	200005d1 	.word	0x200005d1
 8001674:	200005e0 	.word	0x200005e0
 8001678:	2000060c 	.word	0x2000060c

0800167c <RTC_GetTime>:

/* USER CODE END 0 */


sDateTime RTC_GetTime()
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	; 0x28
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  sDateTime dt;
  RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 8001684:	f107 0308 	add.w	r3, r7, #8
 8001688:	2200      	movs	r2, #0
 800168a:	4619      	mov	r1, r3
 800168c:	4816      	ldr	r0, [pc, #88]	; (80016e8 <RTC_GetTime+0x6c>)
 800168e:	f006 f92d 	bl	80078ec <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 8001692:	f107 031c 	add.w	r3, r7, #28
 8001696:	2200      	movs	r2, #0
 8001698:	4619      	mov	r1, r3
 800169a:	4813      	ldr	r0, [pc, #76]	; (80016e8 <RTC_GetTime+0x6c>)
 800169c:	f006 fa08 	bl	8007ab0 <HAL_RTC_GetDate>

  dt.Year = 2000 + sdatestructureget.Year;
 80016a0:	7ffb      	ldrb	r3, [r7, #31]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	84fb      	strh	r3, [r7, #38]	; 0x26
  dt.Month = sdatestructureget.Month;
 80016ac:	7f7b      	ldrb	r3, [r7, #29]
 80016ae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dt.Day = sdatestructureget.Date;
 80016b2:	7fbb      	ldrb	r3, [r7, #30]
 80016b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  dt.Hour = stimestructureget.Hours;
 80016b8:	7a3b      	ldrb	r3, [r7, #8]
 80016ba:	f887 3020 	strb.w	r3, [r7, #32]
  dt.Minute = stimestructureget.Minutes;
 80016be:	7a7b      	ldrb	r3, [r7, #9]
 80016c0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  dt.Second = stimestructureget.Seconds;
 80016c4:	7abb      	ldrb	r3, [r7, #10]
 80016c6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dt.WeekDay = sdatestructureget.WeekDay;
 80016ca:	7f3b      	ldrb	r3, [r7, #28]
 80016cc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  return dt;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	461a      	mov	r2, r3
 80016d4:	f107 0320 	add.w	r3, r7, #32
 80016d8:	cb03      	ldmia	r3!, {r0, r1}
 80016da:	6010      	str	r0, [r2, #0]
 80016dc:	6051      	str	r1, [r2, #4]
}
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	3728      	adds	r7, #40	; 0x28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000cc4 	.word	0x20000cc4

080016ec <RTC_SetTime>:

void RTC_SetTime(sDateTime dt)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	463b      	mov	r3, r7
 80016f4:	e883 0003 	stmia.w	r3, {r0, r1}
  /* Configure RTC Calendar */
   RTC_DateTypeDef sdatestructure;
   RTC_TimeTypeDef stimestructure;

   /*##-1- Configure the Date #################################################*/
   sdatestructure.Year = dt.Year - 2000;
 80016f8:	88fb      	ldrh	r3, [r7, #6]
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	3330      	adds	r3, #48	; 0x30
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	77fb      	strb	r3, [r7, #31]
   sdatestructure.Month = dt.Month;
 8001702:	793b      	ldrb	r3, [r7, #4]
 8001704:	777b      	strb	r3, [r7, #29]
   sdatestructure.Date = dt.Day;
 8001706:	78fb      	ldrb	r3, [r7, #3]
 8001708:	77bb      	strb	r3, [r7, #30]
   sdatestructure.WeekDay = dt.WeekDay;
 800170a:	797b      	ldrb	r3, [r7, #5]
 800170c:	773b      	strb	r3, [r7, #28]

   if(HAL_RTC_SetDate(&hrtc,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800170e:	f107 031c 	add.w	r3, r7, #28
 8001712:	2200      	movs	r2, #0
 8001714:	4619      	mov	r1, r3
 8001716:	4810      	ldr	r0, [pc, #64]	; (8001758 <RTC_SetTime+0x6c>)
 8001718:	f006 f946 	bl	80079a8 <HAL_RTC_SetDate>
     /* Initialization Error */
   //  Error_Handler();
   }

   /*##-2- Configure the Time #################################################*/
   stimestructure.Hours = dt.Hour;
 800171c:	783b      	ldrb	r3, [r7, #0]
 800171e:	723b      	strb	r3, [r7, #8]
   stimestructure.Minutes = dt.Minute;
 8001720:	787b      	ldrb	r3, [r7, #1]
 8001722:	727b      	strb	r3, [r7, #9]
   stimestructure.Seconds = dt.Second;
 8001724:	78bb      	ldrb	r3, [r7, #2]
 8001726:	72bb      	strb	r3, [r7, #10]
   stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 8001728:	2300      	movs	r3, #0
 800172a:	72fb      	strb	r3, [r7, #11]
   stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
   stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 8001730:	2300      	movs	r3, #0
 8001732:	61bb      	str	r3, [r7, #24]

   if(HAL_RTC_SetTime(&hrtc,&stimestructure,RTC_FORMAT_BIN) != HAL_OK)
 8001734:	f107 0308 	add.w	r3, r7, #8
 8001738:	2200      	movs	r2, #0
 800173a:	4619      	mov	r1, r3
 800173c:	4806      	ldr	r0, [pc, #24]	; (8001758 <RTC_SetTime+0x6c>)
 800173e:	f006 f83b 	bl	80077b8 <HAL_RTC_SetTime>
     /* Initialization Error */
   //  Error_Handler();
   }

   /*##-3- Writes a data in a RTC Backup data Register1 #######################*/
   HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8001742:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001746:	2101      	movs	r1, #1
 8001748:	4803      	ldr	r0, [pc, #12]	; (8001758 <RTC_SetTime+0x6c>)
 800174a:	f006 fabd 	bl	8007cc8 <HAL_RTCEx_BKUPWrite>
	
	// LOG_InsertGeneralMessage("Real Time Clock changed !");
 }
 800174e:	bf00      	nop
 8001750:	3720      	adds	r7, #32
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000cc4 	.word	0x20000cc4

0800175c <RTC_SetUnixTime>:

 
 void RTC_SetUnixTime(uint32_t unixtime)
 {
 800175c:	b580      	push	{r7, lr}
 800175e:	b088      	sub	sp, #32
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	 struct tm * tm_now;
	 time_t unixnow = unixtime;
 8001764:	6879      	ldr	r1, [r7, #4]
 8001766:	2000      	movs	r0, #0
 8001768:	460a      	mov	r2, r1
 800176a:	4603      	mov	r3, r0
 800176c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	 tm_now = localtime(&unixnow);
 8001770:	f107 0310 	add.w	r3, r7, #16
 8001774:	4618      	mov	r0, r3
 8001776:	f007 fce5 	bl	8009144 <localtime>
 800177a:	61f8      	str	r0, [r7, #28]
	 sDateTime time;
	 time.Second = tm_now->tm_sec;
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	72bb      	strb	r3, [r7, #10]
	 time.Minute = tm_now->tm_min;
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	b2db      	uxtb	r3, r3
 800178a:	727b      	strb	r3, [r7, #9]
	 time.Hour = tm_now->tm_hour;    
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	b2db      	uxtb	r3, r3
 8001792:	723b      	strb	r3, [r7, #8]
	 time.Day = tm_now->tm_mday;
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	72fb      	strb	r3, [r7, #11]
	 time.Month = tm_now->tm_mon +1;
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	3301      	adds	r3, #1
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	733b      	strb	r3, [r7, #12]
	 time.Year = tm_now->tm_year + 1900;
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	81fb      	strh	r3, [r7, #14]
	 RTC_SetTime(time);
 80017b6:	f107 0308 	add.w	r3, r7, #8
 80017ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017be:	f7ff ff95 	bl	80016ec <RTC_SetTime>
 }
 80017c2:	bf00      	nop
 80017c4:	3720      	adds	r7, #32
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <TEMP_Init>:
/* Private methods */

/* Public methods */

void TEMP_Init(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
	mTimer = 0;
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <TEMP_Init+0x2c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	801a      	strh	r2, [r3, #0]
	mReadId = 0;
 80017d6:	4b09      	ldr	r3, [pc, #36]	; (80017fc <TEMP_Init+0x30>)
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
	mConvertId = 0;
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <TEMP_Init+0x34>)
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]
	mNumOfAssignedSensors = 0;
 80017e2:	4b08      	ldr	r3, [pc, #32]	; (8001804 <TEMP_Init+0x38>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]
	mNumOfBuses = 0;
 80017e8:	4b07      	ldr	r3, [pc, #28]	; (8001808 <TEMP_Init+0x3c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]
}
 80017ee:	bf00      	nop
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	200007e4 	.word	0x200007e4
 80017fc:	200007e6 	.word	0x200007e6
 8001800:	200007e7 	.word	0x200007e7
 8001804:	20000648 	.word	0x20000648
 8001808:	200007e8 	.word	0x200007e8

0800180c <TEMP_Update100ms>:

void TEMP_Update100ms(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
	// cyclically read all assigned sensors and trig the conversion

	if (mTimer == 0)
 8001812:	4b8f      	ldr	r3, [pc, #572]	; (8001a50 <TEMP_Update100ms+0x244>)
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	f040 80c7 	bne.w	80019aa <TEMP_Update100ms+0x19e>
	{
		// copy results to VARS
		int i;
		for(i = 0; i < mNumOfAssignedSensors; i++)
 800181c:	2300      	movs	r3, #0
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	e0bc      	b.n	800199c <TEMP_Update100ms+0x190>
		{
			mSensors[i].errorCnt++;  // just assume error to simplify the code :-)
 8001822:	498c      	ldr	r1, [pc, #560]	; (8001a54 <TEMP_Update100ms+0x248>)
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4413      	add	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	440b      	add	r3, r1
 8001830:	330b      	adds	r3, #11
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	3301      	adds	r3, #1
 8001836:	b2d8      	uxtb	r0, r3
 8001838:	4986      	ldr	r1, [pc, #536]	; (8001a54 <TEMP_Update100ms+0x248>)
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	4613      	mov	r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	4413      	add	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	440b      	add	r3, r1
 8001846:	330b      	adds	r3, #11
 8001848:	4602      	mov	r2, r0
 800184a:	701a      	strb	r2, [r3, #0]
			// check the validity of last readout
			if ((mSensors[i].rawTempC_10ths >= -300) && (mSensors[i].rawTempC_10ths <= 1250) )  // valid range from -30 to 125 deg C
 800184c:	4981      	ldr	r1, [pc, #516]	; (8001a54 <TEMP_Update100ms+0x248>)
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	4613      	mov	r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	3304      	adds	r3, #4
 800185c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001860:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 8001864:	db4e      	blt.n	8001904 <TEMP_Update100ms+0xf8>
 8001866:	497b      	ldr	r1, [pc, #492]	; (8001a54 <TEMP_Update100ms+0x248>)
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4413      	add	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	440b      	add	r3, r1
 8001874:	3304      	adds	r3, #4
 8001876:	f9b3 3000 	ldrsh.w	r3, [r3]
 800187a:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800187e:	4293      	cmp	r3, r2
 8001880:	dc40      	bgt.n	8001904 <TEMP_Update100ms+0xf8>
			{
				mSensors[i].status = ets_Valid;
 8001882:	4974      	ldr	r1, [pc, #464]	; (8001a54 <TEMP_Update100ms+0x248>)
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	4413      	add	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	440b      	add	r3, r1
 8001890:	3306      	adds	r3, #6
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]
				mSensors[i].errorCnt = 0;
 8001896:	496f      	ldr	r1, [pc, #444]	; (8001a54 <TEMP_Update100ms+0x248>)
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	4413      	add	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	440b      	add	r3, r1
 80018a4:	330b      	adds	r3, #11
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
				mSensors[i].tempC_10ths = mSensors[i].rawTempC_10ths;  // copy the raw value to valid value
 80018aa:	496a      	ldr	r1, [pc, #424]	; (8001a54 <TEMP_Update100ms+0x248>)
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	4413      	add	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	440b      	add	r3, r1
 80018b8:	3304      	adds	r3, #4
 80018ba:	f9b3 0000 	ldrsh.w	r0, [r3]
 80018be:	4965      	ldr	r1, [pc, #404]	; (8001a54 <TEMP_Update100ms+0x248>)
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	4613      	mov	r3, r2
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	4413      	add	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	440b      	add	r3, r1
 80018cc:	3302      	adds	r3, #2
 80018ce:	4602      	mov	r2, r0
 80018d0:	801a      	strh	r2, [r3, #0]
				VAR_SetVariable(mSensors[i].VarId, mSensors[i].tempC_10ths, 1);
 80018d2:	4960      	ldr	r1, [pc, #384]	; (8001a54 <TEMP_Update100ms+0x248>)
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4413      	add	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	440b      	add	r3, r1
 80018e0:	3308      	adds	r3, #8
 80018e2:	881b      	ldrh	r3, [r3, #0]
 80018e4:	b2d8      	uxtb	r0, r3
 80018e6:	495b      	ldr	r1, [pc, #364]	; (8001a54 <TEMP_Update100ms+0x248>)
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	4413      	add	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	440b      	add	r3, r1
 80018f4:	3302      	adds	r3, #2
 80018f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018fa:	2201      	movs	r2, #1
 80018fc:	4619      	mov	r1, r3
 80018fe:	f000 fcb5 	bl	800226c <VAR_SetVariable>
 8001902:	e002      	b.n	800190a <TEMP_Update100ms+0xfe>
			}
			else
			{
			   UI_LED_Life_SetMode(eUI_BLINKING_FAST);
 8001904:	2003      	movs	r0, #3
 8001906:	f000 f9d9 	bl	8001cbc <UI_LED_Life_SetMode>
			}

			if ( mSensors[i].rawTempC_10ths == 0)
 800190a:	4952      	ldr	r1, [pc, #328]	; (8001a54 <TEMP_Update100ms+0x248>)
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	4413      	add	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	440b      	add	r3, r1
 8001918:	3304      	adds	r3, #4
 800191a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d102      	bne.n	8001928 <TEMP_Update100ms+0x11c>
         {
            UI_LED_Life_SetMode(eUI_BLINKING_FAST);
 8001922:	2003      	movs	r0, #3
 8001924:	f000 f9ca 	bl	8001cbc <UI_LED_Life_SetMode>
         }

			if (mSensors[i].errorCnt > MAX_ERR_TO_INVALIDATE)
 8001928:	494a      	ldr	r1, [pc, #296]	; (8001a54 <TEMP_Update100ms+0x248>)
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	4613      	mov	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4413      	add	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	330b      	adds	r3, #11
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b03      	cmp	r3, #3
 800193c:	d92b      	bls.n	8001996 <TEMP_Update100ms+0x18a>
			{
				mSensors[i].status = ets_NotValid;
 800193e:	4945      	ldr	r1, [pc, #276]	; (8001a54 <TEMP_Update100ms+0x248>)
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	4613      	mov	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4413      	add	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	440b      	add	r3, r1
 800194c:	3306      	adds	r3, #6
 800194e:	2202      	movs	r2, #2
 8001950:	701a      	strb	r2, [r3, #0]
				mSensors[i].errorCnt = 0;
 8001952:	4940      	ldr	r1, [pc, #256]	; (8001a54 <TEMP_Update100ms+0x248>)
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	4413      	add	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	440b      	add	r3, r1
 8001960:	330b      	adds	r3, #11
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
				VAR_SetVariable(mSensors[i].VarId, mSensors[i].tempC_10ths, 0);  // set invalid flag also to variables..
 8001966:	493b      	ldr	r1, [pc, #236]	; (8001a54 <TEMP_Update100ms+0x248>)
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	4613      	mov	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	4413      	add	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	440b      	add	r3, r1
 8001974:	3308      	adds	r3, #8
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	b2d8      	uxtb	r0, r3
 800197a:	4936      	ldr	r1, [pc, #216]	; (8001a54 <TEMP_Update100ms+0x248>)
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	4413      	add	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	440b      	add	r3, r1
 8001988:	3302      	adds	r3, #2
 800198a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800198e:	2200      	movs	r2, #0
 8001990:	4619      	mov	r1, r3
 8001992:	f000 fc6b 	bl	800226c <VAR_SetVariable>
		for(i = 0; i < mNumOfAssignedSensors; i++)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	3301      	adds	r3, #1
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	4b2e      	ldr	r3, [pc, #184]	; (8001a58 <TEMP_Update100ms+0x24c>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	461a      	mov	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4293      	cmp	r3, r2
 80019a6:	f6ff af3c 	blt.w	8001822 <TEMP_Update100ms+0x16>
		}
		// trig conversion

	}

	if (mTimer < mNumOfBuses)
 80019aa:	4b2c      	ldr	r3, [pc, #176]	; (8001a5c <TEMP_Update100ms+0x250>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	4b27      	ldr	r3, [pc, #156]	; (8001a50 <TEMP_Update100ms+0x244>)
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d905      	bls.n	80019c4 <TEMP_Update100ms+0x1b8>
	{
		OW_ConvertAll(mTimer);  //  convert one Bus
 80019b8:	4b25      	ldr	r3, [pc, #148]	; (8001a50 <TEMP_Update100ms+0x244>)
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff fbd8 	bl	8001174 <OW_ConvertAll>
	}


	if (mTimer > 20)  // 2 sec delay
 80019c4:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <TEMP_Update100ms+0x244>)
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	2b14      	cmp	r3, #20
 80019ca:	d92a      	bls.n	8001a22 <TEMP_Update100ms+0x216>
	{

		OW_ReadSensor(mSensors[mReadId].owBusId,
 80019cc:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <TEMP_Update100ms+0x254>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	4619      	mov	r1, r3
 80019d2:	4a20      	ldr	r2, [pc, #128]	; (8001a54 <TEMP_Update100ms+0x248>)
 80019d4:	460b      	mov	r3, r1
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	440b      	add	r3, r1
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	330a      	adds	r3, #10
 80019e0:	7818      	ldrb	r0, [r3, #0]
									&(mSensorsAddress[mSensors[mReadId].sensorId]),
 80019e2:	4b1f      	ldr	r3, [pc, #124]	; (8001a60 <TEMP_Update100ms+0x254>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	4619      	mov	r1, r3
 80019e8:	4a1a      	ldr	r2, [pc, #104]	; (8001a54 <TEMP_Update100ms+0x248>)
 80019ea:	460b      	mov	r3, r1
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	440b      	add	r3, r1
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	4a1a      	ldr	r2, [pc, #104]	; (8001a64 <TEMP_Update100ms+0x258>)
 80019fa:	1899      	adds	r1, r3, r2
									&(mSensors[mReadId].rawTempC_10ths));
 80019fc:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <TEMP_Update100ms+0x254>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
		OW_ReadSensor(mSensors[mReadId].owBusId,
 8001a02:	4613      	mov	r3, r2
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	4413      	add	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4a12      	ldr	r2, [pc, #72]	; (8001a54 <TEMP_Update100ms+0x248>)
 8001a0c:	4413      	add	r3, r2
 8001a0e:	3304      	adds	r3, #4
 8001a10:	461a      	mov	r2, r3
 8001a12:	f7ff fb0f 	bl	8001034 <OW_ReadSensor>
		mReadId++;
 8001a16:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <TEMP_Update100ms+0x254>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <TEMP_Update100ms+0x254>)
 8001a20:	701a      	strb	r2, [r3, #0]

	}
	mTimer++;
 8001a22:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <TEMP_Update100ms+0x244>)
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	3301      	adds	r3, #1
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <TEMP_Update100ms+0x244>)
 8001a2c:	801a      	strh	r2, [r3, #0]

	if (mReadId >= mNumOfAssignedSensors)
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <TEMP_Update100ms+0x254>)
 8001a30:	781a      	ldrb	r2, [r3, #0]
 8001a32:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <TEMP_Update100ms+0x24c>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d305      	bcc.n	8001a46 <TEMP_Update100ms+0x23a>
	{
		mReadId = 0;
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <TEMP_Update100ms+0x254>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
		mTimer = 0;
 8001a40:	4b03      	ldr	r3, [pc, #12]	; (8001a50 <TEMP_Update100ms+0x244>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	801a      	strh	r2, [r3, #0]
	}

}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	200007e4 	.word	0x200007e4
 8001a54:	2000064c 	.word	0x2000064c
 8001a58:	20000648 	.word	0x20000648
 8001a5c:	200007e8 	.word	0x200007e8
 8001a60:	200007e6 	.word	0x200007e6
 8001a64:	20000000 	.word	0x20000000

08001a68 <TEMP_AddHwBus>:

uint8_t TEMP_AddHwBus(uint8_t busId, GPIO_TypeDef* port, uint32_t pin)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
 8001a74:	73fb      	strb	r3, [r7, #15]
	if (mNumOfBuses < MAX_NUM_OF_BUSES)
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <TEMP_AddHwBus+0x3c>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d80d      	bhi.n	8001a9a <TEMP_AddHwBus+0x32>
	{
		OW_AddBus(busId,port, pin);
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	68b9      	ldr	r1, [r7, #8]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fa6f 	bl	8000f68 <OW_AddBus>
		mNumOfBuses ++;
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <TEMP_AddHwBus+0x3c>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <TEMP_AddHwBus+0x3c>)
 8001a94:	701a      	strb	r2, [r3, #0]
		return 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	e000      	b.n	8001a9c <TEMP_AddHwBus+0x34>
	}
	else
	{
		return 1;
 8001a9a:	2301      	movs	r3, #1
	}

}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	200007e8 	.word	0x200007e8

08001aa8 <TEMP_AssignSensor>:



uint8_t TEMP_AssignSensor(uint8_t sensorId, uint8_t varId, uint8_t busId)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	71bb      	strb	r3, [r7, #6]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	717b      	strb	r3, [r7, #5]
	if (mNumOfAssignedSensors < NUM_OF_ALL_SENSORS)
 8001aba:	4b2e      	ldr	r3, [pc, #184]	; (8001b74 <TEMP_AssignSensor+0xcc>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b21      	cmp	r3, #33	; 0x21
 8001ac0:	d851      	bhi.n	8001b66 <TEMP_AssignSensor+0xbe>
	{
		mSensors[mNumOfAssignedSensors].sensorId = sensorId;
 8001ac2:	4b2c      	ldr	r3, [pc, #176]	; (8001b74 <TEMP_AssignSensor+0xcc>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4a2b      	ldr	r2, [pc, #172]	; (8001b78 <TEMP_AssignSensor+0xd0>)
 8001aca:	460b      	mov	r3, r1
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	440b      	add	r3, r1
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	79fa      	ldrb	r2, [r7, #7]
 8001ad6:	701a      	strb	r2, [r3, #0]
		mSensors[mNumOfAssignedSensors].tempC_10ths = 0x8000;
 8001ad8:	4b26      	ldr	r3, [pc, #152]	; (8001b74 <TEMP_AssignSensor+0xcc>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	4619      	mov	r1, r3
 8001ade:	4a26      	ldr	r2, [pc, #152]	; (8001b78 <TEMP_AssignSensor+0xd0>)
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	440b      	add	r3, r1
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	3302      	adds	r3, #2
 8001aec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001af0:	801a      	strh	r2, [r3, #0]
		mSensors[mNumOfAssignedSensors].status = ets_NotReady;
 8001af2:	4b20      	ldr	r3, [pc, #128]	; (8001b74 <TEMP_AssignSensor+0xcc>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	4619      	mov	r1, r3
 8001af8:	4a1f      	ldr	r2, [pc, #124]	; (8001b78 <TEMP_AssignSensor+0xd0>)
 8001afa:	460b      	mov	r3, r1
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	440b      	add	r3, r1
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	3306      	adds	r3, #6
 8001b06:	2201      	movs	r2, #1
 8001b08:	701a      	strb	r2, [r3, #0]
		mSensors[mNumOfAssignedSensors].VarId = varId;
 8001b0a:	4b1a      	ldr	r3, [pc, #104]	; (8001b74 <TEMP_AssignSensor+0xcc>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	79bb      	ldrb	r3, [r7, #6]
 8001b12:	b298      	uxth	r0, r3
 8001b14:	4a18      	ldr	r2, [pc, #96]	; (8001b78 <TEMP_AssignSensor+0xd0>)
 8001b16:	460b      	mov	r3, r1
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	440b      	add	r3, r1
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	3308      	adds	r3, #8
 8001b22:	4602      	mov	r2, r0
 8001b24:	801a      	strh	r2, [r3, #0]
		mSensors[mNumOfAssignedSensors].owBusId = busId;
 8001b26:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <TEMP_AssignSensor+0xcc>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4a12      	ldr	r2, [pc, #72]	; (8001b78 <TEMP_AssignSensor+0xd0>)
 8001b2e:	460b      	mov	r3, r1
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	440b      	add	r3, r1
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	330a      	adds	r3, #10
 8001b3a:	797a      	ldrb	r2, [r7, #5]
 8001b3c:	701a      	strb	r2, [r3, #0]
		mSensors[mNumOfAssignedSensors].errorCnt = 0;
 8001b3e:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <TEMP_AssignSensor+0xcc>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	4619      	mov	r1, r3
 8001b44:	4a0c      	ldr	r2, [pc, #48]	; (8001b78 <TEMP_AssignSensor+0xd0>)
 8001b46:	460b      	mov	r3, r1
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	440b      	add	r3, r1
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	330b      	adds	r3, #11
 8001b52:	2200      	movs	r2, #0
 8001b54:	701a      	strb	r2, [r3, #0]
		mNumOfAssignedSensors++;
 8001b56:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <TEMP_AssignSensor+0xcc>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <TEMP_AssignSensor+0xcc>)
 8001b60:	701a      	strb	r2, [r3, #0]
		return 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	e000      	b.n	8001b68 <TEMP_AssignSensor+0xc0>
	}
	else
	{
		return 1;
 8001b66:	2301      	movs	r3, #1
	}
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	20000648 	.word	0x20000648
 8001b78:	2000064c 	.word	0x2000064c

08001b7c <UI_Init>:
void UI_Struct_Initialisation (sUI init_struct, sUI *target);



void UI_Init (sUIHwInit* hw)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b088      	sub	sp, #32
 8001b80:	af02      	add	r7, sp, #8
 8001b82:	6078      	str	r0, [r7, #4]
	sUI init_struct;
	
	init_struct.Status			= eUI_OFF;
 8001b84:	2300      	movs	r3, #0
 8001b86:	72bb      	strb	r3, [r7, #10]
	init_struct.Led_Cnt			= 0x00;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	813b      	strh	r3, [r7, #8]
	
	init_struct.Pin					= hw->Led_Life.Pin;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	613b      	str	r3, [r7, #16]
	init_struct.Port				= hw->Led_Life.Port;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	60fb      	str	r3, [r7, #12]
	init_struct.Logic				= hw->Led_Life.Logic;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	7a1b      	ldrb	r3, [r3, #8]
 8001b9c:	753b      	strb	r3, [r7, #20]
	UI_Struct_Initialisation (init_struct, &LED_Life);
 8001b9e:	4b27      	ldr	r3, [pc, #156]	; (8001c3c <UI_Init+0xc0>)
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	f107 0308 	add.w	r3, r7, #8
 8001ba6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ba8:	f000 f852 	bl	8001c50 <UI_Struct_Initialisation>
	
	init_struct.Pin					= hw->Led_R.Pin;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	613b      	str	r3, [r7, #16]
	init_struct.Port				= hw->Led_R.Port;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	60fb      	str	r3, [r7, #12]
	init_struct.Logic				= hw->Led_R.Logic;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	7d1b      	ldrb	r3, [r3, #20]
 8001bbc:	753b      	strb	r3, [r7, #20]
	UI_Struct_Initialisation (init_struct, &LED_R);
 8001bbe:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <UI_Init+0xc4>)
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	f107 0308 	add.w	r3, r7, #8
 8001bc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bc8:	f000 f842 	bl	8001c50 <UI_Struct_Initialisation>

#ifndef LIMITED_UI

	init_struct.Pin					= hw->Led_G.Pin;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	69db      	ldr	r3, [r3, #28]
 8001bd0:	613b      	str	r3, [r7, #16]
	init_struct.Port				= hw->Led_G.Port;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	60fb      	str	r3, [r7, #12]
	init_struct.Logic				= hw->Led_G.Logic;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bde:	753b      	strb	r3, [r7, #20]
	UI_Struct_Initialisation (init_struct, &LED_G);
 8001be0:	4b18      	ldr	r3, [pc, #96]	; (8001c44 <UI_Init+0xc8>)
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	f107 0308 	add.w	r3, r7, #8
 8001be8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bea:	f000 f831 	bl	8001c50 <UI_Struct_Initialisation>

	init_struct.Pin					= hw->Led_B.Pin;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf2:	613b      	str	r3, [r7, #16]
	init_struct.Port				= hw->Led_B.Port;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	60fb      	str	r3, [r7, #12]
	init_struct.Logic				= hw->Led_B.Logic;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001c00:	753b      	strb	r3, [r7, #20]
	UI_Struct_Initialisation (init_struct, &LED_B);
 8001c02:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <UI_Init+0xcc>)
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	f107 0308 	add.w	r3, r7, #8
 8001c0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c0c:	f000 f820 	bl	8001c50 <UI_Struct_Initialisation>

	init_struct.Pin					= hw->Buzzer.Pin;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c14:	613b      	str	r3, [r7, #16]
	init_struct.Port				= hw->Buzzer.Port;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	60fb      	str	r3, [r7, #12]
	init_struct.Logic				= hw->Buzzer.Logic;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c22:	753b      	strb	r3, [r7, #20]
  UI_Struct_Initialisation (init_struct, &Buzzer);
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <UI_Init+0xd0>)
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	f107 0308 	add.w	r3, r7, #8
 8001c2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c2e:	f000 f80f 	bl	8001c50 <UI_Struct_Initialisation>
#endif
}
 8001c32:	bf00      	nop
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	200007ec 	.word	0x200007ec
 8001c40:	200007fc 	.word	0x200007fc
 8001c44:	2000080c 	.word	0x2000080c
 8001c48:	2000081c 	.word	0x2000081c
 8001c4c:	2000082c 	.word	0x2000082c

08001c50 <UI_Struct_Initialisation>:
/**
* @brief  Reading of actual states on defined Digital input
* @param	*di_input	Pointer to Digital input
*/
void UI_Struct_Initialisation (sUI init_struct, sUI *target)
{
 8001c50:	b590      	push	{r4, r7, lr}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	463c      	mov	r4, r7
 8001c58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	*target = init_struct;
 8001c5c:	6a3b      	ldr	r3, [r7, #32]
 8001c5e:	461c      	mov	r4, r3
 8001c60:	463b      	mov	r3, r7
 8001c62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	UI_Control(target,0);
 8001c68:	2100      	movs	r1, #0
 8001c6a:	6a38      	ldr	r0, [r7, #32]
 8001c6c:	f000 f83e 	bl	8001cec <UI_Control>
}
 8001c70:	bf00      	nop
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd90      	pop	{r4, r7, pc}

08001c78 <UI_Update_10ms>:


// periodicaly scheduled updtae function
void UI_Update_10ms()
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
	UI_Control(&LED_Life, 	0x00);
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	480a      	ldr	r0, [pc, #40]	; (8001ca8 <UI_Update_10ms+0x30>)
 8001c80:	f000 f834 	bl	8001cec <UI_Control>
	UI_Control(&LED_R, 	0x00);
 8001c84:	2100      	movs	r1, #0
 8001c86:	4809      	ldr	r0, [pc, #36]	; (8001cac <UI_Update_10ms+0x34>)
 8001c88:	f000 f830 	bl	8001cec <UI_Control>
#ifndef LIMITED_UI
	UI_Control(&LED_G, 	0x00);
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4808      	ldr	r0, [pc, #32]	; (8001cb0 <UI_Update_10ms+0x38>)
 8001c90:	f000 f82c 	bl	8001cec <UI_Control>
	UI_Control(&LED_B, 	0x00);
 8001c94:	2100      	movs	r1, #0
 8001c96:	4807      	ldr	r0, [pc, #28]	; (8001cb4 <UI_Update_10ms+0x3c>)
 8001c98:	f000 f828 	bl	8001cec <UI_Control>
	UI_Control(&Buzzer, 	0x00);
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4806      	ldr	r0, [pc, #24]	; (8001cb8 <UI_Update_10ms+0x40>)
 8001ca0:	f000 f824 	bl	8001cec <UI_Control>
#endif
}
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	200007ec 	.word	0x200007ec
 8001cac:	200007fc 	.word	0x200007fc
 8001cb0:	2000080c 	.word	0x2000080c
 8001cb4:	2000081c 	.word	0x2000081c
 8001cb8:	2000082c 	.word	0x2000082c

08001cbc <UI_LED_Life_SetMode>:
		LED_B.Led_Cnt = 0;
	}
}

void UI_LED_Life_SetMode(eUI_Status status)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
	if (LED_Life.Status != status)
 8001cc6:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <UI_LED_Life_SetMode+0x2c>)
 8001cc8:	789b      	ldrb	r3, [r3, #2]
 8001cca:	79fa      	ldrb	r2, [r7, #7]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d005      	beq.n	8001cdc <UI_LED_Life_SetMode+0x20>
	{
		LED_Life.Status = status;
 8001cd0:	4a05      	ldr	r2, [pc, #20]	; (8001ce8 <UI_LED_Life_SetMode+0x2c>)
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	7093      	strb	r3, [r2, #2]
		LED_Life.Led_Cnt = 0;
 8001cd6:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <UI_LED_Life_SetMode+0x2c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	801a      	strh	r2, [r3, #0]
	}
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	200007ec 	.word	0x200007ec

08001cec <UI_Control>:
  * @brief  Controlling states of LED 
  * @param  led: Pointer to specific LED
  * @param  led_switch: If isn't this parameter null, the function inverts status of specific LED, but LED has to be in TOGGLE mode!
  */
static void UI_Control (sUI *led,uint8_t led_switch)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	70fb      	strb	r3, [r7, #3]

	switch(led->Status)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	789b      	ldrb	r3, [r3, #2]
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	f200 823f 	bhi.w	8002180 <UI_Control+0x494>
 8001d02:	a201      	add	r2, pc, #4	; (adr r2, 8001d08 <UI_Control+0x1c>)
 8001d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d08:	08001d2d 	.word	0x08001d2d
 8001d0c:	08001d5d 	.word	0x08001d5d
 8001d10:	08001d8d 	.word	0x08001d8d
 8001d14:	08001e05 	.word	0x08001e05
 8001d18:	08001e7d 	.word	0x08001e7d
 8001d1c:	08001ef1 	.word	0x08001ef1
 8001d20:	08001f67 	.word	0x08001f67
 8001d24:	08001ffb 	.word	0x08001ffb
 8001d28:	08001fdf 	.word	0x08001fdf
	{
		case eUI_OFF:
			if(led->Logic == eUIL_NEGATIVE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	7b1b      	ldrb	r3, [r3, #12]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d109      	bne.n	8001d48 <UI_Control+0x5c>
			{
				HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6858      	ldr	r0, [r3, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	2201      	movs	r2, #1
 8001d40:	4619      	mov	r1, r3
 8001d42:	f002 fe21 	bl	8004988 <HAL_GPIO_WritePin>
			}
			else
			{
				HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
			}
			break;
 8001d46:	e226      	b.n	8002196 <UI_Control+0x4aa>
				HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6858      	ldr	r0, [r3, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	2200      	movs	r2, #0
 8001d54:	4619      	mov	r1, r3
 8001d56:	f002 fe17 	bl	8004988 <HAL_GPIO_WritePin>
			break;
 8001d5a:	e21c      	b.n	8002196 <UI_Control+0x4aa>
		case eUI_ON:
			if(led->Logic == eUIL_NEGATIVE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	7b1b      	ldrb	r3, [r3, #12]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d109      	bne.n	8001d78 <UI_Control+0x8c>
			{
				HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6858      	ldr	r0, [r3, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	2200      	movs	r2, #0
 8001d70:	4619      	mov	r1, r3
 8001d72:	f002 fe09 	bl	8004988 <HAL_GPIO_WritePin>
			}
			else
			{
				HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
			}			
			break;
 8001d76:	e20e      	b.n	8002196 <UI_Control+0x4aa>
				HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6858      	ldr	r0, [r3, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	2201      	movs	r2, #1
 8001d84:	4619      	mov	r1, r3
 8001d86:	f002 fdff 	bl	8004988 <HAL_GPIO_WritePin>
			break;
 8001d8a:	e204      	b.n	8002196 <UI_Control+0x4aa>
		case eUI_BLINKING_SLOW:
			if(led->Led_Cnt <= 50)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	2b32      	cmp	r3, #50	; 0x32
 8001d92:	d817      	bhi.n	8001dc4 <UI_Control+0xd8>
			{
				if(led->Logic == eUIL_NEGATIVE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	7b1b      	ldrb	r3, [r3, #12]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d109      	bne.n	8001db0 <UI_Control+0xc4>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6858      	ldr	r0, [r3, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	2200      	movs	r2, #0
 8001da8:	4619      	mov	r1, r3
 8001daa:	f002 fded 	bl	8004988 <HAL_GPIO_WritePin>
 8001dae:	e020      	b.n	8001df2 <UI_Control+0x106>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6858      	ldr	r0, [r3, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	2201      	movs	r2, #1
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f002 fde3 	bl	8004988 <HAL_GPIO_WritePin>
 8001dc2:	e016      	b.n	8001df2 <UI_Control+0x106>
				}	
			}
			else
			{
				if(led->Logic == eUIL_NEGATIVE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	7b1b      	ldrb	r3, [r3, #12]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d109      	bne.n	8001de0 <UI_Control+0xf4>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6858      	ldr	r0, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f002 fdd5 	bl	8004988 <HAL_GPIO_WritePin>
 8001dde:	e008      	b.n	8001df2 <UI_Control+0x106>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6858      	ldr	r0, [r3, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	2200      	movs	r2, #0
 8001dec:	4619      	mov	r1, r3
 8001dee:	f002 fdcb 	bl	8004988 <HAL_GPIO_WritePin>
				}
			}

			if(led->Led_Cnt >= 100)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	881b      	ldrh	r3, [r3, #0]
 8001df6:	2b63      	cmp	r3, #99	; 0x63
 8001df8:	f240 81c4 	bls.w	8002184 <UI_Control+0x498>
			{
				led->Led_Cnt = 0;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	801a      	strh	r2, [r3, #0]
			}
			break;
 8001e02:	e1bf      	b.n	8002184 <UI_Control+0x498>
		case eUI_BLINKING_FAST:
			if(led->Led_Cnt <= 10 )
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	2b0a      	cmp	r3, #10
 8001e0a:	d817      	bhi.n	8001e3c <UI_Control+0x150>
			{
				if(led->Logic == eUIL_NEGATIVE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	7b1b      	ldrb	r3, [r3, #12]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d109      	bne.n	8001e28 <UI_Control+0x13c>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6858      	ldr	r0, [r3, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	2200      	movs	r2, #0
 8001e20:	4619      	mov	r1, r3
 8001e22:	f002 fdb1 	bl	8004988 <HAL_GPIO_WritePin>
 8001e26:	e020      	b.n	8001e6a <UI_Control+0x17e>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6858      	ldr	r0, [r3, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	2201      	movs	r2, #1
 8001e34:	4619      	mov	r1, r3
 8001e36:	f002 fda7 	bl	8004988 <HAL_GPIO_WritePin>
 8001e3a:	e016      	b.n	8001e6a <UI_Control+0x17e>
				}	
			}
			else
			{
				if(led->Logic == eUIL_NEGATIVE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	7b1b      	ldrb	r3, [r3, #12]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d109      	bne.n	8001e58 <UI_Control+0x16c>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6858      	ldr	r0, [r3, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	2201      	movs	r2, #1
 8001e50:	4619      	mov	r1, r3
 8001e52:	f002 fd99 	bl	8004988 <HAL_GPIO_WritePin>
 8001e56:	e008      	b.n	8001e6a <UI_Control+0x17e>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6858      	ldr	r0, [r3, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	2200      	movs	r2, #0
 8001e64:	4619      	mov	r1, r3
 8001e66:	f002 fd8f 	bl	8004988 <HAL_GPIO_WritePin>
				}
			}

			if(led->Led_Cnt >= 20)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	881b      	ldrh	r3, [r3, #0]
 8001e6e:	2b13      	cmp	r3, #19
 8001e70:	f240 818a 	bls.w	8002188 <UI_Control+0x49c>
			{
				led->Led_Cnt = 0;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	801a      	strh	r2, [r3, #0]
			}			
			break;
 8001e7a:	e185      	b.n	8002188 <UI_Control+0x49c>
		case eUI_BLINK_ONCE:
			if(led->Led_Cnt <= 2)  // blink for 20ms
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d817      	bhi.n	8001eb4 <UI_Control+0x1c8>
			{
				if(led->Logic == eUIL_NEGATIVE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	7b1b      	ldrb	r3, [r3, #12]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d109      	bne.n	8001ea0 <UI_Control+0x1b4>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6858      	ldr	r0, [r3, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	2200      	movs	r2, #0
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f002 fd75 	bl	8004988 <HAL_GPIO_WritePin>
				}
				
				led->Status = eUI_OFF;   // go to permanent off state
				led->Led_Cnt = 0;
			}		
			break;
 8001e9e:	e17a      	b.n	8002196 <UI_Control+0x4aa>
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6858      	ldr	r0, [r3, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	2201      	movs	r2, #1
 8001eac:	4619      	mov	r1, r3
 8001eae:	f002 fd6b 	bl	8004988 <HAL_GPIO_WritePin>
			break;
 8001eb2:	e170      	b.n	8002196 <UI_Control+0x4aa>
				if(led->Logic == eUIL_NEGATIVE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	7b1b      	ldrb	r3, [r3, #12]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d109      	bne.n	8001ed0 <UI_Control+0x1e4>
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6858      	ldr	r0, [r3, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f002 fd5d 	bl	8004988 <HAL_GPIO_WritePin>
 8001ece:	e008      	b.n	8001ee2 <UI_Control+0x1f6>
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6858      	ldr	r0, [r3, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	2200      	movs	r2, #0
 8001edc:	4619      	mov	r1, r3
 8001ede:	f002 fd53 	bl	8004988 <HAL_GPIO_WritePin>
				led->Status = eUI_OFF;   // go to permanent off state
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	709a      	strb	r2, [r3, #2]
				led->Led_Cnt = 0;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	801a      	strh	r2, [r3, #0]
			break;
 8001eee:	e152      	b.n	8002196 <UI_Control+0x4aa>
		 case eUI_BEEP_ONCE:
					if(led->Led_Cnt <= 300)  // beep for 3 sec
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001ef8:	d817      	bhi.n	8001f2a <UI_Control+0x23e>
					{
						if(led->Logic == eUIL_NEGATIVE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	7b1b      	ldrb	r3, [r3, #12]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d109      	bne.n	8001f16 <UI_Control+0x22a>
						{
							HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6858      	ldr	r0, [r3, #4]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	4619      	mov	r1, r3
 8001f10:	f002 fd3a 	bl	8004988 <HAL_GPIO_WritePin>
						}

						led->Status = eUI_OFF;   // go to permanent off state
						led->Led_Cnt = 0;
					}
					break;
 8001f14:	e13f      	b.n	8002196 <UI_Control+0x4aa>
							HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6858      	ldr	r0, [r3, #4]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	2201      	movs	r2, #1
 8001f22:	4619      	mov	r1, r3
 8001f24:	f002 fd30 	bl	8004988 <HAL_GPIO_WritePin>
					break;
 8001f28:	e135      	b.n	8002196 <UI_Control+0x4aa>
						if(led->Logic == eUIL_NEGATIVE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	7b1b      	ldrb	r3, [r3, #12]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d109      	bne.n	8001f46 <UI_Control+0x25a>
							HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6858      	ldr	r0, [r3, #4]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f002 fd22 	bl	8004988 <HAL_GPIO_WritePin>
 8001f44:	e008      	b.n	8001f58 <UI_Control+0x26c>
							HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6858      	ldr	r0, [r3, #4]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	2200      	movs	r2, #0
 8001f52:	4619      	mov	r1, r3
 8001f54:	f002 fd18 	bl	8004988 <HAL_GPIO_WritePin>
						led->Status = eUI_OFF;   // go to permanent off state
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	709a      	strb	r2, [r3, #2]
						led->Led_Cnt = 0;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	801a      	strh	r2, [r3, #0]
					break;
 8001f64:	e117      	b.n	8002196 <UI_Control+0x4aa>
		case eUI_FLASH:
			if(led->Led_Cnt < 2)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d817      	bhi.n	8001f9e <UI_Control+0x2b2>
			{
				if(led->Logic == eUIL_NEGATIVE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	7b1b      	ldrb	r3, [r3, #12]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d109      	bne.n	8001f8a <UI_Control+0x29e>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6858      	ldr	r0, [r3, #4]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	2200      	movs	r2, #0
 8001f82:	4619      	mov	r1, r3
 8001f84:	f002 fd00 	bl	8004988 <HAL_GPIO_WritePin>
 8001f88:	e020      	b.n	8001fcc <UI_Control+0x2e0>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6858      	ldr	r0, [r3, #4]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	2201      	movs	r2, #1
 8001f96:	4619      	mov	r1, r3
 8001f98:	f002 fcf6 	bl	8004988 <HAL_GPIO_WritePin>
 8001f9c:	e016      	b.n	8001fcc <UI_Control+0x2e0>
				}	
			}
			else
			{
				if(led->Logic == eUIL_NEGATIVE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	7b1b      	ldrb	r3, [r3, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d109      	bne.n	8001fba <UI_Control+0x2ce>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6858      	ldr	r0, [r3, #4]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	f002 fce8 	bl	8004988 <HAL_GPIO_WritePin>
 8001fb8:	e008      	b.n	8001fcc <UI_Control+0x2e0>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6858      	ldr	r0, [r3, #4]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f002 fcde 	bl	8004988 <HAL_GPIO_WritePin>
				}
			}

			if(led->Led_Cnt >= 200)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	2bc7      	cmp	r3, #199	; 0xc7
 8001fd2:	f240 80db 	bls.w	800218c <UI_Control+0x4a0>
			{
				led->Led_Cnt = 0;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	801a      	strh	r2, [r3, #0]
			}			
			break;
 8001fdc:	e0d6      	b.n	800218c <UI_Control+0x4a0>
		case eUI_TOGGLE:
			if(led_switch)
 8001fde:	78fb      	ldrb	r3, [r7, #3]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 80d5 	beq.w	8002190 <UI_Control+0x4a4>
			{
				HAL_GPIO_TogglePin(led->Port,led->Pin);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	f002 fce1 	bl	80049ba <HAL_GPIO_TogglePin>
			}
			break;
 8001ff8:	e0ca      	b.n	8002190 <UI_Control+0x4a4>
		case eUI_COMBI_1:
			if(led->Led_Cnt < 10)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	2b09      	cmp	r3, #9
 8002000:	d817      	bhi.n	8002032 <UI_Control+0x346>
			{
				if(led->Logic == eUIL_NEGATIVE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	7b1b      	ldrb	r3, [r3, #12]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d109      	bne.n	800201e <UI_Control+0x332>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6858      	ldr	r0, [r3, #4]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	b29b      	uxth	r3, r3
 8002014:	2200      	movs	r2, #0
 8002016:	4619      	mov	r1, r3
 8002018:	f002 fcb6 	bl	8004988 <HAL_GPIO_WritePin>
 800201c:	e0a8      	b.n	8002170 <UI_Control+0x484>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6858      	ldr	r0, [r3, #4]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	b29b      	uxth	r3, r3
 8002028:	2201      	movs	r2, #1
 800202a:	4619      	mov	r1, r3
 800202c:	f002 fcac 	bl	8004988 <HAL_GPIO_WritePin>
 8002030:	e09e      	b.n	8002170 <UI_Control+0x484>
				}	
			}
			else if((led->Led_Cnt >= 10)&&(led->Led_Cnt < 50))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	2b09      	cmp	r3, #9
 8002038:	d91b      	bls.n	8002072 <UI_Control+0x386>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	2b31      	cmp	r3, #49	; 0x31
 8002040:	d817      	bhi.n	8002072 <UI_Control+0x386>
			{
				if(led->Logic == eUIL_NEGATIVE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	7b1b      	ldrb	r3, [r3, #12]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d109      	bne.n	800205e <UI_Control+0x372>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6858      	ldr	r0, [r3, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	b29b      	uxth	r3, r3
 8002054:	2201      	movs	r2, #1
 8002056:	4619      	mov	r1, r3
 8002058:	f002 fc96 	bl	8004988 <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 800205c:	e088      	b.n	8002170 <UI_Control+0x484>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6858      	ldr	r0, [r3, #4]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	b29b      	uxth	r3, r3
 8002068:	2200      	movs	r2, #0
 800206a:	4619      	mov	r1, r3
 800206c:	f002 fc8c 	bl	8004988 <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 8002070:	e07e      	b.n	8002170 <UI_Control+0x484>
				}
			}
			else if((led->Led_Cnt >= 50)&&(led->Led_Cnt < 60))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	2b31      	cmp	r3, #49	; 0x31
 8002078:	d91b      	bls.n	80020b2 <UI_Control+0x3c6>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	2b3b      	cmp	r3, #59	; 0x3b
 8002080:	d817      	bhi.n	80020b2 <UI_Control+0x3c6>
			{
				if(led->Logic == eUIL_NEGATIVE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	7b1b      	ldrb	r3, [r3, #12]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d109      	bne.n	800209e <UI_Control+0x3b2>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6858      	ldr	r0, [r3, #4]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	b29b      	uxth	r3, r3
 8002094:	2200      	movs	r2, #0
 8002096:	4619      	mov	r1, r3
 8002098:	f002 fc76 	bl	8004988 <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 800209c:	e068      	b.n	8002170 <UI_Control+0x484>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6858      	ldr	r0, [r3, #4]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	2201      	movs	r2, #1
 80020aa:	4619      	mov	r1, r3
 80020ac:	f002 fc6c 	bl	8004988 <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 80020b0:	e05e      	b.n	8002170 <UI_Control+0x484>
				}	
			}
			else if((led->Led_Cnt >= 60)&&(led->Led_Cnt < 100))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	2b3b      	cmp	r3, #59	; 0x3b
 80020b8:	d91b      	bls.n	80020f2 <UI_Control+0x406>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	881b      	ldrh	r3, [r3, #0]
 80020be:	2b63      	cmp	r3, #99	; 0x63
 80020c0:	d817      	bhi.n	80020f2 <UI_Control+0x406>
			{
				if(led->Logic == eUIL_NEGATIVE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	7b1b      	ldrb	r3, [r3, #12]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d109      	bne.n	80020de <UI_Control+0x3f2>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6858      	ldr	r0, [r3, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	2201      	movs	r2, #1
 80020d6:	4619      	mov	r1, r3
 80020d8:	f002 fc56 	bl	8004988 <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 80020dc:	e048      	b.n	8002170 <UI_Control+0x484>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6858      	ldr	r0, [r3, #4]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	2200      	movs	r2, #0
 80020ea:	4619      	mov	r1, r3
 80020ec:	f002 fc4c 	bl	8004988 <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 80020f0:	e03e      	b.n	8002170 <UI_Control+0x484>
				}
			}
			else if((led->Led_Cnt >= 100)&&(led->Led_Cnt < 150))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	2b63      	cmp	r3, #99	; 0x63
 80020f8:	d91b      	bls.n	8002132 <UI_Control+0x446>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	2b95      	cmp	r3, #149	; 0x95
 8002100:	d817      	bhi.n	8002132 <UI_Control+0x446>
			{
				if(led->Logic == eUIL_NEGATIVE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	7b1b      	ldrb	r3, [r3, #12]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d109      	bne.n	800211e <UI_Control+0x432>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6858      	ldr	r0, [r3, #4]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	b29b      	uxth	r3, r3
 8002114:	2200      	movs	r2, #0
 8002116:	4619      	mov	r1, r3
 8002118:	f002 fc36 	bl	8004988 <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 800211c:	e028      	b.n	8002170 <UI_Control+0x484>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6858      	ldr	r0, [r3, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	b29b      	uxth	r3, r3
 8002128:	2201      	movs	r2, #1
 800212a:	4619      	mov	r1, r3
 800212c:	f002 fc2c 	bl	8004988 <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 8002130:	e01e      	b.n	8002170 <UI_Control+0x484>
				}	
			}
			else if((led->Led_Cnt >= 150)&&(led->Led_Cnt < 200))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	881b      	ldrh	r3, [r3, #0]
 8002136:	2b95      	cmp	r3, #149	; 0x95
 8002138:	d91a      	bls.n	8002170 <UI_Control+0x484>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	2bc7      	cmp	r3, #199	; 0xc7
 8002140:	d816      	bhi.n	8002170 <UI_Control+0x484>
			{
				if(led->Logic == eUIL_NEGATIVE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	7b1b      	ldrb	r3, [r3, #12]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d109      	bne.n	800215e <UI_Control+0x472>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6858      	ldr	r0, [r3, #4]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	b29b      	uxth	r3, r3
 8002154:	2201      	movs	r2, #1
 8002156:	4619      	mov	r1, r3
 8002158:	f002 fc16 	bl	8004988 <HAL_GPIO_WritePin>
 800215c:	e008      	b.n	8002170 <UI_Control+0x484>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6858      	ldr	r0, [r3, #4]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	b29b      	uxth	r3, r3
 8002168:	2200      	movs	r2, #0
 800216a:	4619      	mov	r1, r3
 800216c:	f002 fc0c 	bl	8004988 <HAL_GPIO_WritePin>
				}
			}

			if(led->Led_Cnt >= 200)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	2bc7      	cmp	r3, #199	; 0xc7
 8002176:	d90d      	bls.n	8002194 <UI_Control+0x4a8>
			{
				led->Led_Cnt = 0;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	801a      	strh	r2, [r3, #0]
			}			
			
			break;
 800217e:	e009      	b.n	8002194 <UI_Control+0x4a8>
		default:
			break;
 8002180:	bf00      	nop
 8002182:	e008      	b.n	8002196 <UI_Control+0x4aa>
			break;
 8002184:	bf00      	nop
 8002186:	e006      	b.n	8002196 <UI_Control+0x4aa>
			break;
 8002188:	bf00      	nop
 800218a:	e004      	b.n	8002196 <UI_Control+0x4aa>
			break;
 800218c:	bf00      	nop
 800218e:	e002      	b.n	8002196 <UI_Control+0x4aa>
			break;
 8002190:	bf00      	nop
 8002192:	e000      	b.n	8002196 <UI_Control+0x4aa>
			break;
 8002194:	bf00      	nop
	}
	
	if(led->Led_Cnt < 0xFFFF)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800219e:	4293      	cmp	r3, r2
 80021a0:	d005      	beq.n	80021ae <UI_Control+0x4c2>
	{
		led->Led_Cnt++;		
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	881b      	ldrh	r3, [r3, #0]
 80021a6:	3301      	adds	r3, #1
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	801a      	strh	r2, [r3, #0]
	}	
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop

080021b8 <VAR_Init>:

int16_t mDummyVar = 0x8000;


void VAR_Init(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < NUM_OF_VARIABLES; i++)
 80021be:	2300      	movs	r3, #0
 80021c0:	607b      	str	r3, [r7, #4]
 80021c2:	e013      	b.n	80021ec <VAR_Init+0x34>
	{
		Vars[i].valid = 0;
 80021c4:	4a0e      	ldr	r2, [pc, #56]	; (8002200 <VAR_Init+0x48>)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2100      	movs	r1, #0
 80021ca:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		Vars[i].local = 0;
 80021ce:	4a0c      	ldr	r2, [pc, #48]	; (8002200 <VAR_Init+0x48>)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	2200      	movs	r2, #0
 80021d8:	705a      	strb	r2, [r3, #1]
		Vars[i].value = 0;
 80021da:	4a09      	ldr	r2, [pc, #36]	; (8002200 <VAR_Init+0x48>)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	2200      	movs	r2, #0
 80021e4:	805a      	strh	r2, [r3, #2]
	for(i = 0; i < NUM_OF_VARIABLES; i++)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3301      	adds	r3, #1
 80021ea:	607b      	str	r3, [r7, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2bfe      	cmp	r3, #254	; 0xfe
 80021f0:	dde8      	ble.n	80021c4 <VAR_Init+0xc>
	}
}
 80021f2:	bf00      	nop
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	2000083c 	.word	0x2000083c

08002204 <VAR_GetVariable>:

int16_t VAR_GetVariable(uint16_t varId, uint16_t* invalid)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	6039      	str	r1, [r7, #0]
 800220e:	80fb      	strh	r3, [r7, #6]
	if (varId < NUM_OF_VARIABLES)
 8002210:	88fb      	ldrh	r3, [r7, #6]
 8002212:	2bfe      	cmp	r3, #254	; 0xfe
 8002214:	d816      	bhi.n	8002244 <VAR_GetVariable+0x40>
	{
		if(Vars[varId].valid == 0)
 8002216:	88fb      	ldrh	r3, [r7, #6]
 8002218:	4a13      	ldr	r2, [pc, #76]	; (8002268 <VAR_GetVariable+0x64>)
 800221a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d109      	bne.n	8002236 <VAR_GetVariable+0x32>
		{
			if (invalid != NULL) *invalid |= INVALID_FLAG;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d006      	beq.n	8002236 <VAR_GetVariable+0x32>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	b29a      	uxth	r2, r3
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	801a      	strh	r2, [r3, #0]
		}
		return Vars[varId].value;
 8002236:	88fb      	ldrh	r3, [r7, #6]
 8002238:	4a0b      	ldr	r2, [pc, #44]	; (8002268 <VAR_GetVariable+0x64>)
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002242:	e00a      	b.n	800225a <VAR_GetVariable+0x56>
	}
	else
	{
		if (invalid != NULL) *invalid |= INVALID_FLAG;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d006      	beq.n	8002258 <VAR_GetVariable+0x54>
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	f043 0301 	orr.w	r3, r3, #1
 8002252:	b29a      	uxth	r2, r3
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	801a      	strh	r2, [r3, #0]
		return 0;
 8002258:	2300      	movs	r3, #0
	}
}
 800225a:	4618      	mov	r0, r3
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	2000083c 	.word	0x2000083c

0800226c <VAR_SetVariable>:
		return &(Vars[varId].value);
	}
}

void VAR_SetVariable(uint8_t varId, int16_t value, uint8_t valid)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	71fb      	strb	r3, [r7, #7]
 8002276:	460b      	mov	r3, r1
 8002278:	80bb      	strh	r3, [r7, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	71bb      	strb	r3, [r7, #6]
	if (varId < NUM_OF_VARIABLES)
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	2bff      	cmp	r3, #255	; 0xff
 8002282:	d00a      	beq.n	800229a <VAR_SetVariable+0x2e>
	{
		Vars[varId].valid = valid;
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	4908      	ldr	r1, [pc, #32]	; (80022a8 <VAR_SetVariable+0x3c>)
 8002288:	79ba      	ldrb	r2, [r7, #6]
 800228a:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
		Vars[varId].value = value;
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	4a05      	ldr	r2, [pc, #20]	; (80022a8 <VAR_SetVariable+0x3c>)
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	88ba      	ldrh	r2, [r7, #4]
 8002298:	805a      	strh	r2, [r3, #2]
	}
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	2000083c 	.word	0x2000083c

080022ac <CB_Create>:
 // s_CanTxMsg Msg;

	

CB_handle CB_Create(uint8_t elementsize, uint16_t length)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	460a      	mov	r2, r1
 80022b6:	71fb      	strb	r3, [r7, #7]
 80022b8:	4613      	mov	r3, r2
 80022ba:	80bb      	strh	r3, [r7, #4]
	CB_handle cb = malloc(sizeof(s_CB)); 
 80022bc:	2010      	movs	r0, #16
 80022be:	f007 f853 	bl	8009368 <malloc>
 80022c2:	4603      	mov	r3, r0
 80022c4:	60fb      	str	r3, [r7, #12]
	cb->buff = malloc (length * elementsize);  // TBD : check pointer
 80022c6:	88bb      	ldrh	r3, [r7, #4]
 80022c8:	79fa      	ldrb	r2, [r7, #7]
 80022ca:	fb02 f303 	mul.w	r3, r2, r3
 80022ce:	4618      	mov	r0, r3
 80022d0:	f007 f84a 	bl	8009368 <malloc>
 80022d4:	4603      	mov	r3, r0
 80022d6:	461a      	mov	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	601a      	str	r2, [r3, #0]
	cb->length = length;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	88ba      	ldrh	r2, [r7, #4]
 80022e0:	80da      	strh	r2, [r3, #6]
	cb->head = 0;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	811a      	strh	r2, [r3, #8]
	cb->tail = 0;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	815a      	strh	r2, [r3, #10]
	cb->full = 0;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	731a      	strb	r2, [r3, #12]
	cb->sizeOfElement = elementsize;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	79fa      	ldrb	r2, [r7, #7]
 80022f8:	711a      	strb	r2, [r3, #4]
	
	
	return cb;
 80022fa:	68fb      	ldr	r3, [r7, #12]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <CB_IsEmpty>:
	return noi;
	
}

uint8_t CB_IsEmpty(CB_handle cb)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
	if (cb!= NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00e      	beq.n	8002330 <CB_IsEmpty+0x2c>
	{
		return (!cb->full && (cb->head == cb->tail));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	7b1b      	ldrb	r3, [r3, #12]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d107      	bne.n	800232a <CB_IsEmpty+0x26>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	891a      	ldrh	r2, [r3, #8]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	895b      	ldrh	r3, [r3, #10]
 8002322:	429a      	cmp	r2, r3
 8002324:	d101      	bne.n	800232a <CB_IsEmpty+0x26>
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <CB_IsEmpty+0x28>
 800232a:	2300      	movs	r3, #0
 800232c:	b2db      	uxtb	r3, r3
 800232e:	e000      	b.n	8002332 <CB_IsEmpty+0x2e>
	}
	return 1; 
 8002330:	2301      	movs	r3, #1
}
 8002332:	4618      	mov	r0, r3
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <CB_Probe>:

// Gets the item from the buffer, but do not remove it from the buffer
// To remove the intem, call CB_Probe() + CB_Remove(), or use CB_Get() to get and remove in one step 

uint8_t CB_Probe(CB_handle cb, uint8_t * item)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
 8002346:	6039      	str	r1, [r7, #0]
	if (cb!= NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d01f      	beq.n	800238e <CB_Probe+0x50>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800234e:	b672      	cpsid	i
}
 8002350:	bf00      	nop
	{

		
		__disable_irq();
			if(!CB_IsEmpty(cb))
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7ff ffd6 	bl	8002304 <CB_IsEmpty>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d113      	bne.n	8002386 <CB_Probe+0x48>
			{
				
				memcpy(item, &cb->buff[cb->tail * cb->sizeOfElement], cb->sizeOfElement);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	8952      	ldrh	r2, [r2, #10]
 8002366:	4611      	mov	r1, r2
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	7912      	ldrb	r2, [r2, #4]
 800236c:	fb01 f202 	mul.w	r2, r1, r2
 8002370:	1899      	adds	r1, r3, r2
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	791b      	ldrb	r3, [r3, #4]
 8002376:	461a      	mov	r2, r3
 8002378:	6838      	ldr	r0, [r7, #0]
 800237a:	f007 f805 	bl	8009388 <memcpy>
  __ASM volatile ("cpsie i" : : : "memory");
 800237e:	b662      	cpsie	i
}
 8002380:	bf00      	nop
				//cb->tail = (cb->tail + 1) % cb->length;
				//cb->full = 0;
				__enable_irq();
				return 0;
 8002382:	2300      	movs	r3, #0
 8002384:	e004      	b.n	8002390 <CB_Probe+0x52>
  __ASM volatile ("cpsie i" : : : "memory");
 8002386:	b662      	cpsie	i
}
 8002388:	bf00      	nop

			}
			else  // empty buffer
			{
				__enable_irq();
				return 1;
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <CB_Probe+0x52>
			}
		}

	// TBD assert
	return 1;
 800238e:	2301      	movs	r3, #1

}
 8002390:	4618      	mov	r0, r3
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <CB_Remove>:


// Removes the item from the buffer, use together with CB_Probe()
uint8_t CB_Remove(CB_handle cb)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
	if (cb!= NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d01f      	beq.n	80023e6 <CB_Remove+0x4e>
  __ASM volatile ("cpsid i" : : : "memory");
 80023a6:	b672      	cpsid	i
}
 80023a8:	bf00      	nop
	{
		
		__disable_irq();
			if(!CB_IsEmpty(cb))
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff ffaa 	bl	8002304 <CB_IsEmpty>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d113      	bne.n	80023de <CB_Remove+0x46>
			{
				cb->tail = (cb->tail + 1) % cb->length;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	895b      	ldrh	r3, [r3, #10]
 80023ba:	3301      	adds	r3, #1
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	88d2      	ldrh	r2, [r2, #6]
 80023c0:	fb93 f1f2 	sdiv	r1, r3, r2
 80023c4:	fb01 f202 	mul.w	r2, r1, r2
 80023c8:	1a9b      	subs	r3, r3, r2
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	815a      	strh	r2, [r3, #10]
				cb->full = 0;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	731a      	strb	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 80023d6:	b662      	cpsie	i
}
 80023d8:	bf00      	nop
				__enable_irq();
				return 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	e004      	b.n	80023e8 <CB_Remove+0x50>
  __ASM volatile ("cpsie i" : : : "memory");
 80023de:	b662      	cpsie	i
}
 80023e0:	bf00      	nop

			}
			else  // empty buffer
			{
				__enable_irq();
				return 1;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <CB_Remove+0x50>
			}
		}

	// TBD assert
	return 1;
 80023e6:	2301      	movs	r3, #1

}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <CB_Get>:


uint8_t CB_Get(CB_handle cb, uint8_t * item)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
	if (cb!= NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d02f      	beq.n	8002460 <CB_Get+0x70>
  __ASM volatile ("cpsid i" : : : "memory");
 8002400:	b672      	cpsid	i
}
 8002402:	bf00      	nop
	{
		
		__disable_irq();
			if(!CB_IsEmpty(cb))
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff ff7d 	bl	8002304 <CB_IsEmpty>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d123      	bne.n	8002458 <CB_Get+0x68>
			{
				
				memcpy(item, &cb->buff[cb->tail * cb->sizeOfElement], cb->sizeOfElement);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	8952      	ldrh	r2, [r2, #10]
 8002418:	4611      	mov	r1, r2
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	7912      	ldrb	r2, [r2, #4]
 800241e:	fb01 f202 	mul.w	r2, r1, r2
 8002422:	1899      	adds	r1, r3, r2
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	791b      	ldrb	r3, [r3, #4]
 8002428:	461a      	mov	r2, r3
 800242a:	6838      	ldr	r0, [r7, #0]
 800242c:	f006 ffac 	bl	8009388 <memcpy>
				cb->tail = (cb->tail + 1) % cb->length;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	895b      	ldrh	r3, [r3, #10]
 8002434:	3301      	adds	r3, #1
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	88d2      	ldrh	r2, [r2, #6]
 800243a:	fb93 f1f2 	sdiv	r1, r3, r2
 800243e:	fb01 f202 	mul.w	r2, r1, r2
 8002442:	1a9b      	subs	r3, r3, r2
 8002444:	b29a      	uxth	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	815a      	strh	r2, [r3, #10]
				cb->full = 0;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	731a      	strb	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8002450:	b662      	cpsie	i
}
 8002452:	bf00      	nop
				__enable_irq();
				return 0;
 8002454:	2300      	movs	r3, #0
 8002456:	e004      	b.n	8002462 <CB_Get+0x72>
  __ASM volatile ("cpsie i" : : : "memory");
 8002458:	b662      	cpsie	i
}
 800245a:	bf00      	nop

			}
			else  // empty buffer
			{
				__enable_irq();
				return 1;
 800245c:	2301      	movs	r3, #1
 800245e:	e000      	b.n	8002462 <CB_Get+0x72>
			}
		}

	// TBD assert
	return 1;
 8002460:	2301      	movs	r3, #1

}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <CB_Put>:


uint8_t CB_Put(CB_handle cb, uint8_t* item)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	6039      	str	r1, [r7, #0]
	
	if (cb != NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d03b      	beq.n	80024f2 <CB_Put+0x88>
	{	
		memcpy(&cb->buff[cb->head * cb->sizeOfElement],item, cb->sizeOfElement);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	8912      	ldrh	r2, [r2, #8]
 8002482:	4611      	mov	r1, r2
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	7912      	ldrb	r2, [r2, #4]
 8002488:	fb01 f202 	mul.w	r2, r1, r2
 800248c:	1898      	adds	r0, r3, r2
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	791b      	ldrb	r3, [r3, #4]
 8002492:	461a      	mov	r2, r3
 8002494:	6839      	ldr	r1, [r7, #0]
 8002496:	f006 ff77 	bl	8009388 <memcpy>
		if(cb->full)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	7b1b      	ldrb	r3, [r3, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00c      	beq.n	80024bc <CB_Put+0x52>
		{
			cb->tail = (cb->tail + 1) % cb->length;		
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	895b      	ldrh	r3, [r3, #10]
 80024a6:	3301      	adds	r3, #1
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	88d2      	ldrh	r2, [r2, #6]
 80024ac:	fb93 f1f2 	sdiv	r1, r3, r2
 80024b0:	fb01 f202 	mul.w	r2, r1, r2
 80024b4:	1a9b      	subs	r3, r3, r2
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	815a      	strh	r2, [r3, #10]
		}
		cb->head = (cb->head + 1) % cb->length;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	891b      	ldrh	r3, [r3, #8]
 80024c0:	3301      	adds	r3, #1
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	88d2      	ldrh	r2, [r2, #6]
 80024c6:	fb93 f1f2 	sdiv	r1, r3, r2
 80024ca:	fb01 f202 	mul.w	r2, r1, r2
 80024ce:	1a9b      	subs	r3, r3, r2
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	811a      	strh	r2, [r3, #8]
		cb->full = (cb->head == cb->tail? 1 : 0);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	891a      	ldrh	r2, [r3, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	895b      	ldrh	r3, [r3, #10]
 80024de:	429a      	cmp	r2, r3
 80024e0:	bf0c      	ite	eq
 80024e2:	2301      	moveq	r3, #1
 80024e4:	2300      	movne	r3, #0
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	461a      	mov	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	731a      	strb	r2, [r3, #12]

		return 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	e000      	b.n	80024f4 <CB_Put+0x8a>
	}
	else
	{
		return 1;
 80024f2:	2301      	movs	r3, #1
	}
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <WDG_Init>:
#include "main.h"
#include "watchdog.h"


void WDG_Init(uint32_t period_ms)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
	__HAL_DBGMCU_FREEZE_IWDG();  // stop the watchdog in debug mode
 8002504:	4b0e      	ldr	r3, [pc, #56]	; (8002540 <WDG_Init+0x44>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	4a0d      	ldr	r2, [pc, #52]	; (8002540 <WDG_Init+0x44>)
 800250a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800250e:	6093      	str	r3, [r2, #8]
	if (period_ms > 32000)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002516:	d902      	bls.n	800251e <WDG_Init+0x22>
	{
		period_ms = 32000;
 8002518:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800251c:	607b      	str	r3, [r7, #4]
	}
	hiwdg.Instance = IWDG;
 800251e:	4b09      	ldr	r3, [pc, #36]	; (8002544 <WDG_Init+0x48>)
 8002520:	4a09      	ldr	r2, [pc, #36]	; (8002548 <WDG_Init+0x4c>)
 8002522:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8002524:	4b07      	ldr	r3, [pc, #28]	; (8002544 <WDG_Init+0x48>)
 8002526:	2206      	movs	r2, #6
 8002528:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Reload = period_ms/8;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	08db      	lsrs	r3, r3, #3
 800252e:	4a05      	ldr	r2, [pc, #20]	; (8002544 <WDG_Init+0x48>)
 8002530:	6093      	str	r3, [r2, #8]
	HAL_IWDG_Init(&hiwdg);
 8002532:	4804      	ldr	r0, [pc, #16]	; (8002544 <WDG_Init+0x48>)
 8002534:	f003 ff65 	bl	8006402 <HAL_IWDG_Init>
}
 8002538:	bf00      	nop
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	e0042000 	.word	0xe0042000
 8002544:	20000cb8 	.word	0x20000cb8
 8002548:	40003000 	.word	0x40003000

0800254c <WDG_Refresh>:

void WDG_Refresh()
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);
 8002550:	4802      	ldr	r0, [pc, #8]	; (800255c <WDG_Refresh+0x10>)
 8002552:	f003 ff98 	bl	8006486 <HAL_IWDG_Refresh>
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20000cb8 	.word	0x20000cb8

08002560 <APP_Init>:
// local routines
static void ProcessMessage(s_CanRxMsg* msg);

// public methods
void APP_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b090      	sub	sp, #64	; 0x40
 8002564:	af00      	add	r7, sp, #0
	sUIHwInit uihw;
	Scheduler_Init();
 8002566:	f000 fc0f 	bl	8002d88 <Scheduler_Init>
	OW_Init();
 800256a:	f7fe fca9 	bl	8000ec0 <OW_Init>
	TEMP_Init();
 800256e:	f7ff f92d 	bl	80017cc <TEMP_Init>
	VAR_Init();
 8002572:	f7ff fe21 	bl	80021b8 <VAR_Init>
	MCAN_Init(&hcan1, THIS_NODE);
 8002576:	2105      	movs	r1, #5
 8002578:	4829      	ldr	r0, [pc, #164]	; (8002620 <APP_Init+0xc0>)
 800257a:	f7fe f9db 	bl	8000934 <MCAN_Init>
	COM_Init(THIS_NODE);
 800257e:	2005      	movs	r0, #5
 8002580:	f7fe f880 	bl	8000684 <COM_Init>
	WDG_Init(3000);
 8002584:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002588:	f7ff ffb8 	bl	80024fc <WDG_Init>


  /*Assign pins for onboard UI  */
	uihw.Led_Life.Pin = LD2_Pin;
 800258c:	2320      	movs	r3, #32
 800258e:	60bb      	str	r3, [r7, #8]
	uihw.Led_Life.Port = LD2_GPIO_Port;
 8002590:	4b24      	ldr	r3, [pc, #144]	; (8002624 <APP_Init+0xc4>)
 8002592:	607b      	str	r3, [r7, #4]
	uihw.Led_Life.Logic = eUIL_POSITIVE;
 8002594:	2301      	movs	r3, #1
 8002596:	733b      	strb	r3, [r7, #12]

	uihw.Led_R.Pin = LED_R_Pin;
 8002598:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800259c:	617b      	str	r3, [r7, #20]
	uihw.Led_R.Port = LED_R_GPIO_Port;
 800259e:	4b22      	ldr	r3, [pc, #136]	; (8002628 <APP_Init+0xc8>)
 80025a0:	613b      	str	r3, [r7, #16]
	uihw.Led_R.Logic = eUIL_NEGATIVE;
 80025a2:	2300      	movs	r3, #0
 80025a4:	763b      	strb	r3, [r7, #24]

	uihw.Led_G.Pin = LED_G_Pin;
 80025a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025aa:	623b      	str	r3, [r7, #32]
	uihw.Led_G.Port = LED_G_GPIO_Port;
 80025ac:	4b1e      	ldr	r3, [pc, #120]	; (8002628 <APP_Init+0xc8>)
 80025ae:	61fb      	str	r3, [r7, #28]
	uihw.Led_G.Logic = eUIL_NEGATIVE;
 80025b0:	2300      	movs	r3, #0
 80025b2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	uihw.Led_B.Pin = LED_B_Pin;
 80025b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	uihw.Led_B.Port = LED_B_GPIO_Port;
 80025bc:	4b1a      	ldr	r3, [pc, #104]	; (8002628 <APP_Init+0xc8>)
 80025be:	62bb      	str	r3, [r7, #40]	; 0x28
	uihw.Led_B.Logic = eUIL_NEGATIVE;
 80025c0:	2300      	movs	r3, #0
 80025c2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	uihw.Buzzer.Pin = BUZZ_Pin;
 80025c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025ca:	63bb      	str	r3, [r7, #56]	; 0x38
	uihw.Buzzer.Port = BUZZ_GPIO_Port;
 80025cc:	4b16      	ldr	r3, [pc, #88]	; (8002628 <APP_Init+0xc8>)
 80025ce:	637b      	str	r3, [r7, #52]	; 0x34
	uihw.Buzzer.Logic = eUIL_POSITIVE;
 80025d0:	2301      	movs	r3, #1
 80025d2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

	UI_Init(&uihw);
 80025d6:	1d3b      	adds	r3, r7, #4
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff facf 	bl	8001b7c <UI_Init>
	UI_LED_Life_SetMode(eUI_BLINKING_SLOW);
 80025de:	2002      	movs	r0, #2
 80025e0:	f7ff fb6c 	bl	8001cbc <UI_LED_Life_SetMode>
	/*Gestures definition*/


	/* Temperature sensors configuration */
	// define hardware OW busses
	TEMP_AddHwBus(0,OW1_GPIO_Port, OW1_Pin);
 80025e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025e8:	490f      	ldr	r1, [pc, #60]	; (8002628 <APP_Init+0xc8>)
 80025ea:	2000      	movs	r0, #0
 80025ec:	f7ff fa3c 	bl	8001a68 <TEMP_AddHwBus>

	// assign sensors on OW1 :
	// default sensor assignment:
	TEMP_AssignSensor(T305, VAR_TEMP_RECU_WC, 0);
 80025f0:	2200      	movs	r2, #0
 80025f2:	2183      	movs	r1, #131	; 0x83
 80025f4:	2018      	movs	r0, #24
 80025f6:	f7ff fa57 	bl	8001aa8 <TEMP_AssignSensor>
	TEMP_AssignSensor(T309, VAR_TEMP_RECU_WH, 0);
 80025fa:	2200      	movs	r2, #0
 80025fc:	2182      	movs	r1, #130	; 0x82
 80025fe:	201c      	movs	r0, #28
 8002600:	f7ff fa52 	bl	8001aa8 <TEMP_AssignSensor>

	/* Configure CAN streamed variables */

	COM_AddStreamedVariable(VAR_TEMP_RECU_WC, 3000);
 8002604:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002608:	2083      	movs	r0, #131	; 0x83
 800260a:	f7fe f8c9 	bl	80007a0 <COM_AddStreamedVariable>
	COM_AddStreamedVariable(VAR_TEMP_RECU_WH, 3000);
 800260e:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002612:	2082      	movs	r0, #130	; 0x82
 8002614:	f7fe f8c4 	bl	80007a0 <COM_AddStreamedVariable>

	/*configure elmeters*/

//	ELM_AddMeter(ELM_OTHER, EL1_Pin, VAR_CONS_OTHER_WH);

}
 8002618:	bf00      	nop
 800261a:	3740      	adds	r7, #64	; 0x40
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20000c3c 	.word	0x20000c3c
 8002624:	40020000 	.word	0x40020000
 8002628:	40020400 	.word	0x40020400

0800262c <APP_Start>:

void APP_Start(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08a      	sub	sp, #40	; 0x28
 8002630:	af00      	add	r7, sp, #0

	MCAN_Start();
 8002632:	f7fe fa2d 	bl	8000a90 <MCAN_Start>
	while (1)   // endless loop
	{
		Scheduler_Check_Flag();
 8002636:	f000 fc21 	bl	8002e7c <Scheduler_Check_Flag>

		s_CanRxMsg rmsg;
		while(1 == COM_GetRxMessage(&rmsg))  // process all messages in buffer
 800263a:	e003      	b.n	8002644 <APP_Start+0x18>
		{
				ProcessMessage(&rmsg);
 800263c:	1d3b      	adds	r3, r7, #4
 800263e:	4618      	mov	r0, r3
 8002640:	f000 f82e 	bl	80026a0 <ProcessMessage>
		while(1 == COM_GetRxMessage(&rmsg))  // process all messages in buffer
 8002644:	1d3b      	adds	r3, r7, #4
 8002646:	4618      	mov	r0, r3
 8002648:	f7fe f82c 	bl	80006a4 <COM_GetRxMessage>
 800264c:	4603      	mov	r3, r0
 800264e:	2b01      	cmp	r3, #1
 8002650:	d0f4      	beq.n	800263c <APP_Start+0x10>
	{
 8002652:	e7f0      	b.n	8002636 <APP_Start+0xa>

08002654 <APP_Update_1s>:
		}
	}
}

void APP_Update_1s(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0

	static uint8_t dayNumber = 0;
	uint8_t newDayNumber = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	73fb      	strb	r3, [r7, #15]
	int16_t consKitchen;
	int16_t powKitchen;
	uint16_t invalid;
	sDateTime now = RTC_GetTime();
 800265e:	1d3b      	adds	r3, r7, #4
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff f80b 	bl	800167c <RTC_GetTime>
	uint16_t pumpPeriod;
	newDayNumber = now.Day;
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	73fb      	strb	r3, [r7, #15]
	if (dayNumber != newDayNumber)
 800266a:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <APP_Update_1s+0x44>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	7bfa      	ldrb	r2, [r7, #15]
 8002670:	429a      	cmp	r2, r3
 8002672:	d002      	beq.n	800267a <APP_Update_1s+0x26>
	{
		dayNumber = newDayNumber;
 8002674:	4a08      	ldr	r2, [pc, #32]	; (8002698 <APP_Update_1s+0x44>)
 8002676:	7bfb      	ldrb	r3, [r7, #15]
 8002678:	7013      	strb	r3, [r2, #0]
		// TBD
	}


	  if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 800267a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800267e:	4807      	ldr	r0, [pc, #28]	; (800269c <APP_Update_1s+0x48>)
 8002680:	f002 f96a 	bl	8004958 <HAL_GPIO_ReadPin>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d102      	bne.n	8002690 <APP_Update_1s+0x3c>
	  {
	     UI_LED_Life_SetMode(eUI_BLINKING_SLOW);
 800268a:	2002      	movs	r0, #2
 800268c:	f7ff fb16 	bl	8001cbc <UI_LED_Life_SetMode>
	  }

}
 8002690:	bf00      	nop
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	20000c38 	.word	0x20000c38
 800269c:	40020800 	.word	0x40020800

080026a0 <ProcessMessage>:

static void ProcessMessage(s_CanRxMsg* msg)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
	uint16_t cmd = msg->header.StdId & 0xFF0;  // maskout nodeid
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 80026b2:	82fb      	strh	r3, [r7, #22]
	//uint8_t producer = msg->header.StdId & 0x00F;  // maskout cmd
	int16_t par1,par2,par3; //,par4;
	uint32_t unixtime = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	613b      	str	r3, [r7, #16]
	par1 = (msg->data[0] << 8) | msg->data[1];
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	7f1b      	ldrb	r3, [r3, #28]
 80026bc:	021b      	lsls	r3, r3, #8
 80026be:	b21a      	sxth	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	7f5b      	ldrb	r3, [r3, #29]
 80026c4:	b21b      	sxth	r3, r3
 80026c6:	4313      	orrs	r3, r2
 80026c8:	81fb      	strh	r3, [r7, #14]
	par2 = (msg->data[2] << 8) | msg->data[3];
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	7f9b      	ldrb	r3, [r3, #30]
 80026ce:	021b      	lsls	r3, r3, #8
 80026d0:	b21a      	sxth	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	7fdb      	ldrb	r3, [r3, #31]
 80026d6:	b21b      	sxth	r3, r3
 80026d8:	4313      	orrs	r3, r2
 80026da:	81bb      	strh	r3, [r7, #12]
	par3 = (msg->data[4] << 8) | msg->data[5];
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026e2:	021b      	lsls	r3, r3, #8
 80026e4:	b21a      	sxth	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026ec:	b21b      	sxth	r3, r3
 80026ee:	4313      	orrs	r3, r2
 80026f0:	817b      	strh	r3, [r7, #10]
	// par4 = (msg->data[6] << 8) | msg->data[7];

	switch (cmd)
 80026f2:	8afb      	ldrh	r3, [r7, #22]
 80026f4:	f5b3 6fa2 	cmp.w	r3, #1296	; 0x510
 80026f8:	d019      	beq.n	800272e <ProcessMessage+0x8e>
 80026fa:	f5b3 6fa2 	cmp.w	r3, #1296	; 0x510
 80026fe:	dc39      	bgt.n	8002774 <ProcessMessage+0xd4>
 8002700:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8002704:	d032      	beq.n	800276c <ProcessMessage+0xcc>
 8002706:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 800270a:	dc33      	bgt.n	8002774 <ProcessMessage+0xd4>
 800270c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002710:	d02e      	beq.n	8002770 <ProcessMessage+0xd0>
 8002712:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8002716:	d000      	beq.n	800271a <ProcessMessage+0x7a>
			unixtime |= msg->data[2] << 8;
			unixtime |= msg->data[3];
			RTC_SetUnixTime(unixtime);
			break;
	}
	return;
 8002718:	e02c      	b.n	8002774 <ProcessMessage+0xd4>
			VAR_SetVariable(par1, par2, par3);
 800271a:	89fb      	ldrh	r3, [r7, #14]
 800271c:	b2db      	uxtb	r3, r3
 800271e:	897a      	ldrh	r2, [r7, #10]
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff fda0 	bl	800226c <VAR_SetVariable>
			break;
 800272c:	e021      	b.n	8002772 <ProcessMessage+0xd2>
			unixtime |= msg->data[0] << 24;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	7f1b      	ldrb	r3, [r3, #28]
 8002732:	061b      	lsls	r3, r3, #24
 8002734:	461a      	mov	r2, r3
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4313      	orrs	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
			unixtime |= msg->data[1] << 16;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	7f5b      	ldrb	r3, [r3, #29]
 8002740:	041b      	lsls	r3, r3, #16
 8002742:	461a      	mov	r2, r3
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4313      	orrs	r3, r2
 8002748:	613b      	str	r3, [r7, #16]
			unixtime |= msg->data[2] << 8;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	7f9b      	ldrb	r3, [r3, #30]
 800274e:	021b      	lsls	r3, r3, #8
 8002750:	461a      	mov	r2, r3
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4313      	orrs	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
			unixtime |= msg->data[3];
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	7fdb      	ldrb	r3, [r3, #31]
 800275c:	461a      	mov	r2, r3
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
			RTC_SetUnixTime(unixtime);
 8002764:	6938      	ldr	r0, [r7, #16]
 8002766:	f7fe fff9 	bl	800175c <RTC_SetUnixTime>
			break;
 800276a:	e002      	b.n	8002772 <ProcessMessage+0xd2>
			break;
 800276c:	bf00      	nop
 800276e:	e000      	b.n	8002772 <ProcessMessage+0xd2>
			break;
 8002770:	bf00      	nop
	return;
 8002772:	bf00      	nop
 8002774:	bf00      	nop
}
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002780:	f000 ff4a 	bl	8003618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002784:	f000 f81c 	bl	80027c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002788:	f000 fa72 	bl	8002c70 <MX_GPIO_Init>
  MX_TIM1_Init();
 800278c:	f000 f964 	bl	8002a58 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8002790:	f000 fa44 	bl	8002c1c <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8002794:	f000 f888 	bl	80028a8 <MX_CAN1_Init>
  MX_I2C1_Init();
 8002798:	f000 f8bc 	bl	8002914 <MX_I2C1_Init>
  MX_TIM6_Init();
 800279c:	f000 fa08 	bl	8002bb0 <MX_TIM6_Init>
  MX_IWDG_Init();
 80027a0:	f000 f8e6 	bl	8002970 <MX_IWDG_Init>
  MX_RTC_Init();
 80027a4:	f000 f8fe 	bl	80029a4 <MX_RTC_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

 // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);

  APP_Init();
 80027a8:	f7ff feda 	bl	8002560 <APP_Init>

  APP_Start();
 80027ac:	f7ff ff3e 	bl	800262c <APP_Start>

  while (1)
  {

     if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 80027b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027b4:	4801      	ldr	r0, [pc, #4]	; (80027bc <main+0x40>)
 80027b6:	f002 f8cf 	bl	8004958 <HAL_GPIO_ReadPin>
 80027ba:	e7f9      	b.n	80027b0 <main+0x34>
 80027bc:	40020800 	.word	0x40020800

080027c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b094      	sub	sp, #80	; 0x50
 80027c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027c6:	f107 031c 	add.w	r3, r7, #28
 80027ca:	2234      	movs	r2, #52	; 0x34
 80027cc:	2100      	movs	r1, #0
 80027ce:	4618      	mov	r0, r3
 80027d0:	f006 fde8 	bl	80093a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027d4:	f107 0308 	add.w	r3, r7, #8
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80027e4:	2300      	movs	r3, #0
 80027e6:	607b      	str	r3, [r7, #4]
 80027e8:	4b2d      	ldr	r3, [pc, #180]	; (80028a0 <SystemClock_Config+0xe0>)
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	4a2c      	ldr	r2, [pc, #176]	; (80028a0 <SystemClock_Config+0xe0>)
 80027ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f2:	6413      	str	r3, [r2, #64]	; 0x40
 80027f4:	4b2a      	ldr	r3, [pc, #168]	; (80028a0 <SystemClock_Config+0xe0>)
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fc:	607b      	str	r3, [r7, #4]
 80027fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002800:	2300      	movs	r3, #0
 8002802:	603b      	str	r3, [r7, #0]
 8002804:	4b27      	ldr	r3, [pc, #156]	; (80028a4 <SystemClock_Config+0xe4>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800280c:	4a25      	ldr	r2, [pc, #148]	; (80028a4 <SystemClock_Config+0xe4>)
 800280e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	4b23      	ldr	r3, [pc, #140]	; (80028a4 <SystemClock_Config+0xe4>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800281c:	603b      	str	r3, [r7, #0]
 800281e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8002820:	230b      	movs	r3, #11
 8002822:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002824:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002828:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800282a:	2301      	movs	r3, #1
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800282e:	2301      	movs	r3, #1
 8002830:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002832:	2310      	movs	r3, #16
 8002834:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002836:	2301      	movs	r3, #1
 8002838:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800283a:	2302      	movs	r3, #2
 800283c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800283e:	2300      	movs	r3, #0
 8002840:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002842:	2310      	movs	r3, #16
 8002844:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 200;
 8002846:	23c8      	movs	r3, #200	; 0xc8
 8002848:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800284a:	2304      	movs	r3, #4
 800284c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800284e:	2302      	movs	r3, #2
 8002850:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002852:	2302      	movs	r3, #2
 8002854:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002856:	f107 031c 	add.w	r3, r7, #28
 800285a:	4618      	mov	r0, r3
 800285c:	f004 fc98 	bl	8007190 <HAL_RCC_OscConfig>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002866:	f000 fa89 	bl	8002d7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800286a:	230f      	movs	r3, #15
 800286c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800286e:	2302      	movs	r3, #2
 8002870:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002872:	2300      	movs	r3, #0
 8002874:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800287a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800287c:	2300      	movs	r3, #0
 800287e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002880:	f107 0308 	add.w	r3, r7, #8
 8002884:	2101      	movs	r1, #1
 8002886:	4618      	mov	r0, r3
 8002888:	f003 fe0e 	bl	80064a8 <HAL_RCC_ClockConfig>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8002892:	f000 fa73 	bl	8002d7c <Error_Handler>
  }
}
 8002896:	bf00      	nop
 8002898:	3750      	adds	r7, #80	; 0x50
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40023800 	.word	0x40023800
 80028a4:	40007000 	.word	0x40007000

080028a8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80028ac:	4b17      	ldr	r3, [pc, #92]	; (800290c <MX_CAN1_Init+0x64>)
 80028ae:	4a18      	ldr	r2, [pc, #96]	; (8002910 <MX_CAN1_Init+0x68>)
 80028b0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 80028b2:	4b16      	ldr	r3, [pc, #88]	; (800290c <MX_CAN1_Init+0x64>)
 80028b4:	2205      	movs	r2, #5
 80028b6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80028b8:	4b14      	ldr	r3, [pc, #80]	; (800290c <MX_CAN1_Init+0x64>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80028be:	4b13      	ldr	r3, [pc, #76]	; (800290c <MX_CAN1_Init+0x64>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 80028c4:	4b11      	ldr	r3, [pc, #68]	; (800290c <MX_CAN1_Init+0x64>)
 80028c6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80028ca:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80028cc:	4b0f      	ldr	r3, [pc, #60]	; (800290c <MX_CAN1_Init+0x64>)
 80028ce:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80028d2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80028d4:	4b0d      	ldr	r3, [pc, #52]	; (800290c <MX_CAN1_Init+0x64>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80028da:	4b0c      	ldr	r3, [pc, #48]	; (800290c <MX_CAN1_Init+0x64>)
 80028dc:	2201      	movs	r2, #1
 80028de:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80028e0:	4b0a      	ldr	r3, [pc, #40]	; (800290c <MX_CAN1_Init+0x64>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <MX_CAN1_Init+0x64>)
 80028e8:	2201      	movs	r2, #1
 80028ea:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80028ec:	4b07      	ldr	r3, [pc, #28]	; (800290c <MX_CAN1_Init+0x64>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 80028f2:	4b06      	ldr	r3, [pc, #24]	; (800290c <MX_CAN1_Init+0x64>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80028f8:	4804      	ldr	r0, [pc, #16]	; (800290c <MX_CAN1_Init+0x64>)
 80028fa:	f000 feff 	bl	80036fc <HAL_CAN_Init>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002904:	f000 fa3a 	bl	8002d7c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002908:	bf00      	nop
 800290a:	bd80      	pop	{r7, pc}
 800290c:	20000c3c 	.word	0x20000c3c
 8002910:	40006400 	.word	0x40006400

08002914 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002918:	4b13      	ldr	r3, [pc, #76]	; (8002968 <MX_I2C1_Init+0x54>)
 800291a:	4a14      	ldr	r2, [pc, #80]	; (800296c <MX_I2C1_Init+0x58>)
 800291c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 800291e:	4b12      	ldr	r3, [pc, #72]	; (8002968 <MX_I2C1_Init+0x54>)
 8002920:	f242 7210 	movw	r2, #10000	; 0x2710
 8002924:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002926:	4b10      	ldr	r3, [pc, #64]	; (8002968 <MX_I2C1_Init+0x54>)
 8002928:	2200      	movs	r2, #0
 800292a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800292c:	4b0e      	ldr	r3, [pc, #56]	; (8002968 <MX_I2C1_Init+0x54>)
 800292e:	2200      	movs	r2, #0
 8002930:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002932:	4b0d      	ldr	r3, [pc, #52]	; (8002968 <MX_I2C1_Init+0x54>)
 8002934:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002938:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800293a:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <MX_I2C1_Init+0x54>)
 800293c:	2200      	movs	r2, #0
 800293e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002940:	4b09      	ldr	r3, [pc, #36]	; (8002968 <MX_I2C1_Init+0x54>)
 8002942:	2200      	movs	r2, #0
 8002944:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002946:	4b08      	ldr	r3, [pc, #32]	; (8002968 <MX_I2C1_Init+0x54>)
 8002948:	2200      	movs	r2, #0
 800294a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800294c:	4b06      	ldr	r3, [pc, #24]	; (8002968 <MX_I2C1_Init+0x54>)
 800294e:	2200      	movs	r2, #0
 8002950:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002952:	4805      	ldr	r0, [pc, #20]	; (8002968 <MX_I2C1_Init+0x54>)
 8002954:	f002 f84c 	bl	80049f0 <HAL_I2C_Init>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800295e:	f000 fa0d 	bl	8002d7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	20000c64 	.word	0x20000c64
 800296c:	40005400 	.word	0x40005400

08002970 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002974:	4b09      	ldr	r3, [pc, #36]	; (800299c <MX_IWDG_Init+0x2c>)
 8002976:	4a0a      	ldr	r2, [pc, #40]	; (80029a0 <MX_IWDG_Init+0x30>)
 8002978:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 800297a:	4b08      	ldr	r3, [pc, #32]	; (800299c <MX_IWDG_Init+0x2c>)
 800297c:	2206      	movs	r2, #6
 800297e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8002980:	4b06      	ldr	r3, [pc, #24]	; (800299c <MX_IWDG_Init+0x2c>)
 8002982:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002986:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002988:	4804      	ldr	r0, [pc, #16]	; (800299c <MX_IWDG_Init+0x2c>)
 800298a:	f003 fd3a 	bl	8006402 <HAL_IWDG_Init>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8002994:	f000 f9f2 	bl	8002d7c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002998:	bf00      	nop
 800299a:	bd80      	pop	{r7, pc}
 800299c:	20000cb8 	.word	0x20000cb8
 80029a0:	40003000 	.word	0x40003000

080029a4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80029aa:	1d3b      	adds	r3, r7, #4
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	60da      	str	r2, [r3, #12]
 80029b6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80029b8:	2300      	movs	r3, #0
 80029ba:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80029bc:	4b24      	ldr	r3, [pc, #144]	; (8002a50 <MX_RTC_Init+0xac>)
 80029be:	4a25      	ldr	r2, [pc, #148]	; (8002a54 <MX_RTC_Init+0xb0>)
 80029c0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80029c2:	4b23      	ldr	r3, [pc, #140]	; (8002a50 <MX_RTC_Init+0xac>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 124;
 80029c8:	4b21      	ldr	r3, [pc, #132]	; (8002a50 <MX_RTC_Init+0xac>)
 80029ca:	227c      	movs	r2, #124	; 0x7c
 80029cc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 3999;
 80029ce:	4b20      	ldr	r3, [pc, #128]	; (8002a50 <MX_RTC_Init+0xac>)
 80029d0:	f640 729f 	movw	r2, #3999	; 0xf9f
 80029d4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80029d6:	4b1e      	ldr	r3, [pc, #120]	; (8002a50 <MX_RTC_Init+0xac>)
 80029d8:	2200      	movs	r2, #0
 80029da:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80029dc:	4b1c      	ldr	r3, [pc, #112]	; (8002a50 <MX_RTC_Init+0xac>)
 80029de:	2200      	movs	r2, #0
 80029e0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80029e2:	4b1b      	ldr	r3, [pc, #108]	; (8002a50 <MX_RTC_Init+0xac>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80029e8:	4819      	ldr	r0, [pc, #100]	; (8002a50 <MX_RTC_Init+0xac>)
 80029ea:	f004 fe6f 	bl	80076cc <HAL_RTC_Init>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80029f4:	f000 f9c2 	bl	8002d7c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80029f8:	2300      	movs	r3, #0
 80029fa:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80029fc:	2300      	movs	r3, #0
 80029fe:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002a04:	2300      	movs	r3, #0
 8002a06:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002a0c:	1d3b      	adds	r3, r7, #4
 8002a0e:	2201      	movs	r2, #1
 8002a10:	4619      	mov	r1, r3
 8002a12:	480f      	ldr	r0, [pc, #60]	; (8002a50 <MX_RTC_Init+0xac>)
 8002a14:	f004 fed0 	bl	80077b8 <HAL_RTC_SetTime>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8002a1e:	f000 f9ad 	bl	8002d7c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002a22:	2301      	movs	r3, #1
 8002a24:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002a26:	2301      	movs	r3, #1
 8002a28:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002a32:	463b      	mov	r3, r7
 8002a34:	2201      	movs	r2, #1
 8002a36:	4619      	mov	r1, r3
 8002a38:	4805      	ldr	r0, [pc, #20]	; (8002a50 <MX_RTC_Init+0xac>)
 8002a3a:	f004 ffb5 	bl	80079a8 <HAL_RTC_SetDate>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8002a44:	f000 f99a 	bl	8002d7c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002a48:	bf00      	nop
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	20000cc4 	.word	0x20000cc4
 8002a54:	40002800 	.word	0x40002800

08002a58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b096      	sub	sp, #88	; 0x58
 8002a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	605a      	str	r2, [r3, #4]
 8002a68:	609a      	str	r2, [r3, #8]
 8002a6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	605a      	str	r2, [r3, #4]
 8002a80:	609a      	str	r2, [r3, #8]
 8002a82:	60da      	str	r2, [r3, #12]
 8002a84:	611a      	str	r2, [r3, #16]
 8002a86:	615a      	str	r2, [r3, #20]
 8002a88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a8a:	1d3b      	adds	r3, r7, #4
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	2100      	movs	r1, #0
 8002a90:	4618      	mov	r0, r3
 8002a92:	f006 fc87 	bl	80093a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a96:	4b44      	ldr	r3, [pc, #272]	; (8002ba8 <MX_TIM1_Init+0x150>)
 8002a98:	4a44      	ldr	r2, [pc, #272]	; (8002bac <MX_TIM1_Init+0x154>)
 8002a9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24;
 8002a9c:	4b42      	ldr	r3, [pc, #264]	; (8002ba8 <MX_TIM1_Init+0x150>)
 8002a9e:	2218      	movs	r2, #24
 8002aa0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa2:	4b41      	ldr	r3, [pc, #260]	; (8002ba8 <MX_TIM1_Init+0x150>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8002aa8:	4b3f      	ldr	r3, [pc, #252]	; (8002ba8 <MX_TIM1_Init+0x150>)
 8002aaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002aae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ab0:	4b3d      	ldr	r3, [pc, #244]	; (8002ba8 <MX_TIM1_Init+0x150>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ab6:	4b3c      	ldr	r3, [pc, #240]	; (8002ba8 <MX_TIM1_Init+0x150>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002abc:	4b3a      	ldr	r3, [pc, #232]	; (8002ba8 <MX_TIM1_Init+0x150>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002ac2:	4839      	ldr	r0, [pc, #228]	; (8002ba8 <MX_TIM1_Init+0x150>)
 8002ac4:	f005 f91a 	bl	8007cfc <HAL_TIM_Base_Init>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002ace:	f000 f955 	bl	8002d7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ad2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ad6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002ad8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002adc:	4619      	mov	r1, r3
 8002ade:	4832      	ldr	r0, [pc, #200]	; (8002ba8 <MX_TIM1_Init+0x150>)
 8002ae0:	f005 fb7e 	bl	80081e0 <HAL_TIM_ConfigClockSource>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002aea:	f000 f947 	bl	8002d7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002aee:	482e      	ldr	r0, [pc, #184]	; (8002ba8 <MX_TIM1_Init+0x150>)
 8002af0:	f005 f953 	bl	8007d9a <HAL_TIM_PWM_Init>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002afa:	f000 f93f 	bl	8002d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002afe:	2300      	movs	r3, #0
 8002b00:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b02:	2300      	movs	r3, #0
 8002b04:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b06:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4826      	ldr	r0, [pc, #152]	; (8002ba8 <MX_TIM1_Init+0x150>)
 8002b0e:	f005 ff4b 	bl	80089a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002b18:	f000 f930 	bl	8002d7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b1c:	2360      	movs	r3, #96	; 0x60
 8002b1e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 200;
 8002b20:	23c8      	movs	r3, #200	; 0xc8
 8002b22:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b24:	2300      	movs	r3, #0
 8002b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b30:	2300      	movs	r3, #0
 8002b32:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b34:	2300      	movs	r3, #0
 8002b36:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4819      	ldr	r0, [pc, #100]	; (8002ba8 <MX_TIM1_Init+0x150>)
 8002b42:	f005 fa8b 	bl	800805c <HAL_TIM_PWM_ConfigChannel>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002b4c:	f000 f916 	bl	8002d7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b54:	2204      	movs	r2, #4
 8002b56:	4619      	mov	r1, r3
 8002b58:	4813      	ldr	r0, [pc, #76]	; (8002ba8 <MX_TIM1_Init+0x150>)
 8002b5a:	f005 fa7f 	bl	800805c <HAL_TIM_PWM_ConfigChannel>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002b64:	f000 f90a 	bl	8002d7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b70:	2300      	movs	r3, #0
 8002b72:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b74:	2300      	movs	r3, #0
 8002b76:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b80:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b82:	2300      	movs	r3, #0
 8002b84:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002b86:	1d3b      	adds	r3, r7, #4
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4807      	ldr	r0, [pc, #28]	; (8002ba8 <MX_TIM1_Init+0x150>)
 8002b8c:	f005 ff88 	bl	8008aa0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002b96:	f000 f8f1 	bl	8002d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002b9a:	4803      	ldr	r0, [pc, #12]	; (8002ba8 <MX_TIM1_Init+0x150>)
 8002b9c:	f000 fb46 	bl	800322c <HAL_TIM_MspPostInit>

}
 8002ba0:	bf00      	nop
 8002ba2:	3758      	adds	r7, #88	; 0x58
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	20000ce4 	.word	0x20000ce4
 8002bac:	40010000 	.word	0x40010000

08002bb0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bb6:	463b      	mov	r3, r7
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002bbe:	4b15      	ldr	r3, [pc, #84]	; (8002c14 <MX_TIM6_Init+0x64>)
 8002bc0:	4a15      	ldr	r2, [pc, #84]	; (8002c18 <MX_TIM6_Init+0x68>)
 8002bc2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 8002bc4:	4b13      	ldr	r3, [pc, #76]	; (8002c14 <MX_TIM6_Init+0x64>)
 8002bc6:	2204      	movs	r2, #4
 8002bc8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bca:	4b12      	ldr	r3, [pc, #72]	; (8002c14 <MX_TIM6_Init+0x64>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8002bd0:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <MX_TIM6_Init+0x64>)
 8002bd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bd6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bd8:	4b0e      	ldr	r3, [pc, #56]	; (8002c14 <MX_TIM6_Init+0x64>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002bde:	480d      	ldr	r0, [pc, #52]	; (8002c14 <MX_TIM6_Init+0x64>)
 8002be0:	f005 f88c 	bl	8007cfc <HAL_TIM_Base_Init>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002bea:	f000 f8c7 	bl	8002d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002bf6:	463b      	mov	r3, r7
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4806      	ldr	r0, [pc, #24]	; (8002c14 <MX_TIM6_Init+0x64>)
 8002bfc:	f005 fed4 	bl	80089a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002c06:	f000 f8b9 	bl	8002d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002c0a:	bf00      	nop
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20000d2c 	.word	0x20000d2c
 8002c18:	40001000 	.word	0x40001000

08002c1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c20:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <MX_USART2_UART_Init+0x4c>)
 8002c22:	4a12      	ldr	r2, [pc, #72]	; (8002c6c <MX_USART2_UART_Init+0x50>)
 8002c24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c26:	4b10      	ldr	r3, [pc, #64]	; (8002c68 <MX_USART2_UART_Init+0x4c>)
 8002c28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c2e:	4b0e      	ldr	r3, [pc, #56]	; (8002c68 <MX_USART2_UART_Init+0x4c>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c34:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <MX_USART2_UART_Init+0x4c>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c3a:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <MX_USART2_UART_Init+0x4c>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c40:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <MX_USART2_UART_Init+0x4c>)
 8002c42:	220c      	movs	r2, #12
 8002c44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c46:	4b08      	ldr	r3, [pc, #32]	; (8002c68 <MX_USART2_UART_Init+0x4c>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c4c:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <MX_USART2_UART_Init+0x4c>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c52:	4805      	ldr	r0, [pc, #20]	; (8002c68 <MX_USART2_UART_Init+0x4c>)
 8002c54:	f005 ff8a 	bl	8008b6c <HAL_UART_Init>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002c5e:	f000 f88d 	bl	8002d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c62:	bf00      	nop
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	20000d74 	.word	0x20000d74
 8002c6c:	40004400 	.word	0x40004400

08002c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08a      	sub	sp, #40	; 0x28
 8002c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c76:	f107 0314 	add.w	r3, r7, #20
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	605a      	str	r2, [r3, #4]
 8002c80:	609a      	str	r2, [r3, #8]
 8002c82:	60da      	str	r2, [r3, #12]
 8002c84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	4b38      	ldr	r3, [pc, #224]	; (8002d6c <MX_GPIO_Init+0xfc>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	4a37      	ldr	r2, [pc, #220]	; (8002d6c <MX_GPIO_Init+0xfc>)
 8002c90:	f043 0304 	orr.w	r3, r3, #4
 8002c94:	6313      	str	r3, [r2, #48]	; 0x30
 8002c96:	4b35      	ldr	r3, [pc, #212]	; (8002d6c <MX_GPIO_Init+0xfc>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	f003 0304 	and.w	r3, r3, #4
 8002c9e:	613b      	str	r3, [r7, #16]
 8002ca0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	4b31      	ldr	r3, [pc, #196]	; (8002d6c <MX_GPIO_Init+0xfc>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	4a30      	ldr	r2, [pc, #192]	; (8002d6c <MX_GPIO_Init+0xfc>)
 8002cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb2:	4b2e      	ldr	r3, [pc, #184]	; (8002d6c <MX_GPIO_Init+0xfc>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60bb      	str	r3, [r7, #8]
 8002cc2:	4b2a      	ldr	r3, [pc, #168]	; (8002d6c <MX_GPIO_Init+0xfc>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	4a29      	ldr	r2, [pc, #164]	; (8002d6c <MX_GPIO_Init+0xfc>)
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cce:	4b27      	ldr	r3, [pc, #156]	; (8002d6c <MX_GPIO_Init+0xfc>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	60bb      	str	r3, [r7, #8]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	607b      	str	r3, [r7, #4]
 8002cde:	4b23      	ldr	r3, [pc, #140]	; (8002d6c <MX_GPIO_Init+0xfc>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	4a22      	ldr	r2, [pc, #136]	; (8002d6c <MX_GPIO_Init+0xfc>)
 8002ce4:	f043 0302 	orr.w	r3, r3, #2
 8002ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cea:	4b20      	ldr	r3, [pc, #128]	; (8002d6c <MX_GPIO_Init+0xfc>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	607b      	str	r3, [r7, #4]
 8002cf4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2120      	movs	r1, #32
 8002cfa:	481d      	ldr	r0, [pc, #116]	; (8002d70 <MX_GPIO_Init+0x100>)
 8002cfc:	f001 fe44 	bl	8004988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OW1_Pin|LED_B_Pin|LED_G_Pin|LED_R_Pin
 8002d00:	2200      	movs	r2, #0
 8002d02:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 8002d06:	481b      	ldr	r0, [pc, #108]	; (8002d74 <MX_GPIO_Init+0x104>)
 8002d08:	f001 fe3e 	bl	8004988 <HAL_GPIO_WritePin>
                          |BUZZ_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002d0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d12:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002d1c:	f107 0314 	add.w	r3, r7, #20
 8002d20:	4619      	mov	r1, r3
 8002d22:	4815      	ldr	r0, [pc, #84]	; (8002d78 <MX_GPIO_Init+0x108>)
 8002d24:	f001 fc84 	bl	8004630 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002d28:	2320      	movs	r3, #32
 8002d2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d34:	2300      	movs	r3, #0
 8002d36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002d38:	f107 0314 	add.w	r3, r7, #20
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	480c      	ldr	r0, [pc, #48]	; (8002d70 <MX_GPIO_Init+0x100>)
 8002d40:	f001 fc76 	bl	8004630 <HAL_GPIO_Init>

  /*Configure GPIO pins : OW1_Pin LED_B_Pin LED_G_Pin LED_R_Pin
                           BUZZ_Pin */
  GPIO_InitStruct.Pin = OW1_Pin|LED_B_Pin|LED_G_Pin|LED_R_Pin
 8002d44:	f44f 4374 	mov.w	r3, #62464	; 0xf400
 8002d48:	617b      	str	r3, [r7, #20]
                          |BUZZ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d52:	2300      	movs	r3, #0
 8002d54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d56:	f107 0314 	add.w	r3, r7, #20
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4805      	ldr	r0, [pc, #20]	; (8002d74 <MX_GPIO_Init+0x104>)
 8002d5e:	f001 fc67 	bl	8004630 <HAL_GPIO_Init>

}
 8002d62:	bf00      	nop
 8002d64:	3728      	adds	r7, #40	; 0x28
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	40020000 	.word	0x40020000
 8002d74:	40020400 	.word	0x40020400
 8002d78:	40020800 	.word	0x40020800

08002d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002d80:	b672      	cpsid	i
}
 8002d82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d84:	e7fe      	b.n	8002d84 <Error_Handler+0x8>
	...

08002d88 <Scheduler_Init>:
**********************************************************************	
	* @brief	Initialisation timimg struct
***********************************************************************
*/
void Scheduler_Init (void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
		Timer_1ms.timer_limit = 1;
 8002d8c:	4b0f      	ldr	r3, [pc, #60]	; (8002dcc <Scheduler_Init+0x44>)
 8002d8e:	2201      	movs	r2, #1
 8002d90:	809a      	strh	r2, [r3, #4]
		Timer_5ms.timer_limit = 5;
 8002d92:	4b0f      	ldr	r3, [pc, #60]	; (8002dd0 <Scheduler_Init+0x48>)
 8002d94:	2205      	movs	r2, #5
 8002d96:	809a      	strh	r2, [r3, #4]
		Timer_10ms.timer_limit = 10;
 8002d98:	4b0e      	ldr	r3, [pc, #56]	; (8002dd4 <Scheduler_Init+0x4c>)
 8002d9a:	220a      	movs	r2, #10
 8002d9c:	809a      	strh	r2, [r3, #4]
		Timer_50ms.timer_limit = 50;
 8002d9e:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <Scheduler_Init+0x50>)
 8002da0:	2232      	movs	r2, #50	; 0x32
 8002da2:	809a      	strh	r2, [r3, #4]
		Timer_100ms.timer_limit = 100;
 8002da4:	4b0d      	ldr	r3, [pc, #52]	; (8002ddc <Scheduler_Init+0x54>)
 8002da6:	2264      	movs	r2, #100	; 0x64
 8002da8:	809a      	strh	r2, [r3, #4]
		Timer_250ms.timer_limit = 250;
 8002daa:	4b0d      	ldr	r3, [pc, #52]	; (8002de0 <Scheduler_Init+0x58>)
 8002dac:	22fa      	movs	r2, #250	; 0xfa
 8002dae:	809a      	strh	r2, [r3, #4]
		Timer_500ms.timer_limit = 500;
 8002db0:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <Scheduler_Init+0x5c>)
 8002db2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002db6:	809a      	strh	r2, [r3, #4]
		Timer_1s.timer_limit = 1000;
 8002db8:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <Scheduler_Init+0x60>)
 8002dba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002dbe:	809a      	strh	r2, [r3, #4]
}
 8002dc0:	bf00      	nop
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	20000db8 	.word	0x20000db8
 8002dd0:	20000dc0 	.word	0x20000dc0
 8002dd4:	20000dc8 	.word	0x20000dc8
 8002dd8:	20000dd0 	.word	0x20000dd0
 8002ddc:	20000dd8 	.word	0x20000dd8
 8002de0:	20000de0 	.word	0x20000de0
 8002de4:	20000de8 	.word	0x20000de8
 8002de8:	20000df0 	.word	0x20000df0

08002dec <Scheduler_Update_1ms>:
**********************************************************************	
	* @brief	Timer control. Calling of all defined timers
***********************************************************************
*/
void Scheduler_Update_1ms (void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
	Timer_Increment(&Timer_1ms);
 8002df0:	480c      	ldr	r0, [pc, #48]	; (8002e24 <Scheduler_Update_1ms+0x38>)
 8002df2:	f000 f827 	bl	8002e44 <Timer_Increment>
	Timer_Increment(&Timer_5ms);
 8002df6:	480c      	ldr	r0, [pc, #48]	; (8002e28 <Scheduler_Update_1ms+0x3c>)
 8002df8:	f000 f824 	bl	8002e44 <Timer_Increment>
	Timer_Increment(&Timer_10ms);
 8002dfc:	480b      	ldr	r0, [pc, #44]	; (8002e2c <Scheduler_Update_1ms+0x40>)
 8002dfe:	f000 f821 	bl	8002e44 <Timer_Increment>
	Timer_Increment(&Timer_50ms);
 8002e02:	480b      	ldr	r0, [pc, #44]	; (8002e30 <Scheduler_Update_1ms+0x44>)
 8002e04:	f000 f81e 	bl	8002e44 <Timer_Increment>
	Timer_Increment(&Timer_100ms);
 8002e08:	480a      	ldr	r0, [pc, #40]	; (8002e34 <Scheduler_Update_1ms+0x48>)
 8002e0a:	f000 f81b 	bl	8002e44 <Timer_Increment>
	Timer_Increment(&Timer_250ms);
 8002e0e:	480a      	ldr	r0, [pc, #40]	; (8002e38 <Scheduler_Update_1ms+0x4c>)
 8002e10:	f000 f818 	bl	8002e44 <Timer_Increment>
	Timer_Increment(&Timer_500ms);
 8002e14:	4809      	ldr	r0, [pc, #36]	; (8002e3c <Scheduler_Update_1ms+0x50>)
 8002e16:	f000 f815 	bl	8002e44 <Timer_Increment>
	Timer_Increment(&Timer_1s);
 8002e1a:	4809      	ldr	r0, [pc, #36]	; (8002e40 <Scheduler_Update_1ms+0x54>)
 8002e1c:	f000 f812 	bl	8002e44 <Timer_Increment>
	
}
 8002e20:	bf00      	nop
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	20000db8 	.word	0x20000db8
 8002e28:	20000dc0 	.word	0x20000dc0
 8002e2c:	20000dc8 	.word	0x20000dc8
 8002e30:	20000dd0 	.word	0x20000dd0
 8002e34:	20000dd8 	.word	0x20000dd8
 8002e38:	20000de0 	.word	0x20000de0
 8002e3c:	20000de8 	.word	0x20000de8
 8002e40:	20000df0 	.word	0x20000df0

08002e44 <Timer_Increment>:
	* @brief	Incrementing of all counters and setting flags , where is condition met!
	* @param	timer: Pointer to specific timer	
***********************************************************************
*/
inline static void Timer_Increment (sTimer *timer)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
	timer->timer_cnt++;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	885b      	ldrh	r3, [r3, #2]
 8002e50:	3301      	adds	r3, #1
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	805a      	strh	r2, [r3, #2]
	if(timer->timer_cnt >= timer->timer_limit)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	885a      	ldrh	r2, [r3, #2]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	889b      	ldrh	r3, [r3, #4]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d305      	bcc.n	8002e70 <Timer_Increment+0x2c>
	{
		timer->flag = eFLAG_REACHED;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	701a      	strb	r2, [r3, #0]
		timer->timer_cnt = 0;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	805a      	strh	r2, [r3, #2]
	}
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <Scheduler_Check_Flag>:
	* @brief Checking flags in structures and call specific tasks	
***********************************************************************
*/

void Scheduler_Check_Flag(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
	if(Timer_1ms.flag)
 8002e80:	4b24      	ldr	r3, [pc, #144]	; (8002f14 <Scheduler_Check_Flag+0x98>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d004      	beq.n	8002e92 <Scheduler_Check_Flag+0x16>
	{
		Timer_Task_1ms();
 8002e88:	f000 f854 	bl	8002f34 <Timer_Task_1ms>
		Timer_1ms.flag = eFLAG_NOT_YET;
 8002e8c:	4b21      	ldr	r3, [pc, #132]	; (8002f14 <Scheduler_Check_Flag+0x98>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	701a      	strb	r2, [r3, #0]
	}
	
	if(Timer_5ms.flag)
 8002e92:	4b21      	ldr	r3, [pc, #132]	; (8002f18 <Scheduler_Check_Flag+0x9c>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d004      	beq.n	8002ea4 <Scheduler_Check_Flag+0x28>
	{
		Timer_Task_5ms();
 8002e9a:	f000 f852 	bl	8002f42 <Timer_Task_5ms>
		Timer_5ms.flag = eFLAG_NOT_YET;
 8002e9e:	4b1e      	ldr	r3, [pc, #120]	; (8002f18 <Scheduler_Check_Flag+0x9c>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	701a      	strb	r2, [r3, #0]
	}
	
	if(Timer_10ms.flag)
 8002ea4:	4b1d      	ldr	r3, [pc, #116]	; (8002f1c <Scheduler_Check_Flag+0xa0>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d004      	beq.n	8002eb6 <Scheduler_Check_Flag+0x3a>
	{
		Timer_Task_10ms();
 8002eac:	f000 f84f 	bl	8002f4e <Timer_Task_10ms>
		Timer_10ms.flag = eFLAG_NOT_YET;
 8002eb0:	4b1a      	ldr	r3, [pc, #104]	; (8002f1c <Scheduler_Check_Flag+0xa0>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	701a      	strb	r2, [r3, #0]
	}
	
	if(Timer_50ms.flag)
 8002eb6:	4b1a      	ldr	r3, [pc, #104]	; (8002f20 <Scheduler_Check_Flag+0xa4>)
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d004      	beq.n	8002ec8 <Scheduler_Check_Flag+0x4c>
	{
		Timer_Task_50ms();
 8002ebe:	f000 f850 	bl	8002f62 <Timer_Task_50ms>
		Timer_50ms.flag = eFLAG_NOT_YET;
 8002ec2:	4b17      	ldr	r3, [pc, #92]	; (8002f20 <Scheduler_Check_Flag+0xa4>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	701a      	strb	r2, [r3, #0]
	}
	
	if(Timer_100ms.flag)
 8002ec8:	4b16      	ldr	r3, [pc, #88]	; (8002f24 <Scheduler_Check_Flag+0xa8>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d004      	beq.n	8002eda <Scheduler_Check_Flag+0x5e>
	{
		Timer_Task_100ms();
 8002ed0:	f000 f84e 	bl	8002f70 <Timer_Task_100ms>
		Timer_100ms.flag = eFLAG_NOT_YET;
 8002ed4:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <Scheduler_Check_Flag+0xa8>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	701a      	strb	r2, [r3, #0]
	}
	
	if(Timer_250ms.flag)
 8002eda:	4b13      	ldr	r3, [pc, #76]	; (8002f28 <Scheduler_Check_Flag+0xac>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d004      	beq.n	8002eec <Scheduler_Check_Flag+0x70>
	{
		Timer_Task_250ms();
 8002ee2:	f000 f84b 	bl	8002f7c <Timer_Task_250ms>
		Timer_250ms.flag = eFLAG_NOT_YET;
 8002ee6:	4b10      	ldr	r3, [pc, #64]	; (8002f28 <Scheduler_Check_Flag+0xac>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	701a      	strb	r2, [r3, #0]
	}
	
	if(Timer_500ms.flag)
 8002eec:	4b0f      	ldr	r3, [pc, #60]	; (8002f2c <Scheduler_Check_Flag+0xb0>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d004      	beq.n	8002efe <Scheduler_Check_Flag+0x82>
	{
		Timer_Task_500ms();
 8002ef4:	f000 f849 	bl	8002f8a <Timer_Task_500ms>
		Timer_500ms.flag = eFLAG_NOT_YET;
 8002ef8:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <Scheduler_Check_Flag+0xb0>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	701a      	strb	r2, [r3, #0]
	}
	
	if(Timer_1s.flag)
 8002efe:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <Scheduler_Check_Flag+0xb4>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d004      	beq.n	8002f10 <Scheduler_Check_Flag+0x94>
	{
		Timer_Task_1s();
 8002f06:	f000 f847 	bl	8002f98 <Timer_Task_1s>
		Timer_1s.flag = eFLAG_NOT_YET;
 8002f0a:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <Scheduler_Check_Flag+0xb4>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	701a      	strb	r2, [r3, #0]
	}	
}
 8002f10:	bf00      	nop
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	20000db8 	.word	0x20000db8
 8002f18:	20000dc0 	.word	0x20000dc0
 8002f1c:	20000dc8 	.word	0x20000dc8
 8002f20:	20000dd0 	.word	0x20000dd0
 8002f24:	20000dd8 	.word	0x20000dd8
 8002f28:	20000de0 	.word	0x20000de0
 8002f2c:	20000de8 	.word	0x20000de8
 8002f30:	20000df0 	.word	0x20000df0

08002f34 <Timer_Task_1ms>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_1ms(void)
{	
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
	//DI_Read_All();
}
 8002f38:	bf00      	nop
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <Timer_Task_5ms>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_5ms(void)
{	
 8002f42:	b580      	push	{r7, lr}
 8002f44:	af00      	add	r7, sp, #0
	MCAN_Transmit();
 8002f46:	f7fd fe49 	bl	8000bdc <MCAN_Transmit>
}
 8002f4a:	bf00      	nop
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <Timer_Task_10ms>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_10ms(void)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	af00      	add	r7, sp, #0
	COM_Update_10ms();
 8002f52:	f7fd fbb3 	bl	80006bc <COM_Update_10ms>
	UI_Update_10ms();
 8002f56:	f7fe fe8f 	bl	8001c78 <UI_Update_10ms>
	MCAN_Update_10ms();
 8002f5a:	f7fd fdb3 	bl	8000ac4 <MCAN_Update_10ms>
}
 8002f5e:	bf00      	nop
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <Timer_Task_50ms>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_50ms(void)
{
 8002f62:	b480      	push	{r7}
 8002f64:	af00      	add	r7, sp, #0
}
 8002f66:	bf00      	nop
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <Timer_Task_100ms>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_100ms(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0

	TEMP_Update100ms();
 8002f74:	f7fe fc4a 	bl	800180c <TEMP_Update100ms>
}
 8002f78:	bf00      	nop
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <Timer_Task_250ms>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_250ms(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
}
 8002f80:	bf00      	nop
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <Timer_Task_500ms>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_500ms(void)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	af00      	add	r7, sp, #0

}
 8002f8e:	bf00      	nop
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <Timer_Task_1s>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_1s(void)
{	
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
	APP_Update_1s();
 8002f9c:	f7ff fb5a 	bl	8002654 <APP_Update_1s>
	WDG_Refresh();
 8002fa0:	f7ff fad4 	bl	800254c <WDG_Refresh>
			OW_ConvertAll();
	  }*/
//	OW_ReadRom();
	//OW_Read(0);
	//OW_ConvertAll();
}
 8002fa4:	bf00      	nop
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	607b      	str	r3, [r7, #4]
 8002fb2:	4b10      	ldr	r3, [pc, #64]	; (8002ff4 <HAL_MspInit+0x4c>)
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb6:	4a0f      	ldr	r2, [pc, #60]	; (8002ff4 <HAL_MspInit+0x4c>)
 8002fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8002fbe:	4b0d      	ldr	r3, [pc, #52]	; (8002ff4 <HAL_MspInit+0x4c>)
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc6:	607b      	str	r3, [r7, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fca:	2300      	movs	r3, #0
 8002fcc:	603b      	str	r3, [r7, #0]
 8002fce:	4b09      	ldr	r3, [pc, #36]	; (8002ff4 <HAL_MspInit+0x4c>)
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	4a08      	ldr	r2, [pc, #32]	; (8002ff4 <HAL_MspInit+0x4c>)
 8002fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fda:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <HAL_MspInit+0x4c>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe2:	603b      	str	r3, [r7, #0]
 8002fe4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002fe6:	2007      	movs	r0, #7
 8002fe8:	f001 fab0 	bl	800454c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fec:	bf00      	nop
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40023800 	.word	0x40023800

08002ff8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08a      	sub	sp, #40	; 0x28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003000:	f107 0314 	add.w	r3, r7, #20
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	605a      	str	r2, [r3, #4]
 800300a:	609a      	str	r2, [r3, #8]
 800300c:	60da      	str	r2, [r3, #12]
 800300e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a25      	ldr	r2, [pc, #148]	; (80030ac <HAL_CAN_MspInit+0xb4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d144      	bne.n	80030a4 <HAL_CAN_MspInit+0xac>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800301a:	2300      	movs	r3, #0
 800301c:	613b      	str	r3, [r7, #16]
 800301e:	4b24      	ldr	r3, [pc, #144]	; (80030b0 <HAL_CAN_MspInit+0xb8>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	4a23      	ldr	r2, [pc, #140]	; (80030b0 <HAL_CAN_MspInit+0xb8>)
 8003024:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003028:	6413      	str	r3, [r2, #64]	; 0x40
 800302a:	4b21      	ldr	r3, [pc, #132]	; (80030b0 <HAL_CAN_MspInit+0xb8>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003032:	613b      	str	r3, [r7, #16]
 8003034:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	4b1d      	ldr	r3, [pc, #116]	; (80030b0 <HAL_CAN_MspInit+0xb8>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	4a1c      	ldr	r2, [pc, #112]	; (80030b0 <HAL_CAN_MspInit+0xb8>)
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	6313      	str	r3, [r2, #48]	; 0x30
 8003046:	4b1a      	ldr	r3, [pc, #104]	; (80030b0 <HAL_CAN_MspInit+0xb8>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003052:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003058:	2302      	movs	r3, #2
 800305a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305c:	2300      	movs	r3, #0
 800305e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003060:	2303      	movs	r3, #3
 8003062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003064:	2309      	movs	r3, #9
 8003066:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003068:	f107 0314 	add.w	r3, r7, #20
 800306c:	4619      	mov	r1, r3
 800306e:	4811      	ldr	r0, [pc, #68]	; (80030b4 <HAL_CAN_MspInit+0xbc>)
 8003070:	f001 fade 	bl	8004630 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8003074:	2200      	movs	r2, #0
 8003076:	2100      	movs	r1, #0
 8003078:	2013      	movs	r0, #19
 800307a:	f001 fa72 	bl	8004562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800307e:	2013      	movs	r0, #19
 8003080:	f001 fa8b 	bl	800459a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8003084:	2200      	movs	r2, #0
 8003086:	2100      	movs	r1, #0
 8003088:	2014      	movs	r0, #20
 800308a:	f001 fa6a 	bl	8004562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800308e:	2014      	movs	r0, #20
 8003090:	f001 fa83 	bl	800459a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8003094:	2200      	movs	r2, #0
 8003096:	2100      	movs	r1, #0
 8003098:	2015      	movs	r0, #21
 800309a:	f001 fa62 	bl	8004562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800309e:	2015      	movs	r0, #21
 80030a0:	f001 fa7b 	bl	800459a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80030a4:	bf00      	nop
 80030a6:	3728      	adds	r7, #40	; 0x28
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40006400 	.word	0x40006400
 80030b0:	40023800 	.word	0x40023800
 80030b4:	40020000 	.word	0x40020000

080030b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b08a      	sub	sp, #40	; 0x28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c0:	f107 0314 	add.w	r3, r7, #20
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	605a      	str	r2, [r3, #4]
 80030ca:	609a      	str	r2, [r3, #8]
 80030cc:	60da      	str	r2, [r3, #12]
 80030ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a1d      	ldr	r2, [pc, #116]	; (800314c <HAL_I2C_MspInit+0x94>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d133      	bne.n	8003142 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	4b1c      	ldr	r3, [pc, #112]	; (8003150 <HAL_I2C_MspInit+0x98>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	4a1b      	ldr	r2, [pc, #108]	; (8003150 <HAL_I2C_MspInit+0x98>)
 80030e4:	f043 0302 	orr.w	r3, r3, #2
 80030e8:	6313      	str	r3, [r2, #48]	; 0x30
 80030ea:	4b19      	ldr	r3, [pc, #100]	; (8003150 <HAL_I2C_MspInit+0x98>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	613b      	str	r3, [r7, #16]
 80030f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030f6:	23c0      	movs	r3, #192	; 0xc0
 80030f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030fa:	2312      	movs	r3, #18
 80030fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fe:	2300      	movs	r3, #0
 8003100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003102:	2303      	movs	r3, #3
 8003104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003106:	2304      	movs	r3, #4
 8003108:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800310a:	f107 0314 	add.w	r3, r7, #20
 800310e:	4619      	mov	r1, r3
 8003110:	4810      	ldr	r0, [pc, #64]	; (8003154 <HAL_I2C_MspInit+0x9c>)
 8003112:	f001 fa8d 	bl	8004630 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003116:	2300      	movs	r3, #0
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	4b0d      	ldr	r3, [pc, #52]	; (8003150 <HAL_I2C_MspInit+0x98>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	4a0c      	ldr	r2, [pc, #48]	; (8003150 <HAL_I2C_MspInit+0x98>)
 8003120:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003124:	6413      	str	r3, [r2, #64]	; 0x40
 8003126:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <HAL_I2C_MspInit+0x98>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003132:	2200      	movs	r2, #0
 8003134:	2100      	movs	r1, #0
 8003136:	201f      	movs	r0, #31
 8003138:	f001 fa13 	bl	8004562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800313c:	201f      	movs	r0, #31
 800313e:	f001 fa2c 	bl	800459a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003142:	bf00      	nop
 8003144:	3728      	adds	r7, #40	; 0x28
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40005400 	.word	0x40005400
 8003150:	40023800 	.word	0x40023800
 8003154:	40020400 	.word	0x40020400

08003158 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b09a      	sub	sp, #104	; 0x68
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003160:	f107 030c 	add.w	r3, r7, #12
 8003164:	225c      	movs	r2, #92	; 0x5c
 8003166:	2100      	movs	r1, #0
 8003168:	4618      	mov	r0, r3
 800316a:	f006 f91b 	bl	80093a4 <memset>
  if(hrtc->Instance==RTC)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a0c      	ldr	r2, [pc, #48]	; (80031a4 <HAL_RTC_MspInit+0x4c>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d110      	bne.n	800319a <HAL_RTC_MspInit+0x42>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003178:	2320      	movs	r3, #32
 800317a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV16;
 800317c:	4b0a      	ldr	r3, [pc, #40]	; (80031a8 <HAL_RTC_MspInit+0x50>)
 800317e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003180:	f107 030c 	add.w	r3, r7, #12
 8003184:	4618      	mov	r0, r3
 8003186:	f003 faa9 	bl	80066dc <HAL_RCCEx_PeriphCLKConfig>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 8003190:	f7ff fdf4 	bl	8002d7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003194:	4b05      	ldr	r3, [pc, #20]	; (80031ac <HAL_RTC_MspInit+0x54>)
 8003196:	2201      	movs	r2, #1
 8003198:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800319a:	bf00      	nop
 800319c:	3768      	adds	r7, #104	; 0x68
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40002800 	.word	0x40002800
 80031a8:	00100300 	.word	0x00100300
 80031ac:	42470e3c 	.word	0x42470e3c

080031b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a18      	ldr	r2, [pc, #96]	; (8003220 <HAL_TIM_Base_MspInit+0x70>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d10e      	bne.n	80031e0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031c2:	2300      	movs	r3, #0
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	4b17      	ldr	r3, [pc, #92]	; (8003224 <HAL_TIM_Base_MspInit+0x74>)
 80031c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ca:	4a16      	ldr	r2, [pc, #88]	; (8003224 <HAL_TIM_Base_MspInit+0x74>)
 80031cc:	f043 0301 	orr.w	r3, r3, #1
 80031d0:	6453      	str	r3, [r2, #68]	; 0x44
 80031d2:	4b14      	ldr	r3, [pc, #80]	; (8003224 <HAL_TIM_Base_MspInit+0x74>)
 80031d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80031de:	e01a      	b.n	8003216 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM6)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a10      	ldr	r2, [pc, #64]	; (8003228 <HAL_TIM_Base_MspInit+0x78>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d115      	bne.n	8003216 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80031ea:	2300      	movs	r3, #0
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <HAL_TIM_Base_MspInit+0x74>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	4a0c      	ldr	r2, [pc, #48]	; (8003224 <HAL_TIM_Base_MspInit+0x74>)
 80031f4:	f043 0310 	orr.w	r3, r3, #16
 80031f8:	6413      	str	r3, [r2, #64]	; 0x40
 80031fa:	4b0a      	ldr	r3, [pc, #40]	; (8003224 <HAL_TIM_Base_MspInit+0x74>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	f003 0310 	and.w	r3, r3, #16
 8003202:	60bb      	str	r3, [r7, #8]
 8003204:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003206:	2200      	movs	r2, #0
 8003208:	2100      	movs	r1, #0
 800320a:	2036      	movs	r0, #54	; 0x36
 800320c:	f001 f9a9 	bl	8004562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003210:	2036      	movs	r0, #54	; 0x36
 8003212:	f001 f9c2 	bl	800459a <HAL_NVIC_EnableIRQ>
}
 8003216:	bf00      	nop
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40010000 	.word	0x40010000
 8003224:	40023800 	.word	0x40023800
 8003228:	40001000 	.word	0x40001000

0800322c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b088      	sub	sp, #32
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003234:	f107 030c 	add.w	r3, r7, #12
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	605a      	str	r2, [r3, #4]
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	60da      	str	r2, [r3, #12]
 8003242:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a1b      	ldr	r2, [pc, #108]	; (80032b8 <HAL_TIM_MspPostInit+0x8c>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d12f      	bne.n	80032ae <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	60bb      	str	r3, [r7, #8]
 8003252:	4b1a      	ldr	r3, [pc, #104]	; (80032bc <HAL_TIM_MspPostInit+0x90>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	4a19      	ldr	r2, [pc, #100]	; (80032bc <HAL_TIM_MspPostInit+0x90>)
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	6313      	str	r3, [r2, #48]	; 0x30
 800325e:	4b17      	ldr	r3, [pc, #92]	; (80032bc <HAL_TIM_MspPostInit+0x90>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	60bb      	str	r3, [r7, #8]
 8003268:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_FAN_IN_Pin;
 800326a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800326e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003270:	2312      	movs	r3, #18
 8003272:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003278:	2300      	movs	r3, #0
 800327a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800327c:	2301      	movs	r3, #1
 800327e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_FAN_IN_GPIO_Port, &GPIO_InitStruct);
 8003280:	f107 030c 	add.w	r3, r7, #12
 8003284:	4619      	mov	r1, r3
 8003286:	480e      	ldr	r0, [pc, #56]	; (80032c0 <HAL_TIM_MspPostInit+0x94>)
 8003288:	f001 f9d2 	bl	8004630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_FAN_OUT_Pin;
 800328c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003290:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003292:	2302      	movs	r3, #2
 8003294:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800329a:	2300      	movs	r3, #0
 800329c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800329e:	2301      	movs	r3, #1
 80032a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_FAN_OUT_GPIO_Port, &GPIO_InitStruct);
 80032a2:	f107 030c 	add.w	r3, r7, #12
 80032a6:	4619      	mov	r1, r3
 80032a8:	4805      	ldr	r0, [pc, #20]	; (80032c0 <HAL_TIM_MspPostInit+0x94>)
 80032aa:	f001 f9c1 	bl	8004630 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80032ae:	bf00      	nop
 80032b0:	3720      	adds	r7, #32
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40010000 	.word	0x40010000
 80032bc:	40023800 	.word	0x40023800
 80032c0:	40020000 	.word	0x40020000

080032c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08a      	sub	sp, #40	; 0x28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032cc:	f107 0314 	add.w	r3, r7, #20
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	605a      	str	r2, [r3, #4]
 80032d6:	609a      	str	r2, [r3, #8]
 80032d8:	60da      	str	r2, [r3, #12]
 80032da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a19      	ldr	r2, [pc, #100]	; (8003348 <HAL_UART_MspInit+0x84>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d12b      	bne.n	800333e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	4b18      	ldr	r3, [pc, #96]	; (800334c <HAL_UART_MspInit+0x88>)
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	4a17      	ldr	r2, [pc, #92]	; (800334c <HAL_UART_MspInit+0x88>)
 80032f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032f4:	6413      	str	r3, [r2, #64]	; 0x40
 80032f6:	4b15      	ldr	r3, [pc, #84]	; (800334c <HAL_UART_MspInit+0x88>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fe:	613b      	str	r3, [r7, #16]
 8003300:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003302:	2300      	movs	r3, #0
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	4b11      	ldr	r3, [pc, #68]	; (800334c <HAL_UART_MspInit+0x88>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	4a10      	ldr	r2, [pc, #64]	; (800334c <HAL_UART_MspInit+0x88>)
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	6313      	str	r3, [r2, #48]	; 0x30
 8003312:	4b0e      	ldr	r3, [pc, #56]	; (800334c <HAL_UART_MspInit+0x88>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800331e:	230c      	movs	r3, #12
 8003320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003322:	2302      	movs	r3, #2
 8003324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003326:	2300      	movs	r3, #0
 8003328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800332a:	2303      	movs	r3, #3
 800332c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800332e:	2307      	movs	r3, #7
 8003330:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003332:	f107 0314 	add.w	r3, r7, #20
 8003336:	4619      	mov	r1, r3
 8003338:	4805      	ldr	r0, [pc, #20]	; (8003350 <HAL_UART_MspInit+0x8c>)
 800333a:	f001 f979 	bl	8004630 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800333e:	bf00      	nop
 8003340:	3728      	adds	r7, #40	; 0x28
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40004400 	.word	0x40004400
 800334c:	40023800 	.word	0x40023800
 8003350:	40020000 	.word	0x40020000

08003354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003358:	e7fe      	b.n	8003358 <NMI_Handler+0x4>

0800335a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800335a:	b480      	push	{r7}
 800335c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800335e:	e7fe      	b.n	800335e <HardFault_Handler+0x4>

08003360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003364:	e7fe      	b.n	8003364 <MemManage_Handler+0x4>

08003366 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003366:	b480      	push	{r7}
 8003368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800336a:	e7fe      	b.n	800336a <BusFault_Handler+0x4>

0800336c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003370:	e7fe      	b.n	8003370 <UsageFault_Handler+0x4>

08003372 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003372:	b480      	push	{r7}
 8003374:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003376:	bf00      	nop
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003384:	bf00      	nop
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800338e:	b480      	push	{r7}
 8003390:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003392:	bf00      	nop
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033a0:	f000 f98c 	bl	80036bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Scheduler_Update_1ms();
 80033a4:	f7ff fd22 	bl	8002dec <Scheduler_Update_1ms>
  /* USER CODE END SysTick_IRQn 1 */
}
 80033a8:	bf00      	nop
 80033aa:	bd80      	pop	{r7, pc}

080033ac <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80033b0:	4802      	ldr	r0, [pc, #8]	; (80033bc <CAN1_TX_IRQHandler+0x10>)
 80033b2:	f000 fdd6 	bl	8003f62 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80033b6:	bf00      	nop
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	20000c3c 	.word	0x20000c3c

080033c0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80033c4:	4802      	ldr	r0, [pc, #8]	; (80033d0 <CAN1_RX0_IRQHandler+0x10>)
 80033c6:	f000 fdcc 	bl	8003f62 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80033ca:	bf00      	nop
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20000c3c 	.word	0x20000c3c

080033d4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80033d8:	4802      	ldr	r0, [pc, #8]	; (80033e4 <CAN1_RX1_IRQHandler+0x10>)
 80033da:	f000 fdc2 	bl	8003f62 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80033de:	bf00      	nop
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20000c3c 	.word	0x20000c3c

080033e8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80033ec:	4802      	ldr	r0, [pc, #8]	; (80033f8 <I2C1_EV_IRQHandler+0x10>)
 80033ee:	f001 fc43 	bl	8004c78 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80033f2:	bf00      	nop
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	20000c64 	.word	0x20000c64

080033fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
   OW_IRQHandler();
 8003400:	f7fd ff8a 	bl	8001318 <OW_IRQHandler>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003404:	4802      	ldr	r0, [pc, #8]	; (8003410 <TIM6_DAC_IRQHandler+0x14>)
 8003406:	f004 fd21 	bl	8007e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800340a:	bf00      	nop
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	20000d2c 	.word	0x20000d2c

08003414 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
	return 1;
 8003418:	2301      	movs	r3, #1
}
 800341a:	4618      	mov	r0, r3
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <_kill>:

int _kill(int pid, int sig)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800342e:	f005 fe5f 	bl	80090f0 <__errno>
 8003432:	4603      	mov	r3, r0
 8003434:	2216      	movs	r2, #22
 8003436:	601a      	str	r2, [r3, #0]
	return -1;
 8003438:	f04f 33ff 	mov.w	r3, #4294967295
}
 800343c:	4618      	mov	r0, r3
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <_exit>:

void _exit (int status)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800344c:	f04f 31ff 	mov.w	r1, #4294967295
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7ff ffe7 	bl	8003424 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003456:	e7fe      	b.n	8003456 <_exit+0x12>

08003458 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	e00a      	b.n	8003480 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800346a:	f3af 8000 	nop.w
 800346e:	4601      	mov	r1, r0
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	1c5a      	adds	r2, r3, #1
 8003474:	60ba      	str	r2, [r7, #8]
 8003476:	b2ca      	uxtb	r2, r1
 8003478:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	3301      	adds	r3, #1
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	429a      	cmp	r2, r3
 8003486:	dbf0      	blt.n	800346a <_read+0x12>
	}

return len;
 8003488:	687b      	ldr	r3, [r7, #4]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3718      	adds	r7, #24
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b086      	sub	sp, #24
 8003496:	af00      	add	r7, sp, #0
 8003498:	60f8      	str	r0, [r7, #12]
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800349e:	2300      	movs	r3, #0
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	e009      	b.n	80034b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	1c5a      	adds	r2, r3, #1
 80034a8:	60ba      	str	r2, [r7, #8]
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	3301      	adds	r3, #1
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	429a      	cmp	r2, r3
 80034be:	dbf1      	blt.n	80034a4 <_write+0x12>
	}
	return len;
 80034c0:	687b      	ldr	r3, [r7, #4]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3718      	adds	r7, #24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <_close>:

int _close(int file)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
	return -1;
 80034d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
 80034ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034f2:	605a      	str	r2, [r3, #4]
	return 0;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <_isatty>:

int _isatty(int file)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
	return 1;
 800350a:	2301      	movs	r3, #1
}
 800350c:	4618      	mov	r0, r3
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
	return 0;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
	...

08003534 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800353c:	4a14      	ldr	r2, [pc, #80]	; (8003590 <_sbrk+0x5c>)
 800353e:	4b15      	ldr	r3, [pc, #84]	; (8003594 <_sbrk+0x60>)
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003548:	4b13      	ldr	r3, [pc, #76]	; (8003598 <_sbrk+0x64>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d102      	bne.n	8003556 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003550:	4b11      	ldr	r3, [pc, #68]	; (8003598 <_sbrk+0x64>)
 8003552:	4a12      	ldr	r2, [pc, #72]	; (800359c <_sbrk+0x68>)
 8003554:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003556:	4b10      	ldr	r3, [pc, #64]	; (8003598 <_sbrk+0x64>)
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4413      	add	r3, r2
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	429a      	cmp	r2, r3
 8003562:	d207      	bcs.n	8003574 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003564:	f005 fdc4 	bl	80090f0 <__errno>
 8003568:	4603      	mov	r3, r0
 800356a:	220c      	movs	r2, #12
 800356c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800356e:	f04f 33ff 	mov.w	r3, #4294967295
 8003572:	e009      	b.n	8003588 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003574:	4b08      	ldr	r3, [pc, #32]	; (8003598 <_sbrk+0x64>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800357a:	4b07      	ldr	r3, [pc, #28]	; (8003598 <_sbrk+0x64>)
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4413      	add	r3, r2
 8003582:	4a05      	ldr	r2, [pc, #20]	; (8003598 <_sbrk+0x64>)
 8003584:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003586:	68fb      	ldr	r3, [r7, #12]
}
 8003588:	4618      	mov	r0, r3
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	20020000 	.word	0x20020000
 8003594:	00000400 	.word	0x00000400
 8003598:	20000dfc 	.word	0x20000dfc
 800359c:	20000e40 	.word	0x20000e40

080035a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035a4:	4b06      	ldr	r3, [pc, #24]	; (80035c0 <SystemInit+0x20>)
 80035a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035aa:	4a05      	ldr	r2, [pc, #20]	; (80035c0 <SystemInit+0x20>)
 80035ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035b4:	bf00      	nop
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	e000ed00 	.word	0xe000ed00

080035c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80035c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035c8:	480d      	ldr	r0, [pc, #52]	; (8003600 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80035ca:	490e      	ldr	r1, [pc, #56]	; (8003604 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80035cc:	4a0e      	ldr	r2, [pc, #56]	; (8003608 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80035ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035d0:	e002      	b.n	80035d8 <LoopCopyDataInit>

080035d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035d6:	3304      	adds	r3, #4

080035d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035dc:	d3f9      	bcc.n	80035d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035de:	4a0b      	ldr	r2, [pc, #44]	; (800360c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80035e0:	4c0b      	ldr	r4, [pc, #44]	; (8003610 <LoopFillZerobss+0x26>)
  movs r3, #0
 80035e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035e4:	e001      	b.n	80035ea <LoopFillZerobss>

080035e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035e8:	3204      	adds	r2, #4

080035ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035ec:	d3fb      	bcc.n	80035e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80035ee:	f7ff ffd7 	bl	80035a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035f2:	f005 fd83 	bl	80090fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035f6:	f7ff f8c1 	bl	800277c <main>
  bx  lr    
 80035fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80035fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003604:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003608:	0800b798 	.word	0x0800b798
  ldr r2, =_sbss
 800360c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003610:	20000e3c 	.word	0x20000e3c

08003614 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003614:	e7fe      	b.n	8003614 <ADC_IRQHandler>
	...

08003618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800361c:	4b0e      	ldr	r3, [pc, #56]	; (8003658 <HAL_Init+0x40>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a0d      	ldr	r2, [pc, #52]	; (8003658 <HAL_Init+0x40>)
 8003622:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003626:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003628:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <HAL_Init+0x40>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a0a      	ldr	r2, [pc, #40]	; (8003658 <HAL_Init+0x40>)
 800362e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003632:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003634:	4b08      	ldr	r3, [pc, #32]	; (8003658 <HAL_Init+0x40>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a07      	ldr	r2, [pc, #28]	; (8003658 <HAL_Init+0x40>)
 800363a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800363e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003640:	2003      	movs	r0, #3
 8003642:	f000 ff83 	bl	800454c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003646:	2000      	movs	r0, #0
 8003648:	f000 f808 	bl	800365c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800364c:	f7ff fcac 	bl	8002fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	40023c00 	.word	0x40023c00

0800365c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003664:	4b12      	ldr	r3, [pc, #72]	; (80036b0 <HAL_InitTick+0x54>)
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <HAL_InitTick+0x58>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	4619      	mov	r1, r3
 800366e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003672:	fbb3 f3f1 	udiv	r3, r3, r1
 8003676:	fbb2 f3f3 	udiv	r3, r2, r3
 800367a:	4618      	mov	r0, r3
 800367c:	f000 ff9b 	bl	80045b6 <HAL_SYSTICK_Config>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e00e      	b.n	80036a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b0f      	cmp	r3, #15
 800368e:	d80a      	bhi.n	80036a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003690:	2200      	movs	r2, #0
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	f04f 30ff 	mov.w	r0, #4294967295
 8003698:	f000 ff63 	bl	8004562 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800369c:	4a06      	ldr	r2, [pc, #24]	; (80036b8 <HAL_InitTick+0x5c>)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	e000      	b.n	80036a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	20000114 	.word	0x20000114
 80036b4:	2000011c 	.word	0x2000011c
 80036b8:	20000118 	.word	0x20000118

080036bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036c0:	4b06      	ldr	r3, [pc, #24]	; (80036dc <HAL_IncTick+0x20>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	461a      	mov	r2, r3
 80036c6:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <HAL_IncTick+0x24>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4413      	add	r3, r2
 80036cc:	4a04      	ldr	r2, [pc, #16]	; (80036e0 <HAL_IncTick+0x24>)
 80036ce:	6013      	str	r3, [r2, #0]
}
 80036d0:	bf00      	nop
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	2000011c 	.word	0x2000011c
 80036e0:	20000e00 	.word	0x20000e00

080036e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  return uwTick;
 80036e8:	4b03      	ldr	r3, [pc, #12]	; (80036f8 <HAL_GetTick+0x14>)
 80036ea:	681b      	ldr	r3, [r3, #0]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	20000e00 	.word	0x20000e00

080036fc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e0ed      	b.n	80038ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d102      	bne.n	8003720 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7ff fc6c 	bl	8002ff8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0201 	orr.w	r2, r2, #1
 800372e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003730:	f7ff ffd8 	bl	80036e4 <HAL_GetTick>
 8003734:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003736:	e012      	b.n	800375e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003738:	f7ff ffd4 	bl	80036e4 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b0a      	cmp	r3, #10
 8003744:	d90b      	bls.n	800375e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2205      	movs	r2, #5
 8003756:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e0c5      	b.n	80038ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0e5      	beq.n	8003738 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 0202 	bic.w	r2, r2, #2
 800377a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800377c:	f7ff ffb2 	bl	80036e4 <HAL_GetTick>
 8003780:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003782:	e012      	b.n	80037aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003784:	f7ff ffae 	bl	80036e4 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b0a      	cmp	r3, #10
 8003790:	d90b      	bls.n	80037aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2205      	movs	r2, #5
 80037a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e09f      	b.n	80038ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1e5      	bne.n	8003784 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	7e1b      	ldrb	r3, [r3, #24]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d108      	bne.n	80037d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	e007      	b.n	80037e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	7e5b      	ldrb	r3, [r3, #25]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d108      	bne.n	80037fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	e007      	b.n	800380c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800380a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	7e9b      	ldrb	r3, [r3, #26]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d108      	bne.n	8003826 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0220 	orr.w	r2, r2, #32
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	e007      	b.n	8003836 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0220 	bic.w	r2, r2, #32
 8003834:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	7edb      	ldrb	r3, [r3, #27]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d108      	bne.n	8003850 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0210 	bic.w	r2, r2, #16
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	e007      	b.n	8003860 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0210 	orr.w	r2, r2, #16
 800385e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	7f1b      	ldrb	r3, [r3, #28]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d108      	bne.n	800387a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0208 	orr.w	r2, r2, #8
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	e007      	b.n	800388a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0208 	bic.w	r2, r2, #8
 8003888:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	7f5b      	ldrb	r3, [r3, #29]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d108      	bne.n	80038a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f042 0204 	orr.w	r2, r2, #4
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	e007      	b.n	80038b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 0204 	bic.w	r2, r2, #4
 80038b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	431a      	orrs	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	ea42 0103 	orr.w	r1, r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	1e5a      	subs	r2, r3, #1
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b087      	sub	sp, #28
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 3020 	ldrb.w	r3, [r3, #32]
 800390a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800390c:	7cfb      	ldrb	r3, [r7, #19]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d003      	beq.n	800391a <HAL_CAN_ConfigFilter+0x26>
 8003912:	7cfb      	ldrb	r3, [r7, #19]
 8003914:	2b02      	cmp	r3, #2
 8003916:	f040 80be 	bne.w	8003a96 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800391a:	4b65      	ldr	r3, [pc, #404]	; (8003ab0 <HAL_CAN_ConfigFilter+0x1bc>)
 800391c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003924:	f043 0201 	orr.w	r2, r3, #1
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003934:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	021b      	lsls	r3, r3, #8
 800394a:	431a      	orrs	r2, r3
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	f003 031f 	and.w	r3, r3, #31
 800395a:	2201      	movs	r2, #1
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	43db      	mvns	r3, r3
 800396c:	401a      	ands	r2, r3
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d123      	bne.n	80039c4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	43db      	mvns	r3, r3
 8003986:	401a      	ands	r2, r3
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800399e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	3248      	adds	r2, #72	; 0x48
 80039a4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80039b8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80039ba:	6979      	ldr	r1, [r7, #20]
 80039bc:	3348      	adds	r3, #72	; 0x48
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	440b      	add	r3, r1
 80039c2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	69db      	ldr	r3, [r3, #28]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d122      	bne.n	8003a12 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	431a      	orrs	r2, r3
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80039ec:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	3248      	adds	r2, #72	; 0x48
 80039f2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a06:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a08:	6979      	ldr	r1, [r7, #20]
 8003a0a:	3348      	adds	r3, #72	; 0x48
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	440b      	add	r3, r1
 8003a10:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d109      	bne.n	8003a2e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	43db      	mvns	r3, r3
 8003a24:	401a      	ands	r2, r3
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003a2c:	e007      	b.n	8003a3e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	431a      	orrs	r2, r3
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d109      	bne.n	8003a5a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	43db      	mvns	r3, r3
 8003a50:	401a      	ands	r2, r3
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003a58:	e007      	b.n	8003a6a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	431a      	orrs	r2, r3
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d107      	bne.n	8003a82 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003a88:	f023 0201 	bic.w	r2, r3, #1
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003a92:	2300      	movs	r3, #0
 8003a94:	e006      	b.n	8003aa4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
  }
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	371c      	adds	r7, #28
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	40006400 	.word	0x40006400

08003ab4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d12e      	bne.n	8003b26 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0201 	bic.w	r2, r2, #1
 8003ade:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ae0:	f7ff fe00 	bl	80036e4 <HAL_GetTick>
 8003ae4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003ae6:	e012      	b.n	8003b0e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ae8:	f7ff fdfc 	bl	80036e4 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b0a      	cmp	r3, #10
 8003af4:	d90b      	bls.n	8003b0e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2205      	movs	r2, #5
 8003b06:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e012      	b.n	8003b34 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1e5      	bne.n	8003ae8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003b22:	2300      	movs	r3, #0
 8003b24:	e006      	b.n	8003b34 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
  }
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b089      	sub	sp, #36	; 0x24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
 8003b48:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b50:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b5a:	7ffb      	ldrb	r3, [r7, #31]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d003      	beq.n	8003b68 <HAL_CAN_AddTxMessage+0x2c>
 8003b60:	7ffb      	ldrb	r3, [r7, #31]
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	f040 80b8 	bne.w	8003cd8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10a      	bne.n	8003b88 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d105      	bne.n	8003b88 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 80a0 	beq.w	8003cc8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	0e1b      	lsrs	r3, r3, #24
 8003b8c:	f003 0303 	and.w	r3, r3, #3
 8003b90:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d907      	bls.n	8003ba8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e09e      	b.n	8003ce6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003ba8:	2201      	movs	r2, #1
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	409a      	lsls	r2, r3
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10d      	bne.n	8003bd6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003bc4:	68f9      	ldr	r1, [r7, #12]
 8003bc6:	6809      	ldr	r1, [r1, #0]
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	3318      	adds	r3, #24
 8003bce:	011b      	lsls	r3, r3, #4
 8003bd0:	440b      	add	r3, r1
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	e00f      	b.n	8003bf6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003be0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003be6:	68f9      	ldr	r1, [r7, #12]
 8003be8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003bea:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	3318      	adds	r3, #24
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	440b      	add	r3, r1
 8003bf4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6819      	ldr	r1, [r3, #0]
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	691a      	ldr	r2, [r3, #16]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	3318      	adds	r3, #24
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	440b      	add	r3, r1
 8003c06:	3304      	adds	r3, #4
 8003c08:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	7d1b      	ldrb	r3, [r3, #20]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d111      	bne.n	8003c36 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	3318      	adds	r3, #24
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	4413      	add	r3, r2
 8003c1e:	3304      	adds	r3, #4
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	6811      	ldr	r1, [r2, #0]
 8003c26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	3318      	adds	r3, #24
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	440b      	add	r3, r1
 8003c32:	3304      	adds	r3, #4
 8003c34:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	3307      	adds	r3, #7
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	061a      	lsls	r2, r3, #24
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	3306      	adds	r3, #6
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	041b      	lsls	r3, r3, #16
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3305      	adds	r3, #5
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	021b      	lsls	r3, r3, #8
 8003c50:	4313      	orrs	r3, r2
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	3204      	adds	r2, #4
 8003c56:	7812      	ldrb	r2, [r2, #0]
 8003c58:	4610      	mov	r0, r2
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	6811      	ldr	r1, [r2, #0]
 8003c5e:	ea43 0200 	orr.w	r2, r3, r0
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	440b      	add	r3, r1
 8003c68:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003c6c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	3303      	adds	r3, #3
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	061a      	lsls	r2, r3, #24
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3302      	adds	r3, #2
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	041b      	lsls	r3, r3, #16
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3301      	adds	r3, #1
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	021b      	lsls	r3, r3, #8
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	7812      	ldrb	r2, [r2, #0]
 8003c8e:	4610      	mov	r0, r2
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	6811      	ldr	r1, [r2, #0]
 8003c94:	ea43 0200 	orr.w	r2, r3, r0
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	440b      	add	r3, r1
 8003c9e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003ca2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	3318      	adds	r3, #24
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	4413      	add	r3, r2
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	6811      	ldr	r1, [r2, #0]
 8003cb6:	f043 0201 	orr.w	r2, r3, #1
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	3318      	adds	r3, #24
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	440b      	add	r3, r1
 8003cc2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	e00e      	b.n	8003ce6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e006      	b.n	8003ce6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
  }
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3724      	adds	r7, #36	; 0x24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b087      	sub	sp, #28
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	60f8      	str	r0, [r7, #12]
 8003cfa:	60b9      	str	r1, [r7, #8]
 8003cfc:	607a      	str	r2, [r7, #4]
 8003cfe:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d06:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d08:	7dfb      	ldrb	r3, [r7, #23]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d003      	beq.n	8003d16 <HAL_CAN_GetRxMessage+0x24>
 8003d0e:	7dfb      	ldrb	r3, [r7, #23]
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	f040 80f3 	bne.w	8003efc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10e      	bne.n	8003d3a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f003 0303 	and.w	r3, r3, #3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d116      	bne.n	8003d58 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e0e7      	b.n	8003f0a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	f003 0303 	and.w	r3, r3, #3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d107      	bne.n	8003d58 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0d8      	b.n	8003f0a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	331b      	adds	r3, #27
 8003d60:	011b      	lsls	r3, r3, #4
 8003d62:	4413      	add	r3, r2
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0204 	and.w	r2, r3, #4
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10c      	bne.n	8003d90 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	331b      	adds	r3, #27
 8003d7e:	011b      	lsls	r3, r3, #4
 8003d80:	4413      	add	r3, r2
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	0d5b      	lsrs	r3, r3, #21
 8003d86:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	e00b      	b.n	8003da8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	331b      	adds	r3, #27
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	4413      	add	r3, r2
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	08db      	lsrs	r3, r3, #3
 8003da0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	331b      	adds	r3, #27
 8003db0:	011b      	lsls	r3, r3, #4
 8003db2:	4413      	add	r3, r2
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0202 	and.w	r2, r3, #2
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	331b      	adds	r3, #27
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	4413      	add	r3, r2
 8003dca:	3304      	adds	r3, #4
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 020f 	and.w	r2, r3, #15
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	331b      	adds	r3, #27
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	4413      	add	r3, r2
 8003de2:	3304      	adds	r3, #4
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	0a1b      	lsrs	r3, r3, #8
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	331b      	adds	r3, #27
 8003df6:	011b      	lsls	r3, r3, #4
 8003df8:	4413      	add	r3, r2
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	0c1b      	lsrs	r3, r3, #16
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	0a1a      	lsrs	r2, r3, #8
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	3301      	adds	r3, #1
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	0c1a      	lsrs	r2, r3, #16
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	3302      	adds	r3, #2
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	4413      	add	r3, r2
 8003e5a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	0e1a      	lsrs	r2, r3, #24
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	3303      	adds	r3, #3
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	011b      	lsls	r3, r3, #4
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	0a1a      	lsrs	r2, r3, #8
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	3305      	adds	r3, #5
 8003e98:	b2d2      	uxtb	r2, r2
 8003e9a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	011b      	lsls	r3, r3, #4
 8003ea4:	4413      	add	r3, r2
 8003ea6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	0c1a      	lsrs	r2, r3, #16
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	3306      	adds	r3, #6
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	011b      	lsls	r3, r3, #4
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	0e1a      	lsrs	r2, r3, #24
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	3307      	adds	r3, #7
 8003ecc:	b2d2      	uxtb	r2, r2
 8003ece:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d108      	bne.n	8003ee8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68da      	ldr	r2, [r3, #12]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f042 0220 	orr.w	r2, r2, #32
 8003ee4:	60da      	str	r2, [r3, #12]
 8003ee6:	e007      	b.n	8003ef8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691a      	ldr	r2, [r3, #16]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f042 0220 	orr.w	r2, r2, #32
 8003ef6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	e006      	b.n	8003f0a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
  }
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	371c      	adds	r7, #28
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b085      	sub	sp, #20
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
 8003f1e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f26:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d002      	beq.n	8003f34 <HAL_CAN_ActivateNotification+0x1e>
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d109      	bne.n	8003f48 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6959      	ldr	r1, [r3, #20]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003f44:	2300      	movs	r3, #0
 8003f46:	e006      	b.n	8003f56 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
  }
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b08a      	sub	sp, #40	; 0x28
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d07c      	beq.n	80040a2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d023      	beq.n	8003ffa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f983 	bl	80042d0 <HAL_CAN_TxMailbox0CompleteCallback>
 8003fca:	e016      	b.n	8003ffa <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	f003 0304 	and.w	r3, r3, #4
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d004      	beq.n	8003fe0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8003fde:	e00c      	b.n	8003ffa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d004      	beq.n	8003ff4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ff2:	e002      	b.n	8003ffa <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f989 	bl	800430c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004000:	2b00      	cmp	r3, #0
 8004002:	d024      	beq.n	800404e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f44f 7280 	mov.w	r2, #256	; 0x100
 800400c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004014:	2b00      	cmp	r3, #0
 8004016:	d003      	beq.n	8004020 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f963 	bl	80042e4 <HAL_CAN_TxMailbox1CompleteCallback>
 800401e:	e016      	b.n	800404e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004026:	2b00      	cmp	r3, #0
 8004028:	d004      	beq.n	8004034 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004030:	627b      	str	r3, [r7, #36]	; 0x24
 8004032:	e00c      	b.n	800404e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800403a:	2b00      	cmp	r3, #0
 800403c:	d004      	beq.n	8004048 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004044:	627b      	str	r3, [r7, #36]	; 0x24
 8004046:	e002      	b.n	800404e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f969 	bl	8004320 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d024      	beq.n	80040a2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004060:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f943 	bl	80042f8 <HAL_CAN_TxMailbox2CompleteCallback>
 8004072:	e016      	b.n	80040a2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d004      	beq.n	8004088 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004084:	627b      	str	r3, [r7, #36]	; 0x24
 8004086:	e00c      	b.n	80040a2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d004      	beq.n	800409c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004098:	627b      	str	r3, [r7, #36]	; 0x24
 800409a:	e002      	b.n	80040a2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f949 	bl	8004334 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00c      	beq.n	80040c6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f003 0310 	and.w	r3, r3, #16
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d007      	beq.n	80040c6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80040b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2210      	movs	r2, #16
 80040c4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00b      	beq.n	80040e8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f003 0308 	and.w	r3, r3, #8
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d006      	beq.n	80040e8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2208      	movs	r2, #8
 80040e0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f930 	bl	8004348 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d009      	beq.n	8004106 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f003 0303 	and.w	r3, r3, #3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d002      	beq.n	8004106 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7fc fdeb 	bl	8000cdc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00c      	beq.n	800412a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f003 0310 	and.w	r3, r3, #16
 8004116:	2b00      	cmp	r3, #0
 8004118:	d007      	beq.n	800412a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004120:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2210      	movs	r2, #16
 8004128:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	f003 0320 	and.w	r3, r3, #32
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00b      	beq.n	800414c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b00      	cmp	r3, #0
 800413c:	d006      	beq.n	800414c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2208      	movs	r2, #8
 8004144:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f908 	bl	800435c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800414c:	6a3b      	ldr	r3, [r7, #32]
 800414e:	f003 0310 	and.w	r3, r3, #16
 8004152:	2b00      	cmp	r3, #0
 8004154:	d009      	beq.n	800416a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	f003 0303 	and.w	r3, r3, #3
 8004160:	2b00      	cmp	r3, #0
 8004162:	d002      	beq.n	800416a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7fc fdd9 	bl	8000d1c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00b      	beq.n	800418c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	f003 0310 	and.w	r3, r3, #16
 800417a:	2b00      	cmp	r3, #0
 800417c:	d006      	beq.n	800418c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2210      	movs	r2, #16
 8004184:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f8f2 	bl	8004370 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00b      	beq.n	80041ae <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	f003 0308 	and.w	r3, r3, #8
 800419c:	2b00      	cmp	r3, #0
 800419e:	d006      	beq.n	80041ae <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2208      	movs	r2, #8
 80041a6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f8eb 	bl	8004384 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80041ae:	6a3b      	ldr	r3, [r7, #32]
 80041b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d07b      	beq.n	80042b0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f003 0304 	and.w	r3, r3, #4
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d072      	beq.n	80042a8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d008      	beq.n	80041de <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	f043 0301 	orr.w	r3, r3, #1
 80041dc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d008      	beq.n	80041fa <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	f043 0302 	orr.w	r3, r3, #2
 80041f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004200:	2b00      	cmp	r3, #0
 8004202:	d008      	beq.n	8004216 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	f043 0304 	orr.w	r3, r3, #4
 8004214:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004216:	6a3b      	ldr	r3, [r7, #32]
 8004218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800421c:	2b00      	cmp	r3, #0
 800421e:	d043      	beq.n	80042a8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004226:	2b00      	cmp	r3, #0
 8004228:	d03e      	beq.n	80042a8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004230:	2b60      	cmp	r3, #96	; 0x60
 8004232:	d02b      	beq.n	800428c <HAL_CAN_IRQHandler+0x32a>
 8004234:	2b60      	cmp	r3, #96	; 0x60
 8004236:	d82e      	bhi.n	8004296 <HAL_CAN_IRQHandler+0x334>
 8004238:	2b50      	cmp	r3, #80	; 0x50
 800423a:	d022      	beq.n	8004282 <HAL_CAN_IRQHandler+0x320>
 800423c:	2b50      	cmp	r3, #80	; 0x50
 800423e:	d82a      	bhi.n	8004296 <HAL_CAN_IRQHandler+0x334>
 8004240:	2b40      	cmp	r3, #64	; 0x40
 8004242:	d019      	beq.n	8004278 <HAL_CAN_IRQHandler+0x316>
 8004244:	2b40      	cmp	r3, #64	; 0x40
 8004246:	d826      	bhi.n	8004296 <HAL_CAN_IRQHandler+0x334>
 8004248:	2b30      	cmp	r3, #48	; 0x30
 800424a:	d010      	beq.n	800426e <HAL_CAN_IRQHandler+0x30c>
 800424c:	2b30      	cmp	r3, #48	; 0x30
 800424e:	d822      	bhi.n	8004296 <HAL_CAN_IRQHandler+0x334>
 8004250:	2b10      	cmp	r3, #16
 8004252:	d002      	beq.n	800425a <HAL_CAN_IRQHandler+0x2f8>
 8004254:	2b20      	cmp	r3, #32
 8004256:	d005      	beq.n	8004264 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004258:	e01d      	b.n	8004296 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425c:	f043 0308 	orr.w	r3, r3, #8
 8004260:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004262:	e019      	b.n	8004298 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	f043 0310 	orr.w	r3, r3, #16
 800426a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800426c:	e014      	b.n	8004298 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	f043 0320 	orr.w	r3, r3, #32
 8004274:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004276:	e00f      	b.n	8004298 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800427e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004280:	e00a      	b.n	8004298 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004288:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800428a:	e005      	b.n	8004298 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004292:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004294:	e000      	b.n	8004298 <HAL_CAN_IRQHandler+0x336>
            break;
 8004296:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	699a      	ldr	r2, [r3, #24]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80042a6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2204      	movs	r2, #4
 80042ae:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d008      	beq.n	80042c8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	431a      	orrs	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f868 	bl	8004398 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80042c8:	bf00      	nop
 80042ca:	3728      	adds	r7, #40	; 0x28
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043bc:	4b0c      	ldr	r3, [pc, #48]	; (80043f0 <__NVIC_SetPriorityGrouping+0x44>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043c8:	4013      	ands	r3, r2
 80043ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043de:	4a04      	ldr	r2, [pc, #16]	; (80043f0 <__NVIC_SetPriorityGrouping+0x44>)
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	60d3      	str	r3, [r2, #12]
}
 80043e4:	bf00      	nop
 80043e6:	3714      	adds	r7, #20
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	e000ed00 	.word	0xe000ed00

080043f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043f8:	4b04      	ldr	r3, [pc, #16]	; (800440c <__NVIC_GetPriorityGrouping+0x18>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	0a1b      	lsrs	r3, r3, #8
 80043fe:	f003 0307 	and.w	r3, r3, #7
}
 8004402:	4618      	mov	r0, r3
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	e000ed00 	.word	0xe000ed00

08004410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	4603      	mov	r3, r0
 8004418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800441a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800441e:	2b00      	cmp	r3, #0
 8004420:	db0b      	blt.n	800443a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004422:	79fb      	ldrb	r3, [r7, #7]
 8004424:	f003 021f 	and.w	r2, r3, #31
 8004428:	4907      	ldr	r1, [pc, #28]	; (8004448 <__NVIC_EnableIRQ+0x38>)
 800442a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442e:	095b      	lsrs	r3, r3, #5
 8004430:	2001      	movs	r0, #1
 8004432:	fa00 f202 	lsl.w	r2, r0, r2
 8004436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800443a:	bf00      	nop
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	e000e100 	.word	0xe000e100

0800444c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	4603      	mov	r3, r0
 8004454:	6039      	str	r1, [r7, #0]
 8004456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800445c:	2b00      	cmp	r3, #0
 800445e:	db0a      	blt.n	8004476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	b2da      	uxtb	r2, r3
 8004464:	490c      	ldr	r1, [pc, #48]	; (8004498 <__NVIC_SetPriority+0x4c>)
 8004466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800446a:	0112      	lsls	r2, r2, #4
 800446c:	b2d2      	uxtb	r2, r2
 800446e:	440b      	add	r3, r1
 8004470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004474:	e00a      	b.n	800448c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	b2da      	uxtb	r2, r3
 800447a:	4908      	ldr	r1, [pc, #32]	; (800449c <__NVIC_SetPriority+0x50>)
 800447c:	79fb      	ldrb	r3, [r7, #7]
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	3b04      	subs	r3, #4
 8004484:	0112      	lsls	r2, r2, #4
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	440b      	add	r3, r1
 800448a:	761a      	strb	r2, [r3, #24]
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr
 8004498:	e000e100 	.word	0xe000e100
 800449c:	e000ed00 	.word	0xe000ed00

080044a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b089      	sub	sp, #36	; 0x24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f003 0307 	and.w	r3, r3, #7
 80044b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	f1c3 0307 	rsb	r3, r3, #7
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	bf28      	it	cs
 80044be:	2304      	movcs	r3, #4
 80044c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	3304      	adds	r3, #4
 80044c6:	2b06      	cmp	r3, #6
 80044c8:	d902      	bls.n	80044d0 <NVIC_EncodePriority+0x30>
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	3b03      	subs	r3, #3
 80044ce:	e000      	b.n	80044d2 <NVIC_EncodePriority+0x32>
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044d4:	f04f 32ff 	mov.w	r2, #4294967295
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	fa02 f303 	lsl.w	r3, r2, r3
 80044de:	43da      	mvns	r2, r3
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	401a      	ands	r2, r3
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044e8:	f04f 31ff 	mov.w	r1, #4294967295
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	fa01 f303 	lsl.w	r3, r1, r3
 80044f2:	43d9      	mvns	r1, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044f8:	4313      	orrs	r3, r2
         );
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3724      	adds	r7, #36	; 0x24
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
	...

08004508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3b01      	subs	r3, #1
 8004514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004518:	d301      	bcc.n	800451e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800451a:	2301      	movs	r3, #1
 800451c:	e00f      	b.n	800453e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800451e:	4a0a      	ldr	r2, [pc, #40]	; (8004548 <SysTick_Config+0x40>)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3b01      	subs	r3, #1
 8004524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004526:	210f      	movs	r1, #15
 8004528:	f04f 30ff 	mov.w	r0, #4294967295
 800452c:	f7ff ff8e 	bl	800444c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004530:	4b05      	ldr	r3, [pc, #20]	; (8004548 <SysTick_Config+0x40>)
 8004532:	2200      	movs	r2, #0
 8004534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004536:	4b04      	ldr	r3, [pc, #16]	; (8004548 <SysTick_Config+0x40>)
 8004538:	2207      	movs	r2, #7
 800453a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	e000e010 	.word	0xe000e010

0800454c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7ff ff29 	bl	80043ac <__NVIC_SetPriorityGrouping>
}
 800455a:	bf00      	nop
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004562:	b580      	push	{r7, lr}
 8004564:	b086      	sub	sp, #24
 8004566:	af00      	add	r7, sp, #0
 8004568:	4603      	mov	r3, r0
 800456a:	60b9      	str	r1, [r7, #8]
 800456c:	607a      	str	r2, [r7, #4]
 800456e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004570:	2300      	movs	r3, #0
 8004572:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004574:	f7ff ff3e 	bl	80043f4 <__NVIC_GetPriorityGrouping>
 8004578:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	68b9      	ldr	r1, [r7, #8]
 800457e:	6978      	ldr	r0, [r7, #20]
 8004580:	f7ff ff8e 	bl	80044a0 <NVIC_EncodePriority>
 8004584:	4602      	mov	r2, r0
 8004586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800458a:	4611      	mov	r1, r2
 800458c:	4618      	mov	r0, r3
 800458e:	f7ff ff5d 	bl	800444c <__NVIC_SetPriority>
}
 8004592:	bf00      	nop
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b082      	sub	sp, #8
 800459e:	af00      	add	r7, sp, #0
 80045a0:	4603      	mov	r3, r0
 80045a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff ff31 	bl	8004410 <__NVIC_EnableIRQ>
}
 80045ae:	bf00      	nop
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b082      	sub	sp, #8
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7ff ffa2 	bl	8004508 <SysTick_Config>
 80045c4:	4603      	mov	r3, r0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045ce:	b480      	push	{r7}
 80045d0:	b083      	sub	sp, #12
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d004      	beq.n	80045ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2280      	movs	r2, #128	; 0x80
 80045e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e00c      	b.n	8004606 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2205      	movs	r2, #5
 80045f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 0201 	bic.w	r2, r2, #1
 8004602:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004620:	b2db      	uxtb	r3, r3
}
 8004622:	4618      	mov	r0, r3
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
	...

08004630 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004630:	b480      	push	{r7}
 8004632:	b089      	sub	sp, #36	; 0x24
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800463a:	2300      	movs	r3, #0
 800463c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800463e:	2300      	movs	r3, #0
 8004640:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004642:	2300      	movs	r3, #0
 8004644:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004646:	2300      	movs	r3, #0
 8004648:	61fb      	str	r3, [r7, #28]
 800464a:	e165      	b.n	8004918 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800464c:	2201      	movs	r2, #1
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	fa02 f303 	lsl.w	r3, r2, r3
 8004654:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	4013      	ands	r3, r2
 800465e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	429a      	cmp	r2, r3
 8004666:	f040 8154 	bne.w	8004912 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	2b01      	cmp	r3, #1
 8004674:	d005      	beq.n	8004682 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800467e:	2b02      	cmp	r3, #2
 8004680:	d130      	bne.n	80046e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	005b      	lsls	r3, r3, #1
 800468c:	2203      	movs	r2, #3
 800468e:	fa02 f303 	lsl.w	r3, r2, r3
 8004692:	43db      	mvns	r3, r3
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	4013      	ands	r3, r2
 8004698:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046b8:	2201      	movs	r2, #1
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	fa02 f303 	lsl.w	r3, r2, r3
 80046c0:	43db      	mvns	r3, r3
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	4013      	ands	r3, r2
 80046c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	091b      	lsrs	r3, r3, #4
 80046ce:	f003 0201 	and.w	r2, r3, #1
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	fa02 f303 	lsl.w	r3, r2, r3
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	4313      	orrs	r3, r2
 80046dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f003 0303 	and.w	r3, r3, #3
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	d017      	beq.n	8004720 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	2203      	movs	r2, #3
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	43db      	mvns	r3, r3
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	4013      	ands	r3, r2
 8004706:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	fa02 f303 	lsl.w	r3, r2, r3
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	4313      	orrs	r3, r2
 8004718:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f003 0303 	and.w	r3, r3, #3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d123      	bne.n	8004774 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	08da      	lsrs	r2, r3, #3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3208      	adds	r2, #8
 8004734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004738:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	220f      	movs	r2, #15
 8004744:	fa02 f303 	lsl.w	r3, r2, r3
 8004748:	43db      	mvns	r3, r3
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	4013      	ands	r3, r2
 800474e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	691a      	ldr	r2, [r3, #16]
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	4313      	orrs	r3, r2
 8004764:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	08da      	lsrs	r2, r3, #3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	3208      	adds	r2, #8
 800476e:	69b9      	ldr	r1, [r7, #24]
 8004770:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	2203      	movs	r2, #3
 8004780:	fa02 f303 	lsl.w	r3, r2, r3
 8004784:	43db      	mvns	r3, r3
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	4013      	ands	r3, r2
 800478a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f003 0203 	and.w	r2, r3, #3
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	fa02 f303 	lsl.w	r3, r2, r3
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	4313      	orrs	r3, r2
 80047a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 80ae 	beq.w	8004912 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047b6:	2300      	movs	r3, #0
 80047b8:	60fb      	str	r3, [r7, #12]
 80047ba:	4b5d      	ldr	r3, [pc, #372]	; (8004930 <HAL_GPIO_Init+0x300>)
 80047bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047be:	4a5c      	ldr	r2, [pc, #368]	; (8004930 <HAL_GPIO_Init+0x300>)
 80047c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047c4:	6453      	str	r3, [r2, #68]	; 0x44
 80047c6:	4b5a      	ldr	r3, [pc, #360]	; (8004930 <HAL_GPIO_Init+0x300>)
 80047c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047d2:	4a58      	ldr	r2, [pc, #352]	; (8004934 <HAL_GPIO_Init+0x304>)
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	089b      	lsrs	r3, r3, #2
 80047d8:	3302      	adds	r3, #2
 80047da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	220f      	movs	r2, #15
 80047ea:	fa02 f303 	lsl.w	r3, r2, r3
 80047ee:	43db      	mvns	r3, r3
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	4013      	ands	r3, r2
 80047f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a4f      	ldr	r2, [pc, #316]	; (8004938 <HAL_GPIO_Init+0x308>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d025      	beq.n	800484a <HAL_GPIO_Init+0x21a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a4e      	ldr	r2, [pc, #312]	; (800493c <HAL_GPIO_Init+0x30c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d01f      	beq.n	8004846 <HAL_GPIO_Init+0x216>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a4d      	ldr	r2, [pc, #308]	; (8004940 <HAL_GPIO_Init+0x310>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d019      	beq.n	8004842 <HAL_GPIO_Init+0x212>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a4c      	ldr	r2, [pc, #304]	; (8004944 <HAL_GPIO_Init+0x314>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d013      	beq.n	800483e <HAL_GPIO_Init+0x20e>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a4b      	ldr	r2, [pc, #300]	; (8004948 <HAL_GPIO_Init+0x318>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d00d      	beq.n	800483a <HAL_GPIO_Init+0x20a>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a4a      	ldr	r2, [pc, #296]	; (800494c <HAL_GPIO_Init+0x31c>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d007      	beq.n	8004836 <HAL_GPIO_Init+0x206>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a49      	ldr	r2, [pc, #292]	; (8004950 <HAL_GPIO_Init+0x320>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d101      	bne.n	8004832 <HAL_GPIO_Init+0x202>
 800482e:	2306      	movs	r3, #6
 8004830:	e00c      	b.n	800484c <HAL_GPIO_Init+0x21c>
 8004832:	2307      	movs	r3, #7
 8004834:	e00a      	b.n	800484c <HAL_GPIO_Init+0x21c>
 8004836:	2305      	movs	r3, #5
 8004838:	e008      	b.n	800484c <HAL_GPIO_Init+0x21c>
 800483a:	2304      	movs	r3, #4
 800483c:	e006      	b.n	800484c <HAL_GPIO_Init+0x21c>
 800483e:	2303      	movs	r3, #3
 8004840:	e004      	b.n	800484c <HAL_GPIO_Init+0x21c>
 8004842:	2302      	movs	r3, #2
 8004844:	e002      	b.n	800484c <HAL_GPIO_Init+0x21c>
 8004846:	2301      	movs	r3, #1
 8004848:	e000      	b.n	800484c <HAL_GPIO_Init+0x21c>
 800484a:	2300      	movs	r3, #0
 800484c:	69fa      	ldr	r2, [r7, #28]
 800484e:	f002 0203 	and.w	r2, r2, #3
 8004852:	0092      	lsls	r2, r2, #2
 8004854:	4093      	lsls	r3, r2
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	4313      	orrs	r3, r2
 800485a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800485c:	4935      	ldr	r1, [pc, #212]	; (8004934 <HAL_GPIO_Init+0x304>)
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	089b      	lsrs	r3, r3, #2
 8004862:	3302      	adds	r3, #2
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800486a:	4b3a      	ldr	r3, [pc, #232]	; (8004954 <HAL_GPIO_Init+0x324>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	43db      	mvns	r3, r3
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	4013      	ands	r3, r2
 8004878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	4313      	orrs	r3, r2
 800488c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800488e:	4a31      	ldr	r2, [pc, #196]	; (8004954 <HAL_GPIO_Init+0x324>)
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004894:	4b2f      	ldr	r3, [pc, #188]	; (8004954 <HAL_GPIO_Init+0x324>)
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	43db      	mvns	r3, r3
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	4013      	ands	r3, r2
 80048a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d003      	beq.n	80048b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048b8:	4a26      	ldr	r2, [pc, #152]	; (8004954 <HAL_GPIO_Init+0x324>)
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048be:	4b25      	ldr	r3, [pc, #148]	; (8004954 <HAL_GPIO_Init+0x324>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	43db      	mvns	r3, r3
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	4013      	ands	r3, r2
 80048cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	4313      	orrs	r3, r2
 80048e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048e2:	4a1c      	ldr	r2, [pc, #112]	; (8004954 <HAL_GPIO_Init+0x324>)
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048e8:	4b1a      	ldr	r3, [pc, #104]	; (8004954 <HAL_GPIO_Init+0x324>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	43db      	mvns	r3, r3
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	4013      	ands	r3, r2
 80048f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	4313      	orrs	r3, r2
 800490a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800490c:	4a11      	ldr	r2, [pc, #68]	; (8004954 <HAL_GPIO_Init+0x324>)
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	3301      	adds	r3, #1
 8004916:	61fb      	str	r3, [r7, #28]
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	2b0f      	cmp	r3, #15
 800491c:	f67f ae96 	bls.w	800464c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004920:	bf00      	nop
 8004922:	bf00      	nop
 8004924:	3724      	adds	r7, #36	; 0x24
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	40023800 	.word	0x40023800
 8004934:	40013800 	.word	0x40013800
 8004938:	40020000 	.word	0x40020000
 800493c:	40020400 	.word	0x40020400
 8004940:	40020800 	.word	0x40020800
 8004944:	40020c00 	.word	0x40020c00
 8004948:	40021000 	.word	0x40021000
 800494c:	40021400 	.word	0x40021400
 8004950:	40021800 	.word	0x40021800
 8004954:	40013c00 	.word	0x40013c00

08004958 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	460b      	mov	r3, r1
 8004962:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691a      	ldr	r2, [r3, #16]
 8004968:	887b      	ldrh	r3, [r7, #2]
 800496a:	4013      	ands	r3, r2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d002      	beq.n	8004976 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004970:	2301      	movs	r3, #1
 8004972:	73fb      	strb	r3, [r7, #15]
 8004974:	e001      	b.n	800497a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004976:	2300      	movs	r3, #0
 8004978:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800497a:	7bfb      	ldrb	r3, [r7, #15]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	460b      	mov	r3, r1
 8004992:	807b      	strh	r3, [r7, #2]
 8004994:	4613      	mov	r3, r2
 8004996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004998:	787b      	ldrb	r3, [r7, #1]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800499e:	887a      	ldrh	r2, [r7, #2]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049a4:	e003      	b.n	80049ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049a6:	887b      	ldrh	r3, [r7, #2]
 80049a8:	041a      	lsls	r2, r3, #16
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	619a      	str	r2, [r3, #24]
}
 80049ae:	bf00      	nop
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b085      	sub	sp, #20
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	460b      	mov	r3, r1
 80049c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049cc:	887a      	ldrh	r2, [r7, #2]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	4013      	ands	r3, r2
 80049d2:	041a      	lsls	r2, r3, #16
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	43d9      	mvns	r1, r3
 80049d8:	887b      	ldrh	r3, [r7, #2]
 80049da:	400b      	ands	r3, r1
 80049dc:	431a      	orrs	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	619a      	str	r2, [r3, #24]
}
 80049e2:	bf00      	nop
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
	...

080049f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e12b      	b.n	8004c5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d106      	bne.n	8004a1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7fe fb4e 	bl	80030b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2224      	movs	r2, #36	; 0x24
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0201 	bic.w	r2, r2, #1
 8004a32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a54:	f001 fe1a 	bl	800668c <HAL_RCC_GetPCLK1Freq>
 8004a58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	4a81      	ldr	r2, [pc, #516]	; (8004c64 <HAL_I2C_Init+0x274>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d807      	bhi.n	8004a74 <HAL_I2C_Init+0x84>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4a80      	ldr	r2, [pc, #512]	; (8004c68 <HAL_I2C_Init+0x278>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	bf94      	ite	ls
 8004a6c:	2301      	movls	r3, #1
 8004a6e:	2300      	movhi	r3, #0
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	e006      	b.n	8004a82 <HAL_I2C_Init+0x92>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4a7d      	ldr	r2, [pc, #500]	; (8004c6c <HAL_I2C_Init+0x27c>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	bf94      	ite	ls
 8004a7c:	2301      	movls	r3, #1
 8004a7e:	2300      	movhi	r3, #0
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e0e7      	b.n	8004c5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4a78      	ldr	r2, [pc, #480]	; (8004c70 <HAL_I2C_Init+0x280>)
 8004a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a92:	0c9b      	lsrs	r3, r3, #18
 8004a94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	4a6a      	ldr	r2, [pc, #424]	; (8004c64 <HAL_I2C_Init+0x274>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d802      	bhi.n	8004ac4 <HAL_I2C_Init+0xd4>
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	e009      	b.n	8004ad8 <HAL_I2C_Init+0xe8>
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004aca:	fb02 f303 	mul.w	r3, r2, r3
 8004ace:	4a69      	ldr	r2, [pc, #420]	; (8004c74 <HAL_I2C_Init+0x284>)
 8004ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad4:	099b      	lsrs	r3, r3, #6
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6812      	ldr	r2, [r2, #0]
 8004adc:	430b      	orrs	r3, r1
 8004ade:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004aea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	495c      	ldr	r1, [pc, #368]	; (8004c64 <HAL_I2C_Init+0x274>)
 8004af4:	428b      	cmp	r3, r1
 8004af6:	d819      	bhi.n	8004b2c <HAL_I2C_Init+0x13c>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	1e59      	subs	r1, r3, #1
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b06:	1c59      	adds	r1, r3, #1
 8004b08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b0c:	400b      	ands	r3, r1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <HAL_I2C_Init+0x138>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	1e59      	subs	r1, r3, #1
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b20:	3301      	adds	r3, #1
 8004b22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b26:	e051      	b.n	8004bcc <HAL_I2C_Init+0x1dc>
 8004b28:	2304      	movs	r3, #4
 8004b2a:	e04f      	b.n	8004bcc <HAL_I2C_Init+0x1dc>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d111      	bne.n	8004b58 <HAL_I2C_Init+0x168>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	1e58      	subs	r0, r3, #1
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6859      	ldr	r1, [r3, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	005b      	lsls	r3, r3, #1
 8004b40:	440b      	add	r3, r1
 8004b42:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b46:	3301      	adds	r3, #1
 8004b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	bf0c      	ite	eq
 8004b50:	2301      	moveq	r3, #1
 8004b52:	2300      	movne	r3, #0
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	e012      	b.n	8004b7e <HAL_I2C_Init+0x18e>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	1e58      	subs	r0, r3, #1
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6859      	ldr	r1, [r3, #4]
 8004b60:	460b      	mov	r3, r1
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	440b      	add	r3, r1
 8004b66:	0099      	lsls	r1, r3, #2
 8004b68:	440b      	add	r3, r1
 8004b6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b6e:	3301      	adds	r3, #1
 8004b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	bf0c      	ite	eq
 8004b78:	2301      	moveq	r3, #1
 8004b7a:	2300      	movne	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <HAL_I2C_Init+0x196>
 8004b82:	2301      	movs	r3, #1
 8004b84:	e022      	b.n	8004bcc <HAL_I2C_Init+0x1dc>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10e      	bne.n	8004bac <HAL_I2C_Init+0x1bc>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	1e58      	subs	r0, r3, #1
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6859      	ldr	r1, [r3, #4]
 8004b96:	460b      	mov	r3, r1
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	440b      	add	r3, r1
 8004b9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004baa:	e00f      	b.n	8004bcc <HAL_I2C_Init+0x1dc>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	1e58      	subs	r0, r3, #1
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6859      	ldr	r1, [r3, #4]
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	440b      	add	r3, r1
 8004bba:	0099      	lsls	r1, r3, #2
 8004bbc:	440b      	add	r3, r1
 8004bbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bcc:	6879      	ldr	r1, [r7, #4]
 8004bce:	6809      	ldr	r1, [r1, #0]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	69da      	ldr	r2, [r3, #28]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004bfa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6911      	ldr	r1, [r2, #16]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	68d2      	ldr	r2, [r2, #12]
 8004c06:	4311      	orrs	r1, r2
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6812      	ldr	r2, [r2, #0]
 8004c0c:	430b      	orrs	r3, r1
 8004c0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	695a      	ldr	r2, [r3, #20]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0201 	orr.w	r2, r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2220      	movs	r2, #32
 8004c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	000186a0 	.word	0x000186a0
 8004c68:	001e847f 	.word	0x001e847f
 8004c6c:	003d08ff 	.word	0x003d08ff
 8004c70:	431bde83 	.word	0x431bde83
 8004c74:	10624dd3 	.word	0x10624dd3

08004c78 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b088      	sub	sp, #32
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c90:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c98:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004ca2:	7bfb      	ldrb	r3, [r7, #15]
 8004ca4:	2b10      	cmp	r3, #16
 8004ca6:	d003      	beq.n	8004cb0 <HAL_I2C_EV_IRQHandler+0x38>
 8004ca8:	7bfb      	ldrb	r3, [r7, #15]
 8004caa:	2b40      	cmp	r3, #64	; 0x40
 8004cac:	f040 80c1 	bne.w	8004e32 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10d      	bne.n	8004ce6 <HAL_I2C_EV_IRQHandler+0x6e>
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004cd0:	d003      	beq.n	8004cda <HAL_I2C_EV_IRQHandler+0x62>
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004cd8:	d101      	bne.n	8004cde <HAL_I2C_EV_IRQHandler+0x66>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e000      	b.n	8004ce0 <HAL_I2C_EV_IRQHandler+0x68>
 8004cde:	2300      	movs	r3, #0
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	f000 8132 	beq.w	8004f4a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00c      	beq.n	8004d0a <HAL_I2C_EV_IRQHandler+0x92>
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	0a5b      	lsrs	r3, r3, #9
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d006      	beq.n	8004d0a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f001 fb65 	bl	80063cc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 fcdc 	bl	80056c0 <I2C_Master_SB>
 8004d08:	e092      	b.n	8004e30 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	08db      	lsrs	r3, r3, #3
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d009      	beq.n	8004d2a <HAL_I2C_EV_IRQHandler+0xb2>
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	0a5b      	lsrs	r3, r3, #9
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 fd52 	bl	80057cc <I2C_Master_ADD10>
 8004d28:	e082      	b.n	8004e30 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	085b      	lsrs	r3, r3, #1
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d009      	beq.n	8004d4a <HAL_I2C_EV_IRQHandler+0xd2>
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	0a5b      	lsrs	r3, r3, #9
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d003      	beq.n	8004d4a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 fd6c 	bl	8005820 <I2C_Master_ADDR>
 8004d48:	e072      	b.n	8004e30 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	089b      	lsrs	r3, r3, #2
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d03b      	beq.n	8004dce <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d64:	f000 80f3 	beq.w	8004f4e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	09db      	lsrs	r3, r3, #7
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00f      	beq.n	8004d94 <HAL_I2C_EV_IRQHandler+0x11c>
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	0a9b      	lsrs	r3, r3, #10
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d009      	beq.n	8004d94 <HAL_I2C_EV_IRQHandler+0x11c>
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	089b      	lsrs	r3, r3, #2
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d103      	bne.n	8004d94 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f94c 	bl	800502a <I2C_MasterTransmit_TXE>
 8004d92:	e04d      	b.n	8004e30 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	089b      	lsrs	r3, r3, #2
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 80d6 	beq.w	8004f4e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	0a5b      	lsrs	r3, r3, #9
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 80cf 	beq.w	8004f4e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004db0:	7bbb      	ldrb	r3, [r7, #14]
 8004db2:	2b21      	cmp	r3, #33	; 0x21
 8004db4:	d103      	bne.n	8004dbe <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f9d3 	bl	8005162 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004dbc:	e0c7      	b.n	8004f4e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004dbe:	7bfb      	ldrb	r3, [r7, #15]
 8004dc0:	2b40      	cmp	r3, #64	; 0x40
 8004dc2:	f040 80c4 	bne.w	8004f4e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 fa41 	bl	800524e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004dcc:	e0bf      	b.n	8004f4e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ddc:	f000 80b7 	beq.w	8004f4e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	099b      	lsrs	r3, r3, #6
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00f      	beq.n	8004e0c <HAL_I2C_EV_IRQHandler+0x194>
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	0a9b      	lsrs	r3, r3, #10
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d009      	beq.n	8004e0c <HAL_I2C_EV_IRQHandler+0x194>
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	089b      	lsrs	r3, r3, #2
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d103      	bne.n	8004e0c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 fab6 	bl	8005376 <I2C_MasterReceive_RXNE>
 8004e0a:	e011      	b.n	8004e30 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	089b      	lsrs	r3, r3, #2
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f000 809a 	beq.w	8004f4e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	0a5b      	lsrs	r3, r3, #9
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 8093 	beq.w	8004f4e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 fb5f 	bl	80054ec <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e2e:	e08e      	b.n	8004f4e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004e30:	e08d      	b.n	8004f4e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d004      	beq.n	8004e44 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	61fb      	str	r3, [r7, #28]
 8004e42:	e007      	b.n	8004e54 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	085b      	lsrs	r3, r3, #1
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d012      	beq.n	8004e86 <HAL_I2C_EV_IRQHandler+0x20e>
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	0a5b      	lsrs	r3, r3, #9
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00c      	beq.n	8004e86 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d003      	beq.n	8004e7c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004e7c:	69b9      	ldr	r1, [r7, #24]
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 ff1d 	bl	8005cbe <I2C_Slave_ADDR>
 8004e84:	e066      	b.n	8004f54 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	091b      	lsrs	r3, r3, #4
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d009      	beq.n	8004ea6 <HAL_I2C_EV_IRQHandler+0x22e>
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	0a5b      	lsrs	r3, r3, #9
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 ff58 	bl	8005d54 <I2C_Slave_STOPF>
 8004ea4:	e056      	b.n	8004f54 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004ea6:	7bbb      	ldrb	r3, [r7, #14]
 8004ea8:	2b21      	cmp	r3, #33	; 0x21
 8004eaa:	d002      	beq.n	8004eb2 <HAL_I2C_EV_IRQHandler+0x23a>
 8004eac:	7bbb      	ldrb	r3, [r7, #14]
 8004eae:	2b29      	cmp	r3, #41	; 0x29
 8004eb0:	d125      	bne.n	8004efe <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	09db      	lsrs	r3, r3, #7
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00f      	beq.n	8004ede <HAL_I2C_EV_IRQHandler+0x266>
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	0a9b      	lsrs	r3, r3, #10
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d009      	beq.n	8004ede <HAL_I2C_EV_IRQHandler+0x266>
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	089b      	lsrs	r3, r3, #2
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d103      	bne.n	8004ede <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 fe33 	bl	8005b42 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004edc:	e039      	b.n	8004f52 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	089b      	lsrs	r3, r3, #2
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d033      	beq.n	8004f52 <HAL_I2C_EV_IRQHandler+0x2da>
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	0a5b      	lsrs	r3, r3, #9
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d02d      	beq.n	8004f52 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 fe60 	bl	8005bbc <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004efc:	e029      	b.n	8004f52 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	099b      	lsrs	r3, r3, #6
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00f      	beq.n	8004f2a <HAL_I2C_EV_IRQHandler+0x2b2>
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	0a9b      	lsrs	r3, r3, #10
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d009      	beq.n	8004f2a <HAL_I2C_EV_IRQHandler+0x2b2>
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	089b      	lsrs	r3, r3, #2
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d103      	bne.n	8004f2a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fe6b 	bl	8005bfe <I2C_SlaveReceive_RXNE>
 8004f28:	e014      	b.n	8004f54 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	089b      	lsrs	r3, r3, #2
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00e      	beq.n	8004f54 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	0a5b      	lsrs	r3, r3, #9
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d008      	beq.n	8004f54 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 fe99 	bl	8005c7a <I2C_SlaveReceive_BTF>
 8004f48:	e004      	b.n	8004f54 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004f4a:	bf00      	nop
 8004f4c:	e002      	b.n	8004f54 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f4e:	bf00      	nop
 8004f50:	e000      	b.n	8004f54 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f52:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004f54:	3720      	adds	r7, #32
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b083      	sub	sp, #12
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b083      	sub	sp, #12
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004f76:	bf00      	nop
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b083      	sub	sp, #12
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004f8a:	bf00      	nop
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b083      	sub	sp, #12
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004f9e:	bf00      	nop
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	70fb      	strb	r3, [r7, #3]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004fce:	bf00      	nop
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b083      	sub	sp, #12
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004fe2:	bf00      	nop
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800500a:	bf00      	nop
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005016:	b480      	push	{r7}
 8005018:	b083      	sub	sp, #12
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b084      	sub	sp, #16
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005038:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005040:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005046:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504c:	2b00      	cmp	r3, #0
 800504e:	d150      	bne.n	80050f2 <I2C_MasterTransmit_TXE+0xc8>
 8005050:	7bfb      	ldrb	r3, [r7, #15]
 8005052:	2b21      	cmp	r3, #33	; 0x21
 8005054:	d14d      	bne.n	80050f2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	2b08      	cmp	r3, #8
 800505a:	d01d      	beq.n	8005098 <I2C_MasterTransmit_TXE+0x6e>
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	2b20      	cmp	r3, #32
 8005060:	d01a      	beq.n	8005098 <I2C_MasterTransmit_TXE+0x6e>
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005068:	d016      	beq.n	8005098 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005078:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2211      	movs	r2, #17
 800507e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2220      	movs	r2, #32
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f7ff ff62 	bl	8004f5a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005096:	e060      	b.n	800515a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050a6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050b6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b40      	cmp	r3, #64	; 0x40
 80050d0:	d107      	bne.n	80050e2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7ff ff7d 	bl	8004fda <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80050e0:	e03b      	b.n	800515a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7ff ff35 	bl	8004f5a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80050f0:	e033      	b.n	800515a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80050f2:	7bfb      	ldrb	r3, [r7, #15]
 80050f4:	2b21      	cmp	r3, #33	; 0x21
 80050f6:	d005      	beq.n	8005104 <I2C_MasterTransmit_TXE+0xda>
 80050f8:	7bbb      	ldrb	r3, [r7, #14]
 80050fa:	2b40      	cmp	r3, #64	; 0x40
 80050fc:	d12d      	bne.n	800515a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80050fe:	7bfb      	ldrb	r3, [r7, #15]
 8005100:	2b22      	cmp	r3, #34	; 0x22
 8005102:	d12a      	bne.n	800515a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005108:	b29b      	uxth	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d108      	bne.n	8005120 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800511c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800511e:	e01c      	b.n	800515a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b40      	cmp	r3, #64	; 0x40
 800512a:	d103      	bne.n	8005134 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f88e 	bl	800524e <I2C_MemoryTransmit_TXE_BTF>
}
 8005132:	e012      	b.n	800515a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	781a      	ldrb	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	1c5a      	adds	r2, r3, #1
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800514e:	b29b      	uxth	r3, r3
 8005150:	3b01      	subs	r3, #1
 8005152:	b29a      	uxth	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005158:	e7ff      	b.n	800515a <I2C_MasterTransmit_TXE+0x130>
 800515a:	bf00      	nop
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b084      	sub	sp, #16
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b21      	cmp	r3, #33	; 0x21
 800517a:	d164      	bne.n	8005246 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005180:	b29b      	uxth	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d012      	beq.n	80051ac <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518a:	781a      	ldrb	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	1c5a      	adds	r2, r3, #1
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80051aa:	e04c      	b.n	8005246 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2b08      	cmp	r3, #8
 80051b0:	d01d      	beq.n	80051ee <I2C_MasterTransmit_BTF+0x8c>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2b20      	cmp	r3, #32
 80051b6:	d01a      	beq.n	80051ee <I2C_MasterTransmit_BTF+0x8c>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051be:	d016      	beq.n	80051ee <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051ce:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2211      	movs	r2, #17
 80051d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2220      	movs	r2, #32
 80051e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7ff feb7 	bl	8004f5a <HAL_I2C_MasterTxCpltCallback>
}
 80051ec:	e02b      	b.n	8005246 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051fc:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800520c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2220      	movs	r2, #32
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b40      	cmp	r3, #64	; 0x40
 8005226:	d107      	bne.n	8005238 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f7ff fed2 	bl	8004fda <HAL_I2C_MemTxCpltCallback>
}
 8005236:	e006      	b.n	8005246 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f7ff fe8a 	bl	8004f5a <HAL_I2C_MasterTxCpltCallback>
}
 8005246:	bf00      	nop
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b084      	sub	sp, #16
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800525c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005262:	2b00      	cmp	r3, #0
 8005264:	d11d      	bne.n	80052a2 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800526a:	2b01      	cmp	r3, #1
 800526c:	d10b      	bne.n	8005286 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005272:	b2da      	uxtb	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800527e:	1c9a      	adds	r2, r3, #2
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005284:	e073      	b.n	800536e <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800528a:	b29b      	uxth	r3, r3
 800528c:	121b      	asrs	r3, r3, #8
 800528e:	b2da      	uxtb	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	651a      	str	r2, [r3, #80]	; 0x50
}
 80052a0:	e065      	b.n	800536e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d10b      	bne.n	80052c2 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	651a      	str	r2, [r3, #80]	; 0x50
}
 80052c0:	e055      	b.n	800536e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d151      	bne.n	800536e <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80052ca:	7bfb      	ldrb	r3, [r7, #15]
 80052cc:	2b22      	cmp	r3, #34	; 0x22
 80052ce:	d10d      	bne.n	80052ec <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052de:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052e4:	1c5a      	adds	r2, r3, #1
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80052ea:	e040      	b.n	800536e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d015      	beq.n	8005322 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80052f6:	7bfb      	ldrb	r3, [r7, #15]
 80052f8:	2b21      	cmp	r3, #33	; 0x21
 80052fa:	d112      	bne.n	8005322 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005300:	781a      	ldrb	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530c:	1c5a      	adds	r2, r3, #1
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005316:	b29b      	uxth	r3, r3
 8005318:	3b01      	subs	r3, #1
 800531a:	b29a      	uxth	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005320:	e025      	b.n	800536e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005326:	b29b      	uxth	r3, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	d120      	bne.n	800536e <I2C_MemoryTransmit_TXE_BTF+0x120>
 800532c:	7bfb      	ldrb	r3, [r7, #15]
 800532e:	2b21      	cmp	r3, #33	; 0x21
 8005330:	d11d      	bne.n	800536e <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	685a      	ldr	r2, [r3, #4]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005340:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005350:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2220      	movs	r2, #32
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7ff fe36 	bl	8004fda <HAL_I2C_MemTxCpltCallback>
}
 800536e:	bf00      	nop
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b084      	sub	sp, #16
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b22      	cmp	r3, #34	; 0x22
 8005388:	f040 80ac 	bne.w	80054e4 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005390:	b29b      	uxth	r3, r3
 8005392:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2b03      	cmp	r3, #3
 8005398:	d921      	bls.n	80053de <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	691a      	ldr	r2, [r3, #16]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a4:	b2d2      	uxtb	r2, r2
 80053a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	1c5a      	adds	r2, r3, #1
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	3b01      	subs	r3, #1
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	2b03      	cmp	r3, #3
 80053c8:	f040 808c 	bne.w	80054e4 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053da:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80053dc:	e082      	b.n	80054e4 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d075      	beq.n	80054d2 <I2C_MasterReceive_RXNE+0x15c>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d002      	beq.n	80053f2 <I2C_MasterReceive_RXNE+0x7c>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d16f      	bne.n	80054d2 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 ffb8 	bl	8006368 <I2C_WaitOnSTOPRequestThroughIT>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d142      	bne.n	8005484 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800540c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800541c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	691a      	ldr	r2, [r3, #16]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005428:	b2d2      	uxtb	r2, r2
 800542a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	1c5a      	adds	r2, r3, #1
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800543a:	b29b      	uxth	r3, r3
 800543c:	3b01      	subs	r3, #1
 800543e:	b29a      	uxth	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2220      	movs	r2, #32
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b40      	cmp	r3, #64	; 0x40
 8005456:	d10a      	bne.n	800546e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7ff fdc1 	bl	8004fee <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800546c:	e03a      	b.n	80054e4 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2212      	movs	r2, #18
 800547a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f7ff fd76 	bl	8004f6e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005482:	e02f      	b.n	80054e4 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005492:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	691a      	ldr	r2, [r3, #16]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549e:	b2d2      	uxtb	r2, r2
 80054a0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a6:	1c5a      	adds	r2, r3, #1
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	3b01      	subs	r3, #1
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2220      	movs	r2, #32
 80054be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7ff fd99 	bl	8005002 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80054d0:	e008      	b.n	80054e4 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054e0:	605a      	str	r2, [r3, #4]
}
 80054e2:	e7ff      	b.n	80054e4 <I2C_MasterReceive_RXNE+0x16e>
 80054e4:	bf00      	nop
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054fe:	b29b      	uxth	r3, r3
 8005500:	2b04      	cmp	r3, #4
 8005502:	d11b      	bne.n	800553c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685a      	ldr	r2, [r3, #4]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005512:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	691a      	ldr	r2, [r3, #16]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	b2d2      	uxtb	r2, r2
 8005520:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005526:	1c5a      	adds	r2, r3, #1
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005530:	b29b      	uxth	r3, r3
 8005532:	3b01      	subs	r3, #1
 8005534:	b29a      	uxth	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800553a:	e0bd      	b.n	80056b8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005540:	b29b      	uxth	r3, r3
 8005542:	2b03      	cmp	r3, #3
 8005544:	d129      	bne.n	800559a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005554:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2b04      	cmp	r3, #4
 800555a:	d00a      	beq.n	8005572 <I2C_MasterReceive_BTF+0x86>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2b02      	cmp	r3, #2
 8005560:	d007      	beq.n	8005572 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005570:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	691a      	ldr	r2, [r3, #16]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557c:	b2d2      	uxtb	r2, r2
 800557e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005584:	1c5a      	adds	r2, r3, #1
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800558e:	b29b      	uxth	r3, r3
 8005590:	3b01      	subs	r3, #1
 8005592:	b29a      	uxth	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005598:	e08e      	b.n	80056b8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800559e:	b29b      	uxth	r3, r3
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d176      	bne.n	8005692 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d002      	beq.n	80055b0 <I2C_MasterReceive_BTF+0xc4>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2b10      	cmp	r3, #16
 80055ae:	d108      	bne.n	80055c2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	e019      	b.n	80055f6 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2b04      	cmp	r3, #4
 80055c6:	d002      	beq.n	80055ce <I2C_MasterReceive_BTF+0xe2>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d108      	bne.n	80055e0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055dc:	601a      	str	r2, [r3, #0]
 80055de:	e00a      	b.n	80055f6 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2b10      	cmp	r3, #16
 80055e4:	d007      	beq.n	80055f6 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055f4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	691a      	ldr	r2, [r3, #16]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005600:	b2d2      	uxtb	r2, r2
 8005602:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005608:	1c5a      	adds	r2, r3, #1
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005612:	b29b      	uxth	r3, r3
 8005614:	3b01      	subs	r3, #1
 8005616:	b29a      	uxth	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	691a      	ldr	r2, [r3, #16]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	b2d2      	uxtb	r2, r2
 8005628:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562e:	1c5a      	adds	r2, r3, #1
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005638:	b29b      	uxth	r3, r3
 800563a:	3b01      	subs	r3, #1
 800563c:	b29a      	uxth	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	685a      	ldr	r2, [r3, #4]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005650:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2220      	movs	r2, #32
 8005656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b40      	cmp	r3, #64	; 0x40
 8005664:	d10a      	bne.n	800567c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7ff fcba 	bl	8004fee <HAL_I2C_MemRxCpltCallback>
}
 800567a:	e01d      	b.n	80056b8 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2212      	movs	r2, #18
 8005688:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7ff fc6f 	bl	8004f6e <HAL_I2C_MasterRxCpltCallback>
}
 8005690:	e012      	b.n	80056b8 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	691a      	ldr	r2, [r3, #16]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569c:	b2d2      	uxtb	r2, r2
 800569e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	3b01      	subs	r3, #1
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80056b8:	bf00      	nop
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b40      	cmp	r3, #64	; 0x40
 80056d2:	d117      	bne.n	8005704 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d109      	bne.n	80056f0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	461a      	mov	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80056ec:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80056ee:	e067      	b.n	80057c0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	f043 0301 	orr.w	r3, r3, #1
 80056fa:	b2da      	uxtb	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	611a      	str	r2, [r3, #16]
}
 8005702:	e05d      	b.n	80057c0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800570c:	d133      	bne.n	8005776 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b21      	cmp	r3, #33	; 0x21
 8005718:	d109      	bne.n	800572e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800571e:	b2db      	uxtb	r3, r3
 8005720:	461a      	mov	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800572a:	611a      	str	r2, [r3, #16]
 800572c:	e008      	b.n	8005740 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005732:	b2db      	uxtb	r3, r3
 8005734:	f043 0301 	orr.w	r3, r3, #1
 8005738:	b2da      	uxtb	r2, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005744:	2b00      	cmp	r3, #0
 8005746:	d004      	beq.n	8005752 <I2C_Master_SB+0x92>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800574c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800574e:	2b00      	cmp	r3, #0
 8005750:	d108      	bne.n	8005764 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005756:	2b00      	cmp	r3, #0
 8005758:	d032      	beq.n	80057c0 <I2C_Master_SB+0x100>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005760:	2b00      	cmp	r3, #0
 8005762:	d02d      	beq.n	80057c0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005772:	605a      	str	r2, [r3, #4]
}
 8005774:	e024      	b.n	80057c0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10e      	bne.n	800579c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005782:	b29b      	uxth	r3, r3
 8005784:	11db      	asrs	r3, r3, #7
 8005786:	b2db      	uxtb	r3, r3
 8005788:	f003 0306 	and.w	r3, r3, #6
 800578c:	b2db      	uxtb	r3, r3
 800578e:	f063 030f 	orn	r3, r3, #15
 8005792:	b2da      	uxtb	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	611a      	str	r2, [r3, #16]
}
 800579a:	e011      	b.n	80057c0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d10d      	bne.n	80057c0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	11db      	asrs	r3, r3, #7
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	f003 0306 	and.w	r3, r3, #6
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	f063 030e 	orn	r3, r3, #14
 80057b8:	b2da      	uxtb	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	611a      	str	r2, [r3, #16]
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d004      	beq.n	80057f2 <I2C_Master_ADD10+0x26>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d108      	bne.n	8005804 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00c      	beq.n	8005814 <I2C_Master_ADD10+0x48>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005800:	2b00      	cmp	r3, #0
 8005802:	d007      	beq.n	8005814 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005812:	605a      	str	r2, [r3, #4]
  }
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005820:	b480      	push	{r7}
 8005822:	b091      	sub	sp, #68	; 0x44
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800582e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005836:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b22      	cmp	r3, #34	; 0x22
 8005848:	f040 8169 	bne.w	8005b1e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10f      	bne.n	8005874 <I2C_Master_ADDR+0x54>
 8005854:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005858:	2b40      	cmp	r3, #64	; 0x40
 800585a:	d10b      	bne.n	8005874 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800585c:	2300      	movs	r3, #0
 800585e:	633b      	str	r3, [r7, #48]	; 0x30
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	633b      	str	r3, [r7, #48]	; 0x30
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	633b      	str	r3, [r7, #48]	; 0x30
 8005870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005872:	e160      	b.n	8005b36 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005878:	2b00      	cmp	r3, #0
 800587a:	d11d      	bne.n	80058b8 <I2C_Master_ADDR+0x98>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005884:	d118      	bne.n	80058b8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005886:	2300      	movs	r3, #0
 8005888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	62fb      	str	r3, [r7, #44]	; 0x2c
 800589a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058aa:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058b0:	1c5a      	adds	r2, r3, #1
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	651a      	str	r2, [r3, #80]	; 0x50
 80058b6:	e13e      	b.n	8005b36 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058bc:	b29b      	uxth	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d113      	bne.n	80058ea <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058c2:	2300      	movs	r3, #0
 80058c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80058d6:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058e6:	601a      	str	r2, [r3, #0]
 80058e8:	e115      	b.n	8005b16 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	f040 808a 	bne.w	8005a0a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80058f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80058fc:	d137      	bne.n	800596e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800590c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005918:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800591c:	d113      	bne.n	8005946 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800592c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800592e:	2300      	movs	r3, #0
 8005930:	627b      	str	r3, [r7, #36]	; 0x24
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	627b      	str	r3, [r7, #36]	; 0x24
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	627b      	str	r3, [r7, #36]	; 0x24
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	e0e7      	b.n	8005b16 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005946:	2300      	movs	r3, #0
 8005948:	623b      	str	r3, [r7, #32]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	623b      	str	r3, [r7, #32]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	623b      	str	r3, [r7, #32]
 800595a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	e0d3      	b.n	8005b16 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800596e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005970:	2b08      	cmp	r3, #8
 8005972:	d02e      	beq.n	80059d2 <I2C_Master_ADDR+0x1b2>
 8005974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005976:	2b20      	cmp	r3, #32
 8005978:	d02b      	beq.n	80059d2 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800597a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597c:	2b12      	cmp	r3, #18
 800597e:	d102      	bne.n	8005986 <I2C_Master_ADDR+0x166>
 8005980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005982:	2b01      	cmp	r3, #1
 8005984:	d125      	bne.n	80059d2 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005988:	2b04      	cmp	r3, #4
 800598a:	d00e      	beq.n	80059aa <I2C_Master_ADDR+0x18a>
 800598c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598e:	2b02      	cmp	r3, #2
 8005990:	d00b      	beq.n	80059aa <I2C_Master_ADDR+0x18a>
 8005992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005994:	2b10      	cmp	r3, #16
 8005996:	d008      	beq.n	80059aa <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059a6:	601a      	str	r2, [r3, #0]
 80059a8:	e007      	b.n	80059ba <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059b8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059ba:	2300      	movs	r3, #0
 80059bc:	61fb      	str	r3, [r7, #28]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	695b      	ldr	r3, [r3, #20]
 80059c4:	61fb      	str	r3, [r7, #28]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	61fb      	str	r3, [r7, #28]
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	e0a1      	b.n	8005b16 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059e0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059e2:	2300      	movs	r3, #0
 80059e4:	61bb      	str	r3, [r7, #24]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	61bb      	str	r3, [r7, #24]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	61bb      	str	r3, [r7, #24]
 80059f6:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a06:	601a      	str	r2, [r3, #0]
 8005a08:	e085      	b.n	8005b16 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d14d      	bne.n	8005ab0 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a16:	2b04      	cmp	r3, #4
 8005a18:	d016      	beq.n	8005a48 <I2C_Master_ADDR+0x228>
 8005a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d013      	beq.n	8005a48 <I2C_Master_ADDR+0x228>
 8005a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a22:	2b10      	cmp	r3, #16
 8005a24:	d010      	beq.n	8005a48 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a34:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a44:	601a      	str	r2, [r3, #0]
 8005a46:	e007      	b.n	8005a58 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a56:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a66:	d117      	bne.n	8005a98 <I2C_Master_ADDR+0x278>
 8005a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a6e:	d00b      	beq.n	8005a88 <I2C_Master_ADDR+0x268>
 8005a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d008      	beq.n	8005a88 <I2C_Master_ADDR+0x268>
 8005a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a78:	2b08      	cmp	r3, #8
 8005a7a:	d005      	beq.n	8005a88 <I2C_Master_ADDR+0x268>
 8005a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7e:	2b10      	cmp	r3, #16
 8005a80:	d002      	beq.n	8005a88 <I2C_Master_ADDR+0x268>
 8005a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a84:	2b20      	cmp	r3, #32
 8005a86:	d107      	bne.n	8005a98 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685a      	ldr	r2, [r3, #4]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a96:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a98:	2300      	movs	r3, #0
 8005a9a:	617b      	str	r3, [r7, #20]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	617b      	str	r3, [r7, #20]
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	e032      	b.n	8005b16 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005abe:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ace:	d117      	bne.n	8005b00 <I2C_Master_ADDR+0x2e0>
 8005ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ad6:	d00b      	beq.n	8005af0 <I2C_Master_ADDR+0x2d0>
 8005ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d008      	beq.n	8005af0 <I2C_Master_ADDR+0x2d0>
 8005ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae0:	2b08      	cmp	r3, #8
 8005ae2:	d005      	beq.n	8005af0 <I2C_Master_ADDR+0x2d0>
 8005ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae6:	2b10      	cmp	r3, #16
 8005ae8:	d002      	beq.n	8005af0 <I2C_Master_ADDR+0x2d0>
 8005aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aec:	2b20      	cmp	r3, #32
 8005aee:	d107      	bne.n	8005b00 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685a      	ldr	r2, [r3, #4]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005afe:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b00:	2300      	movs	r3, #0
 8005b02:	613b      	str	r3, [r7, #16]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	613b      	str	r3, [r7, #16]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	613b      	str	r3, [r7, #16]
 8005b14:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005b1c:	e00b      	b.n	8005b36 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b1e:	2300      	movs	r3, #0
 8005b20:	60fb      	str	r3, [r7, #12]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	60fb      	str	r3, [r7, #12]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	60fb      	str	r3, [r7, #12]
 8005b32:	68fb      	ldr	r3, [r7, #12]
}
 8005b34:	e7ff      	b.n	8005b36 <I2C_Master_ADDR+0x316>
 8005b36:	bf00      	nop
 8005b38:	3744      	adds	r7, #68	; 0x44
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b084      	sub	sp, #16
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b50:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d02b      	beq.n	8005bb4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	781a      	ldrb	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6c:	1c5a      	adds	r2, r3, #1
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d114      	bne.n	8005bb4 <I2C_SlaveTransmit_TXE+0x72>
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
 8005b8c:	2b29      	cmp	r3, #41	; 0x29
 8005b8e:	d111      	bne.n	8005bb4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b9e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2221      	movs	r2, #33	; 0x21
 8005ba4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2228      	movs	r2, #40	; 0x28
 8005baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7ff f9e7 	bl	8004f82 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005bb4:	bf00      	nop
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d011      	beq.n	8005bf2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd2:	781a      	ldrb	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bde:	1c5a      	adds	r2, r3, #1
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	3b01      	subs	r3, #1
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005bf2:	bf00      	nop
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b084      	sub	sp, #16
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c0c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d02c      	beq.n	8005c72 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	691a      	ldr	r2, [r3, #16]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	1c5a      	adds	r2, r3, #1
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	3b01      	subs	r3, #1
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d114      	bne.n	8005c72 <I2C_SlaveReceive_RXNE+0x74>
 8005c48:	7bfb      	ldrb	r3, [r7, #15]
 8005c4a:	2b2a      	cmp	r3, #42	; 0x2a
 8005c4c:	d111      	bne.n	8005c72 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c5c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2222      	movs	r2, #34	; 0x22
 8005c62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2228      	movs	r2, #40	; 0x28
 8005c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f7ff f992 	bl	8004f96 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005c72:	bf00      	nop
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005c7a:	b480      	push	{r7}
 8005c7c:	b083      	sub	sp, #12
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d012      	beq.n	8005cb2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	691a      	ldr	r2, [r3, #16]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c96:	b2d2      	uxtb	r2, r2
 8005c98:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9e:	1c5a      	adds	r2, r3, #1
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	3b01      	subs	r3, #1
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005cb2:	bf00      	nop
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005cd8:	2b28      	cmp	r3, #40	; 0x28
 8005cda:	d127      	bne.n	8005d2c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cea:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	089b      	lsrs	r3, r3, #2
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d101      	bne.n	8005cfc <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	09db      	lsrs	r3, r3, #7
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d103      	bne.n	8005d10 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	81bb      	strh	r3, [r7, #12]
 8005d0e:	e002      	b.n	8005d16 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005d1e:	89ba      	ldrh	r2, [r7, #12]
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
 8005d22:	4619      	mov	r1, r3
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f7ff f940 	bl	8004faa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005d2a:	e00e      	b.n	8005d4a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	60bb      	str	r3, [r7, #8]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	60bb      	str	r3, [r7, #8]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	60bb      	str	r3, [r7, #8]
 8005d40:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005d4a:	bf00      	nop
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
	...

08005d54 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d62:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d72:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005d74:	2300      	movs	r3, #0
 8005d76:	60bb      	str	r3, [r7, #8]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	60bb      	str	r3, [r7, #8]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f042 0201 	orr.w	r2, r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]
 8005d90:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005da0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005db0:	d172      	bne.n	8005e98 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
 8005db4:	2b22      	cmp	r3, #34	; 0x22
 8005db6:	d002      	beq.n	8005dbe <I2C_Slave_STOPF+0x6a>
 8005db8:	7bfb      	ldrb	r3, [r7, #15]
 8005dba:	2b2a      	cmp	r3, #42	; 0x2a
 8005dbc:	d135      	bne.n	8005e2a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d005      	beq.n	8005de2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	f043 0204 	orr.w	r2, r3, #4
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005df0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7fe fc0b 	bl	8004612 <HAL_DMA_GetState>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d049      	beq.n	8005e96 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e06:	4a69      	ldr	r2, [pc, #420]	; (8005fac <I2C_Slave_STOPF+0x258>)
 8005e08:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7fe fbdd 	bl	80045ce <HAL_DMA_Abort_IT>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d03d      	beq.n	8005e96 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e24:	4610      	mov	r0, r2
 8005e26:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005e28:	e035      	b.n	8005e96 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d005      	beq.n	8005e4e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	f043 0204 	orr.w	r2, r3, #4
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	685a      	ldr	r2, [r3, #4]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e5c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7fe fbd5 	bl	8004612 <HAL_DMA_GetState>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d014      	beq.n	8005e98 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e72:	4a4e      	ldr	r2, [pc, #312]	; (8005fac <I2C_Slave_STOPF+0x258>)
 8005e74:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7fe fba7 	bl	80045ce <HAL_DMA_Abort_IT>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d008      	beq.n	8005e98 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e90:	4610      	mov	r0, r2
 8005e92:	4798      	blx	r3
 8005e94:	e000      	b.n	8005e98 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005e96:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d03e      	beq.n	8005f20 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	f003 0304 	and.w	r3, r3, #4
 8005eac:	2b04      	cmp	r3, #4
 8005eae:	d112      	bne.n	8005ed6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	691a      	ldr	r2, [r3, #16]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eba:	b2d2      	uxtb	r2, r2
 8005ebc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec2:	1c5a      	adds	r2, r3, #1
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee0:	2b40      	cmp	r3, #64	; 0x40
 8005ee2:	d112      	bne.n	8005f0a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	691a      	ldr	r2, [r3, #16]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eee:	b2d2      	uxtb	r2, r2
 8005ef0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	3b01      	subs	r3, #1
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d005      	beq.n	8005f20 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f18:	f043 0204 	orr.w	r2, r3, #4
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d003      	beq.n	8005f30 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 f843 	bl	8005fb4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005f2e:	e039      	b.n	8005fa4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
 8005f32:	2b2a      	cmp	r3, #42	; 0x2a
 8005f34:	d109      	bne.n	8005f4a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2228      	movs	r2, #40	; 0x28
 8005f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f7ff f826 	bl	8004f96 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b28      	cmp	r3, #40	; 0x28
 8005f54:	d111      	bne.n	8005f7a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a15      	ldr	r2, [pc, #84]	; (8005fb0 <I2C_Slave_STOPF+0x25c>)
 8005f5a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2220      	movs	r2, #32
 8005f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7ff f827 	bl	8004fc6 <HAL_I2C_ListenCpltCallback>
}
 8005f78:	e014      	b.n	8005fa4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7e:	2b22      	cmp	r3, #34	; 0x22
 8005f80:	d002      	beq.n	8005f88 <I2C_Slave_STOPF+0x234>
 8005f82:	7bfb      	ldrb	r3, [r7, #15]
 8005f84:	2b22      	cmp	r3, #34	; 0x22
 8005f86:	d10d      	bne.n	8005fa4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2220      	movs	r2, #32
 8005f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7fe fff9 	bl	8004f96 <HAL_I2C_SlaveRxCpltCallback>
}
 8005fa4:	bf00      	nop
 8005fa6:	3710      	adds	r7, #16
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	08006219 	.word	0x08006219
 8005fb0:	ffff0000 	.word	0xffff0000

08005fb4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005fcc:	7bbb      	ldrb	r3, [r7, #14]
 8005fce:	2b10      	cmp	r3, #16
 8005fd0:	d002      	beq.n	8005fd8 <I2C_ITError+0x24>
 8005fd2:	7bbb      	ldrb	r3, [r7, #14]
 8005fd4:	2b40      	cmp	r3, #64	; 0x40
 8005fd6:	d10a      	bne.n	8005fee <I2C_ITError+0x3a>
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
 8005fda:	2b22      	cmp	r3, #34	; 0x22
 8005fdc:	d107      	bne.n	8005fee <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fec:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005fee:	7bfb      	ldrb	r3, [r7, #15]
 8005ff0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005ff4:	2b28      	cmp	r3, #40	; 0x28
 8005ff6:	d107      	bne.n	8006008 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2228      	movs	r2, #40	; 0x28
 8006002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006006:	e015      	b.n	8006034 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006016:	d00a      	beq.n	800602e <I2C_ITError+0x7a>
 8006018:	7bfb      	ldrb	r3, [r7, #15]
 800601a:	2b60      	cmp	r3, #96	; 0x60
 800601c:	d007      	beq.n	800602e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2220      	movs	r2, #32
 8006022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800603e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006042:	d162      	bne.n	800610a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	685a      	ldr	r2, [r3, #4]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006052:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006058:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b01      	cmp	r3, #1
 8006060:	d020      	beq.n	80060a4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006066:	4a6a      	ldr	r2, [pc, #424]	; (8006210 <I2C_ITError+0x25c>)
 8006068:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800606e:	4618      	mov	r0, r3
 8006070:	f7fe faad 	bl	80045ce <HAL_DMA_Abort_IT>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	f000 8089 	beq.w	800618e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f022 0201 	bic.w	r2, r2, #1
 800608a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2220      	movs	r2, #32
 8006090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800609e:	4610      	mov	r0, r2
 80060a0:	4798      	blx	r3
 80060a2:	e074      	b.n	800618e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a8:	4a59      	ldr	r2, [pc, #356]	; (8006210 <I2C_ITError+0x25c>)
 80060aa:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7fe fa8c 	bl	80045ce <HAL_DMA_Abort_IT>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d068      	beq.n	800618e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c6:	2b40      	cmp	r3, #64	; 0x40
 80060c8:	d10b      	bne.n	80060e2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	691a      	ldr	r2, [r3, #16]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d4:	b2d2      	uxtb	r2, r2
 80060d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060dc:	1c5a      	adds	r2, r3, #1
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f022 0201 	bic.w	r2, r2, #1
 80060f0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2220      	movs	r2, #32
 80060f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006104:	4610      	mov	r0, r2
 8006106:	4798      	blx	r3
 8006108:	e041      	b.n	800618e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b60      	cmp	r3, #96	; 0x60
 8006114:	d125      	bne.n	8006162 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2220      	movs	r2, #32
 800611a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612e:	2b40      	cmp	r3, #64	; 0x40
 8006130:	d10b      	bne.n	800614a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	691a      	ldr	r2, [r3, #16]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613c:	b2d2      	uxtb	r2, r2
 800613e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006144:	1c5a      	adds	r2, r3, #1
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f022 0201 	bic.w	r2, r2, #1
 8006158:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7fe ff5b 	bl	8005016 <HAL_I2C_AbortCpltCallback>
 8006160:	e015      	b.n	800618e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800616c:	2b40      	cmp	r3, #64	; 0x40
 800616e:	d10b      	bne.n	8006188 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	691a      	ldr	r2, [r3, #16]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617a:	b2d2      	uxtb	r2, r2
 800617c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006182:	1c5a      	adds	r2, r3, #1
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f7fe ff3a 	bl	8005002 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006192:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10e      	bne.n	80061bc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d109      	bne.n	80061bc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d104      	bne.n	80061bc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d007      	beq.n	80061cc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	685a      	ldr	r2, [r3, #4]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061ca:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061d2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d8:	f003 0304 	and.w	r3, r3, #4
 80061dc:	2b04      	cmp	r3, #4
 80061de:	d113      	bne.n	8006208 <I2C_ITError+0x254>
 80061e0:	7bfb      	ldrb	r3, [r7, #15]
 80061e2:	2b28      	cmp	r3, #40	; 0x28
 80061e4:	d110      	bne.n	8006208 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a0a      	ldr	r2, [pc, #40]	; (8006214 <I2C_ITError+0x260>)
 80061ea:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2220      	movs	r2, #32
 80061f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7fe fedf 	bl	8004fc6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006208:	bf00      	nop
 800620a:	3710      	adds	r7, #16
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	08006219 	.word	0x08006219
 8006214:	ffff0000 	.word	0xffff0000

08006218 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006220:	2300      	movs	r3, #0
 8006222:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006228:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006230:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006232:	4b4b      	ldr	r3, [pc, #300]	; (8006360 <I2C_DMAAbort+0x148>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	08db      	lsrs	r3, r3, #3
 8006238:	4a4a      	ldr	r2, [pc, #296]	; (8006364 <I2C_DMAAbort+0x14c>)
 800623a:	fba2 2303 	umull	r2, r3, r2, r3
 800623e:	0a1a      	lsrs	r2, r3, #8
 8006240:	4613      	mov	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	00da      	lsls	r2, r3, #3
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d106      	bne.n	8006260 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006256:	f043 0220 	orr.w	r2, r3, #32
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800625e:	e00a      	b.n	8006276 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	3b01      	subs	r3, #1
 8006264:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006274:	d0ea      	beq.n	800624c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800627a:	2b00      	cmp	r3, #0
 800627c:	d003      	beq.n	8006286 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006282:	2200      	movs	r2, #0
 8006284:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628a:	2b00      	cmp	r3, #0
 800628c:	d003      	beq.n	8006296 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006292:	2200      	movs	r2, #0
 8006294:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062a4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	2200      	movs	r2, #0
 80062aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d003      	beq.n	80062bc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b8:	2200      	movs	r2, #0
 80062ba:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d003      	beq.n	80062cc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c8:	2200      	movs	r2, #0
 80062ca:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f022 0201 	bic.w	r2, r2, #1
 80062da:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b60      	cmp	r3, #96	; 0x60
 80062e6:	d10e      	bne.n	8006306 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	2200      	movs	r2, #0
 80062fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80062fe:	6978      	ldr	r0, [r7, #20]
 8006300:	f7fe fe89 	bl	8005016 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006304:	e027      	b.n	8006356 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006306:	7cfb      	ldrb	r3, [r7, #19]
 8006308:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800630c:	2b28      	cmp	r3, #40	; 0x28
 800630e:	d117      	bne.n	8006340 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f042 0201 	orr.w	r2, r2, #1
 800631e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800632e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	2200      	movs	r2, #0
 8006334:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	2228      	movs	r2, #40	; 0x28
 800633a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800633e:	e007      	b.n	8006350 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	2220      	movs	r2, #32
 8006344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006350:	6978      	ldr	r0, [r7, #20]
 8006352:	f7fe fe56 	bl	8005002 <HAL_I2C_ErrorCallback>
}
 8006356:	bf00      	nop
 8006358:	3718      	adds	r7, #24
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	20000114 	.word	0x20000114
 8006364:	14f8b589 	.word	0x14f8b589

08006368 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006370:	2300      	movs	r3, #0
 8006372:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006374:	4b13      	ldr	r3, [pc, #76]	; (80063c4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	08db      	lsrs	r3, r3, #3
 800637a:	4a13      	ldr	r2, [pc, #76]	; (80063c8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800637c:	fba2 2303 	umull	r2, r3, r2, r3
 8006380:	0a1a      	lsrs	r2, r3, #8
 8006382:	4613      	mov	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4413      	add	r3, r2
 8006388:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	3b01      	subs	r3, #1
 800638e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d107      	bne.n	80063a6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639a:	f043 0220 	orr.w	r2, r3, #32
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e008      	b.n	80063b8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063b4:	d0e9      	beq.n	800638a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3714      	adds	r7, #20
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr
 80063c4:	20000114 	.word	0x20000114
 80063c8:	14f8b589 	.word	0x14f8b589

080063cc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80063dc:	d103      	bne.n	80063e6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80063e4:	e007      	b.n	80063f6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ea:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80063ee:	d102      	bne.n	80063f6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2208      	movs	r2, #8
 80063f4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80063f6:	bf00      	nop
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b084      	sub	sp, #16
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d101      	bne.n	8006414 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e034      	b.n	800647e <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800641c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f245 5255 	movw	r2, #21845	; 0x5555
 8006426:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	6852      	ldr	r2, [r2, #4]
 8006430:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	6892      	ldr	r2, [r2, #8]
 800643a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800643c:	f7fd f952 	bl	80036e4 <HAL_GetTick>
 8006440:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006442:	e00f      	b.n	8006464 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006444:	f7fd f94e 	bl	80036e4 <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	2b31      	cmp	r3, #49	; 0x31
 8006450:	d908      	bls.n	8006464 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	f003 0303 	and.w	r3, r3, #3
 800645c:	2b00      	cmp	r3, #0
 800645e:	d001      	beq.n	8006464 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e00c      	b.n	800647e <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	f003 0303 	and.w	r3, r3, #3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1e8      	bne.n	8006444 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800647a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006486:	b480      	push	{r7}
 8006488:	b083      	sub	sp, #12
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006496:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	370c      	adds	r7, #12
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
	...

080064a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d101      	bne.n	80064bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e0cc      	b.n	8006656 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064bc:	4b68      	ldr	r3, [pc, #416]	; (8006660 <HAL_RCC_ClockConfig+0x1b8>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 030f 	and.w	r3, r3, #15
 80064c4:	683a      	ldr	r2, [r7, #0]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d90c      	bls.n	80064e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ca:	4b65      	ldr	r3, [pc, #404]	; (8006660 <HAL_RCC_ClockConfig+0x1b8>)
 80064cc:	683a      	ldr	r2, [r7, #0]
 80064ce:	b2d2      	uxtb	r2, r2
 80064d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064d2:	4b63      	ldr	r3, [pc, #396]	; (8006660 <HAL_RCC_ClockConfig+0x1b8>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 030f 	and.w	r3, r3, #15
 80064da:	683a      	ldr	r2, [r7, #0]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d001      	beq.n	80064e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e0b8      	b.n	8006656 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0302 	and.w	r3, r3, #2
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d020      	beq.n	8006532 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0304 	and.w	r3, r3, #4
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d005      	beq.n	8006508 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064fc:	4b59      	ldr	r3, [pc, #356]	; (8006664 <HAL_RCC_ClockConfig+0x1bc>)
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	4a58      	ldr	r2, [pc, #352]	; (8006664 <HAL_RCC_ClockConfig+0x1bc>)
 8006502:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006506:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0308 	and.w	r3, r3, #8
 8006510:	2b00      	cmp	r3, #0
 8006512:	d005      	beq.n	8006520 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006514:	4b53      	ldr	r3, [pc, #332]	; (8006664 <HAL_RCC_ClockConfig+0x1bc>)
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	4a52      	ldr	r2, [pc, #328]	; (8006664 <HAL_RCC_ClockConfig+0x1bc>)
 800651a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800651e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006520:	4b50      	ldr	r3, [pc, #320]	; (8006664 <HAL_RCC_ClockConfig+0x1bc>)
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	494d      	ldr	r1, [pc, #308]	; (8006664 <HAL_RCC_ClockConfig+0x1bc>)
 800652e:	4313      	orrs	r3, r2
 8006530:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b00      	cmp	r3, #0
 800653c:	d044      	beq.n	80065c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d107      	bne.n	8006556 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006546:	4b47      	ldr	r3, [pc, #284]	; (8006664 <HAL_RCC_ClockConfig+0x1bc>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d119      	bne.n	8006586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e07f      	b.n	8006656 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	2b02      	cmp	r3, #2
 800655c:	d003      	beq.n	8006566 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006562:	2b03      	cmp	r3, #3
 8006564:	d107      	bne.n	8006576 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006566:	4b3f      	ldr	r3, [pc, #252]	; (8006664 <HAL_RCC_ClockConfig+0x1bc>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d109      	bne.n	8006586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e06f      	b.n	8006656 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006576:	4b3b      	ldr	r3, [pc, #236]	; (8006664 <HAL_RCC_ClockConfig+0x1bc>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 0302 	and.w	r3, r3, #2
 800657e:	2b00      	cmp	r3, #0
 8006580:	d101      	bne.n	8006586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e067      	b.n	8006656 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006586:	4b37      	ldr	r3, [pc, #220]	; (8006664 <HAL_RCC_ClockConfig+0x1bc>)
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f023 0203 	bic.w	r2, r3, #3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	4934      	ldr	r1, [pc, #208]	; (8006664 <HAL_RCC_ClockConfig+0x1bc>)
 8006594:	4313      	orrs	r3, r2
 8006596:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006598:	f7fd f8a4 	bl	80036e4 <HAL_GetTick>
 800659c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800659e:	e00a      	b.n	80065b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065a0:	f7fd f8a0 	bl	80036e4 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d901      	bls.n	80065b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e04f      	b.n	8006656 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065b6:	4b2b      	ldr	r3, [pc, #172]	; (8006664 <HAL_RCC_ClockConfig+0x1bc>)
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f003 020c 	and.w	r2, r3, #12
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d1eb      	bne.n	80065a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065c8:	4b25      	ldr	r3, [pc, #148]	; (8006660 <HAL_RCC_ClockConfig+0x1b8>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 030f 	and.w	r3, r3, #15
 80065d0:	683a      	ldr	r2, [r7, #0]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d20c      	bcs.n	80065f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065d6:	4b22      	ldr	r3, [pc, #136]	; (8006660 <HAL_RCC_ClockConfig+0x1b8>)
 80065d8:	683a      	ldr	r2, [r7, #0]
 80065da:	b2d2      	uxtb	r2, r2
 80065dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065de:	4b20      	ldr	r3, [pc, #128]	; (8006660 <HAL_RCC_ClockConfig+0x1b8>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 030f 	and.w	r3, r3, #15
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d001      	beq.n	80065f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e032      	b.n	8006656 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0304 	and.w	r3, r3, #4
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d008      	beq.n	800660e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065fc:	4b19      	ldr	r3, [pc, #100]	; (8006664 <HAL_RCC_ClockConfig+0x1bc>)
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	4916      	ldr	r1, [pc, #88]	; (8006664 <HAL_RCC_ClockConfig+0x1bc>)
 800660a:	4313      	orrs	r3, r2
 800660c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0308 	and.w	r3, r3, #8
 8006616:	2b00      	cmp	r3, #0
 8006618:	d009      	beq.n	800662e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800661a:	4b12      	ldr	r3, [pc, #72]	; (8006664 <HAL_RCC_ClockConfig+0x1bc>)
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	00db      	lsls	r3, r3, #3
 8006628:	490e      	ldr	r1, [pc, #56]	; (8006664 <HAL_RCC_ClockConfig+0x1bc>)
 800662a:	4313      	orrs	r3, r2
 800662c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800662e:	f000 fb7f 	bl	8006d30 <HAL_RCC_GetSysClockFreq>
 8006632:	4602      	mov	r2, r0
 8006634:	4b0b      	ldr	r3, [pc, #44]	; (8006664 <HAL_RCC_ClockConfig+0x1bc>)
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	091b      	lsrs	r3, r3, #4
 800663a:	f003 030f 	and.w	r3, r3, #15
 800663e:	490a      	ldr	r1, [pc, #40]	; (8006668 <HAL_RCC_ClockConfig+0x1c0>)
 8006640:	5ccb      	ldrb	r3, [r1, r3]
 8006642:	fa22 f303 	lsr.w	r3, r2, r3
 8006646:	4a09      	ldr	r2, [pc, #36]	; (800666c <HAL_RCC_ClockConfig+0x1c4>)
 8006648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800664a:	4b09      	ldr	r3, [pc, #36]	; (8006670 <HAL_RCC_ClockConfig+0x1c8>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4618      	mov	r0, r3
 8006650:	f7fd f804 	bl	800365c <HAL_InitTick>

  return HAL_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3710      	adds	r7, #16
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	40023c00 	.word	0x40023c00
 8006664:	40023800 	.word	0x40023800
 8006668:	0800b470 	.word	0x0800b470
 800666c:	20000114 	.word	0x20000114
 8006670:	20000118 	.word	0x20000118

08006674 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006674:	b480      	push	{r7}
 8006676:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006678:	4b03      	ldr	r3, [pc, #12]	; (8006688 <HAL_RCC_GetHCLKFreq+0x14>)
 800667a:	681b      	ldr	r3, [r3, #0]
}
 800667c:	4618      	mov	r0, r3
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	20000114 	.word	0x20000114

0800668c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006690:	f7ff fff0 	bl	8006674 <HAL_RCC_GetHCLKFreq>
 8006694:	4602      	mov	r2, r0
 8006696:	4b05      	ldr	r3, [pc, #20]	; (80066ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	0a9b      	lsrs	r3, r3, #10
 800669c:	f003 0307 	and.w	r3, r3, #7
 80066a0:	4903      	ldr	r1, [pc, #12]	; (80066b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066a2:	5ccb      	ldrb	r3, [r1, r3]
 80066a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	40023800 	.word	0x40023800
 80066b0:	0800b480 	.word	0x0800b480

080066b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80066b8:	f7ff ffdc 	bl	8006674 <HAL_RCC_GetHCLKFreq>
 80066bc:	4602      	mov	r2, r0
 80066be:	4b05      	ldr	r3, [pc, #20]	; (80066d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	0b5b      	lsrs	r3, r3, #13
 80066c4:	f003 0307 	and.w	r3, r3, #7
 80066c8:	4903      	ldr	r1, [pc, #12]	; (80066d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066ca:	5ccb      	ldrb	r3, [r1, r3]
 80066cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	40023800 	.word	0x40023800
 80066d8:	0800b480 	.word	0x0800b480

080066dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b08c      	sub	sp, #48	; 0x30
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80066e4:	2300      	movs	r3, #0
 80066e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80066e8:	2300      	movs	r3, #0
 80066ea:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80066ec:	2300      	movs	r3, #0
 80066ee:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80066f0:	2300      	movs	r3, #0
 80066f2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80066f4:	2300      	movs	r3, #0
 80066f6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80066f8:	2300      	movs	r3, #0
 80066fa:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80066fc:	2300      	movs	r3, #0
 80066fe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8006700:	2300      	movs	r3, #0
 8006702:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8006704:	2300      	movs	r3, #0
 8006706:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0301 	and.w	r3, r3, #1
 8006710:	2b00      	cmp	r3, #0
 8006712:	d010      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8006714:	4b6f      	ldr	r3, [pc, #444]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006716:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800671a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006722:	496c      	ldr	r1, [pc, #432]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006724:	4313      	orrs	r3, r2
 8006726:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672e:	2b00      	cmp	r3, #0
 8006730:	d101      	bne.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8006732:	2301      	movs	r3, #1
 8006734:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0302 	and.w	r3, r3, #2
 800673e:	2b00      	cmp	r3, #0
 8006740:	d010      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8006742:	4b64      	ldr	r3, [pc, #400]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006748:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006750:	4960      	ldr	r1, [pc, #384]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006752:	4313      	orrs	r3, r2
 8006754:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800675c:	2b00      	cmp	r3, #0
 800675e:	d101      	bne.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8006760:	2301      	movs	r3, #1
 8006762:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0304 	and.w	r3, r3, #4
 800676c:	2b00      	cmp	r3, #0
 800676e:	d017      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006770:	4b58      	ldr	r3, [pc, #352]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006772:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006776:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677e:	4955      	ldr	r1, [pc, #340]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006780:	4313      	orrs	r3, r2
 8006782:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800678e:	d101      	bne.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8006790:	2301      	movs	r3, #1
 8006792:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006798:	2b00      	cmp	r3, #0
 800679a:	d101      	bne.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800679c:	2301      	movs	r3, #1
 800679e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0308 	and.w	r3, r3, #8
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d017      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80067ac:	4b49      	ldr	r3, [pc, #292]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80067ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ba:	4946      	ldr	r1, [pc, #280]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80067bc:	4313      	orrs	r3, r2
 80067be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067ca:	d101      	bne.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80067cc:	2301      	movs	r3, #1
 80067ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d101      	bne.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80067d8:	2301      	movs	r3, #1
 80067da:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0320 	and.w	r3, r3, #32
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f000 808a 	beq.w	80068fe <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80067ea:	2300      	movs	r3, #0
 80067ec:	60bb      	str	r3, [r7, #8]
 80067ee:	4b39      	ldr	r3, [pc, #228]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80067f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f2:	4a38      	ldr	r2, [pc, #224]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80067f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067f8:	6413      	str	r3, [r2, #64]	; 0x40
 80067fa:	4b36      	ldr	r3, [pc, #216]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80067fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006802:	60bb      	str	r3, [r7, #8]
 8006804:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006806:	4b34      	ldr	r3, [pc, #208]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a33      	ldr	r2, [pc, #204]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800680c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006810:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006812:	f7fc ff67 	bl	80036e4 <HAL_GetTick>
 8006816:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006818:	e008      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800681a:	f7fc ff63 	bl	80036e4 <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	2b02      	cmp	r3, #2
 8006826:	d901      	bls.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	e278      	b.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800682c:	4b2a      	ldr	r3, [pc, #168]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006834:	2b00      	cmp	r3, #0
 8006836:	d0f0      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006838:	4b26      	ldr	r3, [pc, #152]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800683a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800683c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006840:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006842:	6a3b      	ldr	r3, [r7, #32]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d02f      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006850:	6a3a      	ldr	r2, [r7, #32]
 8006852:	429a      	cmp	r2, r3
 8006854:	d028      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006856:	4b1f      	ldr	r3, [pc, #124]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800685a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800685e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006860:	4b1e      	ldr	r3, [pc, #120]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006862:	2201      	movs	r2, #1
 8006864:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006866:	4b1d      	ldr	r3, [pc, #116]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006868:	2200      	movs	r2, #0
 800686a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800686c:	4a19      	ldr	r2, [pc, #100]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800686e:	6a3b      	ldr	r3, [r7, #32]
 8006870:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006872:	4b18      	ldr	r3, [pc, #96]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	2b01      	cmp	r3, #1
 800687c:	d114      	bne.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800687e:	f7fc ff31 	bl	80036e4 <HAL_GetTick>
 8006882:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006884:	e00a      	b.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006886:	f7fc ff2d 	bl	80036e4 <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	f241 3288 	movw	r2, #5000	; 0x1388
 8006894:	4293      	cmp	r3, r2
 8006896:	d901      	bls.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e240      	b.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800689c:	4b0d      	ldr	r3, [pc, #52]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800689e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a0:	f003 0302 	and.w	r3, r3, #2
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d0ee      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068b4:	d114      	bne.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80068b6:	4b07      	ldr	r3, [pc, #28]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80068c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068ca:	4902      	ldr	r1, [pc, #8]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	608b      	str	r3, [r1, #8]
 80068d0:	e00c      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x210>
 80068d2:	bf00      	nop
 80068d4:	40023800 	.word	0x40023800
 80068d8:	40007000 	.word	0x40007000
 80068dc:	42470e40 	.word	0x42470e40
 80068e0:	4b4a      	ldr	r3, [pc, #296]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	4a49      	ldr	r2, [pc, #292]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80068e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80068ea:	6093      	str	r3, [r2, #8]
 80068ec:	4b47      	ldr	r3, [pc, #284]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80068ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068f8:	4944      	ldr	r1, [pc, #272]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0310 	and.w	r3, r3, #16
 8006906:	2b00      	cmp	r3, #0
 8006908:	d004      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8006910:	4b3f      	ldr	r3, [pc, #252]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006912:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00a      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006920:	4b3a      	ldr	r3, [pc, #232]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006922:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006926:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800692e:	4937      	ldr	r1, [pc, #220]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006930:	4313      	orrs	r3, r2
 8006932:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00a      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006942:	4b32      	ldr	r3, [pc, #200]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006944:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006948:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006950:	492e      	ldr	r1, [pc, #184]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006952:	4313      	orrs	r3, r2
 8006954:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006960:	2b00      	cmp	r3, #0
 8006962:	d011      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006964:	4b29      	ldr	r3, [pc, #164]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800696a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006972:	4926      	ldr	r1, [pc, #152]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006974:	4313      	orrs	r3, r2
 8006976:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800697e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006982:	d101      	bne.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8006984:	2301      	movs	r3, #1
 8006986:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00a      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006994:	4b1d      	ldr	r3, [pc, #116]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006996:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800699a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069a2:	491a      	ldr	r1, [pc, #104]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d011      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80069b6:	4b15      	ldr	r3, [pc, #84]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80069b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069bc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069c4:	4911      	ldr	r1, [pc, #68]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069d4:	d101      	bne.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80069d6:	2301      	movs	r3, #1
 80069d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80069da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d005      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x310>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069e8:	f040 80ff 	bne.w	8006bea <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80069ec:	4b09      	ldr	r3, [pc, #36]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069ee:	2200      	movs	r2, #0
 80069f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80069f2:	f7fc fe77 	bl	80036e4 <HAL_GetTick>
 80069f6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80069f8:	e00e      	b.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80069fa:	f7fc fe73 	bl	80036e4 <HAL_GetTick>
 80069fe:	4602      	mov	r2, r0
 8006a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d907      	bls.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e188      	b.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006a0c:	40023800 	.word	0x40023800
 8006a10:	424711e0 	.word	0x424711e0
 8006a14:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a18:	4b7e      	ldr	r3, [pc, #504]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1ea      	bne.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0301 	and.w	r3, r3, #1
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d003      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d009      	beq.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d028      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d124      	bne.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006a4c:	4b71      	ldr	r3, [pc, #452]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a52:	0c1b      	lsrs	r3, r3, #16
 8006a54:	f003 0303 	and.w	r3, r3, #3
 8006a58:	3301      	adds	r3, #1
 8006a5a:	005b      	lsls	r3, r3, #1
 8006a5c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006a5e:	4b6d      	ldr	r3, [pc, #436]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a64:	0e1b      	lsrs	r3, r3, #24
 8006a66:	f003 030f 	and.w	r3, r3, #15
 8006a6a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685a      	ldr	r2, [r3, #4]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	019b      	lsls	r3, r3, #6
 8006a76:	431a      	orrs	r2, r3
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	085b      	lsrs	r3, r3, #1
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	041b      	lsls	r3, r3, #16
 8006a80:	431a      	orrs	r2, r3
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	061b      	lsls	r3, r3, #24
 8006a86:	431a      	orrs	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	695b      	ldr	r3, [r3, #20]
 8006a8c:	071b      	lsls	r3, r3, #28
 8006a8e:	4961      	ldr	r1, [pc, #388]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0304 	and.w	r3, r3, #4
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d004      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006aaa:	d00a      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d035      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006abc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ac0:	d130      	bne.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006ac2:	4b54      	ldr	r3, [pc, #336]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ac8:	0c1b      	lsrs	r3, r3, #16
 8006aca:	f003 0303 	and.w	r3, r3, #3
 8006ace:	3301      	adds	r3, #1
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006ad4:	4b4f      	ldr	r3, [pc, #316]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ada:	0f1b      	lsrs	r3, r3, #28
 8006adc:	f003 0307 	and.w	r3, r3, #7
 8006ae0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685a      	ldr	r2, [r3, #4]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	019b      	lsls	r3, r3, #6
 8006aec:	431a      	orrs	r2, r3
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	085b      	lsrs	r3, r3, #1
 8006af2:	3b01      	subs	r3, #1
 8006af4:	041b      	lsls	r3, r3, #16
 8006af6:	431a      	orrs	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	061b      	lsls	r3, r3, #24
 8006afe:	431a      	orrs	r2, r3
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	071b      	lsls	r3, r3, #28
 8006b04:	4943      	ldr	r1, [pc, #268]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006b0c:	4b41      	ldr	r3, [pc, #260]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b12:	f023 021f 	bic.w	r2, r3, #31
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	493d      	ldr	r1, [pc, #244]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d029      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b38:	d124      	bne.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006b3a:	4b36      	ldr	r3, [pc, #216]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b40:	0c1b      	lsrs	r3, r3, #16
 8006b42:	f003 0303 	and.w	r3, r3, #3
 8006b46:	3301      	adds	r3, #1
 8006b48:	005b      	lsls	r3, r3, #1
 8006b4a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006b4c:	4b31      	ldr	r3, [pc, #196]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b52:	0f1b      	lsrs	r3, r3, #28
 8006b54:	f003 0307 	and.w	r3, r3, #7
 8006b58:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685a      	ldr	r2, [r3, #4]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	019b      	lsls	r3, r3, #6
 8006b64:	431a      	orrs	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	085b      	lsrs	r3, r3, #1
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	041b      	lsls	r3, r3, #16
 8006b70:	431a      	orrs	r2, r3
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	061b      	lsls	r3, r3, #24
 8006b76:	431a      	orrs	r2, r3
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	071b      	lsls	r3, r3, #28
 8006b7c:	4925      	ldr	r1, [pc, #148]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d016      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	685a      	ldr	r2, [r3, #4]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	019b      	lsls	r3, r3, #6
 8006b9a:	431a      	orrs	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	085b      	lsrs	r3, r3, #1
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	041b      	lsls	r3, r3, #16
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	061b      	lsls	r3, r3, #24
 8006bae:	431a      	orrs	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	695b      	ldr	r3, [r3, #20]
 8006bb4:	071b      	lsls	r3, r3, #28
 8006bb6:	4917      	ldr	r1, [pc, #92]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006bbe:	4b16      	ldr	r3, [pc, #88]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bc4:	f7fc fd8e 	bl	80036e4 <HAL_GetTick>
 8006bc8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006bca:	e008      	b.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006bcc:	f7fc fd8a 	bl	80036e4 <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d901      	bls.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e09f      	b.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006bde:	4b0d      	ldr	r3, [pc, #52]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d0f0      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8006bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	f040 8095 	bne.w	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006bf2:	4b0a      	ldr	r3, [pc, #40]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bf8:	f7fc fd74 	bl	80036e4 <HAL_GetTick>
 8006bfc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006bfe:	e00f      	b.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006c00:	f7fc fd70 	bl	80036e4 <HAL_GetTick>
 8006c04:	4602      	mov	r2, r0
 8006c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	d908      	bls.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e085      	b.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006c12:	bf00      	nop
 8006c14:	40023800 	.word	0x40023800
 8006c18:	42470068 	.word	0x42470068
 8006c1c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c20:	4b41      	ldr	r3, [pc, #260]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c2c:	d0e8      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0304 	and.w	r3, r3, #4
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d003      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d009      	beq.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d02b      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d127      	bne.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006c56:	4b34      	ldr	r3, [pc, #208]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c5c:	0c1b      	lsrs	r3, r3, #16
 8006c5e:	f003 0303 	and.w	r3, r3, #3
 8006c62:	3301      	adds	r3, #1
 8006c64:	005b      	lsls	r3, r3, #1
 8006c66:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	699a      	ldr	r2, [r3, #24]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	69db      	ldr	r3, [r3, #28]
 8006c70:	019b      	lsls	r3, r3, #6
 8006c72:	431a      	orrs	r2, r3
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	085b      	lsrs	r3, r3, #1
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	041b      	lsls	r3, r3, #16
 8006c7c:	431a      	orrs	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c82:	061b      	lsls	r3, r3, #24
 8006c84:	4928      	ldr	r1, [pc, #160]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006c86:	4313      	orrs	r3, r2
 8006c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006c8c:	4b26      	ldr	r3, [pc, #152]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c92:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	021b      	lsls	r3, r3, #8
 8006c9e:	4922      	ldr	r1, [pc, #136]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d01d      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x612>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cba:	d118      	bne.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006cbc:	4b1a      	ldr	r3, [pc, #104]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cc2:	0e1b      	lsrs	r3, r3, #24
 8006cc4:	f003 030f 	and.w	r3, r3, #15
 8006cc8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	699a      	ldr	r2, [r3, #24]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	019b      	lsls	r3, r3, #6
 8006cd4:	431a      	orrs	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a1b      	ldr	r3, [r3, #32]
 8006cda:	085b      	lsrs	r3, r3, #1
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	041b      	lsls	r3, r3, #16
 8006ce0:	431a      	orrs	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	061b      	lsls	r3, r3, #24
 8006ce6:	4910      	ldr	r1, [pc, #64]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006cee:	4b0f      	ldr	r3, [pc, #60]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006cf4:	f7fc fcf6 	bl	80036e4 <HAL_GetTick>
 8006cf8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006cfa:	e008      	b.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006cfc:	f7fc fcf2 	bl	80036e4 <HAL_GetTick>
 8006d00:	4602      	mov	r2, r0
 8006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d901      	bls.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e007      	b.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d0e:	4b06      	ldr	r3, [pc, #24]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d1a:	d1ef      	bne.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3730      	adds	r7, #48	; 0x30
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	40023800 	.word	0x40023800
 8006d2c:	42470070 	.word	0x42470070

08006d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d34:	b0ae      	sub	sp, #184	; 0xb8
 8006d36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8006d44:	2300      	movs	r3, #0
 8006d46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8006d50:	2300      	movs	r3, #0
 8006d52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d56:	4bcb      	ldr	r3, [pc, #812]	; (8007084 <HAL_RCC_GetSysClockFreq+0x354>)
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	f003 030c 	and.w	r3, r3, #12
 8006d5e:	2b0c      	cmp	r3, #12
 8006d60:	f200 8206 	bhi.w	8007170 <HAL_RCC_GetSysClockFreq+0x440>
 8006d64:	a201      	add	r2, pc, #4	; (adr r2, 8006d6c <HAL_RCC_GetSysClockFreq+0x3c>)
 8006d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d6a:	bf00      	nop
 8006d6c:	08006da1 	.word	0x08006da1
 8006d70:	08007171 	.word	0x08007171
 8006d74:	08007171 	.word	0x08007171
 8006d78:	08007171 	.word	0x08007171
 8006d7c:	08006da9 	.word	0x08006da9
 8006d80:	08007171 	.word	0x08007171
 8006d84:	08007171 	.word	0x08007171
 8006d88:	08007171 	.word	0x08007171
 8006d8c:	08006db1 	.word	0x08006db1
 8006d90:	08007171 	.word	0x08007171
 8006d94:	08007171 	.word	0x08007171
 8006d98:	08007171 	.word	0x08007171
 8006d9c:	08006fa1 	.word	0x08006fa1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006da0:	4bb9      	ldr	r3, [pc, #740]	; (8007088 <HAL_RCC_GetSysClockFreq+0x358>)
 8006da2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8006da6:	e1e7      	b.n	8007178 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006da8:	4bb8      	ldr	r3, [pc, #736]	; (800708c <HAL_RCC_GetSysClockFreq+0x35c>)
 8006daa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006dae:	e1e3      	b.n	8007178 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006db0:	4bb4      	ldr	r3, [pc, #720]	; (8007084 <HAL_RCC_GetSysClockFreq+0x354>)
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006db8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006dbc:	4bb1      	ldr	r3, [pc, #708]	; (8007084 <HAL_RCC_GetSysClockFreq+0x354>)
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d071      	beq.n	8006eac <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dc8:	4bae      	ldr	r3, [pc, #696]	; (8007084 <HAL_RCC_GetSysClockFreq+0x354>)
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	099b      	lsrs	r3, r3, #6
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006dd4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006dd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006de0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006de4:	2300      	movs	r3, #0
 8006de6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006dea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006dee:	4622      	mov	r2, r4
 8006df0:	462b      	mov	r3, r5
 8006df2:	f04f 0000 	mov.w	r0, #0
 8006df6:	f04f 0100 	mov.w	r1, #0
 8006dfa:	0159      	lsls	r1, r3, #5
 8006dfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e00:	0150      	lsls	r0, r2, #5
 8006e02:	4602      	mov	r2, r0
 8006e04:	460b      	mov	r3, r1
 8006e06:	4621      	mov	r1, r4
 8006e08:	1a51      	subs	r1, r2, r1
 8006e0a:	6439      	str	r1, [r7, #64]	; 0x40
 8006e0c:	4629      	mov	r1, r5
 8006e0e:	eb63 0301 	sbc.w	r3, r3, r1
 8006e12:	647b      	str	r3, [r7, #68]	; 0x44
 8006e14:	f04f 0200 	mov.w	r2, #0
 8006e18:	f04f 0300 	mov.w	r3, #0
 8006e1c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8006e20:	4649      	mov	r1, r9
 8006e22:	018b      	lsls	r3, r1, #6
 8006e24:	4641      	mov	r1, r8
 8006e26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e2a:	4641      	mov	r1, r8
 8006e2c:	018a      	lsls	r2, r1, #6
 8006e2e:	4641      	mov	r1, r8
 8006e30:	1a51      	subs	r1, r2, r1
 8006e32:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e34:	4649      	mov	r1, r9
 8006e36:	eb63 0301 	sbc.w	r3, r3, r1
 8006e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e3c:	f04f 0200 	mov.w	r2, #0
 8006e40:	f04f 0300 	mov.w	r3, #0
 8006e44:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8006e48:	4649      	mov	r1, r9
 8006e4a:	00cb      	lsls	r3, r1, #3
 8006e4c:	4641      	mov	r1, r8
 8006e4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e52:	4641      	mov	r1, r8
 8006e54:	00ca      	lsls	r2, r1, #3
 8006e56:	4610      	mov	r0, r2
 8006e58:	4619      	mov	r1, r3
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	4622      	mov	r2, r4
 8006e5e:	189b      	adds	r3, r3, r2
 8006e60:	633b      	str	r3, [r7, #48]	; 0x30
 8006e62:	462b      	mov	r3, r5
 8006e64:	460a      	mov	r2, r1
 8006e66:	eb42 0303 	adc.w	r3, r2, r3
 8006e6a:	637b      	str	r3, [r7, #52]	; 0x34
 8006e6c:	f04f 0200 	mov.w	r2, #0
 8006e70:	f04f 0300 	mov.w	r3, #0
 8006e74:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006e78:	4629      	mov	r1, r5
 8006e7a:	024b      	lsls	r3, r1, #9
 8006e7c:	4621      	mov	r1, r4
 8006e7e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006e82:	4621      	mov	r1, r4
 8006e84:	024a      	lsls	r2, r1, #9
 8006e86:	4610      	mov	r0, r2
 8006e88:	4619      	mov	r1, r3
 8006e8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006e98:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006e9c:	f7f9 fa70 	bl	8000380 <__aeabi_uldivmod>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006eaa:	e067      	b.n	8006f7c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006eac:	4b75      	ldr	r3, [pc, #468]	; (8007084 <HAL_RCC_GetSysClockFreq+0x354>)
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	099b      	lsrs	r3, r3, #6
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006eb8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006ebc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ec4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006eca:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8006ece:	4622      	mov	r2, r4
 8006ed0:	462b      	mov	r3, r5
 8006ed2:	f04f 0000 	mov.w	r0, #0
 8006ed6:	f04f 0100 	mov.w	r1, #0
 8006eda:	0159      	lsls	r1, r3, #5
 8006edc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ee0:	0150      	lsls	r0, r2, #5
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	4621      	mov	r1, r4
 8006ee8:	1a51      	subs	r1, r2, r1
 8006eea:	62b9      	str	r1, [r7, #40]	; 0x28
 8006eec:	4629      	mov	r1, r5
 8006eee:	eb63 0301 	sbc.w	r3, r3, r1
 8006ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ef4:	f04f 0200 	mov.w	r2, #0
 8006ef8:	f04f 0300 	mov.w	r3, #0
 8006efc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006f00:	4649      	mov	r1, r9
 8006f02:	018b      	lsls	r3, r1, #6
 8006f04:	4641      	mov	r1, r8
 8006f06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f0a:	4641      	mov	r1, r8
 8006f0c:	018a      	lsls	r2, r1, #6
 8006f0e:	4641      	mov	r1, r8
 8006f10:	ebb2 0a01 	subs.w	sl, r2, r1
 8006f14:	4649      	mov	r1, r9
 8006f16:	eb63 0b01 	sbc.w	fp, r3, r1
 8006f1a:	f04f 0200 	mov.w	r2, #0
 8006f1e:	f04f 0300 	mov.w	r3, #0
 8006f22:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f26:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f2e:	4692      	mov	sl, r2
 8006f30:	469b      	mov	fp, r3
 8006f32:	4623      	mov	r3, r4
 8006f34:	eb1a 0303 	adds.w	r3, sl, r3
 8006f38:	623b      	str	r3, [r7, #32]
 8006f3a:	462b      	mov	r3, r5
 8006f3c:	eb4b 0303 	adc.w	r3, fp, r3
 8006f40:	627b      	str	r3, [r7, #36]	; 0x24
 8006f42:	f04f 0200 	mov.w	r2, #0
 8006f46:	f04f 0300 	mov.w	r3, #0
 8006f4a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006f4e:	4629      	mov	r1, r5
 8006f50:	028b      	lsls	r3, r1, #10
 8006f52:	4621      	mov	r1, r4
 8006f54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f58:	4621      	mov	r1, r4
 8006f5a:	028a      	lsls	r2, r1, #10
 8006f5c:	4610      	mov	r0, r2
 8006f5e:	4619      	mov	r1, r3
 8006f60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f64:	2200      	movs	r2, #0
 8006f66:	673b      	str	r3, [r7, #112]	; 0x70
 8006f68:	677a      	str	r2, [r7, #116]	; 0x74
 8006f6a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006f6e:	f7f9 fa07 	bl	8000380 <__aeabi_uldivmod>
 8006f72:	4602      	mov	r2, r0
 8006f74:	460b      	mov	r3, r1
 8006f76:	4613      	mov	r3, r2
 8006f78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f7c:	4b41      	ldr	r3, [pc, #260]	; (8007084 <HAL_RCC_GetSysClockFreq+0x354>)
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	0c1b      	lsrs	r3, r3, #16
 8006f82:	f003 0303 	and.w	r3, r3, #3
 8006f86:	3301      	adds	r3, #1
 8006f88:	005b      	lsls	r3, r3, #1
 8006f8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8006f8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006f9e:	e0eb      	b.n	8007178 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006fa0:	4b38      	ldr	r3, [pc, #224]	; (8007084 <HAL_RCC_GetSysClockFreq+0x354>)
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fa8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006fac:	4b35      	ldr	r3, [pc, #212]	; (8007084 <HAL_RCC_GetSysClockFreq+0x354>)
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d06b      	beq.n	8007090 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fb8:	4b32      	ldr	r3, [pc, #200]	; (8007084 <HAL_RCC_GetSysClockFreq+0x354>)
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	099b      	lsrs	r3, r3, #6
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006fc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fca:	663b      	str	r3, [r7, #96]	; 0x60
 8006fcc:	2300      	movs	r3, #0
 8006fce:	667b      	str	r3, [r7, #100]	; 0x64
 8006fd0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006fd4:	4622      	mov	r2, r4
 8006fd6:	462b      	mov	r3, r5
 8006fd8:	f04f 0000 	mov.w	r0, #0
 8006fdc:	f04f 0100 	mov.w	r1, #0
 8006fe0:	0159      	lsls	r1, r3, #5
 8006fe2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006fe6:	0150      	lsls	r0, r2, #5
 8006fe8:	4602      	mov	r2, r0
 8006fea:	460b      	mov	r3, r1
 8006fec:	4621      	mov	r1, r4
 8006fee:	1a51      	subs	r1, r2, r1
 8006ff0:	61b9      	str	r1, [r7, #24]
 8006ff2:	4629      	mov	r1, r5
 8006ff4:	eb63 0301 	sbc.w	r3, r3, r1
 8006ff8:	61fb      	str	r3, [r7, #28]
 8006ffa:	f04f 0200 	mov.w	r2, #0
 8006ffe:	f04f 0300 	mov.w	r3, #0
 8007002:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007006:	4659      	mov	r1, fp
 8007008:	018b      	lsls	r3, r1, #6
 800700a:	4651      	mov	r1, sl
 800700c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007010:	4651      	mov	r1, sl
 8007012:	018a      	lsls	r2, r1, #6
 8007014:	4651      	mov	r1, sl
 8007016:	ebb2 0801 	subs.w	r8, r2, r1
 800701a:	4659      	mov	r1, fp
 800701c:	eb63 0901 	sbc.w	r9, r3, r1
 8007020:	f04f 0200 	mov.w	r2, #0
 8007024:	f04f 0300 	mov.w	r3, #0
 8007028:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800702c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007030:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007034:	4690      	mov	r8, r2
 8007036:	4699      	mov	r9, r3
 8007038:	4623      	mov	r3, r4
 800703a:	eb18 0303 	adds.w	r3, r8, r3
 800703e:	613b      	str	r3, [r7, #16]
 8007040:	462b      	mov	r3, r5
 8007042:	eb49 0303 	adc.w	r3, r9, r3
 8007046:	617b      	str	r3, [r7, #20]
 8007048:	f04f 0200 	mov.w	r2, #0
 800704c:	f04f 0300 	mov.w	r3, #0
 8007050:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007054:	4629      	mov	r1, r5
 8007056:	024b      	lsls	r3, r1, #9
 8007058:	4621      	mov	r1, r4
 800705a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800705e:	4621      	mov	r1, r4
 8007060:	024a      	lsls	r2, r1, #9
 8007062:	4610      	mov	r0, r2
 8007064:	4619      	mov	r1, r3
 8007066:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800706a:	2200      	movs	r2, #0
 800706c:	65bb      	str	r3, [r7, #88]	; 0x58
 800706e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007070:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007074:	f7f9 f984 	bl	8000380 <__aeabi_uldivmod>
 8007078:	4602      	mov	r2, r0
 800707a:	460b      	mov	r3, r1
 800707c:	4613      	mov	r3, r2
 800707e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007082:	e065      	b.n	8007150 <HAL_RCC_GetSysClockFreq+0x420>
 8007084:	40023800 	.word	0x40023800
 8007088:	00f42400 	.word	0x00f42400
 800708c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007090:	4b3d      	ldr	r3, [pc, #244]	; (8007188 <HAL_RCC_GetSysClockFreq+0x458>)
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	099b      	lsrs	r3, r3, #6
 8007096:	2200      	movs	r2, #0
 8007098:	4618      	mov	r0, r3
 800709a:	4611      	mov	r1, r2
 800709c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80070a0:	653b      	str	r3, [r7, #80]	; 0x50
 80070a2:	2300      	movs	r3, #0
 80070a4:	657b      	str	r3, [r7, #84]	; 0x54
 80070a6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80070aa:	4642      	mov	r2, r8
 80070ac:	464b      	mov	r3, r9
 80070ae:	f04f 0000 	mov.w	r0, #0
 80070b2:	f04f 0100 	mov.w	r1, #0
 80070b6:	0159      	lsls	r1, r3, #5
 80070b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070bc:	0150      	lsls	r0, r2, #5
 80070be:	4602      	mov	r2, r0
 80070c0:	460b      	mov	r3, r1
 80070c2:	4641      	mov	r1, r8
 80070c4:	1a51      	subs	r1, r2, r1
 80070c6:	60b9      	str	r1, [r7, #8]
 80070c8:	4649      	mov	r1, r9
 80070ca:	eb63 0301 	sbc.w	r3, r3, r1
 80070ce:	60fb      	str	r3, [r7, #12]
 80070d0:	f04f 0200 	mov.w	r2, #0
 80070d4:	f04f 0300 	mov.w	r3, #0
 80070d8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80070dc:	4659      	mov	r1, fp
 80070de:	018b      	lsls	r3, r1, #6
 80070e0:	4651      	mov	r1, sl
 80070e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80070e6:	4651      	mov	r1, sl
 80070e8:	018a      	lsls	r2, r1, #6
 80070ea:	4651      	mov	r1, sl
 80070ec:	1a54      	subs	r4, r2, r1
 80070ee:	4659      	mov	r1, fp
 80070f0:	eb63 0501 	sbc.w	r5, r3, r1
 80070f4:	f04f 0200 	mov.w	r2, #0
 80070f8:	f04f 0300 	mov.w	r3, #0
 80070fc:	00eb      	lsls	r3, r5, #3
 80070fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007102:	00e2      	lsls	r2, r4, #3
 8007104:	4614      	mov	r4, r2
 8007106:	461d      	mov	r5, r3
 8007108:	4643      	mov	r3, r8
 800710a:	18e3      	adds	r3, r4, r3
 800710c:	603b      	str	r3, [r7, #0]
 800710e:	464b      	mov	r3, r9
 8007110:	eb45 0303 	adc.w	r3, r5, r3
 8007114:	607b      	str	r3, [r7, #4]
 8007116:	f04f 0200 	mov.w	r2, #0
 800711a:	f04f 0300 	mov.w	r3, #0
 800711e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007122:	4629      	mov	r1, r5
 8007124:	028b      	lsls	r3, r1, #10
 8007126:	4621      	mov	r1, r4
 8007128:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800712c:	4621      	mov	r1, r4
 800712e:	028a      	lsls	r2, r1, #10
 8007130:	4610      	mov	r0, r2
 8007132:	4619      	mov	r1, r3
 8007134:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007138:	2200      	movs	r2, #0
 800713a:	64bb      	str	r3, [r7, #72]	; 0x48
 800713c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800713e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007142:	f7f9 f91d 	bl	8000380 <__aeabi_uldivmod>
 8007146:	4602      	mov	r2, r0
 8007148:	460b      	mov	r3, r1
 800714a:	4613      	mov	r3, r2
 800714c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007150:	4b0d      	ldr	r3, [pc, #52]	; (8007188 <HAL_RCC_GetSysClockFreq+0x458>)
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	0f1b      	lsrs	r3, r3, #28
 8007156:	f003 0307 	and.w	r3, r3, #7
 800715a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800715e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007162:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007166:	fbb2 f3f3 	udiv	r3, r2, r3
 800716a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800716e:	e003      	b.n	8007178 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007170:	4b06      	ldr	r3, [pc, #24]	; (800718c <HAL_RCC_GetSysClockFreq+0x45c>)
 8007172:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007176:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007178:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800717c:	4618      	mov	r0, r3
 800717e:	37b8      	adds	r7, #184	; 0xb8
 8007180:	46bd      	mov	sp, r7
 8007182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007186:	bf00      	nop
 8007188:	40023800 	.word	0x40023800
 800718c:	00f42400 	.word	0x00f42400

08007190 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d101      	bne.n	80071a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	e28d      	b.n	80076be <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f000 8083 	beq.w	80072b6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80071b0:	4b94      	ldr	r3, [pc, #592]	; (8007404 <HAL_RCC_OscConfig+0x274>)
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	f003 030c 	and.w	r3, r3, #12
 80071b8:	2b04      	cmp	r3, #4
 80071ba:	d019      	beq.n	80071f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80071bc:	4b91      	ldr	r3, [pc, #580]	; (8007404 <HAL_RCC_OscConfig+0x274>)
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80071c4:	2b08      	cmp	r3, #8
 80071c6:	d106      	bne.n	80071d6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80071c8:	4b8e      	ldr	r3, [pc, #568]	; (8007404 <HAL_RCC_OscConfig+0x274>)
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071d4:	d00c      	beq.n	80071f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071d6:	4b8b      	ldr	r3, [pc, #556]	; (8007404 <HAL_RCC_OscConfig+0x274>)
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80071de:	2b0c      	cmp	r3, #12
 80071e0:	d112      	bne.n	8007208 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071e2:	4b88      	ldr	r3, [pc, #544]	; (8007404 <HAL_RCC_OscConfig+0x274>)
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071ee:	d10b      	bne.n	8007208 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071f0:	4b84      	ldr	r3, [pc, #528]	; (8007404 <HAL_RCC_OscConfig+0x274>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d05b      	beq.n	80072b4 <HAL_RCC_OscConfig+0x124>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d157      	bne.n	80072b4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	e25a      	b.n	80076be <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007210:	d106      	bne.n	8007220 <HAL_RCC_OscConfig+0x90>
 8007212:	4b7c      	ldr	r3, [pc, #496]	; (8007404 <HAL_RCC_OscConfig+0x274>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a7b      	ldr	r2, [pc, #492]	; (8007404 <HAL_RCC_OscConfig+0x274>)
 8007218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800721c:	6013      	str	r3, [r2, #0]
 800721e:	e01d      	b.n	800725c <HAL_RCC_OscConfig+0xcc>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007228:	d10c      	bne.n	8007244 <HAL_RCC_OscConfig+0xb4>
 800722a:	4b76      	ldr	r3, [pc, #472]	; (8007404 <HAL_RCC_OscConfig+0x274>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a75      	ldr	r2, [pc, #468]	; (8007404 <HAL_RCC_OscConfig+0x274>)
 8007230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007234:	6013      	str	r3, [r2, #0]
 8007236:	4b73      	ldr	r3, [pc, #460]	; (8007404 <HAL_RCC_OscConfig+0x274>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a72      	ldr	r2, [pc, #456]	; (8007404 <HAL_RCC_OscConfig+0x274>)
 800723c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007240:	6013      	str	r3, [r2, #0]
 8007242:	e00b      	b.n	800725c <HAL_RCC_OscConfig+0xcc>
 8007244:	4b6f      	ldr	r3, [pc, #444]	; (8007404 <HAL_RCC_OscConfig+0x274>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a6e      	ldr	r2, [pc, #440]	; (8007404 <HAL_RCC_OscConfig+0x274>)
 800724a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800724e:	6013      	str	r3, [r2, #0]
 8007250:	4b6c      	ldr	r3, [pc, #432]	; (8007404 <HAL_RCC_OscConfig+0x274>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a6b      	ldr	r2, [pc, #428]	; (8007404 <HAL_RCC_OscConfig+0x274>)
 8007256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800725a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d013      	beq.n	800728c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007264:	f7fc fa3e 	bl	80036e4 <HAL_GetTick>
 8007268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800726a:	e008      	b.n	800727e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800726c:	f7fc fa3a 	bl	80036e4 <HAL_GetTick>
 8007270:	4602      	mov	r2, r0
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	2b64      	cmp	r3, #100	; 0x64
 8007278:	d901      	bls.n	800727e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e21f      	b.n	80076be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800727e:	4b61      	ldr	r3, [pc, #388]	; (8007404 <HAL_RCC_OscConfig+0x274>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007286:	2b00      	cmp	r3, #0
 8007288:	d0f0      	beq.n	800726c <HAL_RCC_OscConfig+0xdc>
 800728a:	e014      	b.n	80072b6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800728c:	f7fc fa2a 	bl	80036e4 <HAL_GetTick>
 8007290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007292:	e008      	b.n	80072a6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007294:	f7fc fa26 	bl	80036e4 <HAL_GetTick>
 8007298:	4602      	mov	r2, r0
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	2b64      	cmp	r3, #100	; 0x64
 80072a0:	d901      	bls.n	80072a6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	e20b      	b.n	80076be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072a6:	4b57      	ldr	r3, [pc, #348]	; (8007404 <HAL_RCC_OscConfig+0x274>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d1f0      	bne.n	8007294 <HAL_RCC_OscConfig+0x104>
 80072b2:	e000      	b.n	80072b6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0302 	and.w	r3, r3, #2
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d06f      	beq.n	80073a2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80072c2:	4b50      	ldr	r3, [pc, #320]	; (8007404 <HAL_RCC_OscConfig+0x274>)
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f003 030c 	and.w	r3, r3, #12
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d017      	beq.n	80072fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80072ce:	4b4d      	ldr	r3, [pc, #308]	; (8007404 <HAL_RCC_OscConfig+0x274>)
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80072d6:	2b08      	cmp	r3, #8
 80072d8:	d105      	bne.n	80072e6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80072da:	4b4a      	ldr	r3, [pc, #296]	; (8007404 <HAL_RCC_OscConfig+0x274>)
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00b      	beq.n	80072fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072e6:	4b47      	ldr	r3, [pc, #284]	; (8007404 <HAL_RCC_OscConfig+0x274>)
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80072ee:	2b0c      	cmp	r3, #12
 80072f0:	d11c      	bne.n	800732c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072f2:	4b44      	ldr	r3, [pc, #272]	; (8007404 <HAL_RCC_OscConfig+0x274>)
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d116      	bne.n	800732c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072fe:	4b41      	ldr	r3, [pc, #260]	; (8007404 <HAL_RCC_OscConfig+0x274>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 0302 	and.w	r3, r3, #2
 8007306:	2b00      	cmp	r3, #0
 8007308:	d005      	beq.n	8007316 <HAL_RCC_OscConfig+0x186>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	2b01      	cmp	r3, #1
 8007310:	d001      	beq.n	8007316 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e1d3      	b.n	80076be <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007316:	4b3b      	ldr	r3, [pc, #236]	; (8007404 <HAL_RCC_OscConfig+0x274>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	00db      	lsls	r3, r3, #3
 8007324:	4937      	ldr	r1, [pc, #220]	; (8007404 <HAL_RCC_OscConfig+0x274>)
 8007326:	4313      	orrs	r3, r2
 8007328:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800732a:	e03a      	b.n	80073a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d020      	beq.n	8007376 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007334:	4b34      	ldr	r3, [pc, #208]	; (8007408 <HAL_RCC_OscConfig+0x278>)
 8007336:	2201      	movs	r2, #1
 8007338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800733a:	f7fc f9d3 	bl	80036e4 <HAL_GetTick>
 800733e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007340:	e008      	b.n	8007354 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007342:	f7fc f9cf 	bl	80036e4 <HAL_GetTick>
 8007346:	4602      	mov	r2, r0
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	1ad3      	subs	r3, r2, r3
 800734c:	2b02      	cmp	r3, #2
 800734e:	d901      	bls.n	8007354 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007350:	2303      	movs	r3, #3
 8007352:	e1b4      	b.n	80076be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007354:	4b2b      	ldr	r3, [pc, #172]	; (8007404 <HAL_RCC_OscConfig+0x274>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0302 	and.w	r3, r3, #2
 800735c:	2b00      	cmp	r3, #0
 800735e:	d0f0      	beq.n	8007342 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007360:	4b28      	ldr	r3, [pc, #160]	; (8007404 <HAL_RCC_OscConfig+0x274>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	00db      	lsls	r3, r3, #3
 800736e:	4925      	ldr	r1, [pc, #148]	; (8007404 <HAL_RCC_OscConfig+0x274>)
 8007370:	4313      	orrs	r3, r2
 8007372:	600b      	str	r3, [r1, #0]
 8007374:	e015      	b.n	80073a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007376:	4b24      	ldr	r3, [pc, #144]	; (8007408 <HAL_RCC_OscConfig+0x278>)
 8007378:	2200      	movs	r2, #0
 800737a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800737c:	f7fc f9b2 	bl	80036e4 <HAL_GetTick>
 8007380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007382:	e008      	b.n	8007396 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007384:	f7fc f9ae 	bl	80036e4 <HAL_GetTick>
 8007388:	4602      	mov	r2, r0
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	2b02      	cmp	r3, #2
 8007390:	d901      	bls.n	8007396 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	e193      	b.n	80076be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007396:	4b1b      	ldr	r3, [pc, #108]	; (8007404 <HAL_RCC_OscConfig+0x274>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 0302 	and.w	r3, r3, #2
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1f0      	bne.n	8007384 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 0308 	and.w	r3, r3, #8
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d036      	beq.n	800741c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d016      	beq.n	80073e4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073b6:	4b15      	ldr	r3, [pc, #84]	; (800740c <HAL_RCC_OscConfig+0x27c>)
 80073b8:	2201      	movs	r2, #1
 80073ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073bc:	f7fc f992 	bl	80036e4 <HAL_GetTick>
 80073c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073c2:	e008      	b.n	80073d6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073c4:	f7fc f98e 	bl	80036e4 <HAL_GetTick>
 80073c8:	4602      	mov	r2, r0
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d901      	bls.n	80073d6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80073d2:	2303      	movs	r3, #3
 80073d4:	e173      	b.n	80076be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073d6:	4b0b      	ldr	r3, [pc, #44]	; (8007404 <HAL_RCC_OscConfig+0x274>)
 80073d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073da:	f003 0302 	and.w	r3, r3, #2
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d0f0      	beq.n	80073c4 <HAL_RCC_OscConfig+0x234>
 80073e2:	e01b      	b.n	800741c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073e4:	4b09      	ldr	r3, [pc, #36]	; (800740c <HAL_RCC_OscConfig+0x27c>)
 80073e6:	2200      	movs	r2, #0
 80073e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073ea:	f7fc f97b 	bl	80036e4 <HAL_GetTick>
 80073ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073f0:	e00e      	b.n	8007410 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073f2:	f7fc f977 	bl	80036e4 <HAL_GetTick>
 80073f6:	4602      	mov	r2, r0
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d907      	bls.n	8007410 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007400:	2303      	movs	r3, #3
 8007402:	e15c      	b.n	80076be <HAL_RCC_OscConfig+0x52e>
 8007404:	40023800 	.word	0x40023800
 8007408:	42470000 	.word	0x42470000
 800740c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007410:	4b8a      	ldr	r3, [pc, #552]	; (800763c <HAL_RCC_OscConfig+0x4ac>)
 8007412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007414:	f003 0302 	and.w	r3, r3, #2
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1ea      	bne.n	80073f2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 0304 	and.w	r3, r3, #4
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 8097 	beq.w	8007558 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800742a:	2300      	movs	r3, #0
 800742c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800742e:	4b83      	ldr	r3, [pc, #524]	; (800763c <HAL_RCC_OscConfig+0x4ac>)
 8007430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10f      	bne.n	800745a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800743a:	2300      	movs	r3, #0
 800743c:	60bb      	str	r3, [r7, #8]
 800743e:	4b7f      	ldr	r3, [pc, #508]	; (800763c <HAL_RCC_OscConfig+0x4ac>)
 8007440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007442:	4a7e      	ldr	r2, [pc, #504]	; (800763c <HAL_RCC_OscConfig+0x4ac>)
 8007444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007448:	6413      	str	r3, [r2, #64]	; 0x40
 800744a:	4b7c      	ldr	r3, [pc, #496]	; (800763c <HAL_RCC_OscConfig+0x4ac>)
 800744c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007452:	60bb      	str	r3, [r7, #8]
 8007454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007456:	2301      	movs	r3, #1
 8007458:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800745a:	4b79      	ldr	r3, [pc, #484]	; (8007640 <HAL_RCC_OscConfig+0x4b0>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007462:	2b00      	cmp	r3, #0
 8007464:	d118      	bne.n	8007498 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007466:	4b76      	ldr	r3, [pc, #472]	; (8007640 <HAL_RCC_OscConfig+0x4b0>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a75      	ldr	r2, [pc, #468]	; (8007640 <HAL_RCC_OscConfig+0x4b0>)
 800746c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007472:	f7fc f937 	bl	80036e4 <HAL_GetTick>
 8007476:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007478:	e008      	b.n	800748c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800747a:	f7fc f933 	bl	80036e4 <HAL_GetTick>
 800747e:	4602      	mov	r2, r0
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	2b02      	cmp	r3, #2
 8007486:	d901      	bls.n	800748c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e118      	b.n	80076be <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800748c:	4b6c      	ldr	r3, [pc, #432]	; (8007640 <HAL_RCC_OscConfig+0x4b0>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007494:	2b00      	cmp	r3, #0
 8007496:	d0f0      	beq.n	800747a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d106      	bne.n	80074ae <HAL_RCC_OscConfig+0x31e>
 80074a0:	4b66      	ldr	r3, [pc, #408]	; (800763c <HAL_RCC_OscConfig+0x4ac>)
 80074a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074a4:	4a65      	ldr	r2, [pc, #404]	; (800763c <HAL_RCC_OscConfig+0x4ac>)
 80074a6:	f043 0301 	orr.w	r3, r3, #1
 80074aa:	6713      	str	r3, [r2, #112]	; 0x70
 80074ac:	e01c      	b.n	80074e8 <HAL_RCC_OscConfig+0x358>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	2b05      	cmp	r3, #5
 80074b4:	d10c      	bne.n	80074d0 <HAL_RCC_OscConfig+0x340>
 80074b6:	4b61      	ldr	r3, [pc, #388]	; (800763c <HAL_RCC_OscConfig+0x4ac>)
 80074b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ba:	4a60      	ldr	r2, [pc, #384]	; (800763c <HAL_RCC_OscConfig+0x4ac>)
 80074bc:	f043 0304 	orr.w	r3, r3, #4
 80074c0:	6713      	str	r3, [r2, #112]	; 0x70
 80074c2:	4b5e      	ldr	r3, [pc, #376]	; (800763c <HAL_RCC_OscConfig+0x4ac>)
 80074c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074c6:	4a5d      	ldr	r2, [pc, #372]	; (800763c <HAL_RCC_OscConfig+0x4ac>)
 80074c8:	f043 0301 	orr.w	r3, r3, #1
 80074cc:	6713      	str	r3, [r2, #112]	; 0x70
 80074ce:	e00b      	b.n	80074e8 <HAL_RCC_OscConfig+0x358>
 80074d0:	4b5a      	ldr	r3, [pc, #360]	; (800763c <HAL_RCC_OscConfig+0x4ac>)
 80074d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074d4:	4a59      	ldr	r2, [pc, #356]	; (800763c <HAL_RCC_OscConfig+0x4ac>)
 80074d6:	f023 0301 	bic.w	r3, r3, #1
 80074da:	6713      	str	r3, [r2, #112]	; 0x70
 80074dc:	4b57      	ldr	r3, [pc, #348]	; (800763c <HAL_RCC_OscConfig+0x4ac>)
 80074de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074e0:	4a56      	ldr	r2, [pc, #344]	; (800763c <HAL_RCC_OscConfig+0x4ac>)
 80074e2:	f023 0304 	bic.w	r3, r3, #4
 80074e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d015      	beq.n	800751c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074f0:	f7fc f8f8 	bl	80036e4 <HAL_GetTick>
 80074f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074f6:	e00a      	b.n	800750e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074f8:	f7fc f8f4 	bl	80036e4 <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	f241 3288 	movw	r2, #5000	; 0x1388
 8007506:	4293      	cmp	r3, r2
 8007508:	d901      	bls.n	800750e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e0d7      	b.n	80076be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800750e:	4b4b      	ldr	r3, [pc, #300]	; (800763c <HAL_RCC_OscConfig+0x4ac>)
 8007510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007512:	f003 0302 	and.w	r3, r3, #2
 8007516:	2b00      	cmp	r3, #0
 8007518:	d0ee      	beq.n	80074f8 <HAL_RCC_OscConfig+0x368>
 800751a:	e014      	b.n	8007546 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800751c:	f7fc f8e2 	bl	80036e4 <HAL_GetTick>
 8007520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007522:	e00a      	b.n	800753a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007524:	f7fc f8de 	bl	80036e4 <HAL_GetTick>
 8007528:	4602      	mov	r2, r0
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007532:	4293      	cmp	r3, r2
 8007534:	d901      	bls.n	800753a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e0c1      	b.n	80076be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800753a:	4b40      	ldr	r3, [pc, #256]	; (800763c <HAL_RCC_OscConfig+0x4ac>)
 800753c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800753e:	f003 0302 	and.w	r3, r3, #2
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1ee      	bne.n	8007524 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007546:	7dfb      	ldrb	r3, [r7, #23]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d105      	bne.n	8007558 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800754c:	4b3b      	ldr	r3, [pc, #236]	; (800763c <HAL_RCC_OscConfig+0x4ac>)
 800754e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007550:	4a3a      	ldr	r2, [pc, #232]	; (800763c <HAL_RCC_OscConfig+0x4ac>)
 8007552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007556:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	699b      	ldr	r3, [r3, #24]
 800755c:	2b00      	cmp	r3, #0
 800755e:	f000 80ad 	beq.w	80076bc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007562:	4b36      	ldr	r3, [pc, #216]	; (800763c <HAL_RCC_OscConfig+0x4ac>)
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f003 030c 	and.w	r3, r3, #12
 800756a:	2b08      	cmp	r3, #8
 800756c:	d060      	beq.n	8007630 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	2b02      	cmp	r3, #2
 8007574:	d145      	bne.n	8007602 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007576:	4b33      	ldr	r3, [pc, #204]	; (8007644 <HAL_RCC_OscConfig+0x4b4>)
 8007578:	2200      	movs	r2, #0
 800757a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800757c:	f7fc f8b2 	bl	80036e4 <HAL_GetTick>
 8007580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007582:	e008      	b.n	8007596 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007584:	f7fc f8ae 	bl	80036e4 <HAL_GetTick>
 8007588:	4602      	mov	r2, r0
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	2b02      	cmp	r3, #2
 8007590:	d901      	bls.n	8007596 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007592:	2303      	movs	r3, #3
 8007594:	e093      	b.n	80076be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007596:	4b29      	ldr	r3, [pc, #164]	; (800763c <HAL_RCC_OscConfig+0x4ac>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d1f0      	bne.n	8007584 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	69da      	ldr	r2, [r3, #28]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6a1b      	ldr	r3, [r3, #32]
 80075aa:	431a      	orrs	r2, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b0:	019b      	lsls	r3, r3, #6
 80075b2:	431a      	orrs	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b8:	085b      	lsrs	r3, r3, #1
 80075ba:	3b01      	subs	r3, #1
 80075bc:	041b      	lsls	r3, r3, #16
 80075be:	431a      	orrs	r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c4:	061b      	lsls	r3, r3, #24
 80075c6:	431a      	orrs	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075cc:	071b      	lsls	r3, r3, #28
 80075ce:	491b      	ldr	r1, [pc, #108]	; (800763c <HAL_RCC_OscConfig+0x4ac>)
 80075d0:	4313      	orrs	r3, r2
 80075d2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075d4:	4b1b      	ldr	r3, [pc, #108]	; (8007644 <HAL_RCC_OscConfig+0x4b4>)
 80075d6:	2201      	movs	r2, #1
 80075d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075da:	f7fc f883 	bl	80036e4 <HAL_GetTick>
 80075de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075e0:	e008      	b.n	80075f4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075e2:	f7fc f87f 	bl	80036e4 <HAL_GetTick>
 80075e6:	4602      	mov	r2, r0
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d901      	bls.n	80075f4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80075f0:	2303      	movs	r3, #3
 80075f2:	e064      	b.n	80076be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075f4:	4b11      	ldr	r3, [pc, #68]	; (800763c <HAL_RCC_OscConfig+0x4ac>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d0f0      	beq.n	80075e2 <HAL_RCC_OscConfig+0x452>
 8007600:	e05c      	b.n	80076bc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007602:	4b10      	ldr	r3, [pc, #64]	; (8007644 <HAL_RCC_OscConfig+0x4b4>)
 8007604:	2200      	movs	r2, #0
 8007606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007608:	f7fc f86c 	bl	80036e4 <HAL_GetTick>
 800760c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800760e:	e008      	b.n	8007622 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007610:	f7fc f868 	bl	80036e4 <HAL_GetTick>
 8007614:	4602      	mov	r2, r0
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	2b02      	cmp	r3, #2
 800761c:	d901      	bls.n	8007622 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800761e:	2303      	movs	r3, #3
 8007620:	e04d      	b.n	80076be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007622:	4b06      	ldr	r3, [pc, #24]	; (800763c <HAL_RCC_OscConfig+0x4ac>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1f0      	bne.n	8007610 <HAL_RCC_OscConfig+0x480>
 800762e:	e045      	b.n	80076bc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d107      	bne.n	8007648 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	e040      	b.n	80076be <HAL_RCC_OscConfig+0x52e>
 800763c:	40023800 	.word	0x40023800
 8007640:	40007000 	.word	0x40007000
 8007644:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007648:	4b1f      	ldr	r3, [pc, #124]	; (80076c8 <HAL_RCC_OscConfig+0x538>)
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d030      	beq.n	80076b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007660:	429a      	cmp	r2, r3
 8007662:	d129      	bne.n	80076b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800766e:	429a      	cmp	r2, r3
 8007670:	d122      	bne.n	80076b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007678:	4013      	ands	r3, r2
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800767e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007680:	4293      	cmp	r3, r2
 8007682:	d119      	bne.n	80076b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800768e:	085b      	lsrs	r3, r3, #1
 8007690:	3b01      	subs	r3, #1
 8007692:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007694:	429a      	cmp	r2, r3
 8007696:	d10f      	bne.n	80076b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d107      	bne.n	80076b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d001      	beq.n	80076bc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	e000      	b.n	80076be <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3718      	adds	r7, #24
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	40023800 	.word	0x40023800

080076cc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d101      	bne.n	80076e2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e066      	b.n	80077b0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	7f5b      	ldrb	r3, [r3, #29]
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d105      	bne.n	80076f8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f7fb fd30 	bl	8003158 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2202      	movs	r2, #2
 80076fc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	22ca      	movs	r2, #202	; 0xca
 8007704:	625a      	str	r2, [r3, #36]	; 0x24
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2253      	movs	r2, #83	; 0x53
 800770c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fa45 	bl	8007b9e <RTC_EnterInitMode>
 8007714:	4603      	mov	r3, r0
 8007716:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007718:	7bfb      	ldrb	r3, [r7, #15]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d12c      	bne.n	8007778 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	6812      	ldr	r2, [r2, #0]
 8007728:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800772c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007730:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	6899      	ldr	r1, [r3, #8]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685a      	ldr	r2, [r3, #4]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	431a      	orrs	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	431a      	orrs	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	430a      	orrs	r2, r1
 800774e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	68d2      	ldr	r2, [r2, #12]
 8007758:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	6919      	ldr	r1, [r3, #16]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	041a      	lsls	r2, r3, #16
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	430a      	orrs	r2, r1
 800776c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fa4c 	bl	8007c0c <RTC_ExitInitMode>
 8007774:	4603      	mov	r3, r0
 8007776:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007778:	7bfb      	ldrb	r3, [r7, #15]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d113      	bne.n	80077a6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800778c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	699a      	ldr	r2, [r3, #24]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	430a      	orrs	r2, r1
 800779e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	22ff      	movs	r2, #255	; 0xff
 80077ac:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80077ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80077b8:	b590      	push	{r4, r7, lr}
 80077ba:	b087      	sub	sp, #28
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80077c4:	2300      	movs	r3, #0
 80077c6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	7f1b      	ldrb	r3, [r3, #28]
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d101      	bne.n	80077d4 <HAL_RTC_SetTime+0x1c>
 80077d0:	2302      	movs	r3, #2
 80077d2:	e087      	b.n	80078e4 <HAL_RTC_SetTime+0x12c>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2201      	movs	r2, #1
 80077d8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2202      	movs	r2, #2
 80077de:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d126      	bne.n	8007834 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d102      	bne.n	80077fa <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	2200      	movs	r2, #0
 80077f8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	4618      	mov	r0, r3
 8007800:	f000 fa29 	bl	8007c56 <RTC_ByteToBcd2>
 8007804:	4603      	mov	r3, r0
 8007806:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	785b      	ldrb	r3, [r3, #1]
 800780c:	4618      	mov	r0, r3
 800780e:	f000 fa22 	bl	8007c56 <RTC_ByteToBcd2>
 8007812:	4603      	mov	r3, r0
 8007814:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007816:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	789b      	ldrb	r3, [r3, #2]
 800781c:	4618      	mov	r0, r3
 800781e:	f000 fa1a 	bl	8007c56 <RTC_ByteToBcd2>
 8007822:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007824:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	78db      	ldrb	r3, [r3, #3]
 800782c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800782e:	4313      	orrs	r3, r2
 8007830:	617b      	str	r3, [r7, #20]
 8007832:	e018      	b.n	8007866 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800783e:	2b00      	cmp	r3, #0
 8007840:	d102      	bne.n	8007848 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	2200      	movs	r2, #0
 8007846:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	785b      	ldrb	r3, [r3, #1]
 8007852:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007854:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8007856:	68ba      	ldr	r2, [r7, #8]
 8007858:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800785a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	78db      	ldrb	r3, [r3, #3]
 8007860:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007862:	4313      	orrs	r3, r2
 8007864:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	22ca      	movs	r2, #202	; 0xca
 800786c:	625a      	str	r2, [r3, #36]	; 0x24
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2253      	movs	r2, #83	; 0x53
 8007874:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f000 f991 	bl	8007b9e <RTC_EnterInitMode>
 800787c:	4603      	mov	r3, r0
 800787e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007880:	7cfb      	ldrb	r3, [r7, #19]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d120      	bne.n	80078c8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007890:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007894:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	689a      	ldr	r2, [r3, #8]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80078a4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	6899      	ldr	r1, [r3, #8]
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	68da      	ldr	r2, [r3, #12]
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	431a      	orrs	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	430a      	orrs	r2, r1
 80078bc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	f000 f9a4 	bl	8007c0c <RTC_ExitInitMode>
 80078c4:	4603      	mov	r3, r0
 80078c6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80078c8:	7cfb      	ldrb	r3, [r7, #19]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d102      	bne.n	80078d4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2201      	movs	r2, #1
 80078d2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	22ff      	movs	r2, #255	; 0xff
 80078da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	771a      	strb	r2, [r3, #28]

  return status;
 80078e2:	7cfb      	ldrb	r3, [r7, #19]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	371c      	adds	r7, #28
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd90      	pop	{r4, r7, pc}

080078ec <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b086      	sub	sp, #24
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80078f8:	2300      	movs	r3, #0
 80078fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800791e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007922:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	0c1b      	lsrs	r3, r3, #16
 8007928:	b2db      	uxtb	r3, r3
 800792a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800792e:	b2da      	uxtb	r2, r3
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	0a1b      	lsrs	r3, r3, #8
 8007938:	b2db      	uxtb	r3, r3
 800793a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800793e:	b2da      	uxtb	r2, r3
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	b2db      	uxtb	r3, r3
 8007948:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800794c:	b2da      	uxtb	r2, r3
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	0d9b      	lsrs	r3, r3, #22
 8007956:	b2db      	uxtb	r3, r3
 8007958:	f003 0301 	and.w	r3, r3, #1
 800795c:	b2da      	uxtb	r2, r3
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d11a      	bne.n	800799e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	4618      	mov	r0, r3
 800796e:	f000 f98f 	bl	8007c90 <RTC_Bcd2ToByte>
 8007972:	4603      	mov	r3, r0
 8007974:	461a      	mov	r2, r3
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	785b      	ldrb	r3, [r3, #1]
 800797e:	4618      	mov	r0, r3
 8007980:	f000 f986 	bl	8007c90 <RTC_Bcd2ToByte>
 8007984:	4603      	mov	r3, r0
 8007986:	461a      	mov	r2, r3
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	789b      	ldrb	r3, [r3, #2]
 8007990:	4618      	mov	r0, r3
 8007992:	f000 f97d 	bl	8007c90 <RTC_Bcd2ToByte>
 8007996:	4603      	mov	r3, r0
 8007998:	461a      	mov	r2, r3
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3718      	adds	r7, #24
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80079a8:	b590      	push	{r4, r7, lr}
 80079aa:	b087      	sub	sp, #28
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80079b4:	2300      	movs	r3, #0
 80079b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	7f1b      	ldrb	r3, [r3, #28]
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d101      	bne.n	80079c4 <HAL_RTC_SetDate+0x1c>
 80079c0:	2302      	movs	r3, #2
 80079c2:	e071      	b.n	8007aa8 <HAL_RTC_SetDate+0x100>
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2201      	movs	r2, #1
 80079c8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2202      	movs	r2, #2
 80079ce:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10e      	bne.n	80079f4 <HAL_RTC_SetDate+0x4c>
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	785b      	ldrb	r3, [r3, #1]
 80079da:	f003 0310 	and.w	r3, r3, #16
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d008      	beq.n	80079f4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	785b      	ldrb	r3, [r3, #1]
 80079e6:	f023 0310 	bic.w	r3, r3, #16
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	330a      	adds	r3, #10
 80079ee:	b2da      	uxtb	r2, r3
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d11c      	bne.n	8007a34 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	78db      	ldrb	r3, [r3, #3]
 80079fe:	4618      	mov	r0, r3
 8007a00:	f000 f929 	bl	8007c56 <RTC_ByteToBcd2>
 8007a04:	4603      	mov	r3, r0
 8007a06:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	785b      	ldrb	r3, [r3, #1]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f000 f922 	bl	8007c56 <RTC_ByteToBcd2>
 8007a12:	4603      	mov	r3, r0
 8007a14:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007a16:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	789b      	ldrb	r3, [r3, #2]
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f000 f91a 	bl	8007c56 <RTC_ByteToBcd2>
 8007a22:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007a24:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	617b      	str	r3, [r7, #20]
 8007a32:	e00e      	b.n	8007a52 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	78db      	ldrb	r3, [r3, #3]
 8007a38:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	785b      	ldrb	r3, [r3, #1]
 8007a3e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007a40:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8007a42:	68ba      	ldr	r2, [r7, #8]
 8007a44:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007a46:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	22ca      	movs	r2, #202	; 0xca
 8007a58:	625a      	str	r2, [r3, #36]	; 0x24
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2253      	movs	r2, #83	; 0x53
 8007a60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f000 f89b 	bl	8007b9e <RTC_EnterInitMode>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007a6c:	7cfb      	ldrb	r3, [r7, #19]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10c      	bne.n	8007a8c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007a7c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007a80:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	f000 f8c2 	bl	8007c0c <RTC_ExitInitMode>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007a8c:	7cfb      	ldrb	r3, [r7, #19]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d102      	bne.n	8007a98 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2201      	movs	r2, #1
 8007a96:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	22ff      	movs	r2, #255	; 0xff
 8007a9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	771a      	strb	r2, [r3, #28]

  return status;
 8007aa6:	7cfb      	ldrb	r3, [r7, #19]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	371c      	adds	r7, #28
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd90      	pop	{r4, r7, pc}

08007ab0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007abc:	2300      	movs	r3, #0
 8007abe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007aca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007ace:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	0c1b      	lsrs	r3, r3, #16
 8007ad4:	b2da      	uxtb	r2, r3
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	0a1b      	lsrs	r3, r3, #8
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	f003 031f 	and.w	r3, r3, #31
 8007ae4:	b2da      	uxtb	r2, r3
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007af2:	b2da      	uxtb	r2, r3
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	0b5b      	lsrs	r3, r3, #13
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	f003 0307 	and.w	r3, r3, #7
 8007b02:	b2da      	uxtb	r2, r3
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d11a      	bne.n	8007b44 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	78db      	ldrb	r3, [r3, #3]
 8007b12:	4618      	mov	r0, r3
 8007b14:	f000 f8bc 	bl	8007c90 <RTC_Bcd2ToByte>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	785b      	ldrb	r3, [r3, #1]
 8007b24:	4618      	mov	r0, r3
 8007b26:	f000 f8b3 	bl	8007c90 <RTC_Bcd2ToByte>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	789b      	ldrb	r3, [r3, #2]
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 f8aa 	bl	8007c90 <RTC_Bcd2ToByte>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	461a      	mov	r2, r3
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3718      	adds	r7, #24
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b084      	sub	sp, #16
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b56:	2300      	movs	r3, #0
 8007b58:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68da      	ldr	r2, [r3, #12]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007b68:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007b6a:	f7fb fdbb 	bl	80036e4 <HAL_GetTick>
 8007b6e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007b70:	e009      	b.n	8007b86 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007b72:	f7fb fdb7 	bl	80036e4 <HAL_GetTick>
 8007b76:	4602      	mov	r2, r0
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b80:	d901      	bls.n	8007b86 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e007      	b.n	8007b96 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	f003 0320 	and.w	r3, r3, #32
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d0ee      	beq.n	8007b72 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b084      	sub	sp, #16
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007baa:	2300      	movs	r3, #0
 8007bac:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d122      	bne.n	8007c02 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68da      	ldr	r2, [r3, #12]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007bca:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007bcc:	f7fb fd8a 	bl	80036e4 <HAL_GetTick>
 8007bd0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007bd2:	e00c      	b.n	8007bee <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007bd4:	f7fb fd86 	bl	80036e4 <HAL_GetTick>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007be2:	d904      	bls.n	8007bee <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2204      	movs	r2, #4
 8007be8:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d102      	bne.n	8007c02 <RTC_EnterInitMode+0x64>
 8007bfc:	7bfb      	ldrb	r3, [r7, #15]
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d1e8      	bne.n	8007bd4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3710      	adds	r7, #16
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c14:	2300      	movs	r3, #0
 8007c16:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68da      	ldr	r2, [r3, #12]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c26:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	f003 0320 	and.w	r3, r3, #32
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d10a      	bne.n	8007c4c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f7ff ff89 	bl	8007b4e <HAL_RTC_WaitForSynchro>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d004      	beq.n	8007c4c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2204      	movs	r2, #4
 8007c46:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8007c56:	b480      	push	{r7}
 8007c58:	b085      	sub	sp, #20
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8007c60:	2300      	movs	r3, #0
 8007c62:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8007c64:	e005      	b.n	8007c72 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007c66:	7bfb      	ldrb	r3, [r7, #15]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8007c6c:	79fb      	ldrb	r3, [r7, #7]
 8007c6e:	3b0a      	subs	r3, #10
 8007c70:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007c72:	79fb      	ldrb	r3, [r7, #7]
 8007c74:	2b09      	cmp	r3, #9
 8007c76:	d8f6      	bhi.n	8007c66 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8007c78:	7bfb      	ldrb	r3, [r7, #15]
 8007c7a:	011b      	lsls	r3, r3, #4
 8007c7c:	b2da      	uxtb	r2, r3
 8007c7e:	79fb      	ldrb	r3, [r7, #7]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	b2db      	uxtb	r3, r3
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3714      	adds	r7, #20
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	4603      	mov	r3, r0
 8007c98:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8007c9e:	79fb      	ldrb	r3, [r7, #7]
 8007ca0:	091b      	lsrs	r3, r3, #4
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	0092      	lsls	r2, r2, #2
 8007ca8:	4413      	add	r3, r2
 8007caa:	005b      	lsls	r3, r3, #1
 8007cac:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8007cae:	79fb      	ldrb	r3, [r7, #7]
 8007cb0:	f003 030f 	and.w	r3, r3, #15
 8007cb4:	b2da      	uxtb	r2, r3
 8007cb6:	7bfb      	ldrb	r3, [r7, #15]
 8007cb8:	4413      	add	r3, r2
 8007cba:	b2db      	uxtb	r3, r3
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3714      	adds	r7, #20
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b087      	sub	sp, #28
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	3350      	adds	r3, #80	; 0x50
 8007cde:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	697a      	ldr	r2, [r7, #20]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	601a      	str	r2, [r3, #0]
}
 8007cf0:	bf00      	nop
 8007cf2:	371c      	adds	r7, #28
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d101      	bne.n	8007d0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e041      	b.n	8007d92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d106      	bne.n	8007d28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f7fb fa44 	bl	80031b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2202      	movs	r2, #2
 8007d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	3304      	adds	r3, #4
 8007d38:	4619      	mov	r1, r3
 8007d3a:	4610      	mov	r0, r2
 8007d3c:	f000 fb4a 	bl	80083d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3708      	adds	r7, #8
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b082      	sub	sp, #8
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d101      	bne.n	8007dac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e041      	b.n	8007e30 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d106      	bne.n	8007dc6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 f839 	bl	8007e38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2202      	movs	r2, #2
 8007dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	3304      	adds	r3, #4
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	4610      	mov	r0, r2
 8007dda:	f000 fafb 	bl	80083d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2201      	movs	r2, #1
 8007de2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2201      	movs	r2, #1
 8007dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2201      	movs	r2, #1
 8007df2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2201      	movs	r2, #1
 8007e12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3708      	adds	r7, #8
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007e40:	bf00      	nop
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	f003 0302 	and.w	r3, r3, #2
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d122      	bne.n	8007ea8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	f003 0302 	and.w	r3, r3, #2
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d11b      	bne.n	8007ea8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f06f 0202 	mvn.w	r2, #2
 8007e78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	f003 0303 	and.w	r3, r3, #3
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d003      	beq.n	8007e96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fa81 	bl	8008396 <HAL_TIM_IC_CaptureCallback>
 8007e94:	e005      	b.n	8007ea2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 fa73 	bl	8008382 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 fa84 	bl	80083aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	f003 0304 	and.w	r3, r3, #4
 8007eb2:	2b04      	cmp	r3, #4
 8007eb4:	d122      	bne.n	8007efc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	f003 0304 	and.w	r3, r3, #4
 8007ec0:	2b04      	cmp	r3, #4
 8007ec2:	d11b      	bne.n	8007efc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f06f 0204 	mvn.w	r2, #4
 8007ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2202      	movs	r2, #2
 8007ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	699b      	ldr	r3, [r3, #24]
 8007eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d003      	beq.n	8007eea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 fa57 	bl	8008396 <HAL_TIM_IC_CaptureCallback>
 8007ee8:	e005      	b.n	8007ef6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fa49 	bl	8008382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 fa5a 	bl	80083aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	f003 0308 	and.w	r3, r3, #8
 8007f06:	2b08      	cmp	r3, #8
 8007f08:	d122      	bne.n	8007f50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	f003 0308 	and.w	r3, r3, #8
 8007f14:	2b08      	cmp	r3, #8
 8007f16:	d11b      	bne.n	8007f50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f06f 0208 	mvn.w	r2, #8
 8007f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2204      	movs	r2, #4
 8007f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	69db      	ldr	r3, [r3, #28]
 8007f2e:	f003 0303 	and.w	r3, r3, #3
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d003      	beq.n	8007f3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fa2d 	bl	8008396 <HAL_TIM_IC_CaptureCallback>
 8007f3c:	e005      	b.n	8007f4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 fa1f 	bl	8008382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 fa30 	bl	80083aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	f003 0310 	and.w	r3, r3, #16
 8007f5a:	2b10      	cmp	r3, #16
 8007f5c:	d122      	bne.n	8007fa4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	f003 0310 	and.w	r3, r3, #16
 8007f68:	2b10      	cmp	r3, #16
 8007f6a:	d11b      	bne.n	8007fa4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f06f 0210 	mvn.w	r2, #16
 8007f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2208      	movs	r2, #8
 8007f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	69db      	ldr	r3, [r3, #28]
 8007f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d003      	beq.n	8007f92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 fa03 	bl	8008396 <HAL_TIM_IC_CaptureCallback>
 8007f90:	e005      	b.n	8007f9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f9f5 	bl	8008382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fa06 	bl	80083aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	f003 0301 	and.w	r3, r3, #1
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d10e      	bne.n	8007fd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	f003 0301 	and.w	r3, r3, #1
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d107      	bne.n	8007fd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f06f 0201 	mvn.w	r2, #1
 8007fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 f9cf 	bl	800836e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fda:	2b80      	cmp	r3, #128	; 0x80
 8007fdc:	d10e      	bne.n	8007ffc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fe8:	2b80      	cmp	r3, #128	; 0x80
 8007fea:	d107      	bne.n	8007ffc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 fdae 	bl	8008b58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008006:	2b40      	cmp	r3, #64	; 0x40
 8008008:	d10e      	bne.n	8008028 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008014:	2b40      	cmp	r3, #64	; 0x40
 8008016:	d107      	bne.n	8008028 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f9cb 	bl	80083be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	f003 0320 	and.w	r3, r3, #32
 8008032:	2b20      	cmp	r3, #32
 8008034:	d10e      	bne.n	8008054 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	f003 0320 	and.w	r3, r3, #32
 8008040:	2b20      	cmp	r3, #32
 8008042:	d107      	bne.n	8008054 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f06f 0220 	mvn.w	r2, #32
 800804c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 fd78 	bl	8008b44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008054:	bf00      	nop
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b086      	sub	sp, #24
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008068:	2300      	movs	r3, #0
 800806a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008072:	2b01      	cmp	r3, #1
 8008074:	d101      	bne.n	800807a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008076:	2302      	movs	r3, #2
 8008078:	e0ae      	b.n	80081d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2201      	movs	r2, #1
 800807e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2b0c      	cmp	r3, #12
 8008086:	f200 809f 	bhi.w	80081c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800808a:	a201      	add	r2, pc, #4	; (adr r2, 8008090 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800808c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008090:	080080c5 	.word	0x080080c5
 8008094:	080081c9 	.word	0x080081c9
 8008098:	080081c9 	.word	0x080081c9
 800809c:	080081c9 	.word	0x080081c9
 80080a0:	08008105 	.word	0x08008105
 80080a4:	080081c9 	.word	0x080081c9
 80080a8:	080081c9 	.word	0x080081c9
 80080ac:	080081c9 	.word	0x080081c9
 80080b0:	08008147 	.word	0x08008147
 80080b4:	080081c9 	.word	0x080081c9
 80080b8:	080081c9 	.word	0x080081c9
 80080bc:	080081c9 	.word	0x080081c9
 80080c0:	08008187 	.word	0x08008187
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68b9      	ldr	r1, [r7, #8]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f000 fa22 	bl	8008514 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	699a      	ldr	r2, [r3, #24]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f042 0208 	orr.w	r2, r2, #8
 80080de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	699a      	ldr	r2, [r3, #24]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f022 0204 	bic.w	r2, r2, #4
 80080ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	6999      	ldr	r1, [r3, #24]
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	691a      	ldr	r2, [r3, #16]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	430a      	orrs	r2, r1
 8008100:	619a      	str	r2, [r3, #24]
      break;
 8008102:	e064      	b.n	80081ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68b9      	ldr	r1, [r7, #8]
 800810a:	4618      	mov	r0, r3
 800810c:	f000 fa72 	bl	80085f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	699a      	ldr	r2, [r3, #24]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800811e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	699a      	ldr	r2, [r3, #24]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800812e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	6999      	ldr	r1, [r3, #24]
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	021a      	lsls	r2, r3, #8
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	430a      	orrs	r2, r1
 8008142:	619a      	str	r2, [r3, #24]
      break;
 8008144:	e043      	b.n	80081ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	68b9      	ldr	r1, [r7, #8]
 800814c:	4618      	mov	r0, r3
 800814e:	f000 fac7 	bl	80086e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	69da      	ldr	r2, [r3, #28]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f042 0208 	orr.w	r2, r2, #8
 8008160:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	69da      	ldr	r2, [r3, #28]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f022 0204 	bic.w	r2, r2, #4
 8008170:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	69d9      	ldr	r1, [r3, #28]
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	691a      	ldr	r2, [r3, #16]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	430a      	orrs	r2, r1
 8008182:	61da      	str	r2, [r3, #28]
      break;
 8008184:	e023      	b.n	80081ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68b9      	ldr	r1, [r7, #8]
 800818c:	4618      	mov	r0, r3
 800818e:	f000 fb1b 	bl	80087c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	69da      	ldr	r2, [r3, #28]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	69da      	ldr	r2, [r3, #28]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	69d9      	ldr	r1, [r3, #28]
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	691b      	ldr	r3, [r3, #16]
 80081bc:	021a      	lsls	r2, r3, #8
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	430a      	orrs	r2, r1
 80081c4:	61da      	str	r2, [r3, #28]
      break;
 80081c6:	e002      	b.n	80081ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	75fb      	strb	r3, [r7, #23]
      break;
 80081cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80081d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3718      	adds	r7, #24
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081ea:	2300      	movs	r3, #0
 80081ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d101      	bne.n	80081fc <HAL_TIM_ConfigClockSource+0x1c>
 80081f8:	2302      	movs	r3, #2
 80081fa:	e0b4      	b.n	8008366 <HAL_TIM_ConfigClockSource+0x186>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2202      	movs	r2, #2
 8008208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800821a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008222:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	68ba      	ldr	r2, [r7, #8]
 800822a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008234:	d03e      	beq.n	80082b4 <HAL_TIM_ConfigClockSource+0xd4>
 8008236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800823a:	f200 8087 	bhi.w	800834c <HAL_TIM_ConfigClockSource+0x16c>
 800823e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008242:	f000 8086 	beq.w	8008352 <HAL_TIM_ConfigClockSource+0x172>
 8008246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800824a:	d87f      	bhi.n	800834c <HAL_TIM_ConfigClockSource+0x16c>
 800824c:	2b70      	cmp	r3, #112	; 0x70
 800824e:	d01a      	beq.n	8008286 <HAL_TIM_ConfigClockSource+0xa6>
 8008250:	2b70      	cmp	r3, #112	; 0x70
 8008252:	d87b      	bhi.n	800834c <HAL_TIM_ConfigClockSource+0x16c>
 8008254:	2b60      	cmp	r3, #96	; 0x60
 8008256:	d050      	beq.n	80082fa <HAL_TIM_ConfigClockSource+0x11a>
 8008258:	2b60      	cmp	r3, #96	; 0x60
 800825a:	d877      	bhi.n	800834c <HAL_TIM_ConfigClockSource+0x16c>
 800825c:	2b50      	cmp	r3, #80	; 0x50
 800825e:	d03c      	beq.n	80082da <HAL_TIM_ConfigClockSource+0xfa>
 8008260:	2b50      	cmp	r3, #80	; 0x50
 8008262:	d873      	bhi.n	800834c <HAL_TIM_ConfigClockSource+0x16c>
 8008264:	2b40      	cmp	r3, #64	; 0x40
 8008266:	d058      	beq.n	800831a <HAL_TIM_ConfigClockSource+0x13a>
 8008268:	2b40      	cmp	r3, #64	; 0x40
 800826a:	d86f      	bhi.n	800834c <HAL_TIM_ConfigClockSource+0x16c>
 800826c:	2b30      	cmp	r3, #48	; 0x30
 800826e:	d064      	beq.n	800833a <HAL_TIM_ConfigClockSource+0x15a>
 8008270:	2b30      	cmp	r3, #48	; 0x30
 8008272:	d86b      	bhi.n	800834c <HAL_TIM_ConfigClockSource+0x16c>
 8008274:	2b20      	cmp	r3, #32
 8008276:	d060      	beq.n	800833a <HAL_TIM_ConfigClockSource+0x15a>
 8008278:	2b20      	cmp	r3, #32
 800827a:	d867      	bhi.n	800834c <HAL_TIM_ConfigClockSource+0x16c>
 800827c:	2b00      	cmp	r3, #0
 800827e:	d05c      	beq.n	800833a <HAL_TIM_ConfigClockSource+0x15a>
 8008280:	2b10      	cmp	r3, #16
 8008282:	d05a      	beq.n	800833a <HAL_TIM_ConfigClockSource+0x15a>
 8008284:	e062      	b.n	800834c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6818      	ldr	r0, [r3, #0]
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	6899      	ldr	r1, [r3, #8]
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	685a      	ldr	r2, [r3, #4]
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	f000 fb67 	bl	8008968 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80082a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	609a      	str	r2, [r3, #8]
      break;
 80082b2:	e04f      	b.n	8008354 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6818      	ldr	r0, [r3, #0]
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	6899      	ldr	r1, [r3, #8]
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	685a      	ldr	r2, [r3, #4]
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	f000 fb50 	bl	8008968 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	689a      	ldr	r2, [r3, #8]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80082d6:	609a      	str	r2, [r3, #8]
      break;
 80082d8:	e03c      	b.n	8008354 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6818      	ldr	r0, [r3, #0]
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	6859      	ldr	r1, [r3, #4]
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	461a      	mov	r2, r3
 80082e8:	f000 fac4 	bl	8008874 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2150      	movs	r1, #80	; 0x50
 80082f2:	4618      	mov	r0, r3
 80082f4:	f000 fb1d 	bl	8008932 <TIM_ITRx_SetConfig>
      break;
 80082f8:	e02c      	b.n	8008354 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6818      	ldr	r0, [r3, #0]
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	6859      	ldr	r1, [r3, #4]
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	461a      	mov	r2, r3
 8008308:	f000 fae3 	bl	80088d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2160      	movs	r1, #96	; 0x60
 8008312:	4618      	mov	r0, r3
 8008314:	f000 fb0d 	bl	8008932 <TIM_ITRx_SetConfig>
      break;
 8008318:	e01c      	b.n	8008354 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6818      	ldr	r0, [r3, #0]
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	6859      	ldr	r1, [r3, #4]
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	461a      	mov	r2, r3
 8008328:	f000 faa4 	bl	8008874 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2140      	movs	r1, #64	; 0x40
 8008332:	4618      	mov	r0, r3
 8008334:	f000 fafd 	bl	8008932 <TIM_ITRx_SetConfig>
      break;
 8008338:	e00c      	b.n	8008354 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4619      	mov	r1, r3
 8008344:	4610      	mov	r0, r2
 8008346:	f000 faf4 	bl	8008932 <TIM_ITRx_SetConfig>
      break;
 800834a:	e003      	b.n	8008354 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	73fb      	strb	r3, [r7, #15]
      break;
 8008350:	e000      	b.n	8008354 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008352:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008364:	7bfb      	ldrb	r3, [r7, #15]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}

0800836e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800836e:	b480      	push	{r7}
 8008370:	b083      	sub	sp, #12
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008376:	bf00      	nop
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008382:	b480      	push	{r7}
 8008384:	b083      	sub	sp, #12
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800838a:	bf00      	nop
 800838c:	370c      	adds	r7, #12
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr

08008396 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008396:	b480      	push	{r7}
 8008398:	b083      	sub	sp, #12
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800839e:	bf00      	nop
 80083a0:	370c      	adds	r7, #12
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80083aa:	b480      	push	{r7}
 80083ac:	b083      	sub	sp, #12
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80083b2:	bf00      	nop
 80083b4:	370c      	adds	r7, #12
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr

080083be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80083be:	b480      	push	{r7}
 80083c0:	b083      	sub	sp, #12
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80083c6:	bf00      	nop
 80083c8:	370c      	adds	r7, #12
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
	...

080083d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4a40      	ldr	r2, [pc, #256]	; (80084e8 <TIM_Base_SetConfig+0x114>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d013      	beq.n	8008414 <TIM_Base_SetConfig+0x40>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083f2:	d00f      	beq.n	8008414 <TIM_Base_SetConfig+0x40>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a3d      	ldr	r2, [pc, #244]	; (80084ec <TIM_Base_SetConfig+0x118>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d00b      	beq.n	8008414 <TIM_Base_SetConfig+0x40>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a3c      	ldr	r2, [pc, #240]	; (80084f0 <TIM_Base_SetConfig+0x11c>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d007      	beq.n	8008414 <TIM_Base_SetConfig+0x40>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a3b      	ldr	r2, [pc, #236]	; (80084f4 <TIM_Base_SetConfig+0x120>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d003      	beq.n	8008414 <TIM_Base_SetConfig+0x40>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a3a      	ldr	r2, [pc, #232]	; (80084f8 <TIM_Base_SetConfig+0x124>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d108      	bne.n	8008426 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800841a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	68fa      	ldr	r2, [r7, #12]
 8008422:	4313      	orrs	r3, r2
 8008424:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a2f      	ldr	r2, [pc, #188]	; (80084e8 <TIM_Base_SetConfig+0x114>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d02b      	beq.n	8008486 <TIM_Base_SetConfig+0xb2>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008434:	d027      	beq.n	8008486 <TIM_Base_SetConfig+0xb2>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a2c      	ldr	r2, [pc, #176]	; (80084ec <TIM_Base_SetConfig+0x118>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d023      	beq.n	8008486 <TIM_Base_SetConfig+0xb2>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a2b      	ldr	r2, [pc, #172]	; (80084f0 <TIM_Base_SetConfig+0x11c>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d01f      	beq.n	8008486 <TIM_Base_SetConfig+0xb2>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a2a      	ldr	r2, [pc, #168]	; (80084f4 <TIM_Base_SetConfig+0x120>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d01b      	beq.n	8008486 <TIM_Base_SetConfig+0xb2>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a29      	ldr	r2, [pc, #164]	; (80084f8 <TIM_Base_SetConfig+0x124>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d017      	beq.n	8008486 <TIM_Base_SetConfig+0xb2>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a28      	ldr	r2, [pc, #160]	; (80084fc <TIM_Base_SetConfig+0x128>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d013      	beq.n	8008486 <TIM_Base_SetConfig+0xb2>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a27      	ldr	r2, [pc, #156]	; (8008500 <TIM_Base_SetConfig+0x12c>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d00f      	beq.n	8008486 <TIM_Base_SetConfig+0xb2>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a26      	ldr	r2, [pc, #152]	; (8008504 <TIM_Base_SetConfig+0x130>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d00b      	beq.n	8008486 <TIM_Base_SetConfig+0xb2>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a25      	ldr	r2, [pc, #148]	; (8008508 <TIM_Base_SetConfig+0x134>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d007      	beq.n	8008486 <TIM_Base_SetConfig+0xb2>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4a24      	ldr	r2, [pc, #144]	; (800850c <TIM_Base_SetConfig+0x138>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d003      	beq.n	8008486 <TIM_Base_SetConfig+0xb2>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4a23      	ldr	r2, [pc, #140]	; (8008510 <TIM_Base_SetConfig+0x13c>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d108      	bne.n	8008498 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800848c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	4313      	orrs	r3, r2
 8008496:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	695b      	ldr	r3, [r3, #20]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	689a      	ldr	r2, [r3, #8]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4a0a      	ldr	r2, [pc, #40]	; (80084e8 <TIM_Base_SetConfig+0x114>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d003      	beq.n	80084cc <TIM_Base_SetConfig+0xf8>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4a0c      	ldr	r2, [pc, #48]	; (80084f8 <TIM_Base_SetConfig+0x124>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d103      	bne.n	80084d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	691a      	ldr	r2, [r3, #16]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	615a      	str	r2, [r3, #20]
}
 80084da:	bf00      	nop
 80084dc:	3714      	adds	r7, #20
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr
 80084e6:	bf00      	nop
 80084e8:	40010000 	.word	0x40010000
 80084ec:	40000400 	.word	0x40000400
 80084f0:	40000800 	.word	0x40000800
 80084f4:	40000c00 	.word	0x40000c00
 80084f8:	40010400 	.word	0x40010400
 80084fc:	40014000 	.word	0x40014000
 8008500:	40014400 	.word	0x40014400
 8008504:	40014800 	.word	0x40014800
 8008508:	40001800 	.word	0x40001800
 800850c:	40001c00 	.word	0x40001c00
 8008510:	40002000 	.word	0x40002000

08008514 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008514:	b480      	push	{r7}
 8008516:	b087      	sub	sp, #28
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a1b      	ldr	r3, [r3, #32]
 8008522:	f023 0201 	bic.w	r2, r3, #1
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a1b      	ldr	r3, [r3, #32]
 800852e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	699b      	ldr	r3, [r3, #24]
 800853a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f023 0303 	bic.w	r3, r3, #3
 800854a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	4313      	orrs	r3, r2
 8008554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	f023 0302 	bic.w	r3, r3, #2
 800855c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	697a      	ldr	r2, [r7, #20]
 8008564:	4313      	orrs	r3, r2
 8008566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a20      	ldr	r2, [pc, #128]	; (80085ec <TIM_OC1_SetConfig+0xd8>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d003      	beq.n	8008578 <TIM_OC1_SetConfig+0x64>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a1f      	ldr	r2, [pc, #124]	; (80085f0 <TIM_OC1_SetConfig+0xdc>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d10c      	bne.n	8008592 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	f023 0308 	bic.w	r3, r3, #8
 800857e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	697a      	ldr	r2, [r7, #20]
 8008586:	4313      	orrs	r3, r2
 8008588:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	f023 0304 	bic.w	r3, r3, #4
 8008590:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a15      	ldr	r2, [pc, #84]	; (80085ec <TIM_OC1_SetConfig+0xd8>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d003      	beq.n	80085a2 <TIM_OC1_SetConfig+0x8e>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4a14      	ldr	r2, [pc, #80]	; (80085f0 <TIM_OC1_SetConfig+0xdc>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d111      	bne.n	80085c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80085b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	695b      	ldr	r3, [r3, #20]
 80085b6:	693a      	ldr	r2, [r7, #16]
 80085b8:	4313      	orrs	r3, r2
 80085ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	693a      	ldr	r2, [r7, #16]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	693a      	ldr	r2, [r7, #16]
 80085ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	685a      	ldr	r2, [r3, #4]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	697a      	ldr	r2, [r7, #20]
 80085de:	621a      	str	r2, [r3, #32]
}
 80085e0:	bf00      	nop
 80085e2:	371c      	adds	r7, #28
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr
 80085ec:	40010000 	.word	0x40010000
 80085f0:	40010400 	.word	0x40010400

080085f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b087      	sub	sp, #28
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a1b      	ldr	r3, [r3, #32]
 8008602:	f023 0210 	bic.w	r2, r3, #16
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a1b      	ldr	r3, [r3, #32]
 800860e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	699b      	ldr	r3, [r3, #24]
 800861a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800862a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	021b      	lsls	r3, r3, #8
 8008632:	68fa      	ldr	r2, [r7, #12]
 8008634:	4313      	orrs	r3, r2
 8008636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	f023 0320 	bic.w	r3, r3, #32
 800863e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	011b      	lsls	r3, r3, #4
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	4313      	orrs	r3, r2
 800864a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4a22      	ldr	r2, [pc, #136]	; (80086d8 <TIM_OC2_SetConfig+0xe4>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d003      	beq.n	800865c <TIM_OC2_SetConfig+0x68>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a21      	ldr	r2, [pc, #132]	; (80086dc <TIM_OC2_SetConfig+0xe8>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d10d      	bne.n	8008678 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008662:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	011b      	lsls	r3, r3, #4
 800866a:	697a      	ldr	r2, [r7, #20]
 800866c:	4313      	orrs	r3, r2
 800866e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008676:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4a17      	ldr	r2, [pc, #92]	; (80086d8 <TIM_OC2_SetConfig+0xe4>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d003      	beq.n	8008688 <TIM_OC2_SetConfig+0x94>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4a16      	ldr	r2, [pc, #88]	; (80086dc <TIM_OC2_SetConfig+0xe8>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d113      	bne.n	80086b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800868e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008696:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	693a      	ldr	r2, [r7, #16]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	699b      	ldr	r3, [r3, #24]
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	693a      	ldr	r2, [r7, #16]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	693a      	ldr	r2, [r7, #16]
 80086b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	685a      	ldr	r2, [r3, #4]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	697a      	ldr	r2, [r7, #20]
 80086c8:	621a      	str	r2, [r3, #32]
}
 80086ca:	bf00      	nop
 80086cc:	371c      	adds	r7, #28
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop
 80086d8:	40010000 	.word	0x40010000
 80086dc:	40010400 	.word	0x40010400

080086e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b087      	sub	sp, #28
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a1b      	ldr	r3, [r3, #32]
 80086ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a1b      	ldr	r3, [r3, #32]
 80086fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	69db      	ldr	r3, [r3, #28]
 8008706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800870e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f023 0303 	bic.w	r3, r3, #3
 8008716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	4313      	orrs	r3, r2
 8008720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	021b      	lsls	r3, r3, #8
 8008730:	697a      	ldr	r2, [r7, #20]
 8008732:	4313      	orrs	r3, r2
 8008734:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a21      	ldr	r2, [pc, #132]	; (80087c0 <TIM_OC3_SetConfig+0xe0>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d003      	beq.n	8008746 <TIM_OC3_SetConfig+0x66>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a20      	ldr	r2, [pc, #128]	; (80087c4 <TIM_OC3_SetConfig+0xe4>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d10d      	bne.n	8008762 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800874c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	021b      	lsls	r3, r3, #8
 8008754:	697a      	ldr	r2, [r7, #20]
 8008756:	4313      	orrs	r3, r2
 8008758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a16      	ldr	r2, [pc, #88]	; (80087c0 <TIM_OC3_SetConfig+0xe0>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d003      	beq.n	8008772 <TIM_OC3_SetConfig+0x92>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a15      	ldr	r2, [pc, #84]	; (80087c4 <TIM_OC3_SetConfig+0xe4>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d113      	bne.n	800879a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008778:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008780:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	695b      	ldr	r3, [r3, #20]
 8008786:	011b      	lsls	r3, r3, #4
 8008788:	693a      	ldr	r2, [r7, #16]
 800878a:	4313      	orrs	r3, r2
 800878c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	699b      	ldr	r3, [r3, #24]
 8008792:	011b      	lsls	r3, r3, #4
 8008794:	693a      	ldr	r2, [r7, #16]
 8008796:	4313      	orrs	r3, r2
 8008798:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	693a      	ldr	r2, [r7, #16]
 800879e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	685a      	ldr	r2, [r3, #4]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	697a      	ldr	r2, [r7, #20]
 80087b2:	621a      	str	r2, [r3, #32]
}
 80087b4:	bf00      	nop
 80087b6:	371c      	adds	r7, #28
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr
 80087c0:	40010000 	.word	0x40010000
 80087c4:	40010400 	.word	0x40010400

080087c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b087      	sub	sp, #28
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a1b      	ldr	r3, [r3, #32]
 80087d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a1b      	ldr	r3, [r3, #32]
 80087e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	69db      	ldr	r3, [r3, #28]
 80087ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	021b      	lsls	r3, r3, #8
 8008806:	68fa      	ldr	r2, [r7, #12]
 8008808:	4313      	orrs	r3, r2
 800880a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008812:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	031b      	lsls	r3, r3, #12
 800881a:	693a      	ldr	r2, [r7, #16]
 800881c:	4313      	orrs	r3, r2
 800881e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a12      	ldr	r2, [pc, #72]	; (800886c <TIM_OC4_SetConfig+0xa4>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d003      	beq.n	8008830 <TIM_OC4_SetConfig+0x68>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a11      	ldr	r2, [pc, #68]	; (8008870 <TIM_OC4_SetConfig+0xa8>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d109      	bne.n	8008844 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008836:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	695b      	ldr	r3, [r3, #20]
 800883c:	019b      	lsls	r3, r3, #6
 800883e:	697a      	ldr	r2, [r7, #20]
 8008840:	4313      	orrs	r3, r2
 8008842:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	697a      	ldr	r2, [r7, #20]
 8008848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	685a      	ldr	r2, [r3, #4]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	693a      	ldr	r2, [r7, #16]
 800885c:	621a      	str	r2, [r3, #32]
}
 800885e:	bf00      	nop
 8008860:	371c      	adds	r7, #28
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop
 800886c:	40010000 	.word	0x40010000
 8008870:	40010400 	.word	0x40010400

08008874 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008874:	b480      	push	{r7}
 8008876:	b087      	sub	sp, #28
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6a1b      	ldr	r3, [r3, #32]
 8008884:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6a1b      	ldr	r3, [r3, #32]
 800888a:	f023 0201 	bic.w	r2, r3, #1
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	699b      	ldr	r3, [r3, #24]
 8008896:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800889e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	011b      	lsls	r3, r3, #4
 80088a4:	693a      	ldr	r2, [r7, #16]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	f023 030a 	bic.w	r3, r3, #10
 80088b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80088b2:	697a      	ldr	r2, [r7, #20]
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	693a      	ldr	r2, [r7, #16]
 80088be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	697a      	ldr	r2, [r7, #20]
 80088c4:	621a      	str	r2, [r3, #32]
}
 80088c6:	bf00      	nop
 80088c8:	371c      	adds	r7, #28
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b087      	sub	sp, #28
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	60f8      	str	r0, [r7, #12]
 80088da:	60b9      	str	r1, [r7, #8]
 80088dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6a1b      	ldr	r3, [r3, #32]
 80088e2:	f023 0210 	bic.w	r2, r3, #16
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	699b      	ldr	r3, [r3, #24]
 80088ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6a1b      	ldr	r3, [r3, #32]
 80088f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80088fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	031b      	lsls	r3, r3, #12
 8008902:	697a      	ldr	r2, [r7, #20]
 8008904:	4313      	orrs	r3, r2
 8008906:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800890e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	011b      	lsls	r3, r3, #4
 8008914:	693a      	ldr	r2, [r7, #16]
 8008916:	4313      	orrs	r3, r2
 8008918:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	697a      	ldr	r2, [r7, #20]
 800891e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	693a      	ldr	r2, [r7, #16]
 8008924:	621a      	str	r2, [r3, #32]
}
 8008926:	bf00      	nop
 8008928:	371c      	adds	r7, #28
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr

08008932 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008932:	b480      	push	{r7}
 8008934:	b085      	sub	sp, #20
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
 800893a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008948:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800894a:	683a      	ldr	r2, [r7, #0]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	4313      	orrs	r3, r2
 8008950:	f043 0307 	orr.w	r3, r3, #7
 8008954:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	609a      	str	r2, [r3, #8]
}
 800895c:	bf00      	nop
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008968:	b480      	push	{r7}
 800896a:	b087      	sub	sp, #28
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	607a      	str	r2, [r7, #4]
 8008974:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008982:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	021a      	lsls	r2, r3, #8
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	431a      	orrs	r2, r3
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	4313      	orrs	r3, r2
 8008990:	697a      	ldr	r2, [r7, #20]
 8008992:	4313      	orrs	r3, r2
 8008994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	697a      	ldr	r2, [r7, #20]
 800899a:	609a      	str	r2, [r3, #8]
}
 800899c:	bf00      	nop
 800899e:	371c      	adds	r7, #28
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d101      	bne.n	80089c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80089bc:	2302      	movs	r3, #2
 80089be:	e05a      	b.n	8008a76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2202      	movs	r2, #2
 80089cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	68fa      	ldr	r2, [r7, #12]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a21      	ldr	r2, [pc, #132]	; (8008a84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d022      	beq.n	8008a4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a0c:	d01d      	beq.n	8008a4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a1d      	ldr	r2, [pc, #116]	; (8008a88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d018      	beq.n	8008a4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a1b      	ldr	r2, [pc, #108]	; (8008a8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d013      	beq.n	8008a4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a1a      	ldr	r2, [pc, #104]	; (8008a90 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d00e      	beq.n	8008a4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a18      	ldr	r2, [pc, #96]	; (8008a94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d009      	beq.n	8008a4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a17      	ldr	r2, [pc, #92]	; (8008a98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d004      	beq.n	8008a4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a15      	ldr	r2, [pc, #84]	; (8008a9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d10c      	bne.n	8008a64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	68ba      	ldr	r2, [r7, #8]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	68ba      	ldr	r2, [r7, #8]
 8008a62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3714      	adds	r7, #20
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	40010000 	.word	0x40010000
 8008a88:	40000400 	.word	0x40000400
 8008a8c:	40000800 	.word	0x40000800
 8008a90:	40000c00 	.word	0x40000c00
 8008a94:	40010400 	.word	0x40010400
 8008a98:	40014000 	.word	0x40014000
 8008a9c:	40001800 	.word	0x40001800

08008aa0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d101      	bne.n	8008abc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008ab8:	2302      	movs	r3, #2
 8008aba:	e03d      	b.n	8008b38 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	4313      	orrs	r3, r2
 8008ade:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4313      	orrs	r3, r2
 8008afa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	695b      	ldr	r3, [r3, #20]
 8008b14:	4313      	orrs	r3, r2
 8008b16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	69db      	ldr	r3, [r3, #28]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3714      	adds	r7, #20
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b4c:	bf00      	nop
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d101      	bne.n	8008b7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e03f      	b.n	8008bfe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d106      	bne.n	8008b98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f7fa fb96 	bl	80032c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2224      	movs	r2, #36	; 0x24
 8008b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68da      	ldr	r2, [r3, #12]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008bae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 f829 	bl	8008c08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	691a      	ldr	r2, [r3, #16]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008bc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	695a      	ldr	r2, [r3, #20]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008bd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	68da      	ldr	r2, [r3, #12]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008be4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2220      	movs	r2, #32
 8008bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2220      	movs	r2, #32
 8008bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008bfc:	2300      	movs	r3, #0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3708      	adds	r7, #8
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
	...

08008c08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c0c:	b0c0      	sub	sp, #256	; 0x100
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	691b      	ldr	r3, [r3, #16]
 8008c1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c24:	68d9      	ldr	r1, [r3, #12]
 8008c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	ea40 0301 	orr.w	r3, r0, r1
 8008c30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c36:	689a      	ldr	r2, [r3, #8]
 8008c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	431a      	orrs	r2, r3
 8008c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c44:	695b      	ldr	r3, [r3, #20]
 8008c46:	431a      	orrs	r2, r3
 8008c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c4c:	69db      	ldr	r3, [r3, #28]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008c60:	f021 010c 	bic.w	r1, r1, #12
 8008c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c6e:	430b      	orrs	r3, r1
 8008c70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	695b      	ldr	r3, [r3, #20]
 8008c7a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c82:	6999      	ldr	r1, [r3, #24]
 8008c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	ea40 0301 	orr.w	r3, r0, r1
 8008c8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	4b8f      	ldr	r3, [pc, #572]	; (8008ed4 <UART_SetConfig+0x2cc>)
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d005      	beq.n	8008ca8 <UART_SetConfig+0xa0>
 8008c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	4b8d      	ldr	r3, [pc, #564]	; (8008ed8 <UART_SetConfig+0x2d0>)
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d104      	bne.n	8008cb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ca8:	f7fd fd04 	bl	80066b4 <HAL_RCC_GetPCLK2Freq>
 8008cac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008cb0:	e003      	b.n	8008cba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008cb2:	f7fd fceb 	bl	800668c <HAL_RCC_GetPCLK1Freq>
 8008cb6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cbe:	69db      	ldr	r3, [r3, #28]
 8008cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cc4:	f040 810c 	bne.w	8008ee0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008cc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008cd2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008cd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008cda:	4622      	mov	r2, r4
 8008cdc:	462b      	mov	r3, r5
 8008cde:	1891      	adds	r1, r2, r2
 8008ce0:	65b9      	str	r1, [r7, #88]	; 0x58
 8008ce2:	415b      	adcs	r3, r3
 8008ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ce6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008cea:	4621      	mov	r1, r4
 8008cec:	eb12 0801 	adds.w	r8, r2, r1
 8008cf0:	4629      	mov	r1, r5
 8008cf2:	eb43 0901 	adc.w	r9, r3, r1
 8008cf6:	f04f 0200 	mov.w	r2, #0
 8008cfa:	f04f 0300 	mov.w	r3, #0
 8008cfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008d02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008d06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008d0a:	4690      	mov	r8, r2
 8008d0c:	4699      	mov	r9, r3
 8008d0e:	4623      	mov	r3, r4
 8008d10:	eb18 0303 	adds.w	r3, r8, r3
 8008d14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008d18:	462b      	mov	r3, r5
 8008d1a:	eb49 0303 	adc.w	r3, r9, r3
 8008d1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d2e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008d32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008d36:	460b      	mov	r3, r1
 8008d38:	18db      	adds	r3, r3, r3
 8008d3a:	653b      	str	r3, [r7, #80]	; 0x50
 8008d3c:	4613      	mov	r3, r2
 8008d3e:	eb42 0303 	adc.w	r3, r2, r3
 8008d42:	657b      	str	r3, [r7, #84]	; 0x54
 8008d44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008d48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008d4c:	f7f7 fb18 	bl	8000380 <__aeabi_uldivmod>
 8008d50:	4602      	mov	r2, r0
 8008d52:	460b      	mov	r3, r1
 8008d54:	4b61      	ldr	r3, [pc, #388]	; (8008edc <UART_SetConfig+0x2d4>)
 8008d56:	fba3 2302 	umull	r2, r3, r3, r2
 8008d5a:	095b      	lsrs	r3, r3, #5
 8008d5c:	011c      	lsls	r4, r3, #4
 8008d5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d62:	2200      	movs	r2, #0
 8008d64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d68:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008d6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008d70:	4642      	mov	r2, r8
 8008d72:	464b      	mov	r3, r9
 8008d74:	1891      	adds	r1, r2, r2
 8008d76:	64b9      	str	r1, [r7, #72]	; 0x48
 8008d78:	415b      	adcs	r3, r3
 8008d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008d80:	4641      	mov	r1, r8
 8008d82:	eb12 0a01 	adds.w	sl, r2, r1
 8008d86:	4649      	mov	r1, r9
 8008d88:	eb43 0b01 	adc.w	fp, r3, r1
 8008d8c:	f04f 0200 	mov.w	r2, #0
 8008d90:	f04f 0300 	mov.w	r3, #0
 8008d94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008d98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008d9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008da0:	4692      	mov	sl, r2
 8008da2:	469b      	mov	fp, r3
 8008da4:	4643      	mov	r3, r8
 8008da6:	eb1a 0303 	adds.w	r3, sl, r3
 8008daa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008dae:	464b      	mov	r3, r9
 8008db0:	eb4b 0303 	adc.w	r3, fp, r3
 8008db4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008dc4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008dc8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008dcc:	460b      	mov	r3, r1
 8008dce:	18db      	adds	r3, r3, r3
 8008dd0:	643b      	str	r3, [r7, #64]	; 0x40
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	eb42 0303 	adc.w	r3, r2, r3
 8008dd8:	647b      	str	r3, [r7, #68]	; 0x44
 8008dda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008dde:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008de2:	f7f7 facd 	bl	8000380 <__aeabi_uldivmod>
 8008de6:	4602      	mov	r2, r0
 8008de8:	460b      	mov	r3, r1
 8008dea:	4611      	mov	r1, r2
 8008dec:	4b3b      	ldr	r3, [pc, #236]	; (8008edc <UART_SetConfig+0x2d4>)
 8008dee:	fba3 2301 	umull	r2, r3, r3, r1
 8008df2:	095b      	lsrs	r3, r3, #5
 8008df4:	2264      	movs	r2, #100	; 0x64
 8008df6:	fb02 f303 	mul.w	r3, r2, r3
 8008dfa:	1acb      	subs	r3, r1, r3
 8008dfc:	00db      	lsls	r3, r3, #3
 8008dfe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008e02:	4b36      	ldr	r3, [pc, #216]	; (8008edc <UART_SetConfig+0x2d4>)
 8008e04:	fba3 2302 	umull	r2, r3, r3, r2
 8008e08:	095b      	lsrs	r3, r3, #5
 8008e0a:	005b      	lsls	r3, r3, #1
 8008e0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008e10:	441c      	add	r4, r3
 8008e12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e16:	2200      	movs	r2, #0
 8008e18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e1c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008e20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008e24:	4642      	mov	r2, r8
 8008e26:	464b      	mov	r3, r9
 8008e28:	1891      	adds	r1, r2, r2
 8008e2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8008e2c:	415b      	adcs	r3, r3
 8008e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008e34:	4641      	mov	r1, r8
 8008e36:	1851      	adds	r1, r2, r1
 8008e38:	6339      	str	r1, [r7, #48]	; 0x30
 8008e3a:	4649      	mov	r1, r9
 8008e3c:	414b      	adcs	r3, r1
 8008e3e:	637b      	str	r3, [r7, #52]	; 0x34
 8008e40:	f04f 0200 	mov.w	r2, #0
 8008e44:	f04f 0300 	mov.w	r3, #0
 8008e48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008e4c:	4659      	mov	r1, fp
 8008e4e:	00cb      	lsls	r3, r1, #3
 8008e50:	4651      	mov	r1, sl
 8008e52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e56:	4651      	mov	r1, sl
 8008e58:	00ca      	lsls	r2, r1, #3
 8008e5a:	4610      	mov	r0, r2
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	4603      	mov	r3, r0
 8008e60:	4642      	mov	r2, r8
 8008e62:	189b      	adds	r3, r3, r2
 8008e64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008e68:	464b      	mov	r3, r9
 8008e6a:	460a      	mov	r2, r1
 8008e6c:	eb42 0303 	adc.w	r3, r2, r3
 8008e70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008e80:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008e84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008e88:	460b      	mov	r3, r1
 8008e8a:	18db      	adds	r3, r3, r3
 8008e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e8e:	4613      	mov	r3, r2
 8008e90:	eb42 0303 	adc.w	r3, r2, r3
 8008e94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008e9e:	f7f7 fa6f 	bl	8000380 <__aeabi_uldivmod>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	4b0d      	ldr	r3, [pc, #52]	; (8008edc <UART_SetConfig+0x2d4>)
 8008ea8:	fba3 1302 	umull	r1, r3, r3, r2
 8008eac:	095b      	lsrs	r3, r3, #5
 8008eae:	2164      	movs	r1, #100	; 0x64
 8008eb0:	fb01 f303 	mul.w	r3, r1, r3
 8008eb4:	1ad3      	subs	r3, r2, r3
 8008eb6:	00db      	lsls	r3, r3, #3
 8008eb8:	3332      	adds	r3, #50	; 0x32
 8008eba:	4a08      	ldr	r2, [pc, #32]	; (8008edc <UART_SetConfig+0x2d4>)
 8008ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8008ec0:	095b      	lsrs	r3, r3, #5
 8008ec2:	f003 0207 	and.w	r2, r3, #7
 8008ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4422      	add	r2, r4
 8008ece:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008ed0:	e105      	b.n	80090de <UART_SetConfig+0x4d6>
 8008ed2:	bf00      	nop
 8008ed4:	40011000 	.word	0x40011000
 8008ed8:	40011400 	.word	0x40011400
 8008edc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ee0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008eea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008eee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008ef2:	4642      	mov	r2, r8
 8008ef4:	464b      	mov	r3, r9
 8008ef6:	1891      	adds	r1, r2, r2
 8008ef8:	6239      	str	r1, [r7, #32]
 8008efa:	415b      	adcs	r3, r3
 8008efc:	627b      	str	r3, [r7, #36]	; 0x24
 8008efe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008f02:	4641      	mov	r1, r8
 8008f04:	1854      	adds	r4, r2, r1
 8008f06:	4649      	mov	r1, r9
 8008f08:	eb43 0501 	adc.w	r5, r3, r1
 8008f0c:	f04f 0200 	mov.w	r2, #0
 8008f10:	f04f 0300 	mov.w	r3, #0
 8008f14:	00eb      	lsls	r3, r5, #3
 8008f16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008f1a:	00e2      	lsls	r2, r4, #3
 8008f1c:	4614      	mov	r4, r2
 8008f1e:	461d      	mov	r5, r3
 8008f20:	4643      	mov	r3, r8
 8008f22:	18e3      	adds	r3, r4, r3
 8008f24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008f28:	464b      	mov	r3, r9
 8008f2a:	eb45 0303 	adc.w	r3, r5, r3
 8008f2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008f42:	f04f 0200 	mov.w	r2, #0
 8008f46:	f04f 0300 	mov.w	r3, #0
 8008f4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008f4e:	4629      	mov	r1, r5
 8008f50:	008b      	lsls	r3, r1, #2
 8008f52:	4621      	mov	r1, r4
 8008f54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f58:	4621      	mov	r1, r4
 8008f5a:	008a      	lsls	r2, r1, #2
 8008f5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008f60:	f7f7 fa0e 	bl	8000380 <__aeabi_uldivmod>
 8008f64:	4602      	mov	r2, r0
 8008f66:	460b      	mov	r3, r1
 8008f68:	4b60      	ldr	r3, [pc, #384]	; (80090ec <UART_SetConfig+0x4e4>)
 8008f6a:	fba3 2302 	umull	r2, r3, r3, r2
 8008f6e:	095b      	lsrs	r3, r3, #5
 8008f70:	011c      	lsls	r4, r3, #4
 8008f72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f76:	2200      	movs	r2, #0
 8008f78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008f7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008f80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008f84:	4642      	mov	r2, r8
 8008f86:	464b      	mov	r3, r9
 8008f88:	1891      	adds	r1, r2, r2
 8008f8a:	61b9      	str	r1, [r7, #24]
 8008f8c:	415b      	adcs	r3, r3
 8008f8e:	61fb      	str	r3, [r7, #28]
 8008f90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f94:	4641      	mov	r1, r8
 8008f96:	1851      	adds	r1, r2, r1
 8008f98:	6139      	str	r1, [r7, #16]
 8008f9a:	4649      	mov	r1, r9
 8008f9c:	414b      	adcs	r3, r1
 8008f9e:	617b      	str	r3, [r7, #20]
 8008fa0:	f04f 0200 	mov.w	r2, #0
 8008fa4:	f04f 0300 	mov.w	r3, #0
 8008fa8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008fac:	4659      	mov	r1, fp
 8008fae:	00cb      	lsls	r3, r1, #3
 8008fb0:	4651      	mov	r1, sl
 8008fb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008fb6:	4651      	mov	r1, sl
 8008fb8:	00ca      	lsls	r2, r1, #3
 8008fba:	4610      	mov	r0, r2
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	4642      	mov	r2, r8
 8008fc2:	189b      	adds	r3, r3, r2
 8008fc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008fc8:	464b      	mov	r3, r9
 8008fca:	460a      	mov	r2, r1
 8008fcc:	eb42 0303 	adc.w	r3, r2, r3
 8008fd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	67bb      	str	r3, [r7, #120]	; 0x78
 8008fde:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008fe0:	f04f 0200 	mov.w	r2, #0
 8008fe4:	f04f 0300 	mov.w	r3, #0
 8008fe8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008fec:	4649      	mov	r1, r9
 8008fee:	008b      	lsls	r3, r1, #2
 8008ff0:	4641      	mov	r1, r8
 8008ff2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ff6:	4641      	mov	r1, r8
 8008ff8:	008a      	lsls	r2, r1, #2
 8008ffa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008ffe:	f7f7 f9bf 	bl	8000380 <__aeabi_uldivmod>
 8009002:	4602      	mov	r2, r0
 8009004:	460b      	mov	r3, r1
 8009006:	4b39      	ldr	r3, [pc, #228]	; (80090ec <UART_SetConfig+0x4e4>)
 8009008:	fba3 1302 	umull	r1, r3, r3, r2
 800900c:	095b      	lsrs	r3, r3, #5
 800900e:	2164      	movs	r1, #100	; 0x64
 8009010:	fb01 f303 	mul.w	r3, r1, r3
 8009014:	1ad3      	subs	r3, r2, r3
 8009016:	011b      	lsls	r3, r3, #4
 8009018:	3332      	adds	r3, #50	; 0x32
 800901a:	4a34      	ldr	r2, [pc, #208]	; (80090ec <UART_SetConfig+0x4e4>)
 800901c:	fba2 2303 	umull	r2, r3, r2, r3
 8009020:	095b      	lsrs	r3, r3, #5
 8009022:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009026:	441c      	add	r4, r3
 8009028:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800902c:	2200      	movs	r2, #0
 800902e:	673b      	str	r3, [r7, #112]	; 0x70
 8009030:	677a      	str	r2, [r7, #116]	; 0x74
 8009032:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009036:	4642      	mov	r2, r8
 8009038:	464b      	mov	r3, r9
 800903a:	1891      	adds	r1, r2, r2
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	415b      	adcs	r3, r3
 8009040:	60fb      	str	r3, [r7, #12]
 8009042:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009046:	4641      	mov	r1, r8
 8009048:	1851      	adds	r1, r2, r1
 800904a:	6039      	str	r1, [r7, #0]
 800904c:	4649      	mov	r1, r9
 800904e:	414b      	adcs	r3, r1
 8009050:	607b      	str	r3, [r7, #4]
 8009052:	f04f 0200 	mov.w	r2, #0
 8009056:	f04f 0300 	mov.w	r3, #0
 800905a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800905e:	4659      	mov	r1, fp
 8009060:	00cb      	lsls	r3, r1, #3
 8009062:	4651      	mov	r1, sl
 8009064:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009068:	4651      	mov	r1, sl
 800906a:	00ca      	lsls	r2, r1, #3
 800906c:	4610      	mov	r0, r2
 800906e:	4619      	mov	r1, r3
 8009070:	4603      	mov	r3, r0
 8009072:	4642      	mov	r2, r8
 8009074:	189b      	adds	r3, r3, r2
 8009076:	66bb      	str	r3, [r7, #104]	; 0x68
 8009078:	464b      	mov	r3, r9
 800907a:	460a      	mov	r2, r1
 800907c:	eb42 0303 	adc.w	r3, r2, r3
 8009080:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	663b      	str	r3, [r7, #96]	; 0x60
 800908c:	667a      	str	r2, [r7, #100]	; 0x64
 800908e:	f04f 0200 	mov.w	r2, #0
 8009092:	f04f 0300 	mov.w	r3, #0
 8009096:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800909a:	4649      	mov	r1, r9
 800909c:	008b      	lsls	r3, r1, #2
 800909e:	4641      	mov	r1, r8
 80090a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090a4:	4641      	mov	r1, r8
 80090a6:	008a      	lsls	r2, r1, #2
 80090a8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80090ac:	f7f7 f968 	bl	8000380 <__aeabi_uldivmod>
 80090b0:	4602      	mov	r2, r0
 80090b2:	460b      	mov	r3, r1
 80090b4:	4b0d      	ldr	r3, [pc, #52]	; (80090ec <UART_SetConfig+0x4e4>)
 80090b6:	fba3 1302 	umull	r1, r3, r3, r2
 80090ba:	095b      	lsrs	r3, r3, #5
 80090bc:	2164      	movs	r1, #100	; 0x64
 80090be:	fb01 f303 	mul.w	r3, r1, r3
 80090c2:	1ad3      	subs	r3, r2, r3
 80090c4:	011b      	lsls	r3, r3, #4
 80090c6:	3332      	adds	r3, #50	; 0x32
 80090c8:	4a08      	ldr	r2, [pc, #32]	; (80090ec <UART_SetConfig+0x4e4>)
 80090ca:	fba2 2303 	umull	r2, r3, r2, r3
 80090ce:	095b      	lsrs	r3, r3, #5
 80090d0:	f003 020f 	and.w	r2, r3, #15
 80090d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4422      	add	r2, r4
 80090dc:	609a      	str	r2, [r3, #8]
}
 80090de:	bf00      	nop
 80090e0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80090e4:	46bd      	mov	sp, r7
 80090e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090ea:	bf00      	nop
 80090ec:	51eb851f 	.word	0x51eb851f

080090f0 <__errno>:
 80090f0:	4b01      	ldr	r3, [pc, #4]	; (80090f8 <__errno+0x8>)
 80090f2:	6818      	ldr	r0, [r3, #0]
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	20000120 	.word	0x20000120

080090fc <__libc_init_array>:
 80090fc:	b570      	push	{r4, r5, r6, lr}
 80090fe:	4d0d      	ldr	r5, [pc, #52]	; (8009134 <__libc_init_array+0x38>)
 8009100:	4c0d      	ldr	r4, [pc, #52]	; (8009138 <__libc_init_array+0x3c>)
 8009102:	1b64      	subs	r4, r4, r5
 8009104:	10a4      	asrs	r4, r4, #2
 8009106:	2600      	movs	r6, #0
 8009108:	42a6      	cmp	r6, r4
 800910a:	d109      	bne.n	8009120 <__libc_init_array+0x24>
 800910c:	4d0b      	ldr	r5, [pc, #44]	; (800913c <__libc_init_array+0x40>)
 800910e:	4c0c      	ldr	r4, [pc, #48]	; (8009140 <__libc_init_array+0x44>)
 8009110:	f002 f99c 	bl	800b44c <_init>
 8009114:	1b64      	subs	r4, r4, r5
 8009116:	10a4      	asrs	r4, r4, #2
 8009118:	2600      	movs	r6, #0
 800911a:	42a6      	cmp	r6, r4
 800911c:	d105      	bne.n	800912a <__libc_init_array+0x2e>
 800911e:	bd70      	pop	{r4, r5, r6, pc}
 8009120:	f855 3b04 	ldr.w	r3, [r5], #4
 8009124:	4798      	blx	r3
 8009126:	3601      	adds	r6, #1
 8009128:	e7ee      	b.n	8009108 <__libc_init_array+0xc>
 800912a:	f855 3b04 	ldr.w	r3, [r5], #4
 800912e:	4798      	blx	r3
 8009130:	3601      	adds	r6, #1
 8009132:	e7f2      	b.n	800911a <__libc_init_array+0x1e>
 8009134:	0800b790 	.word	0x0800b790
 8009138:	0800b790 	.word	0x0800b790
 800913c:	0800b790 	.word	0x0800b790
 8009140:	0800b794 	.word	0x0800b794

08009144 <localtime>:
 8009144:	b538      	push	{r3, r4, r5, lr}
 8009146:	4b0b      	ldr	r3, [pc, #44]	; (8009174 <localtime+0x30>)
 8009148:	681d      	ldr	r5, [r3, #0]
 800914a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800914c:	4604      	mov	r4, r0
 800914e:	b953      	cbnz	r3, 8009166 <localtime+0x22>
 8009150:	2024      	movs	r0, #36	; 0x24
 8009152:	f000 f909 	bl	8009368 <malloc>
 8009156:	4602      	mov	r2, r0
 8009158:	63e8      	str	r0, [r5, #60]	; 0x3c
 800915a:	b920      	cbnz	r0, 8009166 <localtime+0x22>
 800915c:	4b06      	ldr	r3, [pc, #24]	; (8009178 <localtime+0x34>)
 800915e:	4807      	ldr	r0, [pc, #28]	; (800917c <localtime+0x38>)
 8009160:	2132      	movs	r1, #50	; 0x32
 8009162:	f000 fc53 	bl	8009a0c <__assert_func>
 8009166:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8009168:	4620      	mov	r0, r4
 800916a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800916e:	f000 b807 	b.w	8009180 <localtime_r>
 8009172:	bf00      	nop
 8009174:	20000120 	.word	0x20000120
 8009178:	0800b48c 	.word	0x0800b48c
 800917c:	0800b4a3 	.word	0x0800b4a3

08009180 <localtime_r>:
 8009180:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009184:	4680      	mov	r8, r0
 8009186:	9101      	str	r1, [sp, #4]
 8009188:	f000 fcb4 	bl	8009af4 <__gettzinfo>
 800918c:	9901      	ldr	r1, [sp, #4]
 800918e:	4605      	mov	r5, r0
 8009190:	4640      	mov	r0, r8
 8009192:	f000 fcb3 	bl	8009afc <gmtime_r>
 8009196:	6943      	ldr	r3, [r0, #20]
 8009198:	0799      	lsls	r1, r3, #30
 800919a:	4604      	mov	r4, r0
 800919c:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 80091a0:	d105      	bne.n	80091ae <localtime_r+0x2e>
 80091a2:	2264      	movs	r2, #100	; 0x64
 80091a4:	fb97 f3f2 	sdiv	r3, r7, r2
 80091a8:	fb02 7313 	mls	r3, r2, r3, r7
 80091ac:	bb73      	cbnz	r3, 800920c <localtime_r+0x8c>
 80091ae:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80091b2:	fb97 f6f3 	sdiv	r6, r7, r3
 80091b6:	fb03 7616 	mls	r6, r3, r6, r7
 80091ba:	fab6 f386 	clz	r3, r6
 80091be:	095b      	lsrs	r3, r3, #5
 80091c0:	4e67      	ldr	r6, [pc, #412]	; (8009360 <localtime_r+0x1e0>)
 80091c2:	2230      	movs	r2, #48	; 0x30
 80091c4:	fb02 6603 	mla	r6, r2, r3, r6
 80091c8:	f000 fa8e 	bl	80096e8 <__tz_lock>
 80091cc:	f000 fa98 	bl	8009700 <_tzset_unlocked>
 80091d0:	4b64      	ldr	r3, [pc, #400]	; (8009364 <localtime_r+0x1e4>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	b34b      	cbz	r3, 800922a <localtime_r+0xaa>
 80091d6:	686b      	ldr	r3, [r5, #4]
 80091d8:	42bb      	cmp	r3, r7
 80091da:	d119      	bne.n	8009210 <localtime_r+0x90>
 80091dc:	682f      	ldr	r7, [r5, #0]
 80091de:	e9d8 2300 	ldrd	r2, r3, [r8]
 80091e2:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 80091e6:	b9df      	cbnz	r7, 8009220 <localtime_r+0xa0>
 80091e8:	4282      	cmp	r2, r0
 80091ea:	eb73 0101 	sbcs.w	r1, r3, r1
 80091ee:	da23      	bge.n	8009238 <localtime_r+0xb8>
 80091f0:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 80091f4:	4282      	cmp	r2, r0
 80091f6:	eb73 0701 	sbcs.w	r7, r3, r1
 80091fa:	bfb4      	ite	lt
 80091fc:	2701      	movlt	r7, #1
 80091fe:	2700      	movge	r7, #0
 8009200:	4282      	cmp	r2, r0
 8009202:	418b      	sbcs	r3, r1
 8009204:	6227      	str	r7, [r4, #32]
 8009206:	db19      	blt.n	800923c <localtime_r+0xbc>
 8009208:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800920a:	e018      	b.n	800923e <localtime_r+0xbe>
 800920c:	2301      	movs	r3, #1
 800920e:	e7d7      	b.n	80091c0 <localtime_r+0x40>
 8009210:	4638      	mov	r0, r7
 8009212:	f000 f9bf 	bl	8009594 <__tzcalc_limits>
 8009216:	2800      	cmp	r0, #0
 8009218:	d1e0      	bne.n	80091dc <localtime_r+0x5c>
 800921a:	f04f 33ff 	mov.w	r3, #4294967295
 800921e:	e004      	b.n	800922a <localtime_r+0xaa>
 8009220:	4282      	cmp	r2, r0
 8009222:	eb73 0101 	sbcs.w	r1, r3, r1
 8009226:	da02      	bge.n	800922e <localtime_r+0xae>
 8009228:	2300      	movs	r3, #0
 800922a:	6223      	str	r3, [r4, #32]
 800922c:	e7ec      	b.n	8009208 <localtime_r+0x88>
 800922e:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8009232:	4282      	cmp	r2, r0
 8009234:	418b      	sbcs	r3, r1
 8009236:	daf7      	bge.n	8009228 <localtime_r+0xa8>
 8009238:	2301      	movs	r3, #1
 800923a:	6223      	str	r3, [r4, #32]
 800923c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800923e:	6861      	ldr	r1, [r4, #4]
 8009240:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8009244:	203c      	movs	r0, #60	; 0x3c
 8009246:	fb93 f5f2 	sdiv	r5, r3, r2
 800924a:	fb02 3315 	mls	r3, r2, r5, r3
 800924e:	fb93 f2f0 	sdiv	r2, r3, r0
 8009252:	fb00 3012 	mls	r0, r0, r2, r3
 8009256:	6823      	ldr	r3, [r4, #0]
 8009258:	1a89      	subs	r1, r1, r2
 800925a:	68a2      	ldr	r2, [r4, #8]
 800925c:	6061      	str	r1, [r4, #4]
 800925e:	1a1b      	subs	r3, r3, r0
 8009260:	1b52      	subs	r2, r2, r5
 8009262:	2b3b      	cmp	r3, #59	; 0x3b
 8009264:	6023      	str	r3, [r4, #0]
 8009266:	60a2      	str	r2, [r4, #8]
 8009268:	dd35      	ble.n	80092d6 <localtime_r+0x156>
 800926a:	3101      	adds	r1, #1
 800926c:	6061      	str	r1, [r4, #4]
 800926e:	3b3c      	subs	r3, #60	; 0x3c
 8009270:	6023      	str	r3, [r4, #0]
 8009272:	6863      	ldr	r3, [r4, #4]
 8009274:	2b3b      	cmp	r3, #59	; 0x3b
 8009276:	dd34      	ble.n	80092e2 <localtime_r+0x162>
 8009278:	3201      	adds	r2, #1
 800927a:	60a2      	str	r2, [r4, #8]
 800927c:	3b3c      	subs	r3, #60	; 0x3c
 800927e:	6063      	str	r3, [r4, #4]
 8009280:	68a3      	ldr	r3, [r4, #8]
 8009282:	2b17      	cmp	r3, #23
 8009284:	dd33      	ble.n	80092ee <localtime_r+0x16e>
 8009286:	69e2      	ldr	r2, [r4, #28]
 8009288:	3201      	adds	r2, #1
 800928a:	61e2      	str	r2, [r4, #28]
 800928c:	69a2      	ldr	r2, [r4, #24]
 800928e:	3201      	adds	r2, #1
 8009290:	2a06      	cmp	r2, #6
 8009292:	bfc8      	it	gt
 8009294:	2200      	movgt	r2, #0
 8009296:	61a2      	str	r2, [r4, #24]
 8009298:	68e2      	ldr	r2, [r4, #12]
 800929a:	3b18      	subs	r3, #24
 800929c:	3201      	adds	r2, #1
 800929e:	60a3      	str	r3, [r4, #8]
 80092a0:	6923      	ldr	r3, [r4, #16]
 80092a2:	60e2      	str	r2, [r4, #12]
 80092a4:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80092a8:	428a      	cmp	r2, r1
 80092aa:	dd0e      	ble.n	80092ca <localtime_r+0x14a>
 80092ac:	2b0b      	cmp	r3, #11
 80092ae:	eba2 0201 	sub.w	r2, r2, r1
 80092b2:	60e2      	str	r2, [r4, #12]
 80092b4:	f103 0201 	add.w	r2, r3, #1
 80092b8:	bf09      	itett	eq
 80092ba:	6963      	ldreq	r3, [r4, #20]
 80092bc:	6122      	strne	r2, [r4, #16]
 80092be:	2200      	moveq	r2, #0
 80092c0:	3301      	addeq	r3, #1
 80092c2:	bf02      	ittt	eq
 80092c4:	6122      	streq	r2, [r4, #16]
 80092c6:	6163      	streq	r3, [r4, #20]
 80092c8:	61e2      	streq	r2, [r4, #28]
 80092ca:	f000 fa13 	bl	80096f4 <__tz_unlock>
 80092ce:	4620      	mov	r0, r4
 80092d0:	b002      	add	sp, #8
 80092d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	dacb      	bge.n	8009272 <localtime_r+0xf2>
 80092da:	3901      	subs	r1, #1
 80092dc:	6061      	str	r1, [r4, #4]
 80092de:	333c      	adds	r3, #60	; 0x3c
 80092e0:	e7c6      	b.n	8009270 <localtime_r+0xf0>
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	dacc      	bge.n	8009280 <localtime_r+0x100>
 80092e6:	3a01      	subs	r2, #1
 80092e8:	60a2      	str	r2, [r4, #8]
 80092ea:	333c      	adds	r3, #60	; 0x3c
 80092ec:	e7c7      	b.n	800927e <localtime_r+0xfe>
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	daeb      	bge.n	80092ca <localtime_r+0x14a>
 80092f2:	69e2      	ldr	r2, [r4, #28]
 80092f4:	3a01      	subs	r2, #1
 80092f6:	61e2      	str	r2, [r4, #28]
 80092f8:	69a2      	ldr	r2, [r4, #24]
 80092fa:	3a01      	subs	r2, #1
 80092fc:	bf48      	it	mi
 80092fe:	2206      	movmi	r2, #6
 8009300:	61a2      	str	r2, [r4, #24]
 8009302:	68e2      	ldr	r2, [r4, #12]
 8009304:	3318      	adds	r3, #24
 8009306:	3a01      	subs	r2, #1
 8009308:	60e2      	str	r2, [r4, #12]
 800930a:	60a3      	str	r3, [r4, #8]
 800930c:	2a00      	cmp	r2, #0
 800930e:	d1dc      	bne.n	80092ca <localtime_r+0x14a>
 8009310:	6923      	ldr	r3, [r4, #16]
 8009312:	3b01      	subs	r3, #1
 8009314:	d405      	bmi.n	8009322 <localtime_r+0x1a2>
 8009316:	6123      	str	r3, [r4, #16]
 8009318:	6923      	ldr	r3, [r4, #16]
 800931a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800931e:	60e3      	str	r3, [r4, #12]
 8009320:	e7d3      	b.n	80092ca <localtime_r+0x14a>
 8009322:	230b      	movs	r3, #11
 8009324:	6123      	str	r3, [r4, #16]
 8009326:	6963      	ldr	r3, [r4, #20]
 8009328:	1e5a      	subs	r2, r3, #1
 800932a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800932e:	6162      	str	r2, [r4, #20]
 8009330:	079a      	lsls	r2, r3, #30
 8009332:	d105      	bne.n	8009340 <localtime_r+0x1c0>
 8009334:	2164      	movs	r1, #100	; 0x64
 8009336:	fb93 f2f1 	sdiv	r2, r3, r1
 800933a:	fb01 3212 	mls	r2, r1, r2, r3
 800933e:	b962      	cbnz	r2, 800935a <localtime_r+0x1da>
 8009340:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009344:	fb93 f1f2 	sdiv	r1, r3, r2
 8009348:	fb02 3311 	mls	r3, r2, r1, r3
 800934c:	fab3 f383 	clz	r3, r3
 8009350:	095b      	lsrs	r3, r3, #5
 8009352:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8009356:	61e3      	str	r3, [r4, #28]
 8009358:	e7de      	b.n	8009318 <localtime_r+0x198>
 800935a:	2301      	movs	r3, #1
 800935c:	e7f9      	b.n	8009352 <localtime_r+0x1d2>
 800935e:	bf00      	nop
 8009360:	0800b500 	.word	0x0800b500
 8009364:	20000e28 	.word	0x20000e28

08009368 <malloc>:
 8009368:	4b02      	ldr	r3, [pc, #8]	; (8009374 <malloc+0xc>)
 800936a:	4601      	mov	r1, r0
 800936c:	6818      	ldr	r0, [r3, #0]
 800936e:	f000 b88d 	b.w	800948c <_malloc_r>
 8009372:	bf00      	nop
 8009374:	20000120 	.word	0x20000120

08009378 <free>:
 8009378:	4b02      	ldr	r3, [pc, #8]	; (8009384 <free+0xc>)
 800937a:	4601      	mov	r1, r0
 800937c:	6818      	ldr	r0, [r3, #0]
 800937e:	f000 b819 	b.w	80093b4 <_free_r>
 8009382:	bf00      	nop
 8009384:	20000120 	.word	0x20000120

08009388 <memcpy>:
 8009388:	440a      	add	r2, r1
 800938a:	4291      	cmp	r1, r2
 800938c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009390:	d100      	bne.n	8009394 <memcpy+0xc>
 8009392:	4770      	bx	lr
 8009394:	b510      	push	{r4, lr}
 8009396:	f811 4b01 	ldrb.w	r4, [r1], #1
 800939a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800939e:	4291      	cmp	r1, r2
 80093a0:	d1f9      	bne.n	8009396 <memcpy+0xe>
 80093a2:	bd10      	pop	{r4, pc}

080093a4 <memset>:
 80093a4:	4402      	add	r2, r0
 80093a6:	4603      	mov	r3, r0
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d100      	bne.n	80093ae <memset+0xa>
 80093ac:	4770      	bx	lr
 80093ae:	f803 1b01 	strb.w	r1, [r3], #1
 80093b2:	e7f9      	b.n	80093a8 <memset+0x4>

080093b4 <_free_r>:
 80093b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093b6:	2900      	cmp	r1, #0
 80093b8:	d044      	beq.n	8009444 <_free_r+0x90>
 80093ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093be:	9001      	str	r0, [sp, #4]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f1a1 0404 	sub.w	r4, r1, #4
 80093c6:	bfb8      	it	lt
 80093c8:	18e4      	addlt	r4, r4, r3
 80093ca:	f000 fc49 	bl	8009c60 <__malloc_lock>
 80093ce:	4a1e      	ldr	r2, [pc, #120]	; (8009448 <_free_r+0x94>)
 80093d0:	9801      	ldr	r0, [sp, #4]
 80093d2:	6813      	ldr	r3, [r2, #0]
 80093d4:	b933      	cbnz	r3, 80093e4 <_free_r+0x30>
 80093d6:	6063      	str	r3, [r4, #4]
 80093d8:	6014      	str	r4, [r2, #0]
 80093da:	b003      	add	sp, #12
 80093dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093e0:	f000 bc44 	b.w	8009c6c <__malloc_unlock>
 80093e4:	42a3      	cmp	r3, r4
 80093e6:	d908      	bls.n	80093fa <_free_r+0x46>
 80093e8:	6825      	ldr	r5, [r4, #0]
 80093ea:	1961      	adds	r1, r4, r5
 80093ec:	428b      	cmp	r3, r1
 80093ee:	bf01      	itttt	eq
 80093f0:	6819      	ldreq	r1, [r3, #0]
 80093f2:	685b      	ldreq	r3, [r3, #4]
 80093f4:	1949      	addeq	r1, r1, r5
 80093f6:	6021      	streq	r1, [r4, #0]
 80093f8:	e7ed      	b.n	80093d6 <_free_r+0x22>
 80093fa:	461a      	mov	r2, r3
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	b10b      	cbz	r3, 8009404 <_free_r+0x50>
 8009400:	42a3      	cmp	r3, r4
 8009402:	d9fa      	bls.n	80093fa <_free_r+0x46>
 8009404:	6811      	ldr	r1, [r2, #0]
 8009406:	1855      	adds	r5, r2, r1
 8009408:	42a5      	cmp	r5, r4
 800940a:	d10b      	bne.n	8009424 <_free_r+0x70>
 800940c:	6824      	ldr	r4, [r4, #0]
 800940e:	4421      	add	r1, r4
 8009410:	1854      	adds	r4, r2, r1
 8009412:	42a3      	cmp	r3, r4
 8009414:	6011      	str	r1, [r2, #0]
 8009416:	d1e0      	bne.n	80093da <_free_r+0x26>
 8009418:	681c      	ldr	r4, [r3, #0]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	6053      	str	r3, [r2, #4]
 800941e:	4421      	add	r1, r4
 8009420:	6011      	str	r1, [r2, #0]
 8009422:	e7da      	b.n	80093da <_free_r+0x26>
 8009424:	d902      	bls.n	800942c <_free_r+0x78>
 8009426:	230c      	movs	r3, #12
 8009428:	6003      	str	r3, [r0, #0]
 800942a:	e7d6      	b.n	80093da <_free_r+0x26>
 800942c:	6825      	ldr	r5, [r4, #0]
 800942e:	1961      	adds	r1, r4, r5
 8009430:	428b      	cmp	r3, r1
 8009432:	bf04      	itt	eq
 8009434:	6819      	ldreq	r1, [r3, #0]
 8009436:	685b      	ldreq	r3, [r3, #4]
 8009438:	6063      	str	r3, [r4, #4]
 800943a:	bf04      	itt	eq
 800943c:	1949      	addeq	r1, r1, r5
 800943e:	6021      	streq	r1, [r4, #0]
 8009440:	6054      	str	r4, [r2, #4]
 8009442:	e7ca      	b.n	80093da <_free_r+0x26>
 8009444:	b003      	add	sp, #12
 8009446:	bd30      	pop	{r4, r5, pc}
 8009448:	20000e04 	.word	0x20000e04

0800944c <sbrk_aligned>:
 800944c:	b570      	push	{r4, r5, r6, lr}
 800944e:	4e0e      	ldr	r6, [pc, #56]	; (8009488 <sbrk_aligned+0x3c>)
 8009450:	460c      	mov	r4, r1
 8009452:	6831      	ldr	r1, [r6, #0]
 8009454:	4605      	mov	r5, r0
 8009456:	b911      	cbnz	r1, 800945e <sbrk_aligned+0x12>
 8009458:	f000 f88c 	bl	8009574 <_sbrk_r>
 800945c:	6030      	str	r0, [r6, #0]
 800945e:	4621      	mov	r1, r4
 8009460:	4628      	mov	r0, r5
 8009462:	f000 f887 	bl	8009574 <_sbrk_r>
 8009466:	1c43      	adds	r3, r0, #1
 8009468:	d00a      	beq.n	8009480 <sbrk_aligned+0x34>
 800946a:	1cc4      	adds	r4, r0, #3
 800946c:	f024 0403 	bic.w	r4, r4, #3
 8009470:	42a0      	cmp	r0, r4
 8009472:	d007      	beq.n	8009484 <sbrk_aligned+0x38>
 8009474:	1a21      	subs	r1, r4, r0
 8009476:	4628      	mov	r0, r5
 8009478:	f000 f87c 	bl	8009574 <_sbrk_r>
 800947c:	3001      	adds	r0, #1
 800947e:	d101      	bne.n	8009484 <sbrk_aligned+0x38>
 8009480:	f04f 34ff 	mov.w	r4, #4294967295
 8009484:	4620      	mov	r0, r4
 8009486:	bd70      	pop	{r4, r5, r6, pc}
 8009488:	20000e08 	.word	0x20000e08

0800948c <_malloc_r>:
 800948c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009490:	1ccd      	adds	r5, r1, #3
 8009492:	f025 0503 	bic.w	r5, r5, #3
 8009496:	3508      	adds	r5, #8
 8009498:	2d0c      	cmp	r5, #12
 800949a:	bf38      	it	cc
 800949c:	250c      	movcc	r5, #12
 800949e:	2d00      	cmp	r5, #0
 80094a0:	4607      	mov	r7, r0
 80094a2:	db01      	blt.n	80094a8 <_malloc_r+0x1c>
 80094a4:	42a9      	cmp	r1, r5
 80094a6:	d905      	bls.n	80094b4 <_malloc_r+0x28>
 80094a8:	230c      	movs	r3, #12
 80094aa:	603b      	str	r3, [r7, #0]
 80094ac:	2600      	movs	r6, #0
 80094ae:	4630      	mov	r0, r6
 80094b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094b4:	4e2e      	ldr	r6, [pc, #184]	; (8009570 <_malloc_r+0xe4>)
 80094b6:	f000 fbd3 	bl	8009c60 <__malloc_lock>
 80094ba:	6833      	ldr	r3, [r6, #0]
 80094bc:	461c      	mov	r4, r3
 80094be:	bb34      	cbnz	r4, 800950e <_malloc_r+0x82>
 80094c0:	4629      	mov	r1, r5
 80094c2:	4638      	mov	r0, r7
 80094c4:	f7ff ffc2 	bl	800944c <sbrk_aligned>
 80094c8:	1c43      	adds	r3, r0, #1
 80094ca:	4604      	mov	r4, r0
 80094cc:	d14d      	bne.n	800956a <_malloc_r+0xde>
 80094ce:	6834      	ldr	r4, [r6, #0]
 80094d0:	4626      	mov	r6, r4
 80094d2:	2e00      	cmp	r6, #0
 80094d4:	d140      	bne.n	8009558 <_malloc_r+0xcc>
 80094d6:	6823      	ldr	r3, [r4, #0]
 80094d8:	4631      	mov	r1, r6
 80094da:	4638      	mov	r0, r7
 80094dc:	eb04 0803 	add.w	r8, r4, r3
 80094e0:	f000 f848 	bl	8009574 <_sbrk_r>
 80094e4:	4580      	cmp	r8, r0
 80094e6:	d13a      	bne.n	800955e <_malloc_r+0xd2>
 80094e8:	6821      	ldr	r1, [r4, #0]
 80094ea:	3503      	adds	r5, #3
 80094ec:	1a6d      	subs	r5, r5, r1
 80094ee:	f025 0503 	bic.w	r5, r5, #3
 80094f2:	3508      	adds	r5, #8
 80094f4:	2d0c      	cmp	r5, #12
 80094f6:	bf38      	it	cc
 80094f8:	250c      	movcc	r5, #12
 80094fa:	4629      	mov	r1, r5
 80094fc:	4638      	mov	r0, r7
 80094fe:	f7ff ffa5 	bl	800944c <sbrk_aligned>
 8009502:	3001      	adds	r0, #1
 8009504:	d02b      	beq.n	800955e <_malloc_r+0xd2>
 8009506:	6823      	ldr	r3, [r4, #0]
 8009508:	442b      	add	r3, r5
 800950a:	6023      	str	r3, [r4, #0]
 800950c:	e00e      	b.n	800952c <_malloc_r+0xa0>
 800950e:	6822      	ldr	r2, [r4, #0]
 8009510:	1b52      	subs	r2, r2, r5
 8009512:	d41e      	bmi.n	8009552 <_malloc_r+0xc6>
 8009514:	2a0b      	cmp	r2, #11
 8009516:	d916      	bls.n	8009546 <_malloc_r+0xba>
 8009518:	1961      	adds	r1, r4, r5
 800951a:	42a3      	cmp	r3, r4
 800951c:	6025      	str	r5, [r4, #0]
 800951e:	bf18      	it	ne
 8009520:	6059      	strne	r1, [r3, #4]
 8009522:	6863      	ldr	r3, [r4, #4]
 8009524:	bf08      	it	eq
 8009526:	6031      	streq	r1, [r6, #0]
 8009528:	5162      	str	r2, [r4, r5]
 800952a:	604b      	str	r3, [r1, #4]
 800952c:	4638      	mov	r0, r7
 800952e:	f104 060b 	add.w	r6, r4, #11
 8009532:	f000 fb9b 	bl	8009c6c <__malloc_unlock>
 8009536:	f026 0607 	bic.w	r6, r6, #7
 800953a:	1d23      	adds	r3, r4, #4
 800953c:	1af2      	subs	r2, r6, r3
 800953e:	d0b6      	beq.n	80094ae <_malloc_r+0x22>
 8009540:	1b9b      	subs	r3, r3, r6
 8009542:	50a3      	str	r3, [r4, r2]
 8009544:	e7b3      	b.n	80094ae <_malloc_r+0x22>
 8009546:	6862      	ldr	r2, [r4, #4]
 8009548:	42a3      	cmp	r3, r4
 800954a:	bf0c      	ite	eq
 800954c:	6032      	streq	r2, [r6, #0]
 800954e:	605a      	strne	r2, [r3, #4]
 8009550:	e7ec      	b.n	800952c <_malloc_r+0xa0>
 8009552:	4623      	mov	r3, r4
 8009554:	6864      	ldr	r4, [r4, #4]
 8009556:	e7b2      	b.n	80094be <_malloc_r+0x32>
 8009558:	4634      	mov	r4, r6
 800955a:	6876      	ldr	r6, [r6, #4]
 800955c:	e7b9      	b.n	80094d2 <_malloc_r+0x46>
 800955e:	230c      	movs	r3, #12
 8009560:	603b      	str	r3, [r7, #0]
 8009562:	4638      	mov	r0, r7
 8009564:	f000 fb82 	bl	8009c6c <__malloc_unlock>
 8009568:	e7a1      	b.n	80094ae <_malloc_r+0x22>
 800956a:	6025      	str	r5, [r4, #0]
 800956c:	e7de      	b.n	800952c <_malloc_r+0xa0>
 800956e:	bf00      	nop
 8009570:	20000e04 	.word	0x20000e04

08009574 <_sbrk_r>:
 8009574:	b538      	push	{r3, r4, r5, lr}
 8009576:	4d06      	ldr	r5, [pc, #24]	; (8009590 <_sbrk_r+0x1c>)
 8009578:	2300      	movs	r3, #0
 800957a:	4604      	mov	r4, r0
 800957c:	4608      	mov	r0, r1
 800957e:	602b      	str	r3, [r5, #0]
 8009580:	f7f9 ffd8 	bl	8003534 <_sbrk>
 8009584:	1c43      	adds	r3, r0, #1
 8009586:	d102      	bne.n	800958e <_sbrk_r+0x1a>
 8009588:	682b      	ldr	r3, [r5, #0]
 800958a:	b103      	cbz	r3, 800958e <_sbrk_r+0x1a>
 800958c:	6023      	str	r3, [r4, #0]
 800958e:	bd38      	pop	{r3, r4, r5, pc}
 8009590:	20000e38 	.word	0x20000e38

08009594 <__tzcalc_limits>:
 8009594:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009598:	4605      	mov	r5, r0
 800959a:	f000 faab 	bl	8009af4 <__gettzinfo>
 800959e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80095a2:	429d      	cmp	r5, r3
 80095a4:	f340 8099 	ble.w	80096da <__tzcalc_limits+0x146>
 80095a8:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 80095ac:	18ac      	adds	r4, r5, r2
 80095ae:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 80095b2:	f240 126d 	movw	r2, #365	; 0x16d
 80095b6:	10a4      	asrs	r4, r4, #2
 80095b8:	fb02 4403 	mla	r4, r2, r3, r4
 80095bc:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80095c0:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 80095c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80095c8:	441c      	add	r4, r3
 80095ca:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80095ce:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 80095d2:	fb95 fcf3 	sdiv	ip, r5, r3
 80095d6:	fb03 5c1c 	mls	ip, r3, ip, r5
 80095da:	186a      	adds	r2, r5, r1
 80095dc:	fabc f68c 	clz	r6, ip
 80095e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80095e4:	f005 0303 	and.w	r3, r5, #3
 80095e8:	4414      	add	r4, r2
 80095ea:	2264      	movs	r2, #100	; 0x64
 80095ec:	6045      	str	r5, [r0, #4]
 80095ee:	fb95 f7f2 	sdiv	r7, r5, r2
 80095f2:	0976      	lsrs	r6, r6, #5
 80095f4:	fb02 5717 	mls	r7, r2, r7, r5
 80095f8:	4601      	mov	r1, r0
 80095fa:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80095fe:	9300      	str	r3, [sp, #0]
 8009600:	f04f 0a07 	mov.w	sl, #7
 8009604:	7a0d      	ldrb	r5, [r1, #8]
 8009606:	694b      	ldr	r3, [r1, #20]
 8009608:	2d4a      	cmp	r5, #74	; 0x4a
 800960a:	d12d      	bne.n	8009668 <__tzcalc_limits+0xd4>
 800960c:	9a00      	ldr	r2, [sp, #0]
 800960e:	eb04 0e03 	add.w	lr, r4, r3
 8009612:	b902      	cbnz	r2, 8009616 <__tzcalc_limits+0x82>
 8009614:	b917      	cbnz	r7, 800961c <__tzcalc_limits+0x88>
 8009616:	f1bc 0f00 	cmp.w	ip, #0
 800961a:	d123      	bne.n	8009664 <__tzcalc_limits+0xd0>
 800961c:	2b3b      	cmp	r3, #59	; 0x3b
 800961e:	bfd4      	ite	le
 8009620:	2300      	movle	r3, #0
 8009622:	2301      	movgt	r3, #1
 8009624:	4473      	add	r3, lr
 8009626:	3b01      	subs	r3, #1
 8009628:	698d      	ldr	r5, [r1, #24]
 800962a:	4a2d      	ldr	r2, [pc, #180]	; (80096e0 <__tzcalc_limits+0x14c>)
 800962c:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8009630:	fbc3 5e02 	smlal	r5, lr, r3, r2
 8009634:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8009636:	18ed      	adds	r5, r5, r3
 8009638:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800963c:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8009640:	3128      	adds	r1, #40	; 0x28
 8009642:	458b      	cmp	fp, r1
 8009644:	d1de      	bne.n	8009604 <__tzcalc_limits+0x70>
 8009646:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800964a:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800964e:	428c      	cmp	r4, r1
 8009650:	eb72 0303 	sbcs.w	r3, r2, r3
 8009654:	bfb4      	ite	lt
 8009656:	2301      	movlt	r3, #1
 8009658:	2300      	movge	r3, #0
 800965a:	6003      	str	r3, [r0, #0]
 800965c:	2001      	movs	r0, #1
 800965e:	b003      	add	sp, #12
 8009660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009664:	2300      	movs	r3, #0
 8009666:	e7dd      	b.n	8009624 <__tzcalc_limits+0x90>
 8009668:	2d44      	cmp	r5, #68	; 0x44
 800966a:	d101      	bne.n	8009670 <__tzcalc_limits+0xdc>
 800966c:	4423      	add	r3, r4
 800966e:	e7db      	b.n	8009628 <__tzcalc_limits+0x94>
 8009670:	9a00      	ldr	r2, [sp, #0]
 8009672:	bb62      	cbnz	r2, 80096ce <__tzcalc_limits+0x13a>
 8009674:	2f00      	cmp	r7, #0
 8009676:	bf0c      	ite	eq
 8009678:	4635      	moveq	r5, r6
 800967a:	2501      	movne	r5, #1
 800967c:	68ca      	ldr	r2, [r1, #12]
 800967e:	9201      	str	r2, [sp, #4]
 8009680:	4a18      	ldr	r2, [pc, #96]	; (80096e4 <__tzcalc_limits+0x150>)
 8009682:	f04f 0930 	mov.w	r9, #48	; 0x30
 8009686:	fb09 2505 	mla	r5, r9, r5, r2
 800968a:	46a6      	mov	lr, r4
 800968c:	f04f 0800 	mov.w	r8, #0
 8009690:	3d04      	subs	r5, #4
 8009692:	9a01      	ldr	r2, [sp, #4]
 8009694:	f108 0801 	add.w	r8, r8, #1
 8009698:	4542      	cmp	r2, r8
 800969a:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800969e:	dc18      	bgt.n	80096d2 <__tzcalc_limits+0x13e>
 80096a0:	f10e 0504 	add.w	r5, lr, #4
 80096a4:	fb95 f8fa 	sdiv	r8, r5, sl
 80096a8:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 80096ac:	eba5 0808 	sub.w	r8, r5, r8
 80096b0:	ebb3 0808 	subs.w	r8, r3, r8
 80096b4:	690b      	ldr	r3, [r1, #16]
 80096b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80096ba:	bf48      	it	mi
 80096bc:	f108 0807 	addmi.w	r8, r8, #7
 80096c0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80096c4:	4443      	add	r3, r8
 80096c6:	454b      	cmp	r3, r9
 80096c8:	da05      	bge.n	80096d6 <__tzcalc_limits+0x142>
 80096ca:	4473      	add	r3, lr
 80096cc:	e7ac      	b.n	8009628 <__tzcalc_limits+0x94>
 80096ce:	4635      	mov	r5, r6
 80096d0:	e7d4      	b.n	800967c <__tzcalc_limits+0xe8>
 80096d2:	44ce      	add	lr, r9
 80096d4:	e7dd      	b.n	8009692 <__tzcalc_limits+0xfe>
 80096d6:	3b07      	subs	r3, #7
 80096d8:	e7f5      	b.n	80096c6 <__tzcalc_limits+0x132>
 80096da:	2000      	movs	r0, #0
 80096dc:	e7bf      	b.n	800965e <__tzcalc_limits+0xca>
 80096de:	bf00      	nop
 80096e0:	00015180 	.word	0x00015180
 80096e4:	0800b500 	.word	0x0800b500

080096e8 <__tz_lock>:
 80096e8:	4801      	ldr	r0, [pc, #4]	; (80096f0 <__tz_lock+0x8>)
 80096ea:	f000 bab4 	b.w	8009c56 <__retarget_lock_acquire>
 80096ee:	bf00      	nop
 80096f0:	20000e34 	.word	0x20000e34

080096f4 <__tz_unlock>:
 80096f4:	4801      	ldr	r0, [pc, #4]	; (80096fc <__tz_unlock+0x8>)
 80096f6:	f000 bab0 	b.w	8009c5a <__retarget_lock_release>
 80096fa:	bf00      	nop
 80096fc:	20000e34 	.word	0x20000e34

08009700 <_tzset_unlocked>:
 8009700:	4b01      	ldr	r3, [pc, #4]	; (8009708 <_tzset_unlocked+0x8>)
 8009702:	6818      	ldr	r0, [r3, #0]
 8009704:	f000 b802 	b.w	800970c <_tzset_unlocked_r>
 8009708:	20000120 	.word	0x20000120

0800970c <_tzset_unlocked_r>:
 800970c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009710:	b08d      	sub	sp, #52	; 0x34
 8009712:	4607      	mov	r7, r0
 8009714:	f000 f9ee 	bl	8009af4 <__gettzinfo>
 8009718:	49b0      	ldr	r1, [pc, #704]	; (80099dc <_tzset_unlocked_r+0x2d0>)
 800971a:	4eb1      	ldr	r6, [pc, #708]	; (80099e0 <_tzset_unlocked_r+0x2d4>)
 800971c:	4605      	mov	r5, r0
 800971e:	4638      	mov	r0, r7
 8009720:	f000 f9e0 	bl	8009ae4 <_getenv_r>
 8009724:	4604      	mov	r4, r0
 8009726:	b970      	cbnz	r0, 8009746 <_tzset_unlocked_r+0x3a>
 8009728:	4bae      	ldr	r3, [pc, #696]	; (80099e4 <_tzset_unlocked_r+0x2d8>)
 800972a:	4aaf      	ldr	r2, [pc, #700]	; (80099e8 <_tzset_unlocked_r+0x2dc>)
 800972c:	6018      	str	r0, [r3, #0]
 800972e:	4baf      	ldr	r3, [pc, #700]	; (80099ec <_tzset_unlocked_r+0x2e0>)
 8009730:	6018      	str	r0, [r3, #0]
 8009732:	4baf      	ldr	r3, [pc, #700]	; (80099f0 <_tzset_unlocked_r+0x2e4>)
 8009734:	6830      	ldr	r0, [r6, #0]
 8009736:	e9c3 2200 	strd	r2, r2, [r3]
 800973a:	f7ff fe1d 	bl	8009378 <free>
 800973e:	6034      	str	r4, [r6, #0]
 8009740:	b00d      	add	sp, #52	; 0x34
 8009742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009746:	6831      	ldr	r1, [r6, #0]
 8009748:	2900      	cmp	r1, #0
 800974a:	d162      	bne.n	8009812 <_tzset_unlocked_r+0x106>
 800974c:	6830      	ldr	r0, [r6, #0]
 800974e:	f7ff fe13 	bl	8009378 <free>
 8009752:	4620      	mov	r0, r4
 8009754:	f7f6 fd66 	bl	8000224 <strlen>
 8009758:	1c41      	adds	r1, r0, #1
 800975a:	4638      	mov	r0, r7
 800975c:	f7ff fe96 	bl	800948c <_malloc_r>
 8009760:	6030      	str	r0, [r6, #0]
 8009762:	2800      	cmp	r0, #0
 8009764:	d15a      	bne.n	800981c <_tzset_unlocked_r+0x110>
 8009766:	7823      	ldrb	r3, [r4, #0]
 8009768:	4aa2      	ldr	r2, [pc, #648]	; (80099f4 <_tzset_unlocked_r+0x2e8>)
 800976a:	49a3      	ldr	r1, [pc, #652]	; (80099f8 <_tzset_unlocked_r+0x2ec>)
 800976c:	2b3a      	cmp	r3, #58	; 0x3a
 800976e:	bf08      	it	eq
 8009770:	3401      	addeq	r4, #1
 8009772:	ae0a      	add	r6, sp, #40	; 0x28
 8009774:	4633      	mov	r3, r6
 8009776:	4620      	mov	r0, r4
 8009778:	f000 fd6c 	bl	800a254 <siscanf>
 800977c:	2800      	cmp	r0, #0
 800977e:	dddf      	ble.n	8009740 <_tzset_unlocked_r+0x34>
 8009780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009782:	18e7      	adds	r7, r4, r3
 8009784:	5ce3      	ldrb	r3, [r4, r3]
 8009786:	2b2d      	cmp	r3, #45	; 0x2d
 8009788:	d14c      	bne.n	8009824 <_tzset_unlocked_r+0x118>
 800978a:	3701      	adds	r7, #1
 800978c:	f04f 38ff 	mov.w	r8, #4294967295
 8009790:	f10d 0a20 	add.w	sl, sp, #32
 8009794:	f10d 0b1e 	add.w	fp, sp, #30
 8009798:	2400      	movs	r4, #0
 800979a:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800979e:	4997      	ldr	r1, [pc, #604]	; (80099fc <_tzset_unlocked_r+0x2f0>)
 80097a0:	9603      	str	r6, [sp, #12]
 80097a2:	f8cd b000 	str.w	fp, [sp]
 80097a6:	4633      	mov	r3, r6
 80097a8:	aa07      	add	r2, sp, #28
 80097aa:	4638      	mov	r0, r7
 80097ac:	f8ad 401e 	strh.w	r4, [sp, #30]
 80097b0:	f8ad 4020 	strh.w	r4, [sp, #32]
 80097b4:	f000 fd4e 	bl	800a254 <siscanf>
 80097b8:	42a0      	cmp	r0, r4
 80097ba:	ddc1      	ble.n	8009740 <_tzset_unlocked_r+0x34>
 80097bc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80097c0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80097c4:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8009a08 <_tzset_unlocked_r+0x2fc>
 80097c8:	213c      	movs	r1, #60	; 0x3c
 80097ca:	fb01 3302 	mla	r3, r1, r2, r3
 80097ce:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80097d2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80097d6:	fb01 3302 	mla	r3, r1, r2, r3
 80097da:	fb08 f303 	mul.w	r3, r8, r3
 80097de:	f8df 8210 	ldr.w	r8, [pc, #528]	; 80099f0 <_tzset_unlocked_r+0x2e4>
 80097e2:	62ab      	str	r3, [r5, #40]	; 0x28
 80097e4:	4b83      	ldr	r3, [pc, #524]	; (80099f4 <_tzset_unlocked_r+0x2e8>)
 80097e6:	f8c8 3000 	str.w	r3, [r8]
 80097ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097ec:	4982      	ldr	r1, [pc, #520]	; (80099f8 <_tzset_unlocked_r+0x2ec>)
 80097ee:	441f      	add	r7, r3
 80097f0:	464a      	mov	r2, r9
 80097f2:	4633      	mov	r3, r6
 80097f4:	4638      	mov	r0, r7
 80097f6:	f000 fd2d 	bl	800a254 <siscanf>
 80097fa:	42a0      	cmp	r0, r4
 80097fc:	dc18      	bgt.n	8009830 <_tzset_unlocked_r+0x124>
 80097fe:	f8d8 3000 	ldr.w	r3, [r8]
 8009802:	f8c8 3004 	str.w	r3, [r8, #4]
 8009806:	4b77      	ldr	r3, [pc, #476]	; (80099e4 <_tzset_unlocked_r+0x2d8>)
 8009808:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800980a:	601a      	str	r2, [r3, #0]
 800980c:	4b77      	ldr	r3, [pc, #476]	; (80099ec <_tzset_unlocked_r+0x2e0>)
 800980e:	601c      	str	r4, [r3, #0]
 8009810:	e796      	b.n	8009740 <_tzset_unlocked_r+0x34>
 8009812:	f7f6 fcfd 	bl	8000210 <strcmp>
 8009816:	2800      	cmp	r0, #0
 8009818:	d198      	bne.n	800974c <_tzset_unlocked_r+0x40>
 800981a:	e791      	b.n	8009740 <_tzset_unlocked_r+0x34>
 800981c:	4621      	mov	r1, r4
 800981e:	f000 fd8a 	bl	800a336 <strcpy>
 8009822:	e7a0      	b.n	8009766 <_tzset_unlocked_r+0x5a>
 8009824:	2b2b      	cmp	r3, #43	; 0x2b
 8009826:	bf08      	it	eq
 8009828:	3701      	addeq	r7, #1
 800982a:	f04f 0801 	mov.w	r8, #1
 800982e:	e7af      	b.n	8009790 <_tzset_unlocked_r+0x84>
 8009830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009832:	f8c8 9004 	str.w	r9, [r8, #4]
 8009836:	18fc      	adds	r4, r7, r3
 8009838:	5cfb      	ldrb	r3, [r7, r3]
 800983a:	2b2d      	cmp	r3, #45	; 0x2d
 800983c:	f040 808b 	bne.w	8009956 <_tzset_unlocked_r+0x24a>
 8009840:	3401      	adds	r4, #1
 8009842:	f04f 37ff 	mov.w	r7, #4294967295
 8009846:	2300      	movs	r3, #0
 8009848:	f8ad 301c 	strh.w	r3, [sp, #28]
 800984c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009850:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009854:	930a      	str	r3, [sp, #40]	; 0x28
 8009856:	e9cd a602 	strd	sl, r6, [sp, #8]
 800985a:	e9cd b600 	strd	fp, r6, [sp]
 800985e:	4967      	ldr	r1, [pc, #412]	; (80099fc <_tzset_unlocked_r+0x2f0>)
 8009860:	4633      	mov	r3, r6
 8009862:	aa07      	add	r2, sp, #28
 8009864:	4620      	mov	r0, r4
 8009866:	f000 fcf5 	bl	800a254 <siscanf>
 800986a:	2800      	cmp	r0, #0
 800986c:	dc78      	bgt.n	8009960 <_tzset_unlocked_r+0x254>
 800986e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8009870:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8009874:	652b      	str	r3, [r5, #80]	; 0x50
 8009876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009878:	462f      	mov	r7, r5
 800987a:	441c      	add	r4, r3
 800987c:	f04f 0900 	mov.w	r9, #0
 8009880:	7823      	ldrb	r3, [r4, #0]
 8009882:	2b2c      	cmp	r3, #44	; 0x2c
 8009884:	bf08      	it	eq
 8009886:	3401      	addeq	r4, #1
 8009888:	f894 8000 	ldrb.w	r8, [r4]
 800988c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8009890:	d178      	bne.n	8009984 <_tzset_unlocked_r+0x278>
 8009892:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8009896:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800989a:	ab09      	add	r3, sp, #36	; 0x24
 800989c:	9300      	str	r3, [sp, #0]
 800989e:	4958      	ldr	r1, [pc, #352]	; (8009a00 <_tzset_unlocked_r+0x2f4>)
 80098a0:	9603      	str	r6, [sp, #12]
 80098a2:	4633      	mov	r3, r6
 80098a4:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80098a8:	4620      	mov	r0, r4
 80098aa:	f000 fcd3 	bl	800a254 <siscanf>
 80098ae:	2803      	cmp	r0, #3
 80098b0:	f47f af46 	bne.w	8009740 <_tzset_unlocked_r+0x34>
 80098b4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80098b8:	1e4b      	subs	r3, r1, #1
 80098ba:	2b0b      	cmp	r3, #11
 80098bc:	f63f af40 	bhi.w	8009740 <_tzset_unlocked_r+0x34>
 80098c0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80098c4:	1e53      	subs	r3, r2, #1
 80098c6:	2b04      	cmp	r3, #4
 80098c8:	f63f af3a 	bhi.w	8009740 <_tzset_unlocked_r+0x34>
 80098cc:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80098d0:	2b06      	cmp	r3, #6
 80098d2:	f63f af35 	bhi.w	8009740 <_tzset_unlocked_r+0x34>
 80098d6:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80098da:	f887 8008 	strb.w	r8, [r7, #8]
 80098de:	617b      	str	r3, [r7, #20]
 80098e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098e2:	eb04 0803 	add.w	r8, r4, r3
 80098e6:	2302      	movs	r3, #2
 80098e8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80098ec:	2300      	movs	r3, #0
 80098ee:	f8ad 301e 	strh.w	r3, [sp, #30]
 80098f2:	f8ad 3020 	strh.w	r3, [sp, #32]
 80098f6:	930a      	str	r3, [sp, #40]	; 0x28
 80098f8:	f898 3000 	ldrb.w	r3, [r8]
 80098fc:	2b2f      	cmp	r3, #47	; 0x2f
 80098fe:	d109      	bne.n	8009914 <_tzset_unlocked_r+0x208>
 8009900:	e9cd a602 	strd	sl, r6, [sp, #8]
 8009904:	e9cd b600 	strd	fp, r6, [sp]
 8009908:	493e      	ldr	r1, [pc, #248]	; (8009a04 <_tzset_unlocked_r+0x2f8>)
 800990a:	4633      	mov	r3, r6
 800990c:	aa07      	add	r2, sp, #28
 800990e:	4640      	mov	r0, r8
 8009910:	f000 fca0 	bl	800a254 <siscanf>
 8009914:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8009918:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800991c:	213c      	movs	r1, #60	; 0x3c
 800991e:	fb01 3302 	mla	r3, r1, r2, r3
 8009922:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8009926:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800992a:	fb01 3302 	mla	r3, r1, r2, r3
 800992e:	61bb      	str	r3, [r7, #24]
 8009930:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009932:	3728      	adds	r7, #40	; 0x28
 8009934:	4444      	add	r4, r8
 8009936:	f1b9 0f00 	cmp.w	r9, #0
 800993a:	d020      	beq.n	800997e <_tzset_unlocked_r+0x272>
 800993c:	6868      	ldr	r0, [r5, #4]
 800993e:	f7ff fe29 	bl	8009594 <__tzcalc_limits>
 8009942:	4b28      	ldr	r3, [pc, #160]	; (80099e4 <_tzset_unlocked_r+0x2d8>)
 8009944:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8009946:	601a      	str	r2, [r3, #0]
 8009948:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800994a:	1a9b      	subs	r3, r3, r2
 800994c:	4a27      	ldr	r2, [pc, #156]	; (80099ec <_tzset_unlocked_r+0x2e0>)
 800994e:	bf18      	it	ne
 8009950:	2301      	movne	r3, #1
 8009952:	6013      	str	r3, [r2, #0]
 8009954:	e6f4      	b.n	8009740 <_tzset_unlocked_r+0x34>
 8009956:	2b2b      	cmp	r3, #43	; 0x2b
 8009958:	bf08      	it	eq
 800995a:	3401      	addeq	r4, #1
 800995c:	2701      	movs	r7, #1
 800995e:	e772      	b.n	8009846 <_tzset_unlocked_r+0x13a>
 8009960:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8009964:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8009968:	213c      	movs	r1, #60	; 0x3c
 800996a:	fb01 3302 	mla	r3, r1, r2, r3
 800996e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8009972:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009976:	fb01 3302 	mla	r3, r1, r2, r3
 800997a:	437b      	muls	r3, r7
 800997c:	e77a      	b.n	8009874 <_tzset_unlocked_r+0x168>
 800997e:	f04f 0901 	mov.w	r9, #1
 8009982:	e77d      	b.n	8009880 <_tzset_unlocked_r+0x174>
 8009984:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8009988:	bf06      	itte	eq
 800998a:	3401      	addeq	r4, #1
 800998c:	4643      	moveq	r3, r8
 800998e:	2344      	movne	r3, #68	; 0x44
 8009990:	220a      	movs	r2, #10
 8009992:	a90b      	add	r1, sp, #44	; 0x2c
 8009994:	4620      	mov	r0, r4
 8009996:	9305      	str	r3, [sp, #20]
 8009998:	f000 fd5e 	bl	800a458 <strtoul>
 800999c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80099a0:	9b05      	ldr	r3, [sp, #20]
 80099a2:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80099a6:	45a0      	cmp	r8, r4
 80099a8:	d114      	bne.n	80099d4 <_tzset_unlocked_r+0x2c8>
 80099aa:	234d      	movs	r3, #77	; 0x4d
 80099ac:	f1b9 0f00 	cmp.w	r9, #0
 80099b0:	d107      	bne.n	80099c2 <_tzset_unlocked_r+0x2b6>
 80099b2:	722b      	strb	r3, [r5, #8]
 80099b4:	2103      	movs	r1, #3
 80099b6:	2302      	movs	r3, #2
 80099b8:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80099bc:	f8c5 9014 	str.w	r9, [r5, #20]
 80099c0:	e791      	b.n	80098e6 <_tzset_unlocked_r+0x1da>
 80099c2:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80099c6:	220b      	movs	r2, #11
 80099c8:	2301      	movs	r3, #1
 80099ca:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80099ce:	2300      	movs	r3, #0
 80099d0:	63eb      	str	r3, [r5, #60]	; 0x3c
 80099d2:	e788      	b.n	80098e6 <_tzset_unlocked_r+0x1da>
 80099d4:	b280      	uxth	r0, r0
 80099d6:	723b      	strb	r3, [r7, #8]
 80099d8:	6178      	str	r0, [r7, #20]
 80099da:	e784      	b.n	80098e6 <_tzset_unlocked_r+0x1da>
 80099dc:	0800b560 	.word	0x0800b560
 80099e0:	20000e24 	.word	0x20000e24
 80099e4:	20000e2c 	.word	0x20000e2c
 80099e8:	0800b563 	.word	0x0800b563
 80099ec:	20000e28 	.word	0x20000e28
 80099f0:	20000184 	.word	0x20000184
 80099f4:	20000e17 	.word	0x20000e17
 80099f8:	0800b567 	.word	0x0800b567
 80099fc:	0800b58a 	.word	0x0800b58a
 8009a00:	0800b576 	.word	0x0800b576
 8009a04:	0800b589 	.word	0x0800b589
 8009a08:	20000e0c 	.word	0x20000e0c

08009a0c <__assert_func>:
 8009a0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a0e:	4614      	mov	r4, r2
 8009a10:	461a      	mov	r2, r3
 8009a12:	4b09      	ldr	r3, [pc, #36]	; (8009a38 <__assert_func+0x2c>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4605      	mov	r5, r0
 8009a18:	68d8      	ldr	r0, [r3, #12]
 8009a1a:	b14c      	cbz	r4, 8009a30 <__assert_func+0x24>
 8009a1c:	4b07      	ldr	r3, [pc, #28]	; (8009a3c <__assert_func+0x30>)
 8009a1e:	9100      	str	r1, [sp, #0]
 8009a20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a24:	4906      	ldr	r1, [pc, #24]	; (8009a40 <__assert_func+0x34>)
 8009a26:	462b      	mov	r3, r5
 8009a28:	f000 f80e 	bl	8009a48 <fiprintf>
 8009a2c:	f000 fdf0 	bl	800a610 <abort>
 8009a30:	4b04      	ldr	r3, [pc, #16]	; (8009a44 <__assert_func+0x38>)
 8009a32:	461c      	mov	r4, r3
 8009a34:	e7f3      	b.n	8009a1e <__assert_func+0x12>
 8009a36:	bf00      	nop
 8009a38:	20000120 	.word	0x20000120
 8009a3c:	0800b59c 	.word	0x0800b59c
 8009a40:	0800b5a9 	.word	0x0800b5a9
 8009a44:	0800b5d7 	.word	0x0800b5d7

08009a48 <fiprintf>:
 8009a48:	b40e      	push	{r1, r2, r3}
 8009a4a:	b503      	push	{r0, r1, lr}
 8009a4c:	4601      	mov	r1, r0
 8009a4e:	ab03      	add	r3, sp, #12
 8009a50:	4805      	ldr	r0, [pc, #20]	; (8009a68 <fiprintf+0x20>)
 8009a52:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a56:	6800      	ldr	r0, [r0, #0]
 8009a58:	9301      	str	r3, [sp, #4]
 8009a5a:	f000 f937 	bl	8009ccc <_vfiprintf_r>
 8009a5e:	b002      	add	sp, #8
 8009a60:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a64:	b003      	add	sp, #12
 8009a66:	4770      	bx	lr
 8009a68:	20000120 	.word	0x20000120

08009a6c <_findenv_r>:
 8009a6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a70:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8009ae0 <_findenv_r+0x74>
 8009a74:	4607      	mov	r7, r0
 8009a76:	4689      	mov	r9, r1
 8009a78:	4616      	mov	r6, r2
 8009a7a:	f000 fde1 	bl	800a640 <__env_lock>
 8009a7e:	f8da 4000 	ldr.w	r4, [sl]
 8009a82:	b134      	cbz	r4, 8009a92 <_findenv_r+0x26>
 8009a84:	464b      	mov	r3, r9
 8009a86:	4698      	mov	r8, r3
 8009a88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a8c:	b13a      	cbz	r2, 8009a9e <_findenv_r+0x32>
 8009a8e:	2a3d      	cmp	r2, #61	; 0x3d
 8009a90:	d1f9      	bne.n	8009a86 <_findenv_r+0x1a>
 8009a92:	4638      	mov	r0, r7
 8009a94:	f000 fdda 	bl	800a64c <__env_unlock>
 8009a98:	2000      	movs	r0, #0
 8009a9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a9e:	eba8 0809 	sub.w	r8, r8, r9
 8009aa2:	46a3      	mov	fp, r4
 8009aa4:	f854 0b04 	ldr.w	r0, [r4], #4
 8009aa8:	2800      	cmp	r0, #0
 8009aaa:	d0f2      	beq.n	8009a92 <_findenv_r+0x26>
 8009aac:	4642      	mov	r2, r8
 8009aae:	4649      	mov	r1, r9
 8009ab0:	f000 fc49 	bl	800a346 <strncmp>
 8009ab4:	2800      	cmp	r0, #0
 8009ab6:	d1f4      	bne.n	8009aa2 <_findenv_r+0x36>
 8009ab8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009abc:	eb03 0508 	add.w	r5, r3, r8
 8009ac0:	f813 3008 	ldrb.w	r3, [r3, r8]
 8009ac4:	2b3d      	cmp	r3, #61	; 0x3d
 8009ac6:	d1ec      	bne.n	8009aa2 <_findenv_r+0x36>
 8009ac8:	f8da 3000 	ldr.w	r3, [sl]
 8009acc:	ebab 0303 	sub.w	r3, fp, r3
 8009ad0:	109b      	asrs	r3, r3, #2
 8009ad2:	4638      	mov	r0, r7
 8009ad4:	6033      	str	r3, [r6, #0]
 8009ad6:	f000 fdb9 	bl	800a64c <__env_unlock>
 8009ada:	1c68      	adds	r0, r5, #1
 8009adc:	e7dd      	b.n	8009a9a <_findenv_r+0x2e>
 8009ade:	bf00      	nop
 8009ae0:	20000110 	.word	0x20000110

08009ae4 <_getenv_r>:
 8009ae4:	b507      	push	{r0, r1, r2, lr}
 8009ae6:	aa01      	add	r2, sp, #4
 8009ae8:	f7ff ffc0 	bl	8009a6c <_findenv_r>
 8009aec:	b003      	add	sp, #12
 8009aee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009af4 <__gettzinfo>:
 8009af4:	4800      	ldr	r0, [pc, #0]	; (8009af8 <__gettzinfo+0x4>)
 8009af6:	4770      	bx	lr
 8009af8:	20000190 	.word	0x20000190

08009afc <gmtime_r>:
 8009afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b00:	e9d0 6700 	ldrd	r6, r7, [r0]
 8009b04:	460c      	mov	r4, r1
 8009b06:	4a4f      	ldr	r2, [pc, #316]	; (8009c44 <gmtime_r+0x148>)
 8009b08:	2300      	movs	r3, #0
 8009b0a:	4630      	mov	r0, r6
 8009b0c:	4639      	mov	r1, r7
 8009b0e:	f7f6 fbe7 	bl	80002e0 <__aeabi_ldivmod>
 8009b12:	4639      	mov	r1, r7
 8009b14:	4605      	mov	r5, r0
 8009b16:	4a4b      	ldr	r2, [pc, #300]	; (8009c44 <gmtime_r+0x148>)
 8009b18:	4630      	mov	r0, r6
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	f7f6 fbe0 	bl	80002e0 <__aeabi_ldivmod>
 8009b20:	2a00      	cmp	r2, #0
 8009b22:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8009b26:	bfb7      	itett	lt
 8009b28:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8009b2c:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 8009b30:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 8009b34:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8009b38:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8009b3c:	fbb2 f1f0 	udiv	r1, r2, r0
 8009b40:	fb00 2211 	mls	r2, r0, r1, r2
 8009b44:	203c      	movs	r0, #60	; 0x3c
 8009b46:	60a1      	str	r1, [r4, #8]
 8009b48:	fbb2 f1f0 	udiv	r1, r2, r0
 8009b4c:	fb00 2211 	mls	r2, r0, r1, r2
 8009b50:	6061      	str	r1, [r4, #4]
 8009b52:	6022      	str	r2, [r4, #0]
 8009b54:	2107      	movs	r1, #7
 8009b56:	1cda      	adds	r2, r3, #3
 8009b58:	fb92 f1f1 	sdiv	r1, r2, r1
 8009b5c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8009b60:	1a52      	subs	r2, r2, r1
 8009b62:	bf48      	it	mi
 8009b64:	3207      	addmi	r2, #7
 8009b66:	4d38      	ldr	r5, [pc, #224]	; (8009c48 <gmtime_r+0x14c>)
 8009b68:	4838      	ldr	r0, [pc, #224]	; (8009c4c <gmtime_r+0x150>)
 8009b6a:	61a2      	str	r2, [r4, #24]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	bfb7      	itett	lt
 8009b70:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 8009b74:	fb93 f5f5 	sdivge	r5, r3, r5
 8009b78:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 8009b7c:	fb92 f5f5 	sdivlt	r5, r2, r5
 8009b80:	fb00 3005 	mla	r0, r0, r5, r3
 8009b84:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8009b88:	fbb0 f2f2 	udiv	r2, r0, r2
 8009b8c:	4402      	add	r2, r0
 8009b8e:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8009b92:	fbb0 f1f3 	udiv	r1, r0, r3
 8009b96:	1a52      	subs	r2, r2, r1
 8009b98:	f240 1c6d 	movw	ip, #365	; 0x16d
 8009b9c:	492c      	ldr	r1, [pc, #176]	; (8009c50 <gmtime_r+0x154>)
 8009b9e:	fbb0 f1f1 	udiv	r1, r0, r1
 8009ba2:	2764      	movs	r7, #100	; 0x64
 8009ba4:	1a52      	subs	r2, r2, r1
 8009ba6:	fbb2 f1fc 	udiv	r1, r2, ip
 8009baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bae:	fbb1 f6f7 	udiv	r6, r1, r7
 8009bb2:	1af3      	subs	r3, r6, r3
 8009bb4:	4403      	add	r3, r0
 8009bb6:	fb0c 3311 	mls	r3, ip, r1, r3
 8009bba:	2299      	movs	r2, #153	; 0x99
 8009bbc:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8009bc0:	f10e 0e02 	add.w	lr, lr, #2
 8009bc4:	f103 0c01 	add.w	ip, r3, #1
 8009bc8:	fbbe f0f2 	udiv	r0, lr, r2
 8009bcc:	4342      	muls	r2, r0
 8009bce:	3202      	adds	r2, #2
 8009bd0:	f04f 0805 	mov.w	r8, #5
 8009bd4:	fbb2 f2f8 	udiv	r2, r2, r8
 8009bd8:	ebac 0c02 	sub.w	ip, ip, r2
 8009bdc:	f240 52f9 	movw	r2, #1529	; 0x5f9
 8009be0:	4596      	cmp	lr, r2
 8009be2:	bf94      	ite	ls
 8009be4:	2202      	movls	r2, #2
 8009be6:	f06f 0209 	mvnhi.w	r2, #9
 8009bea:	4410      	add	r0, r2
 8009bec:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009bf0:	fb02 1505 	mla	r5, r2, r5, r1
 8009bf4:	2801      	cmp	r0, #1
 8009bf6:	bf98      	it	ls
 8009bf8:	3501      	addls	r5, #1
 8009bfa:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8009bfe:	d30d      	bcc.n	8009c1c <gmtime_r+0x120>
 8009c00:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009c04:	61e3      	str	r3, [r4, #28]
 8009c06:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	e9c4 0504 	strd	r0, r5, [r4, #16]
 8009c10:	f8c4 c00c 	str.w	ip, [r4, #12]
 8009c14:	6223      	str	r3, [r4, #32]
 8009c16:	4620      	mov	r0, r4
 8009c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c1c:	078a      	lsls	r2, r1, #30
 8009c1e:	d102      	bne.n	8009c26 <gmtime_r+0x12a>
 8009c20:	fb07 1616 	mls	r6, r7, r6, r1
 8009c24:	b95e      	cbnz	r6, 8009c3e <gmtime_r+0x142>
 8009c26:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009c2a:	fbb1 f6f2 	udiv	r6, r1, r2
 8009c2e:	fb02 1216 	mls	r2, r2, r6, r1
 8009c32:	fab2 f282 	clz	r2, r2
 8009c36:	0952      	lsrs	r2, r2, #5
 8009c38:	333b      	adds	r3, #59	; 0x3b
 8009c3a:	4413      	add	r3, r2
 8009c3c:	e7e2      	b.n	8009c04 <gmtime_r+0x108>
 8009c3e:	2201      	movs	r2, #1
 8009c40:	e7fa      	b.n	8009c38 <gmtime_r+0x13c>
 8009c42:	bf00      	nop
 8009c44:	00015180 	.word	0x00015180
 8009c48:	00023ab1 	.word	0x00023ab1
 8009c4c:	fffdc54f 	.word	0xfffdc54f
 8009c50:	00023ab0 	.word	0x00023ab0

08009c54 <__retarget_lock_init_recursive>:
 8009c54:	4770      	bx	lr

08009c56 <__retarget_lock_acquire>:
 8009c56:	4770      	bx	lr

08009c58 <__retarget_lock_acquire_recursive>:
 8009c58:	4770      	bx	lr

08009c5a <__retarget_lock_release>:
 8009c5a:	4770      	bx	lr

08009c5c <__retarget_lock_release_recursive>:
 8009c5c:	4770      	bx	lr
	...

08009c60 <__malloc_lock>:
 8009c60:	4801      	ldr	r0, [pc, #4]	; (8009c68 <__malloc_lock+0x8>)
 8009c62:	f7ff bff9 	b.w	8009c58 <__retarget_lock_acquire_recursive>
 8009c66:	bf00      	nop
 8009c68:	20000e31 	.word	0x20000e31

08009c6c <__malloc_unlock>:
 8009c6c:	4801      	ldr	r0, [pc, #4]	; (8009c74 <__malloc_unlock+0x8>)
 8009c6e:	f7ff bff5 	b.w	8009c5c <__retarget_lock_release_recursive>
 8009c72:	bf00      	nop
 8009c74:	20000e31 	.word	0x20000e31

08009c78 <__sfputc_r>:
 8009c78:	6893      	ldr	r3, [r2, #8]
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	b410      	push	{r4}
 8009c80:	6093      	str	r3, [r2, #8]
 8009c82:	da08      	bge.n	8009c96 <__sfputc_r+0x1e>
 8009c84:	6994      	ldr	r4, [r2, #24]
 8009c86:	42a3      	cmp	r3, r4
 8009c88:	db01      	blt.n	8009c8e <__sfputc_r+0x16>
 8009c8a:	290a      	cmp	r1, #10
 8009c8c:	d103      	bne.n	8009c96 <__sfputc_r+0x1e>
 8009c8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c92:	f000 bbeb 	b.w	800a46c <__swbuf_r>
 8009c96:	6813      	ldr	r3, [r2, #0]
 8009c98:	1c58      	adds	r0, r3, #1
 8009c9a:	6010      	str	r0, [r2, #0]
 8009c9c:	7019      	strb	r1, [r3, #0]
 8009c9e:	4608      	mov	r0, r1
 8009ca0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ca4:	4770      	bx	lr

08009ca6 <__sfputs_r>:
 8009ca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ca8:	4606      	mov	r6, r0
 8009caa:	460f      	mov	r7, r1
 8009cac:	4614      	mov	r4, r2
 8009cae:	18d5      	adds	r5, r2, r3
 8009cb0:	42ac      	cmp	r4, r5
 8009cb2:	d101      	bne.n	8009cb8 <__sfputs_r+0x12>
 8009cb4:	2000      	movs	r0, #0
 8009cb6:	e007      	b.n	8009cc8 <__sfputs_r+0x22>
 8009cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cbc:	463a      	mov	r2, r7
 8009cbe:	4630      	mov	r0, r6
 8009cc0:	f7ff ffda 	bl	8009c78 <__sfputc_r>
 8009cc4:	1c43      	adds	r3, r0, #1
 8009cc6:	d1f3      	bne.n	8009cb0 <__sfputs_r+0xa>
 8009cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ccc <_vfiprintf_r>:
 8009ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd0:	460d      	mov	r5, r1
 8009cd2:	b09d      	sub	sp, #116	; 0x74
 8009cd4:	4614      	mov	r4, r2
 8009cd6:	4698      	mov	r8, r3
 8009cd8:	4606      	mov	r6, r0
 8009cda:	b118      	cbz	r0, 8009ce4 <_vfiprintf_r+0x18>
 8009cdc:	6983      	ldr	r3, [r0, #24]
 8009cde:	b90b      	cbnz	r3, 8009ce4 <_vfiprintf_r+0x18>
 8009ce0:	f000 fdd4 	bl	800a88c <__sinit>
 8009ce4:	4b89      	ldr	r3, [pc, #548]	; (8009f0c <_vfiprintf_r+0x240>)
 8009ce6:	429d      	cmp	r5, r3
 8009ce8:	d11b      	bne.n	8009d22 <_vfiprintf_r+0x56>
 8009cea:	6875      	ldr	r5, [r6, #4]
 8009cec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cee:	07d9      	lsls	r1, r3, #31
 8009cf0:	d405      	bmi.n	8009cfe <_vfiprintf_r+0x32>
 8009cf2:	89ab      	ldrh	r3, [r5, #12]
 8009cf4:	059a      	lsls	r2, r3, #22
 8009cf6:	d402      	bmi.n	8009cfe <_vfiprintf_r+0x32>
 8009cf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cfa:	f7ff ffad 	bl	8009c58 <__retarget_lock_acquire_recursive>
 8009cfe:	89ab      	ldrh	r3, [r5, #12]
 8009d00:	071b      	lsls	r3, r3, #28
 8009d02:	d501      	bpl.n	8009d08 <_vfiprintf_r+0x3c>
 8009d04:	692b      	ldr	r3, [r5, #16]
 8009d06:	b9eb      	cbnz	r3, 8009d44 <_vfiprintf_r+0x78>
 8009d08:	4629      	mov	r1, r5
 8009d0a:	4630      	mov	r0, r6
 8009d0c:	f000 fc12 	bl	800a534 <__swsetup_r>
 8009d10:	b1c0      	cbz	r0, 8009d44 <_vfiprintf_r+0x78>
 8009d12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d14:	07dc      	lsls	r4, r3, #31
 8009d16:	d50e      	bpl.n	8009d36 <_vfiprintf_r+0x6a>
 8009d18:	f04f 30ff 	mov.w	r0, #4294967295
 8009d1c:	b01d      	add	sp, #116	; 0x74
 8009d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d22:	4b7b      	ldr	r3, [pc, #492]	; (8009f10 <_vfiprintf_r+0x244>)
 8009d24:	429d      	cmp	r5, r3
 8009d26:	d101      	bne.n	8009d2c <_vfiprintf_r+0x60>
 8009d28:	68b5      	ldr	r5, [r6, #8]
 8009d2a:	e7df      	b.n	8009cec <_vfiprintf_r+0x20>
 8009d2c:	4b79      	ldr	r3, [pc, #484]	; (8009f14 <_vfiprintf_r+0x248>)
 8009d2e:	429d      	cmp	r5, r3
 8009d30:	bf08      	it	eq
 8009d32:	68f5      	ldreq	r5, [r6, #12]
 8009d34:	e7da      	b.n	8009cec <_vfiprintf_r+0x20>
 8009d36:	89ab      	ldrh	r3, [r5, #12]
 8009d38:	0598      	lsls	r0, r3, #22
 8009d3a:	d4ed      	bmi.n	8009d18 <_vfiprintf_r+0x4c>
 8009d3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d3e:	f7ff ff8d 	bl	8009c5c <__retarget_lock_release_recursive>
 8009d42:	e7e9      	b.n	8009d18 <_vfiprintf_r+0x4c>
 8009d44:	2300      	movs	r3, #0
 8009d46:	9309      	str	r3, [sp, #36]	; 0x24
 8009d48:	2320      	movs	r3, #32
 8009d4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d52:	2330      	movs	r3, #48	; 0x30
 8009d54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009f18 <_vfiprintf_r+0x24c>
 8009d58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d5c:	f04f 0901 	mov.w	r9, #1
 8009d60:	4623      	mov	r3, r4
 8009d62:	469a      	mov	sl, r3
 8009d64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d68:	b10a      	cbz	r2, 8009d6e <_vfiprintf_r+0xa2>
 8009d6a:	2a25      	cmp	r2, #37	; 0x25
 8009d6c:	d1f9      	bne.n	8009d62 <_vfiprintf_r+0x96>
 8009d6e:	ebba 0b04 	subs.w	fp, sl, r4
 8009d72:	d00b      	beq.n	8009d8c <_vfiprintf_r+0xc0>
 8009d74:	465b      	mov	r3, fp
 8009d76:	4622      	mov	r2, r4
 8009d78:	4629      	mov	r1, r5
 8009d7a:	4630      	mov	r0, r6
 8009d7c:	f7ff ff93 	bl	8009ca6 <__sfputs_r>
 8009d80:	3001      	adds	r0, #1
 8009d82:	f000 80aa 	beq.w	8009eda <_vfiprintf_r+0x20e>
 8009d86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d88:	445a      	add	r2, fp
 8009d8a:	9209      	str	r2, [sp, #36]	; 0x24
 8009d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f000 80a2 	beq.w	8009eda <_vfiprintf_r+0x20e>
 8009d96:	2300      	movs	r3, #0
 8009d98:	f04f 32ff 	mov.w	r2, #4294967295
 8009d9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009da0:	f10a 0a01 	add.w	sl, sl, #1
 8009da4:	9304      	str	r3, [sp, #16]
 8009da6:	9307      	str	r3, [sp, #28]
 8009da8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009dac:	931a      	str	r3, [sp, #104]	; 0x68
 8009dae:	4654      	mov	r4, sl
 8009db0:	2205      	movs	r2, #5
 8009db2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009db6:	4858      	ldr	r0, [pc, #352]	; (8009f18 <_vfiprintf_r+0x24c>)
 8009db8:	f7f6 fa42 	bl	8000240 <memchr>
 8009dbc:	9a04      	ldr	r2, [sp, #16]
 8009dbe:	b9d8      	cbnz	r0, 8009df8 <_vfiprintf_r+0x12c>
 8009dc0:	06d1      	lsls	r1, r2, #27
 8009dc2:	bf44      	itt	mi
 8009dc4:	2320      	movmi	r3, #32
 8009dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dca:	0713      	lsls	r3, r2, #28
 8009dcc:	bf44      	itt	mi
 8009dce:	232b      	movmi	r3, #43	; 0x2b
 8009dd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8009dd8:	2b2a      	cmp	r3, #42	; 0x2a
 8009dda:	d015      	beq.n	8009e08 <_vfiprintf_r+0x13c>
 8009ddc:	9a07      	ldr	r2, [sp, #28]
 8009dde:	4654      	mov	r4, sl
 8009de0:	2000      	movs	r0, #0
 8009de2:	f04f 0c0a 	mov.w	ip, #10
 8009de6:	4621      	mov	r1, r4
 8009de8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dec:	3b30      	subs	r3, #48	; 0x30
 8009dee:	2b09      	cmp	r3, #9
 8009df0:	d94e      	bls.n	8009e90 <_vfiprintf_r+0x1c4>
 8009df2:	b1b0      	cbz	r0, 8009e22 <_vfiprintf_r+0x156>
 8009df4:	9207      	str	r2, [sp, #28]
 8009df6:	e014      	b.n	8009e22 <_vfiprintf_r+0x156>
 8009df8:	eba0 0308 	sub.w	r3, r0, r8
 8009dfc:	fa09 f303 	lsl.w	r3, r9, r3
 8009e00:	4313      	orrs	r3, r2
 8009e02:	9304      	str	r3, [sp, #16]
 8009e04:	46a2      	mov	sl, r4
 8009e06:	e7d2      	b.n	8009dae <_vfiprintf_r+0xe2>
 8009e08:	9b03      	ldr	r3, [sp, #12]
 8009e0a:	1d19      	adds	r1, r3, #4
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	9103      	str	r1, [sp, #12]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	bfbb      	ittet	lt
 8009e14:	425b      	neglt	r3, r3
 8009e16:	f042 0202 	orrlt.w	r2, r2, #2
 8009e1a:	9307      	strge	r3, [sp, #28]
 8009e1c:	9307      	strlt	r3, [sp, #28]
 8009e1e:	bfb8      	it	lt
 8009e20:	9204      	strlt	r2, [sp, #16]
 8009e22:	7823      	ldrb	r3, [r4, #0]
 8009e24:	2b2e      	cmp	r3, #46	; 0x2e
 8009e26:	d10c      	bne.n	8009e42 <_vfiprintf_r+0x176>
 8009e28:	7863      	ldrb	r3, [r4, #1]
 8009e2a:	2b2a      	cmp	r3, #42	; 0x2a
 8009e2c:	d135      	bne.n	8009e9a <_vfiprintf_r+0x1ce>
 8009e2e:	9b03      	ldr	r3, [sp, #12]
 8009e30:	1d1a      	adds	r2, r3, #4
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	9203      	str	r2, [sp, #12]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	bfb8      	it	lt
 8009e3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e3e:	3402      	adds	r4, #2
 8009e40:	9305      	str	r3, [sp, #20]
 8009e42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009f28 <_vfiprintf_r+0x25c>
 8009e46:	7821      	ldrb	r1, [r4, #0]
 8009e48:	2203      	movs	r2, #3
 8009e4a:	4650      	mov	r0, sl
 8009e4c:	f7f6 f9f8 	bl	8000240 <memchr>
 8009e50:	b140      	cbz	r0, 8009e64 <_vfiprintf_r+0x198>
 8009e52:	2340      	movs	r3, #64	; 0x40
 8009e54:	eba0 000a 	sub.w	r0, r0, sl
 8009e58:	fa03 f000 	lsl.w	r0, r3, r0
 8009e5c:	9b04      	ldr	r3, [sp, #16]
 8009e5e:	4303      	orrs	r3, r0
 8009e60:	3401      	adds	r4, #1
 8009e62:	9304      	str	r3, [sp, #16]
 8009e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e68:	482c      	ldr	r0, [pc, #176]	; (8009f1c <_vfiprintf_r+0x250>)
 8009e6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e6e:	2206      	movs	r2, #6
 8009e70:	f7f6 f9e6 	bl	8000240 <memchr>
 8009e74:	2800      	cmp	r0, #0
 8009e76:	d03f      	beq.n	8009ef8 <_vfiprintf_r+0x22c>
 8009e78:	4b29      	ldr	r3, [pc, #164]	; (8009f20 <_vfiprintf_r+0x254>)
 8009e7a:	bb1b      	cbnz	r3, 8009ec4 <_vfiprintf_r+0x1f8>
 8009e7c:	9b03      	ldr	r3, [sp, #12]
 8009e7e:	3307      	adds	r3, #7
 8009e80:	f023 0307 	bic.w	r3, r3, #7
 8009e84:	3308      	adds	r3, #8
 8009e86:	9303      	str	r3, [sp, #12]
 8009e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e8a:	443b      	add	r3, r7
 8009e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e8e:	e767      	b.n	8009d60 <_vfiprintf_r+0x94>
 8009e90:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e94:	460c      	mov	r4, r1
 8009e96:	2001      	movs	r0, #1
 8009e98:	e7a5      	b.n	8009de6 <_vfiprintf_r+0x11a>
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	3401      	adds	r4, #1
 8009e9e:	9305      	str	r3, [sp, #20]
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	f04f 0c0a 	mov.w	ip, #10
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009eac:	3a30      	subs	r2, #48	; 0x30
 8009eae:	2a09      	cmp	r2, #9
 8009eb0:	d903      	bls.n	8009eba <_vfiprintf_r+0x1ee>
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d0c5      	beq.n	8009e42 <_vfiprintf_r+0x176>
 8009eb6:	9105      	str	r1, [sp, #20]
 8009eb8:	e7c3      	b.n	8009e42 <_vfiprintf_r+0x176>
 8009eba:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ebe:	4604      	mov	r4, r0
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	e7f0      	b.n	8009ea6 <_vfiprintf_r+0x1da>
 8009ec4:	ab03      	add	r3, sp, #12
 8009ec6:	9300      	str	r3, [sp, #0]
 8009ec8:	462a      	mov	r2, r5
 8009eca:	4b16      	ldr	r3, [pc, #88]	; (8009f24 <_vfiprintf_r+0x258>)
 8009ecc:	a904      	add	r1, sp, #16
 8009ece:	4630      	mov	r0, r6
 8009ed0:	f3af 8000 	nop.w
 8009ed4:	4607      	mov	r7, r0
 8009ed6:	1c78      	adds	r0, r7, #1
 8009ed8:	d1d6      	bne.n	8009e88 <_vfiprintf_r+0x1bc>
 8009eda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009edc:	07d9      	lsls	r1, r3, #31
 8009ede:	d405      	bmi.n	8009eec <_vfiprintf_r+0x220>
 8009ee0:	89ab      	ldrh	r3, [r5, #12]
 8009ee2:	059a      	lsls	r2, r3, #22
 8009ee4:	d402      	bmi.n	8009eec <_vfiprintf_r+0x220>
 8009ee6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ee8:	f7ff feb8 	bl	8009c5c <__retarget_lock_release_recursive>
 8009eec:	89ab      	ldrh	r3, [r5, #12]
 8009eee:	065b      	lsls	r3, r3, #25
 8009ef0:	f53f af12 	bmi.w	8009d18 <_vfiprintf_r+0x4c>
 8009ef4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ef6:	e711      	b.n	8009d1c <_vfiprintf_r+0x50>
 8009ef8:	ab03      	add	r3, sp, #12
 8009efa:	9300      	str	r3, [sp, #0]
 8009efc:	462a      	mov	r2, r5
 8009efe:	4b09      	ldr	r3, [pc, #36]	; (8009f24 <_vfiprintf_r+0x258>)
 8009f00:	a904      	add	r1, sp, #16
 8009f02:	4630      	mov	r0, r6
 8009f04:	f000 f880 	bl	800a008 <_printf_i>
 8009f08:	e7e4      	b.n	8009ed4 <_vfiprintf_r+0x208>
 8009f0a:	bf00      	nop
 8009f0c:	0800b72c 	.word	0x0800b72c
 8009f10:	0800b74c 	.word	0x0800b74c
 8009f14:	0800b70c 	.word	0x0800b70c
 8009f18:	0800b5d8 	.word	0x0800b5d8
 8009f1c:	0800b5e2 	.word	0x0800b5e2
 8009f20:	00000000 	.word	0x00000000
 8009f24:	08009ca7 	.word	0x08009ca7
 8009f28:	0800b5de 	.word	0x0800b5de

08009f2c <_printf_common>:
 8009f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f30:	4616      	mov	r6, r2
 8009f32:	4699      	mov	r9, r3
 8009f34:	688a      	ldr	r2, [r1, #8]
 8009f36:	690b      	ldr	r3, [r1, #16]
 8009f38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	bfb8      	it	lt
 8009f40:	4613      	movlt	r3, r2
 8009f42:	6033      	str	r3, [r6, #0]
 8009f44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f48:	4607      	mov	r7, r0
 8009f4a:	460c      	mov	r4, r1
 8009f4c:	b10a      	cbz	r2, 8009f52 <_printf_common+0x26>
 8009f4e:	3301      	adds	r3, #1
 8009f50:	6033      	str	r3, [r6, #0]
 8009f52:	6823      	ldr	r3, [r4, #0]
 8009f54:	0699      	lsls	r1, r3, #26
 8009f56:	bf42      	ittt	mi
 8009f58:	6833      	ldrmi	r3, [r6, #0]
 8009f5a:	3302      	addmi	r3, #2
 8009f5c:	6033      	strmi	r3, [r6, #0]
 8009f5e:	6825      	ldr	r5, [r4, #0]
 8009f60:	f015 0506 	ands.w	r5, r5, #6
 8009f64:	d106      	bne.n	8009f74 <_printf_common+0x48>
 8009f66:	f104 0a19 	add.w	sl, r4, #25
 8009f6a:	68e3      	ldr	r3, [r4, #12]
 8009f6c:	6832      	ldr	r2, [r6, #0]
 8009f6e:	1a9b      	subs	r3, r3, r2
 8009f70:	42ab      	cmp	r3, r5
 8009f72:	dc26      	bgt.n	8009fc2 <_printf_common+0x96>
 8009f74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f78:	1e13      	subs	r3, r2, #0
 8009f7a:	6822      	ldr	r2, [r4, #0]
 8009f7c:	bf18      	it	ne
 8009f7e:	2301      	movne	r3, #1
 8009f80:	0692      	lsls	r2, r2, #26
 8009f82:	d42b      	bmi.n	8009fdc <_printf_common+0xb0>
 8009f84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f88:	4649      	mov	r1, r9
 8009f8a:	4638      	mov	r0, r7
 8009f8c:	47c0      	blx	r8
 8009f8e:	3001      	adds	r0, #1
 8009f90:	d01e      	beq.n	8009fd0 <_printf_common+0xa4>
 8009f92:	6823      	ldr	r3, [r4, #0]
 8009f94:	68e5      	ldr	r5, [r4, #12]
 8009f96:	6832      	ldr	r2, [r6, #0]
 8009f98:	f003 0306 	and.w	r3, r3, #6
 8009f9c:	2b04      	cmp	r3, #4
 8009f9e:	bf08      	it	eq
 8009fa0:	1aad      	subeq	r5, r5, r2
 8009fa2:	68a3      	ldr	r3, [r4, #8]
 8009fa4:	6922      	ldr	r2, [r4, #16]
 8009fa6:	bf0c      	ite	eq
 8009fa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fac:	2500      	movne	r5, #0
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	bfc4      	itt	gt
 8009fb2:	1a9b      	subgt	r3, r3, r2
 8009fb4:	18ed      	addgt	r5, r5, r3
 8009fb6:	2600      	movs	r6, #0
 8009fb8:	341a      	adds	r4, #26
 8009fba:	42b5      	cmp	r5, r6
 8009fbc:	d11a      	bne.n	8009ff4 <_printf_common+0xc8>
 8009fbe:	2000      	movs	r0, #0
 8009fc0:	e008      	b.n	8009fd4 <_printf_common+0xa8>
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	4652      	mov	r2, sl
 8009fc6:	4649      	mov	r1, r9
 8009fc8:	4638      	mov	r0, r7
 8009fca:	47c0      	blx	r8
 8009fcc:	3001      	adds	r0, #1
 8009fce:	d103      	bne.n	8009fd8 <_printf_common+0xac>
 8009fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fd8:	3501      	adds	r5, #1
 8009fda:	e7c6      	b.n	8009f6a <_printf_common+0x3e>
 8009fdc:	18e1      	adds	r1, r4, r3
 8009fde:	1c5a      	adds	r2, r3, #1
 8009fe0:	2030      	movs	r0, #48	; 0x30
 8009fe2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009fe6:	4422      	add	r2, r4
 8009fe8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009fec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ff0:	3302      	adds	r3, #2
 8009ff2:	e7c7      	b.n	8009f84 <_printf_common+0x58>
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	4622      	mov	r2, r4
 8009ff8:	4649      	mov	r1, r9
 8009ffa:	4638      	mov	r0, r7
 8009ffc:	47c0      	blx	r8
 8009ffe:	3001      	adds	r0, #1
 800a000:	d0e6      	beq.n	8009fd0 <_printf_common+0xa4>
 800a002:	3601      	adds	r6, #1
 800a004:	e7d9      	b.n	8009fba <_printf_common+0x8e>
	...

0800a008 <_printf_i>:
 800a008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a00c:	7e0f      	ldrb	r7, [r1, #24]
 800a00e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a010:	2f78      	cmp	r7, #120	; 0x78
 800a012:	4691      	mov	r9, r2
 800a014:	4680      	mov	r8, r0
 800a016:	460c      	mov	r4, r1
 800a018:	469a      	mov	sl, r3
 800a01a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a01e:	d807      	bhi.n	800a030 <_printf_i+0x28>
 800a020:	2f62      	cmp	r7, #98	; 0x62
 800a022:	d80a      	bhi.n	800a03a <_printf_i+0x32>
 800a024:	2f00      	cmp	r7, #0
 800a026:	f000 80d8 	beq.w	800a1da <_printf_i+0x1d2>
 800a02a:	2f58      	cmp	r7, #88	; 0x58
 800a02c:	f000 80a3 	beq.w	800a176 <_printf_i+0x16e>
 800a030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a034:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a038:	e03a      	b.n	800a0b0 <_printf_i+0xa8>
 800a03a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a03e:	2b15      	cmp	r3, #21
 800a040:	d8f6      	bhi.n	800a030 <_printf_i+0x28>
 800a042:	a101      	add	r1, pc, #4	; (adr r1, 800a048 <_printf_i+0x40>)
 800a044:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a048:	0800a0a1 	.word	0x0800a0a1
 800a04c:	0800a0b5 	.word	0x0800a0b5
 800a050:	0800a031 	.word	0x0800a031
 800a054:	0800a031 	.word	0x0800a031
 800a058:	0800a031 	.word	0x0800a031
 800a05c:	0800a031 	.word	0x0800a031
 800a060:	0800a0b5 	.word	0x0800a0b5
 800a064:	0800a031 	.word	0x0800a031
 800a068:	0800a031 	.word	0x0800a031
 800a06c:	0800a031 	.word	0x0800a031
 800a070:	0800a031 	.word	0x0800a031
 800a074:	0800a1c1 	.word	0x0800a1c1
 800a078:	0800a0e5 	.word	0x0800a0e5
 800a07c:	0800a1a3 	.word	0x0800a1a3
 800a080:	0800a031 	.word	0x0800a031
 800a084:	0800a031 	.word	0x0800a031
 800a088:	0800a1e3 	.word	0x0800a1e3
 800a08c:	0800a031 	.word	0x0800a031
 800a090:	0800a0e5 	.word	0x0800a0e5
 800a094:	0800a031 	.word	0x0800a031
 800a098:	0800a031 	.word	0x0800a031
 800a09c:	0800a1ab 	.word	0x0800a1ab
 800a0a0:	682b      	ldr	r3, [r5, #0]
 800a0a2:	1d1a      	adds	r2, r3, #4
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	602a      	str	r2, [r5, #0]
 800a0a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	e0a3      	b.n	800a1fc <_printf_i+0x1f4>
 800a0b4:	6820      	ldr	r0, [r4, #0]
 800a0b6:	6829      	ldr	r1, [r5, #0]
 800a0b8:	0606      	lsls	r6, r0, #24
 800a0ba:	f101 0304 	add.w	r3, r1, #4
 800a0be:	d50a      	bpl.n	800a0d6 <_printf_i+0xce>
 800a0c0:	680e      	ldr	r6, [r1, #0]
 800a0c2:	602b      	str	r3, [r5, #0]
 800a0c4:	2e00      	cmp	r6, #0
 800a0c6:	da03      	bge.n	800a0d0 <_printf_i+0xc8>
 800a0c8:	232d      	movs	r3, #45	; 0x2d
 800a0ca:	4276      	negs	r6, r6
 800a0cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0d0:	485e      	ldr	r0, [pc, #376]	; (800a24c <_printf_i+0x244>)
 800a0d2:	230a      	movs	r3, #10
 800a0d4:	e019      	b.n	800a10a <_printf_i+0x102>
 800a0d6:	680e      	ldr	r6, [r1, #0]
 800a0d8:	602b      	str	r3, [r5, #0]
 800a0da:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a0de:	bf18      	it	ne
 800a0e0:	b236      	sxthne	r6, r6
 800a0e2:	e7ef      	b.n	800a0c4 <_printf_i+0xbc>
 800a0e4:	682b      	ldr	r3, [r5, #0]
 800a0e6:	6820      	ldr	r0, [r4, #0]
 800a0e8:	1d19      	adds	r1, r3, #4
 800a0ea:	6029      	str	r1, [r5, #0]
 800a0ec:	0601      	lsls	r1, r0, #24
 800a0ee:	d501      	bpl.n	800a0f4 <_printf_i+0xec>
 800a0f0:	681e      	ldr	r6, [r3, #0]
 800a0f2:	e002      	b.n	800a0fa <_printf_i+0xf2>
 800a0f4:	0646      	lsls	r6, r0, #25
 800a0f6:	d5fb      	bpl.n	800a0f0 <_printf_i+0xe8>
 800a0f8:	881e      	ldrh	r6, [r3, #0]
 800a0fa:	4854      	ldr	r0, [pc, #336]	; (800a24c <_printf_i+0x244>)
 800a0fc:	2f6f      	cmp	r7, #111	; 0x6f
 800a0fe:	bf0c      	ite	eq
 800a100:	2308      	moveq	r3, #8
 800a102:	230a      	movne	r3, #10
 800a104:	2100      	movs	r1, #0
 800a106:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a10a:	6865      	ldr	r5, [r4, #4]
 800a10c:	60a5      	str	r5, [r4, #8]
 800a10e:	2d00      	cmp	r5, #0
 800a110:	bfa2      	ittt	ge
 800a112:	6821      	ldrge	r1, [r4, #0]
 800a114:	f021 0104 	bicge.w	r1, r1, #4
 800a118:	6021      	strge	r1, [r4, #0]
 800a11a:	b90e      	cbnz	r6, 800a120 <_printf_i+0x118>
 800a11c:	2d00      	cmp	r5, #0
 800a11e:	d04d      	beq.n	800a1bc <_printf_i+0x1b4>
 800a120:	4615      	mov	r5, r2
 800a122:	fbb6 f1f3 	udiv	r1, r6, r3
 800a126:	fb03 6711 	mls	r7, r3, r1, r6
 800a12a:	5dc7      	ldrb	r7, [r0, r7]
 800a12c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a130:	4637      	mov	r7, r6
 800a132:	42bb      	cmp	r3, r7
 800a134:	460e      	mov	r6, r1
 800a136:	d9f4      	bls.n	800a122 <_printf_i+0x11a>
 800a138:	2b08      	cmp	r3, #8
 800a13a:	d10b      	bne.n	800a154 <_printf_i+0x14c>
 800a13c:	6823      	ldr	r3, [r4, #0]
 800a13e:	07de      	lsls	r6, r3, #31
 800a140:	d508      	bpl.n	800a154 <_printf_i+0x14c>
 800a142:	6923      	ldr	r3, [r4, #16]
 800a144:	6861      	ldr	r1, [r4, #4]
 800a146:	4299      	cmp	r1, r3
 800a148:	bfde      	ittt	le
 800a14a:	2330      	movle	r3, #48	; 0x30
 800a14c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a150:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a154:	1b52      	subs	r2, r2, r5
 800a156:	6122      	str	r2, [r4, #16]
 800a158:	f8cd a000 	str.w	sl, [sp]
 800a15c:	464b      	mov	r3, r9
 800a15e:	aa03      	add	r2, sp, #12
 800a160:	4621      	mov	r1, r4
 800a162:	4640      	mov	r0, r8
 800a164:	f7ff fee2 	bl	8009f2c <_printf_common>
 800a168:	3001      	adds	r0, #1
 800a16a:	d14c      	bne.n	800a206 <_printf_i+0x1fe>
 800a16c:	f04f 30ff 	mov.w	r0, #4294967295
 800a170:	b004      	add	sp, #16
 800a172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a176:	4835      	ldr	r0, [pc, #212]	; (800a24c <_printf_i+0x244>)
 800a178:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a17c:	6829      	ldr	r1, [r5, #0]
 800a17e:	6823      	ldr	r3, [r4, #0]
 800a180:	f851 6b04 	ldr.w	r6, [r1], #4
 800a184:	6029      	str	r1, [r5, #0]
 800a186:	061d      	lsls	r5, r3, #24
 800a188:	d514      	bpl.n	800a1b4 <_printf_i+0x1ac>
 800a18a:	07df      	lsls	r7, r3, #31
 800a18c:	bf44      	itt	mi
 800a18e:	f043 0320 	orrmi.w	r3, r3, #32
 800a192:	6023      	strmi	r3, [r4, #0]
 800a194:	b91e      	cbnz	r6, 800a19e <_printf_i+0x196>
 800a196:	6823      	ldr	r3, [r4, #0]
 800a198:	f023 0320 	bic.w	r3, r3, #32
 800a19c:	6023      	str	r3, [r4, #0]
 800a19e:	2310      	movs	r3, #16
 800a1a0:	e7b0      	b.n	800a104 <_printf_i+0xfc>
 800a1a2:	6823      	ldr	r3, [r4, #0]
 800a1a4:	f043 0320 	orr.w	r3, r3, #32
 800a1a8:	6023      	str	r3, [r4, #0]
 800a1aa:	2378      	movs	r3, #120	; 0x78
 800a1ac:	4828      	ldr	r0, [pc, #160]	; (800a250 <_printf_i+0x248>)
 800a1ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a1b2:	e7e3      	b.n	800a17c <_printf_i+0x174>
 800a1b4:	0659      	lsls	r1, r3, #25
 800a1b6:	bf48      	it	mi
 800a1b8:	b2b6      	uxthmi	r6, r6
 800a1ba:	e7e6      	b.n	800a18a <_printf_i+0x182>
 800a1bc:	4615      	mov	r5, r2
 800a1be:	e7bb      	b.n	800a138 <_printf_i+0x130>
 800a1c0:	682b      	ldr	r3, [r5, #0]
 800a1c2:	6826      	ldr	r6, [r4, #0]
 800a1c4:	6961      	ldr	r1, [r4, #20]
 800a1c6:	1d18      	adds	r0, r3, #4
 800a1c8:	6028      	str	r0, [r5, #0]
 800a1ca:	0635      	lsls	r5, r6, #24
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	d501      	bpl.n	800a1d4 <_printf_i+0x1cc>
 800a1d0:	6019      	str	r1, [r3, #0]
 800a1d2:	e002      	b.n	800a1da <_printf_i+0x1d2>
 800a1d4:	0670      	lsls	r0, r6, #25
 800a1d6:	d5fb      	bpl.n	800a1d0 <_printf_i+0x1c8>
 800a1d8:	8019      	strh	r1, [r3, #0]
 800a1da:	2300      	movs	r3, #0
 800a1dc:	6123      	str	r3, [r4, #16]
 800a1de:	4615      	mov	r5, r2
 800a1e0:	e7ba      	b.n	800a158 <_printf_i+0x150>
 800a1e2:	682b      	ldr	r3, [r5, #0]
 800a1e4:	1d1a      	adds	r2, r3, #4
 800a1e6:	602a      	str	r2, [r5, #0]
 800a1e8:	681d      	ldr	r5, [r3, #0]
 800a1ea:	6862      	ldr	r2, [r4, #4]
 800a1ec:	2100      	movs	r1, #0
 800a1ee:	4628      	mov	r0, r5
 800a1f0:	f7f6 f826 	bl	8000240 <memchr>
 800a1f4:	b108      	cbz	r0, 800a1fa <_printf_i+0x1f2>
 800a1f6:	1b40      	subs	r0, r0, r5
 800a1f8:	6060      	str	r0, [r4, #4]
 800a1fa:	6863      	ldr	r3, [r4, #4]
 800a1fc:	6123      	str	r3, [r4, #16]
 800a1fe:	2300      	movs	r3, #0
 800a200:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a204:	e7a8      	b.n	800a158 <_printf_i+0x150>
 800a206:	6923      	ldr	r3, [r4, #16]
 800a208:	462a      	mov	r2, r5
 800a20a:	4649      	mov	r1, r9
 800a20c:	4640      	mov	r0, r8
 800a20e:	47d0      	blx	sl
 800a210:	3001      	adds	r0, #1
 800a212:	d0ab      	beq.n	800a16c <_printf_i+0x164>
 800a214:	6823      	ldr	r3, [r4, #0]
 800a216:	079b      	lsls	r3, r3, #30
 800a218:	d413      	bmi.n	800a242 <_printf_i+0x23a>
 800a21a:	68e0      	ldr	r0, [r4, #12]
 800a21c:	9b03      	ldr	r3, [sp, #12]
 800a21e:	4298      	cmp	r0, r3
 800a220:	bfb8      	it	lt
 800a222:	4618      	movlt	r0, r3
 800a224:	e7a4      	b.n	800a170 <_printf_i+0x168>
 800a226:	2301      	movs	r3, #1
 800a228:	4632      	mov	r2, r6
 800a22a:	4649      	mov	r1, r9
 800a22c:	4640      	mov	r0, r8
 800a22e:	47d0      	blx	sl
 800a230:	3001      	adds	r0, #1
 800a232:	d09b      	beq.n	800a16c <_printf_i+0x164>
 800a234:	3501      	adds	r5, #1
 800a236:	68e3      	ldr	r3, [r4, #12]
 800a238:	9903      	ldr	r1, [sp, #12]
 800a23a:	1a5b      	subs	r3, r3, r1
 800a23c:	42ab      	cmp	r3, r5
 800a23e:	dcf2      	bgt.n	800a226 <_printf_i+0x21e>
 800a240:	e7eb      	b.n	800a21a <_printf_i+0x212>
 800a242:	2500      	movs	r5, #0
 800a244:	f104 0619 	add.w	r6, r4, #25
 800a248:	e7f5      	b.n	800a236 <_printf_i+0x22e>
 800a24a:	bf00      	nop
 800a24c:	0800b5e9 	.word	0x0800b5e9
 800a250:	0800b5fa 	.word	0x0800b5fa

0800a254 <siscanf>:
 800a254:	b40e      	push	{r1, r2, r3}
 800a256:	b510      	push	{r4, lr}
 800a258:	b09f      	sub	sp, #124	; 0x7c
 800a25a:	ac21      	add	r4, sp, #132	; 0x84
 800a25c:	f44f 7101 	mov.w	r1, #516	; 0x204
 800a260:	f854 2b04 	ldr.w	r2, [r4], #4
 800a264:	9201      	str	r2, [sp, #4]
 800a266:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a26a:	9004      	str	r0, [sp, #16]
 800a26c:	9008      	str	r0, [sp, #32]
 800a26e:	f7f5 ffd9 	bl	8000224 <strlen>
 800a272:	4b0c      	ldr	r3, [pc, #48]	; (800a2a4 <siscanf+0x50>)
 800a274:	9005      	str	r0, [sp, #20]
 800a276:	9009      	str	r0, [sp, #36]	; 0x24
 800a278:	930d      	str	r3, [sp, #52]	; 0x34
 800a27a:	480b      	ldr	r0, [pc, #44]	; (800a2a8 <siscanf+0x54>)
 800a27c:	9a01      	ldr	r2, [sp, #4]
 800a27e:	6800      	ldr	r0, [r0, #0]
 800a280:	9403      	str	r4, [sp, #12]
 800a282:	2300      	movs	r3, #0
 800a284:	9311      	str	r3, [sp, #68]	; 0x44
 800a286:	9316      	str	r3, [sp, #88]	; 0x58
 800a288:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a28c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a290:	a904      	add	r1, sp, #16
 800a292:	4623      	mov	r3, r4
 800a294:	f000 fc9a 	bl	800abcc <__ssvfiscanf_r>
 800a298:	b01f      	add	sp, #124	; 0x7c
 800a29a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a29e:	b003      	add	sp, #12
 800a2a0:	4770      	bx	lr
 800a2a2:	bf00      	nop
 800a2a4:	0800a2cf 	.word	0x0800a2cf
 800a2a8:	20000120 	.word	0x20000120

0800a2ac <__sread>:
 800a2ac:	b510      	push	{r4, lr}
 800a2ae:	460c      	mov	r4, r1
 800a2b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2b4:	f000 ff54 	bl	800b160 <_read_r>
 800a2b8:	2800      	cmp	r0, #0
 800a2ba:	bfab      	itete	ge
 800a2bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a2be:	89a3      	ldrhlt	r3, [r4, #12]
 800a2c0:	181b      	addge	r3, r3, r0
 800a2c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a2c6:	bfac      	ite	ge
 800a2c8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a2ca:	81a3      	strhlt	r3, [r4, #12]
 800a2cc:	bd10      	pop	{r4, pc}

0800a2ce <__seofread>:
 800a2ce:	2000      	movs	r0, #0
 800a2d0:	4770      	bx	lr

0800a2d2 <__swrite>:
 800a2d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2d6:	461f      	mov	r7, r3
 800a2d8:	898b      	ldrh	r3, [r1, #12]
 800a2da:	05db      	lsls	r3, r3, #23
 800a2dc:	4605      	mov	r5, r0
 800a2de:	460c      	mov	r4, r1
 800a2e0:	4616      	mov	r6, r2
 800a2e2:	d505      	bpl.n	800a2f0 <__swrite+0x1e>
 800a2e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2e8:	2302      	movs	r3, #2
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f000 fb6c 	bl	800a9c8 <_lseek_r>
 800a2f0:	89a3      	ldrh	r3, [r4, #12]
 800a2f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2fa:	81a3      	strh	r3, [r4, #12]
 800a2fc:	4632      	mov	r2, r6
 800a2fe:	463b      	mov	r3, r7
 800a300:	4628      	mov	r0, r5
 800a302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a306:	f000 b903 	b.w	800a510 <_write_r>

0800a30a <__sseek>:
 800a30a:	b510      	push	{r4, lr}
 800a30c:	460c      	mov	r4, r1
 800a30e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a312:	f000 fb59 	bl	800a9c8 <_lseek_r>
 800a316:	1c43      	adds	r3, r0, #1
 800a318:	89a3      	ldrh	r3, [r4, #12]
 800a31a:	bf15      	itete	ne
 800a31c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a31e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a322:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a326:	81a3      	strheq	r3, [r4, #12]
 800a328:	bf18      	it	ne
 800a32a:	81a3      	strhne	r3, [r4, #12]
 800a32c:	bd10      	pop	{r4, pc}

0800a32e <__sclose>:
 800a32e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a332:	f000 b975 	b.w	800a620 <_close_r>

0800a336 <strcpy>:
 800a336:	4603      	mov	r3, r0
 800a338:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a33c:	f803 2b01 	strb.w	r2, [r3], #1
 800a340:	2a00      	cmp	r2, #0
 800a342:	d1f9      	bne.n	800a338 <strcpy+0x2>
 800a344:	4770      	bx	lr

0800a346 <strncmp>:
 800a346:	b510      	push	{r4, lr}
 800a348:	b17a      	cbz	r2, 800a36a <strncmp+0x24>
 800a34a:	4603      	mov	r3, r0
 800a34c:	3901      	subs	r1, #1
 800a34e:	1884      	adds	r4, r0, r2
 800a350:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a354:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a358:	4290      	cmp	r0, r2
 800a35a:	d101      	bne.n	800a360 <strncmp+0x1a>
 800a35c:	42a3      	cmp	r3, r4
 800a35e:	d101      	bne.n	800a364 <strncmp+0x1e>
 800a360:	1a80      	subs	r0, r0, r2
 800a362:	bd10      	pop	{r4, pc}
 800a364:	2800      	cmp	r0, #0
 800a366:	d1f3      	bne.n	800a350 <strncmp+0xa>
 800a368:	e7fa      	b.n	800a360 <strncmp+0x1a>
 800a36a:	4610      	mov	r0, r2
 800a36c:	e7f9      	b.n	800a362 <strncmp+0x1c>
	...

0800a370 <_strtoul_l.constprop.0>:
 800a370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a374:	4f36      	ldr	r7, [pc, #216]	; (800a450 <_strtoul_l.constprop.0+0xe0>)
 800a376:	4686      	mov	lr, r0
 800a378:	460d      	mov	r5, r1
 800a37a:	4628      	mov	r0, r5
 800a37c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a380:	5de6      	ldrb	r6, [r4, r7]
 800a382:	f016 0608 	ands.w	r6, r6, #8
 800a386:	d1f8      	bne.n	800a37a <_strtoul_l.constprop.0+0xa>
 800a388:	2c2d      	cmp	r4, #45	; 0x2d
 800a38a:	d12f      	bne.n	800a3ec <_strtoul_l.constprop.0+0x7c>
 800a38c:	782c      	ldrb	r4, [r5, #0]
 800a38e:	2601      	movs	r6, #1
 800a390:	1c85      	adds	r5, r0, #2
 800a392:	2b00      	cmp	r3, #0
 800a394:	d057      	beq.n	800a446 <_strtoul_l.constprop.0+0xd6>
 800a396:	2b10      	cmp	r3, #16
 800a398:	d109      	bne.n	800a3ae <_strtoul_l.constprop.0+0x3e>
 800a39a:	2c30      	cmp	r4, #48	; 0x30
 800a39c:	d107      	bne.n	800a3ae <_strtoul_l.constprop.0+0x3e>
 800a39e:	7828      	ldrb	r0, [r5, #0]
 800a3a0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a3a4:	2858      	cmp	r0, #88	; 0x58
 800a3a6:	d149      	bne.n	800a43c <_strtoul_l.constprop.0+0xcc>
 800a3a8:	786c      	ldrb	r4, [r5, #1]
 800a3aa:	2310      	movs	r3, #16
 800a3ac:	3502      	adds	r5, #2
 800a3ae:	f04f 38ff 	mov.w	r8, #4294967295
 800a3b2:	2700      	movs	r7, #0
 800a3b4:	fbb8 f8f3 	udiv	r8, r8, r3
 800a3b8:	fb03 f908 	mul.w	r9, r3, r8
 800a3bc:	ea6f 0909 	mvn.w	r9, r9
 800a3c0:	4638      	mov	r0, r7
 800a3c2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a3c6:	f1bc 0f09 	cmp.w	ip, #9
 800a3ca:	d814      	bhi.n	800a3f6 <_strtoul_l.constprop.0+0x86>
 800a3cc:	4664      	mov	r4, ip
 800a3ce:	42a3      	cmp	r3, r4
 800a3d0:	dd22      	ble.n	800a418 <_strtoul_l.constprop.0+0xa8>
 800a3d2:	2f00      	cmp	r7, #0
 800a3d4:	db1d      	blt.n	800a412 <_strtoul_l.constprop.0+0xa2>
 800a3d6:	4580      	cmp	r8, r0
 800a3d8:	d31b      	bcc.n	800a412 <_strtoul_l.constprop.0+0xa2>
 800a3da:	d101      	bne.n	800a3e0 <_strtoul_l.constprop.0+0x70>
 800a3dc:	45a1      	cmp	r9, r4
 800a3de:	db18      	blt.n	800a412 <_strtoul_l.constprop.0+0xa2>
 800a3e0:	fb00 4003 	mla	r0, r0, r3, r4
 800a3e4:	2701      	movs	r7, #1
 800a3e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3ea:	e7ea      	b.n	800a3c2 <_strtoul_l.constprop.0+0x52>
 800a3ec:	2c2b      	cmp	r4, #43	; 0x2b
 800a3ee:	bf04      	itt	eq
 800a3f0:	782c      	ldrbeq	r4, [r5, #0]
 800a3f2:	1c85      	addeq	r5, r0, #2
 800a3f4:	e7cd      	b.n	800a392 <_strtoul_l.constprop.0+0x22>
 800a3f6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a3fa:	f1bc 0f19 	cmp.w	ip, #25
 800a3fe:	d801      	bhi.n	800a404 <_strtoul_l.constprop.0+0x94>
 800a400:	3c37      	subs	r4, #55	; 0x37
 800a402:	e7e4      	b.n	800a3ce <_strtoul_l.constprop.0+0x5e>
 800a404:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a408:	f1bc 0f19 	cmp.w	ip, #25
 800a40c:	d804      	bhi.n	800a418 <_strtoul_l.constprop.0+0xa8>
 800a40e:	3c57      	subs	r4, #87	; 0x57
 800a410:	e7dd      	b.n	800a3ce <_strtoul_l.constprop.0+0x5e>
 800a412:	f04f 37ff 	mov.w	r7, #4294967295
 800a416:	e7e6      	b.n	800a3e6 <_strtoul_l.constprop.0+0x76>
 800a418:	2f00      	cmp	r7, #0
 800a41a:	da07      	bge.n	800a42c <_strtoul_l.constprop.0+0xbc>
 800a41c:	2322      	movs	r3, #34	; 0x22
 800a41e:	f8ce 3000 	str.w	r3, [lr]
 800a422:	f04f 30ff 	mov.w	r0, #4294967295
 800a426:	b932      	cbnz	r2, 800a436 <_strtoul_l.constprop.0+0xc6>
 800a428:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a42c:	b106      	cbz	r6, 800a430 <_strtoul_l.constprop.0+0xc0>
 800a42e:	4240      	negs	r0, r0
 800a430:	2a00      	cmp	r2, #0
 800a432:	d0f9      	beq.n	800a428 <_strtoul_l.constprop.0+0xb8>
 800a434:	b107      	cbz	r7, 800a438 <_strtoul_l.constprop.0+0xc8>
 800a436:	1e69      	subs	r1, r5, #1
 800a438:	6011      	str	r1, [r2, #0]
 800a43a:	e7f5      	b.n	800a428 <_strtoul_l.constprop.0+0xb8>
 800a43c:	2430      	movs	r4, #48	; 0x30
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d1b5      	bne.n	800a3ae <_strtoul_l.constprop.0+0x3e>
 800a442:	2308      	movs	r3, #8
 800a444:	e7b3      	b.n	800a3ae <_strtoul_l.constprop.0+0x3e>
 800a446:	2c30      	cmp	r4, #48	; 0x30
 800a448:	d0a9      	beq.n	800a39e <_strtoul_l.constprop.0+0x2e>
 800a44a:	230a      	movs	r3, #10
 800a44c:	e7af      	b.n	800a3ae <_strtoul_l.constprop.0+0x3e>
 800a44e:	bf00      	nop
 800a450:	0800b60c 	.word	0x0800b60c

0800a454 <_strtoul_r>:
 800a454:	f7ff bf8c 	b.w	800a370 <_strtoul_l.constprop.0>

0800a458 <strtoul>:
 800a458:	4613      	mov	r3, r2
 800a45a:	460a      	mov	r2, r1
 800a45c:	4601      	mov	r1, r0
 800a45e:	4802      	ldr	r0, [pc, #8]	; (800a468 <strtoul+0x10>)
 800a460:	6800      	ldr	r0, [r0, #0]
 800a462:	f7ff bf85 	b.w	800a370 <_strtoul_l.constprop.0>
 800a466:	bf00      	nop
 800a468:	20000120 	.word	0x20000120

0800a46c <__swbuf_r>:
 800a46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a46e:	460e      	mov	r6, r1
 800a470:	4614      	mov	r4, r2
 800a472:	4605      	mov	r5, r0
 800a474:	b118      	cbz	r0, 800a47e <__swbuf_r+0x12>
 800a476:	6983      	ldr	r3, [r0, #24]
 800a478:	b90b      	cbnz	r3, 800a47e <__swbuf_r+0x12>
 800a47a:	f000 fa07 	bl	800a88c <__sinit>
 800a47e:	4b21      	ldr	r3, [pc, #132]	; (800a504 <__swbuf_r+0x98>)
 800a480:	429c      	cmp	r4, r3
 800a482:	d12b      	bne.n	800a4dc <__swbuf_r+0x70>
 800a484:	686c      	ldr	r4, [r5, #4]
 800a486:	69a3      	ldr	r3, [r4, #24]
 800a488:	60a3      	str	r3, [r4, #8]
 800a48a:	89a3      	ldrh	r3, [r4, #12]
 800a48c:	071a      	lsls	r2, r3, #28
 800a48e:	d52f      	bpl.n	800a4f0 <__swbuf_r+0x84>
 800a490:	6923      	ldr	r3, [r4, #16]
 800a492:	b36b      	cbz	r3, 800a4f0 <__swbuf_r+0x84>
 800a494:	6923      	ldr	r3, [r4, #16]
 800a496:	6820      	ldr	r0, [r4, #0]
 800a498:	1ac0      	subs	r0, r0, r3
 800a49a:	6963      	ldr	r3, [r4, #20]
 800a49c:	b2f6      	uxtb	r6, r6
 800a49e:	4283      	cmp	r3, r0
 800a4a0:	4637      	mov	r7, r6
 800a4a2:	dc04      	bgt.n	800a4ae <__swbuf_r+0x42>
 800a4a4:	4621      	mov	r1, r4
 800a4a6:	4628      	mov	r0, r5
 800a4a8:	f000 f95c 	bl	800a764 <_fflush_r>
 800a4ac:	bb30      	cbnz	r0, 800a4fc <__swbuf_r+0x90>
 800a4ae:	68a3      	ldr	r3, [r4, #8]
 800a4b0:	3b01      	subs	r3, #1
 800a4b2:	60a3      	str	r3, [r4, #8]
 800a4b4:	6823      	ldr	r3, [r4, #0]
 800a4b6:	1c5a      	adds	r2, r3, #1
 800a4b8:	6022      	str	r2, [r4, #0]
 800a4ba:	701e      	strb	r6, [r3, #0]
 800a4bc:	6963      	ldr	r3, [r4, #20]
 800a4be:	3001      	adds	r0, #1
 800a4c0:	4283      	cmp	r3, r0
 800a4c2:	d004      	beq.n	800a4ce <__swbuf_r+0x62>
 800a4c4:	89a3      	ldrh	r3, [r4, #12]
 800a4c6:	07db      	lsls	r3, r3, #31
 800a4c8:	d506      	bpl.n	800a4d8 <__swbuf_r+0x6c>
 800a4ca:	2e0a      	cmp	r6, #10
 800a4cc:	d104      	bne.n	800a4d8 <__swbuf_r+0x6c>
 800a4ce:	4621      	mov	r1, r4
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	f000 f947 	bl	800a764 <_fflush_r>
 800a4d6:	b988      	cbnz	r0, 800a4fc <__swbuf_r+0x90>
 800a4d8:	4638      	mov	r0, r7
 800a4da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4dc:	4b0a      	ldr	r3, [pc, #40]	; (800a508 <__swbuf_r+0x9c>)
 800a4de:	429c      	cmp	r4, r3
 800a4e0:	d101      	bne.n	800a4e6 <__swbuf_r+0x7a>
 800a4e2:	68ac      	ldr	r4, [r5, #8]
 800a4e4:	e7cf      	b.n	800a486 <__swbuf_r+0x1a>
 800a4e6:	4b09      	ldr	r3, [pc, #36]	; (800a50c <__swbuf_r+0xa0>)
 800a4e8:	429c      	cmp	r4, r3
 800a4ea:	bf08      	it	eq
 800a4ec:	68ec      	ldreq	r4, [r5, #12]
 800a4ee:	e7ca      	b.n	800a486 <__swbuf_r+0x1a>
 800a4f0:	4621      	mov	r1, r4
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	f000 f81e 	bl	800a534 <__swsetup_r>
 800a4f8:	2800      	cmp	r0, #0
 800a4fa:	d0cb      	beq.n	800a494 <__swbuf_r+0x28>
 800a4fc:	f04f 37ff 	mov.w	r7, #4294967295
 800a500:	e7ea      	b.n	800a4d8 <__swbuf_r+0x6c>
 800a502:	bf00      	nop
 800a504:	0800b72c 	.word	0x0800b72c
 800a508:	0800b74c 	.word	0x0800b74c
 800a50c:	0800b70c 	.word	0x0800b70c

0800a510 <_write_r>:
 800a510:	b538      	push	{r3, r4, r5, lr}
 800a512:	4d07      	ldr	r5, [pc, #28]	; (800a530 <_write_r+0x20>)
 800a514:	4604      	mov	r4, r0
 800a516:	4608      	mov	r0, r1
 800a518:	4611      	mov	r1, r2
 800a51a:	2200      	movs	r2, #0
 800a51c:	602a      	str	r2, [r5, #0]
 800a51e:	461a      	mov	r2, r3
 800a520:	f7f8 ffb7 	bl	8003492 <_write>
 800a524:	1c43      	adds	r3, r0, #1
 800a526:	d102      	bne.n	800a52e <_write_r+0x1e>
 800a528:	682b      	ldr	r3, [r5, #0]
 800a52a:	b103      	cbz	r3, 800a52e <_write_r+0x1e>
 800a52c:	6023      	str	r3, [r4, #0]
 800a52e:	bd38      	pop	{r3, r4, r5, pc}
 800a530:	20000e38 	.word	0x20000e38

0800a534 <__swsetup_r>:
 800a534:	4b32      	ldr	r3, [pc, #200]	; (800a600 <__swsetup_r+0xcc>)
 800a536:	b570      	push	{r4, r5, r6, lr}
 800a538:	681d      	ldr	r5, [r3, #0]
 800a53a:	4606      	mov	r6, r0
 800a53c:	460c      	mov	r4, r1
 800a53e:	b125      	cbz	r5, 800a54a <__swsetup_r+0x16>
 800a540:	69ab      	ldr	r3, [r5, #24]
 800a542:	b913      	cbnz	r3, 800a54a <__swsetup_r+0x16>
 800a544:	4628      	mov	r0, r5
 800a546:	f000 f9a1 	bl	800a88c <__sinit>
 800a54a:	4b2e      	ldr	r3, [pc, #184]	; (800a604 <__swsetup_r+0xd0>)
 800a54c:	429c      	cmp	r4, r3
 800a54e:	d10f      	bne.n	800a570 <__swsetup_r+0x3c>
 800a550:	686c      	ldr	r4, [r5, #4]
 800a552:	89a3      	ldrh	r3, [r4, #12]
 800a554:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a558:	0719      	lsls	r1, r3, #28
 800a55a:	d42c      	bmi.n	800a5b6 <__swsetup_r+0x82>
 800a55c:	06dd      	lsls	r5, r3, #27
 800a55e:	d411      	bmi.n	800a584 <__swsetup_r+0x50>
 800a560:	2309      	movs	r3, #9
 800a562:	6033      	str	r3, [r6, #0]
 800a564:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a568:	81a3      	strh	r3, [r4, #12]
 800a56a:	f04f 30ff 	mov.w	r0, #4294967295
 800a56e:	e03e      	b.n	800a5ee <__swsetup_r+0xba>
 800a570:	4b25      	ldr	r3, [pc, #148]	; (800a608 <__swsetup_r+0xd4>)
 800a572:	429c      	cmp	r4, r3
 800a574:	d101      	bne.n	800a57a <__swsetup_r+0x46>
 800a576:	68ac      	ldr	r4, [r5, #8]
 800a578:	e7eb      	b.n	800a552 <__swsetup_r+0x1e>
 800a57a:	4b24      	ldr	r3, [pc, #144]	; (800a60c <__swsetup_r+0xd8>)
 800a57c:	429c      	cmp	r4, r3
 800a57e:	bf08      	it	eq
 800a580:	68ec      	ldreq	r4, [r5, #12]
 800a582:	e7e6      	b.n	800a552 <__swsetup_r+0x1e>
 800a584:	0758      	lsls	r0, r3, #29
 800a586:	d512      	bpl.n	800a5ae <__swsetup_r+0x7a>
 800a588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a58a:	b141      	cbz	r1, 800a59e <__swsetup_r+0x6a>
 800a58c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a590:	4299      	cmp	r1, r3
 800a592:	d002      	beq.n	800a59a <__swsetup_r+0x66>
 800a594:	4630      	mov	r0, r6
 800a596:	f7fe ff0d 	bl	80093b4 <_free_r>
 800a59a:	2300      	movs	r3, #0
 800a59c:	6363      	str	r3, [r4, #52]	; 0x34
 800a59e:	89a3      	ldrh	r3, [r4, #12]
 800a5a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a5a4:	81a3      	strh	r3, [r4, #12]
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	6063      	str	r3, [r4, #4]
 800a5aa:	6923      	ldr	r3, [r4, #16]
 800a5ac:	6023      	str	r3, [r4, #0]
 800a5ae:	89a3      	ldrh	r3, [r4, #12]
 800a5b0:	f043 0308 	orr.w	r3, r3, #8
 800a5b4:	81a3      	strh	r3, [r4, #12]
 800a5b6:	6923      	ldr	r3, [r4, #16]
 800a5b8:	b94b      	cbnz	r3, 800a5ce <__swsetup_r+0x9a>
 800a5ba:	89a3      	ldrh	r3, [r4, #12]
 800a5bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a5c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5c4:	d003      	beq.n	800a5ce <__swsetup_r+0x9a>
 800a5c6:	4621      	mov	r1, r4
 800a5c8:	4630      	mov	r0, r6
 800a5ca:	f000 fa35 	bl	800aa38 <__smakebuf_r>
 800a5ce:	89a0      	ldrh	r0, [r4, #12]
 800a5d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5d4:	f010 0301 	ands.w	r3, r0, #1
 800a5d8:	d00a      	beq.n	800a5f0 <__swsetup_r+0xbc>
 800a5da:	2300      	movs	r3, #0
 800a5dc:	60a3      	str	r3, [r4, #8]
 800a5de:	6963      	ldr	r3, [r4, #20]
 800a5e0:	425b      	negs	r3, r3
 800a5e2:	61a3      	str	r3, [r4, #24]
 800a5e4:	6923      	ldr	r3, [r4, #16]
 800a5e6:	b943      	cbnz	r3, 800a5fa <__swsetup_r+0xc6>
 800a5e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a5ec:	d1ba      	bne.n	800a564 <__swsetup_r+0x30>
 800a5ee:	bd70      	pop	{r4, r5, r6, pc}
 800a5f0:	0781      	lsls	r1, r0, #30
 800a5f2:	bf58      	it	pl
 800a5f4:	6963      	ldrpl	r3, [r4, #20]
 800a5f6:	60a3      	str	r3, [r4, #8]
 800a5f8:	e7f4      	b.n	800a5e4 <__swsetup_r+0xb0>
 800a5fa:	2000      	movs	r0, #0
 800a5fc:	e7f7      	b.n	800a5ee <__swsetup_r+0xba>
 800a5fe:	bf00      	nop
 800a600:	20000120 	.word	0x20000120
 800a604:	0800b72c 	.word	0x0800b72c
 800a608:	0800b74c 	.word	0x0800b74c
 800a60c:	0800b70c 	.word	0x0800b70c

0800a610 <abort>:
 800a610:	b508      	push	{r3, lr}
 800a612:	2006      	movs	r0, #6
 800a614:	f000 fe16 	bl	800b244 <raise>
 800a618:	2001      	movs	r0, #1
 800a61a:	f7f8 ff13 	bl	8003444 <_exit>
	...

0800a620 <_close_r>:
 800a620:	b538      	push	{r3, r4, r5, lr}
 800a622:	4d06      	ldr	r5, [pc, #24]	; (800a63c <_close_r+0x1c>)
 800a624:	2300      	movs	r3, #0
 800a626:	4604      	mov	r4, r0
 800a628:	4608      	mov	r0, r1
 800a62a:	602b      	str	r3, [r5, #0]
 800a62c:	f7f8 ff4d 	bl	80034ca <_close>
 800a630:	1c43      	adds	r3, r0, #1
 800a632:	d102      	bne.n	800a63a <_close_r+0x1a>
 800a634:	682b      	ldr	r3, [r5, #0]
 800a636:	b103      	cbz	r3, 800a63a <_close_r+0x1a>
 800a638:	6023      	str	r3, [r4, #0]
 800a63a:	bd38      	pop	{r3, r4, r5, pc}
 800a63c:	20000e38 	.word	0x20000e38

0800a640 <__env_lock>:
 800a640:	4801      	ldr	r0, [pc, #4]	; (800a648 <__env_lock+0x8>)
 800a642:	f7ff bb09 	b.w	8009c58 <__retarget_lock_acquire_recursive>
 800a646:	bf00      	nop
 800a648:	20000e30 	.word	0x20000e30

0800a64c <__env_unlock>:
 800a64c:	4801      	ldr	r0, [pc, #4]	; (800a654 <__env_unlock+0x8>)
 800a64e:	f7ff bb05 	b.w	8009c5c <__retarget_lock_release_recursive>
 800a652:	bf00      	nop
 800a654:	20000e30 	.word	0x20000e30

0800a658 <__sflush_r>:
 800a658:	898a      	ldrh	r2, [r1, #12]
 800a65a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a65e:	4605      	mov	r5, r0
 800a660:	0710      	lsls	r0, r2, #28
 800a662:	460c      	mov	r4, r1
 800a664:	d458      	bmi.n	800a718 <__sflush_r+0xc0>
 800a666:	684b      	ldr	r3, [r1, #4]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	dc05      	bgt.n	800a678 <__sflush_r+0x20>
 800a66c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a66e:	2b00      	cmp	r3, #0
 800a670:	dc02      	bgt.n	800a678 <__sflush_r+0x20>
 800a672:	2000      	movs	r0, #0
 800a674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a678:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a67a:	2e00      	cmp	r6, #0
 800a67c:	d0f9      	beq.n	800a672 <__sflush_r+0x1a>
 800a67e:	2300      	movs	r3, #0
 800a680:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a684:	682f      	ldr	r7, [r5, #0]
 800a686:	602b      	str	r3, [r5, #0]
 800a688:	d032      	beq.n	800a6f0 <__sflush_r+0x98>
 800a68a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a68c:	89a3      	ldrh	r3, [r4, #12]
 800a68e:	075a      	lsls	r2, r3, #29
 800a690:	d505      	bpl.n	800a69e <__sflush_r+0x46>
 800a692:	6863      	ldr	r3, [r4, #4]
 800a694:	1ac0      	subs	r0, r0, r3
 800a696:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a698:	b10b      	cbz	r3, 800a69e <__sflush_r+0x46>
 800a69a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a69c:	1ac0      	subs	r0, r0, r3
 800a69e:	2300      	movs	r3, #0
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a6a4:	6a21      	ldr	r1, [r4, #32]
 800a6a6:	4628      	mov	r0, r5
 800a6a8:	47b0      	blx	r6
 800a6aa:	1c43      	adds	r3, r0, #1
 800a6ac:	89a3      	ldrh	r3, [r4, #12]
 800a6ae:	d106      	bne.n	800a6be <__sflush_r+0x66>
 800a6b0:	6829      	ldr	r1, [r5, #0]
 800a6b2:	291d      	cmp	r1, #29
 800a6b4:	d82c      	bhi.n	800a710 <__sflush_r+0xb8>
 800a6b6:	4a2a      	ldr	r2, [pc, #168]	; (800a760 <__sflush_r+0x108>)
 800a6b8:	40ca      	lsrs	r2, r1
 800a6ba:	07d6      	lsls	r6, r2, #31
 800a6bc:	d528      	bpl.n	800a710 <__sflush_r+0xb8>
 800a6be:	2200      	movs	r2, #0
 800a6c0:	6062      	str	r2, [r4, #4]
 800a6c2:	04d9      	lsls	r1, r3, #19
 800a6c4:	6922      	ldr	r2, [r4, #16]
 800a6c6:	6022      	str	r2, [r4, #0]
 800a6c8:	d504      	bpl.n	800a6d4 <__sflush_r+0x7c>
 800a6ca:	1c42      	adds	r2, r0, #1
 800a6cc:	d101      	bne.n	800a6d2 <__sflush_r+0x7a>
 800a6ce:	682b      	ldr	r3, [r5, #0]
 800a6d0:	b903      	cbnz	r3, 800a6d4 <__sflush_r+0x7c>
 800a6d2:	6560      	str	r0, [r4, #84]	; 0x54
 800a6d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6d6:	602f      	str	r7, [r5, #0]
 800a6d8:	2900      	cmp	r1, #0
 800a6da:	d0ca      	beq.n	800a672 <__sflush_r+0x1a>
 800a6dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6e0:	4299      	cmp	r1, r3
 800a6e2:	d002      	beq.n	800a6ea <__sflush_r+0x92>
 800a6e4:	4628      	mov	r0, r5
 800a6e6:	f7fe fe65 	bl	80093b4 <_free_r>
 800a6ea:	2000      	movs	r0, #0
 800a6ec:	6360      	str	r0, [r4, #52]	; 0x34
 800a6ee:	e7c1      	b.n	800a674 <__sflush_r+0x1c>
 800a6f0:	6a21      	ldr	r1, [r4, #32]
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	4628      	mov	r0, r5
 800a6f6:	47b0      	blx	r6
 800a6f8:	1c41      	adds	r1, r0, #1
 800a6fa:	d1c7      	bne.n	800a68c <__sflush_r+0x34>
 800a6fc:	682b      	ldr	r3, [r5, #0]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d0c4      	beq.n	800a68c <__sflush_r+0x34>
 800a702:	2b1d      	cmp	r3, #29
 800a704:	d001      	beq.n	800a70a <__sflush_r+0xb2>
 800a706:	2b16      	cmp	r3, #22
 800a708:	d101      	bne.n	800a70e <__sflush_r+0xb6>
 800a70a:	602f      	str	r7, [r5, #0]
 800a70c:	e7b1      	b.n	800a672 <__sflush_r+0x1a>
 800a70e:	89a3      	ldrh	r3, [r4, #12]
 800a710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a714:	81a3      	strh	r3, [r4, #12]
 800a716:	e7ad      	b.n	800a674 <__sflush_r+0x1c>
 800a718:	690f      	ldr	r7, [r1, #16]
 800a71a:	2f00      	cmp	r7, #0
 800a71c:	d0a9      	beq.n	800a672 <__sflush_r+0x1a>
 800a71e:	0793      	lsls	r3, r2, #30
 800a720:	680e      	ldr	r6, [r1, #0]
 800a722:	bf08      	it	eq
 800a724:	694b      	ldreq	r3, [r1, #20]
 800a726:	600f      	str	r7, [r1, #0]
 800a728:	bf18      	it	ne
 800a72a:	2300      	movne	r3, #0
 800a72c:	eba6 0807 	sub.w	r8, r6, r7
 800a730:	608b      	str	r3, [r1, #8]
 800a732:	f1b8 0f00 	cmp.w	r8, #0
 800a736:	dd9c      	ble.n	800a672 <__sflush_r+0x1a>
 800a738:	6a21      	ldr	r1, [r4, #32]
 800a73a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a73c:	4643      	mov	r3, r8
 800a73e:	463a      	mov	r2, r7
 800a740:	4628      	mov	r0, r5
 800a742:	47b0      	blx	r6
 800a744:	2800      	cmp	r0, #0
 800a746:	dc06      	bgt.n	800a756 <__sflush_r+0xfe>
 800a748:	89a3      	ldrh	r3, [r4, #12]
 800a74a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a74e:	81a3      	strh	r3, [r4, #12]
 800a750:	f04f 30ff 	mov.w	r0, #4294967295
 800a754:	e78e      	b.n	800a674 <__sflush_r+0x1c>
 800a756:	4407      	add	r7, r0
 800a758:	eba8 0800 	sub.w	r8, r8, r0
 800a75c:	e7e9      	b.n	800a732 <__sflush_r+0xda>
 800a75e:	bf00      	nop
 800a760:	20400001 	.word	0x20400001

0800a764 <_fflush_r>:
 800a764:	b538      	push	{r3, r4, r5, lr}
 800a766:	690b      	ldr	r3, [r1, #16]
 800a768:	4605      	mov	r5, r0
 800a76a:	460c      	mov	r4, r1
 800a76c:	b913      	cbnz	r3, 800a774 <_fflush_r+0x10>
 800a76e:	2500      	movs	r5, #0
 800a770:	4628      	mov	r0, r5
 800a772:	bd38      	pop	{r3, r4, r5, pc}
 800a774:	b118      	cbz	r0, 800a77e <_fflush_r+0x1a>
 800a776:	6983      	ldr	r3, [r0, #24]
 800a778:	b90b      	cbnz	r3, 800a77e <_fflush_r+0x1a>
 800a77a:	f000 f887 	bl	800a88c <__sinit>
 800a77e:	4b14      	ldr	r3, [pc, #80]	; (800a7d0 <_fflush_r+0x6c>)
 800a780:	429c      	cmp	r4, r3
 800a782:	d11b      	bne.n	800a7bc <_fflush_r+0x58>
 800a784:	686c      	ldr	r4, [r5, #4]
 800a786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d0ef      	beq.n	800a76e <_fflush_r+0xa>
 800a78e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a790:	07d0      	lsls	r0, r2, #31
 800a792:	d404      	bmi.n	800a79e <_fflush_r+0x3a>
 800a794:	0599      	lsls	r1, r3, #22
 800a796:	d402      	bmi.n	800a79e <_fflush_r+0x3a>
 800a798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a79a:	f7ff fa5d 	bl	8009c58 <__retarget_lock_acquire_recursive>
 800a79e:	4628      	mov	r0, r5
 800a7a0:	4621      	mov	r1, r4
 800a7a2:	f7ff ff59 	bl	800a658 <__sflush_r>
 800a7a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a7a8:	07da      	lsls	r2, r3, #31
 800a7aa:	4605      	mov	r5, r0
 800a7ac:	d4e0      	bmi.n	800a770 <_fflush_r+0xc>
 800a7ae:	89a3      	ldrh	r3, [r4, #12]
 800a7b0:	059b      	lsls	r3, r3, #22
 800a7b2:	d4dd      	bmi.n	800a770 <_fflush_r+0xc>
 800a7b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7b6:	f7ff fa51 	bl	8009c5c <__retarget_lock_release_recursive>
 800a7ba:	e7d9      	b.n	800a770 <_fflush_r+0xc>
 800a7bc:	4b05      	ldr	r3, [pc, #20]	; (800a7d4 <_fflush_r+0x70>)
 800a7be:	429c      	cmp	r4, r3
 800a7c0:	d101      	bne.n	800a7c6 <_fflush_r+0x62>
 800a7c2:	68ac      	ldr	r4, [r5, #8]
 800a7c4:	e7df      	b.n	800a786 <_fflush_r+0x22>
 800a7c6:	4b04      	ldr	r3, [pc, #16]	; (800a7d8 <_fflush_r+0x74>)
 800a7c8:	429c      	cmp	r4, r3
 800a7ca:	bf08      	it	eq
 800a7cc:	68ec      	ldreq	r4, [r5, #12]
 800a7ce:	e7da      	b.n	800a786 <_fflush_r+0x22>
 800a7d0:	0800b72c 	.word	0x0800b72c
 800a7d4:	0800b74c 	.word	0x0800b74c
 800a7d8:	0800b70c 	.word	0x0800b70c

0800a7dc <std>:
 800a7dc:	2300      	movs	r3, #0
 800a7de:	b510      	push	{r4, lr}
 800a7e0:	4604      	mov	r4, r0
 800a7e2:	e9c0 3300 	strd	r3, r3, [r0]
 800a7e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a7ea:	6083      	str	r3, [r0, #8]
 800a7ec:	8181      	strh	r1, [r0, #12]
 800a7ee:	6643      	str	r3, [r0, #100]	; 0x64
 800a7f0:	81c2      	strh	r2, [r0, #14]
 800a7f2:	6183      	str	r3, [r0, #24]
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	2208      	movs	r2, #8
 800a7f8:	305c      	adds	r0, #92	; 0x5c
 800a7fa:	f7fe fdd3 	bl	80093a4 <memset>
 800a7fe:	4b05      	ldr	r3, [pc, #20]	; (800a814 <std+0x38>)
 800a800:	6263      	str	r3, [r4, #36]	; 0x24
 800a802:	4b05      	ldr	r3, [pc, #20]	; (800a818 <std+0x3c>)
 800a804:	62a3      	str	r3, [r4, #40]	; 0x28
 800a806:	4b05      	ldr	r3, [pc, #20]	; (800a81c <std+0x40>)
 800a808:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a80a:	4b05      	ldr	r3, [pc, #20]	; (800a820 <std+0x44>)
 800a80c:	6224      	str	r4, [r4, #32]
 800a80e:	6323      	str	r3, [r4, #48]	; 0x30
 800a810:	bd10      	pop	{r4, pc}
 800a812:	bf00      	nop
 800a814:	0800a2ad 	.word	0x0800a2ad
 800a818:	0800a2d3 	.word	0x0800a2d3
 800a81c:	0800a30b 	.word	0x0800a30b
 800a820:	0800a32f 	.word	0x0800a32f

0800a824 <_cleanup_r>:
 800a824:	4901      	ldr	r1, [pc, #4]	; (800a82c <_cleanup_r+0x8>)
 800a826:	f000 b8af 	b.w	800a988 <_fwalk_reent>
 800a82a:	bf00      	nop
 800a82c:	0800a765 	.word	0x0800a765

0800a830 <__sfmoreglue>:
 800a830:	b570      	push	{r4, r5, r6, lr}
 800a832:	2268      	movs	r2, #104	; 0x68
 800a834:	1e4d      	subs	r5, r1, #1
 800a836:	4355      	muls	r5, r2
 800a838:	460e      	mov	r6, r1
 800a83a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a83e:	f7fe fe25 	bl	800948c <_malloc_r>
 800a842:	4604      	mov	r4, r0
 800a844:	b140      	cbz	r0, 800a858 <__sfmoreglue+0x28>
 800a846:	2100      	movs	r1, #0
 800a848:	e9c0 1600 	strd	r1, r6, [r0]
 800a84c:	300c      	adds	r0, #12
 800a84e:	60a0      	str	r0, [r4, #8]
 800a850:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a854:	f7fe fda6 	bl	80093a4 <memset>
 800a858:	4620      	mov	r0, r4
 800a85a:	bd70      	pop	{r4, r5, r6, pc}

0800a85c <__sfp_lock_acquire>:
 800a85c:	4801      	ldr	r0, [pc, #4]	; (800a864 <__sfp_lock_acquire+0x8>)
 800a85e:	f7ff b9fb 	b.w	8009c58 <__retarget_lock_acquire_recursive>
 800a862:	bf00      	nop
 800a864:	20000e32 	.word	0x20000e32

0800a868 <__sfp_lock_release>:
 800a868:	4801      	ldr	r0, [pc, #4]	; (800a870 <__sfp_lock_release+0x8>)
 800a86a:	f7ff b9f7 	b.w	8009c5c <__retarget_lock_release_recursive>
 800a86e:	bf00      	nop
 800a870:	20000e32 	.word	0x20000e32

0800a874 <__sinit_lock_acquire>:
 800a874:	4801      	ldr	r0, [pc, #4]	; (800a87c <__sinit_lock_acquire+0x8>)
 800a876:	f7ff b9ef 	b.w	8009c58 <__retarget_lock_acquire_recursive>
 800a87a:	bf00      	nop
 800a87c:	20000e33 	.word	0x20000e33

0800a880 <__sinit_lock_release>:
 800a880:	4801      	ldr	r0, [pc, #4]	; (800a888 <__sinit_lock_release+0x8>)
 800a882:	f7ff b9eb 	b.w	8009c5c <__retarget_lock_release_recursive>
 800a886:	bf00      	nop
 800a888:	20000e33 	.word	0x20000e33

0800a88c <__sinit>:
 800a88c:	b510      	push	{r4, lr}
 800a88e:	4604      	mov	r4, r0
 800a890:	f7ff fff0 	bl	800a874 <__sinit_lock_acquire>
 800a894:	69a3      	ldr	r3, [r4, #24]
 800a896:	b11b      	cbz	r3, 800a8a0 <__sinit+0x14>
 800a898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a89c:	f7ff bff0 	b.w	800a880 <__sinit_lock_release>
 800a8a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a8a4:	6523      	str	r3, [r4, #80]	; 0x50
 800a8a6:	4b13      	ldr	r3, [pc, #76]	; (800a8f4 <__sinit+0x68>)
 800a8a8:	4a13      	ldr	r2, [pc, #76]	; (800a8f8 <__sinit+0x6c>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	62a2      	str	r2, [r4, #40]	; 0x28
 800a8ae:	42a3      	cmp	r3, r4
 800a8b0:	bf04      	itt	eq
 800a8b2:	2301      	moveq	r3, #1
 800a8b4:	61a3      	streq	r3, [r4, #24]
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	f000 f820 	bl	800a8fc <__sfp>
 800a8bc:	6060      	str	r0, [r4, #4]
 800a8be:	4620      	mov	r0, r4
 800a8c0:	f000 f81c 	bl	800a8fc <__sfp>
 800a8c4:	60a0      	str	r0, [r4, #8]
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	f000 f818 	bl	800a8fc <__sfp>
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	60e0      	str	r0, [r4, #12]
 800a8d0:	2104      	movs	r1, #4
 800a8d2:	6860      	ldr	r0, [r4, #4]
 800a8d4:	f7ff ff82 	bl	800a7dc <std>
 800a8d8:	68a0      	ldr	r0, [r4, #8]
 800a8da:	2201      	movs	r2, #1
 800a8dc:	2109      	movs	r1, #9
 800a8de:	f7ff ff7d 	bl	800a7dc <std>
 800a8e2:	68e0      	ldr	r0, [r4, #12]
 800a8e4:	2202      	movs	r2, #2
 800a8e6:	2112      	movs	r1, #18
 800a8e8:	f7ff ff78 	bl	800a7dc <std>
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	61a3      	str	r3, [r4, #24]
 800a8f0:	e7d2      	b.n	800a898 <__sinit+0xc>
 800a8f2:	bf00      	nop
 800a8f4:	0800b488 	.word	0x0800b488
 800a8f8:	0800a825 	.word	0x0800a825

0800a8fc <__sfp>:
 800a8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8fe:	4607      	mov	r7, r0
 800a900:	f7ff ffac 	bl	800a85c <__sfp_lock_acquire>
 800a904:	4b1e      	ldr	r3, [pc, #120]	; (800a980 <__sfp+0x84>)
 800a906:	681e      	ldr	r6, [r3, #0]
 800a908:	69b3      	ldr	r3, [r6, #24]
 800a90a:	b913      	cbnz	r3, 800a912 <__sfp+0x16>
 800a90c:	4630      	mov	r0, r6
 800a90e:	f7ff ffbd 	bl	800a88c <__sinit>
 800a912:	3648      	adds	r6, #72	; 0x48
 800a914:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a918:	3b01      	subs	r3, #1
 800a91a:	d503      	bpl.n	800a924 <__sfp+0x28>
 800a91c:	6833      	ldr	r3, [r6, #0]
 800a91e:	b30b      	cbz	r3, 800a964 <__sfp+0x68>
 800a920:	6836      	ldr	r6, [r6, #0]
 800a922:	e7f7      	b.n	800a914 <__sfp+0x18>
 800a924:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a928:	b9d5      	cbnz	r5, 800a960 <__sfp+0x64>
 800a92a:	4b16      	ldr	r3, [pc, #88]	; (800a984 <__sfp+0x88>)
 800a92c:	60e3      	str	r3, [r4, #12]
 800a92e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a932:	6665      	str	r5, [r4, #100]	; 0x64
 800a934:	f7ff f98e 	bl	8009c54 <__retarget_lock_init_recursive>
 800a938:	f7ff ff96 	bl	800a868 <__sfp_lock_release>
 800a93c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a940:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a944:	6025      	str	r5, [r4, #0]
 800a946:	61a5      	str	r5, [r4, #24]
 800a948:	2208      	movs	r2, #8
 800a94a:	4629      	mov	r1, r5
 800a94c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a950:	f7fe fd28 	bl	80093a4 <memset>
 800a954:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a958:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a95c:	4620      	mov	r0, r4
 800a95e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a960:	3468      	adds	r4, #104	; 0x68
 800a962:	e7d9      	b.n	800a918 <__sfp+0x1c>
 800a964:	2104      	movs	r1, #4
 800a966:	4638      	mov	r0, r7
 800a968:	f7ff ff62 	bl	800a830 <__sfmoreglue>
 800a96c:	4604      	mov	r4, r0
 800a96e:	6030      	str	r0, [r6, #0]
 800a970:	2800      	cmp	r0, #0
 800a972:	d1d5      	bne.n	800a920 <__sfp+0x24>
 800a974:	f7ff ff78 	bl	800a868 <__sfp_lock_release>
 800a978:	230c      	movs	r3, #12
 800a97a:	603b      	str	r3, [r7, #0]
 800a97c:	e7ee      	b.n	800a95c <__sfp+0x60>
 800a97e:	bf00      	nop
 800a980:	0800b488 	.word	0x0800b488
 800a984:	ffff0001 	.word	0xffff0001

0800a988 <_fwalk_reent>:
 800a988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a98c:	4606      	mov	r6, r0
 800a98e:	4688      	mov	r8, r1
 800a990:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a994:	2700      	movs	r7, #0
 800a996:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a99a:	f1b9 0901 	subs.w	r9, r9, #1
 800a99e:	d505      	bpl.n	800a9ac <_fwalk_reent+0x24>
 800a9a0:	6824      	ldr	r4, [r4, #0]
 800a9a2:	2c00      	cmp	r4, #0
 800a9a4:	d1f7      	bne.n	800a996 <_fwalk_reent+0xe>
 800a9a6:	4638      	mov	r0, r7
 800a9a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9ac:	89ab      	ldrh	r3, [r5, #12]
 800a9ae:	2b01      	cmp	r3, #1
 800a9b0:	d907      	bls.n	800a9c2 <_fwalk_reent+0x3a>
 800a9b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	d003      	beq.n	800a9c2 <_fwalk_reent+0x3a>
 800a9ba:	4629      	mov	r1, r5
 800a9bc:	4630      	mov	r0, r6
 800a9be:	47c0      	blx	r8
 800a9c0:	4307      	orrs	r7, r0
 800a9c2:	3568      	adds	r5, #104	; 0x68
 800a9c4:	e7e9      	b.n	800a99a <_fwalk_reent+0x12>
	...

0800a9c8 <_lseek_r>:
 800a9c8:	b538      	push	{r3, r4, r5, lr}
 800a9ca:	4d07      	ldr	r5, [pc, #28]	; (800a9e8 <_lseek_r+0x20>)
 800a9cc:	4604      	mov	r4, r0
 800a9ce:	4608      	mov	r0, r1
 800a9d0:	4611      	mov	r1, r2
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	602a      	str	r2, [r5, #0]
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	f7f8 fd9e 	bl	8003518 <_lseek>
 800a9dc:	1c43      	adds	r3, r0, #1
 800a9de:	d102      	bne.n	800a9e6 <_lseek_r+0x1e>
 800a9e0:	682b      	ldr	r3, [r5, #0]
 800a9e2:	b103      	cbz	r3, 800a9e6 <_lseek_r+0x1e>
 800a9e4:	6023      	str	r3, [r4, #0]
 800a9e6:	bd38      	pop	{r3, r4, r5, pc}
 800a9e8:	20000e38 	.word	0x20000e38

0800a9ec <__swhatbuf_r>:
 800a9ec:	b570      	push	{r4, r5, r6, lr}
 800a9ee:	460e      	mov	r6, r1
 800a9f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9f4:	2900      	cmp	r1, #0
 800a9f6:	b096      	sub	sp, #88	; 0x58
 800a9f8:	4614      	mov	r4, r2
 800a9fa:	461d      	mov	r5, r3
 800a9fc:	da08      	bge.n	800aa10 <__swhatbuf_r+0x24>
 800a9fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aa02:	2200      	movs	r2, #0
 800aa04:	602a      	str	r2, [r5, #0]
 800aa06:	061a      	lsls	r2, r3, #24
 800aa08:	d410      	bmi.n	800aa2c <__swhatbuf_r+0x40>
 800aa0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa0e:	e00e      	b.n	800aa2e <__swhatbuf_r+0x42>
 800aa10:	466a      	mov	r2, sp
 800aa12:	f000 fcf1 	bl	800b3f8 <_fstat_r>
 800aa16:	2800      	cmp	r0, #0
 800aa18:	dbf1      	blt.n	800a9fe <__swhatbuf_r+0x12>
 800aa1a:	9a01      	ldr	r2, [sp, #4]
 800aa1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aa20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aa24:	425a      	negs	r2, r3
 800aa26:	415a      	adcs	r2, r3
 800aa28:	602a      	str	r2, [r5, #0]
 800aa2a:	e7ee      	b.n	800aa0a <__swhatbuf_r+0x1e>
 800aa2c:	2340      	movs	r3, #64	; 0x40
 800aa2e:	2000      	movs	r0, #0
 800aa30:	6023      	str	r3, [r4, #0]
 800aa32:	b016      	add	sp, #88	; 0x58
 800aa34:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aa38 <__smakebuf_r>:
 800aa38:	898b      	ldrh	r3, [r1, #12]
 800aa3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa3c:	079d      	lsls	r5, r3, #30
 800aa3e:	4606      	mov	r6, r0
 800aa40:	460c      	mov	r4, r1
 800aa42:	d507      	bpl.n	800aa54 <__smakebuf_r+0x1c>
 800aa44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aa48:	6023      	str	r3, [r4, #0]
 800aa4a:	6123      	str	r3, [r4, #16]
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	6163      	str	r3, [r4, #20]
 800aa50:	b002      	add	sp, #8
 800aa52:	bd70      	pop	{r4, r5, r6, pc}
 800aa54:	ab01      	add	r3, sp, #4
 800aa56:	466a      	mov	r2, sp
 800aa58:	f7ff ffc8 	bl	800a9ec <__swhatbuf_r>
 800aa5c:	9900      	ldr	r1, [sp, #0]
 800aa5e:	4605      	mov	r5, r0
 800aa60:	4630      	mov	r0, r6
 800aa62:	f7fe fd13 	bl	800948c <_malloc_r>
 800aa66:	b948      	cbnz	r0, 800aa7c <__smakebuf_r+0x44>
 800aa68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa6c:	059a      	lsls	r2, r3, #22
 800aa6e:	d4ef      	bmi.n	800aa50 <__smakebuf_r+0x18>
 800aa70:	f023 0303 	bic.w	r3, r3, #3
 800aa74:	f043 0302 	orr.w	r3, r3, #2
 800aa78:	81a3      	strh	r3, [r4, #12]
 800aa7a:	e7e3      	b.n	800aa44 <__smakebuf_r+0xc>
 800aa7c:	4b0d      	ldr	r3, [pc, #52]	; (800aab4 <__smakebuf_r+0x7c>)
 800aa7e:	62b3      	str	r3, [r6, #40]	; 0x28
 800aa80:	89a3      	ldrh	r3, [r4, #12]
 800aa82:	6020      	str	r0, [r4, #0]
 800aa84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa88:	81a3      	strh	r3, [r4, #12]
 800aa8a:	9b00      	ldr	r3, [sp, #0]
 800aa8c:	6163      	str	r3, [r4, #20]
 800aa8e:	9b01      	ldr	r3, [sp, #4]
 800aa90:	6120      	str	r0, [r4, #16]
 800aa92:	b15b      	cbz	r3, 800aaac <__smakebuf_r+0x74>
 800aa94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa98:	4630      	mov	r0, r6
 800aa9a:	f000 fcbf 	bl	800b41c <_isatty_r>
 800aa9e:	b128      	cbz	r0, 800aaac <__smakebuf_r+0x74>
 800aaa0:	89a3      	ldrh	r3, [r4, #12]
 800aaa2:	f023 0303 	bic.w	r3, r3, #3
 800aaa6:	f043 0301 	orr.w	r3, r3, #1
 800aaaa:	81a3      	strh	r3, [r4, #12]
 800aaac:	89a0      	ldrh	r0, [r4, #12]
 800aaae:	4305      	orrs	r5, r0
 800aab0:	81a5      	strh	r5, [r4, #12]
 800aab2:	e7cd      	b.n	800aa50 <__smakebuf_r+0x18>
 800aab4:	0800a825 	.word	0x0800a825

0800aab8 <_realloc_r>:
 800aab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aabc:	4680      	mov	r8, r0
 800aabe:	4614      	mov	r4, r2
 800aac0:	460e      	mov	r6, r1
 800aac2:	b921      	cbnz	r1, 800aace <_realloc_r+0x16>
 800aac4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aac8:	4611      	mov	r1, r2
 800aaca:	f7fe bcdf 	b.w	800948c <_malloc_r>
 800aace:	b92a      	cbnz	r2, 800aadc <_realloc_r+0x24>
 800aad0:	f7fe fc70 	bl	80093b4 <_free_r>
 800aad4:	4625      	mov	r5, r4
 800aad6:	4628      	mov	r0, r5
 800aad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aadc:	f000 fcae 	bl	800b43c <_malloc_usable_size_r>
 800aae0:	4284      	cmp	r4, r0
 800aae2:	4607      	mov	r7, r0
 800aae4:	d802      	bhi.n	800aaec <_realloc_r+0x34>
 800aae6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aaea:	d812      	bhi.n	800ab12 <_realloc_r+0x5a>
 800aaec:	4621      	mov	r1, r4
 800aaee:	4640      	mov	r0, r8
 800aaf0:	f7fe fccc 	bl	800948c <_malloc_r>
 800aaf4:	4605      	mov	r5, r0
 800aaf6:	2800      	cmp	r0, #0
 800aaf8:	d0ed      	beq.n	800aad6 <_realloc_r+0x1e>
 800aafa:	42bc      	cmp	r4, r7
 800aafc:	4622      	mov	r2, r4
 800aafe:	4631      	mov	r1, r6
 800ab00:	bf28      	it	cs
 800ab02:	463a      	movcs	r2, r7
 800ab04:	f7fe fc40 	bl	8009388 <memcpy>
 800ab08:	4631      	mov	r1, r6
 800ab0a:	4640      	mov	r0, r8
 800ab0c:	f7fe fc52 	bl	80093b4 <_free_r>
 800ab10:	e7e1      	b.n	800aad6 <_realloc_r+0x1e>
 800ab12:	4635      	mov	r5, r6
 800ab14:	e7df      	b.n	800aad6 <_realloc_r+0x1e>

0800ab16 <_sungetc_r>:
 800ab16:	b538      	push	{r3, r4, r5, lr}
 800ab18:	1c4b      	adds	r3, r1, #1
 800ab1a:	4614      	mov	r4, r2
 800ab1c:	d103      	bne.n	800ab26 <_sungetc_r+0x10>
 800ab1e:	f04f 35ff 	mov.w	r5, #4294967295
 800ab22:	4628      	mov	r0, r5
 800ab24:	bd38      	pop	{r3, r4, r5, pc}
 800ab26:	8993      	ldrh	r3, [r2, #12]
 800ab28:	f023 0320 	bic.w	r3, r3, #32
 800ab2c:	8193      	strh	r3, [r2, #12]
 800ab2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab30:	6852      	ldr	r2, [r2, #4]
 800ab32:	b2cd      	uxtb	r5, r1
 800ab34:	b18b      	cbz	r3, 800ab5a <_sungetc_r+0x44>
 800ab36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	dd08      	ble.n	800ab4e <_sungetc_r+0x38>
 800ab3c:	6823      	ldr	r3, [r4, #0]
 800ab3e:	1e5a      	subs	r2, r3, #1
 800ab40:	6022      	str	r2, [r4, #0]
 800ab42:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ab46:	6863      	ldr	r3, [r4, #4]
 800ab48:	3301      	adds	r3, #1
 800ab4a:	6063      	str	r3, [r4, #4]
 800ab4c:	e7e9      	b.n	800ab22 <_sungetc_r+0xc>
 800ab4e:	4621      	mov	r1, r4
 800ab50:	f000 fc18 	bl	800b384 <__submore>
 800ab54:	2800      	cmp	r0, #0
 800ab56:	d0f1      	beq.n	800ab3c <_sungetc_r+0x26>
 800ab58:	e7e1      	b.n	800ab1e <_sungetc_r+0x8>
 800ab5a:	6921      	ldr	r1, [r4, #16]
 800ab5c:	6823      	ldr	r3, [r4, #0]
 800ab5e:	b151      	cbz	r1, 800ab76 <_sungetc_r+0x60>
 800ab60:	4299      	cmp	r1, r3
 800ab62:	d208      	bcs.n	800ab76 <_sungetc_r+0x60>
 800ab64:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ab68:	42a9      	cmp	r1, r5
 800ab6a:	d104      	bne.n	800ab76 <_sungetc_r+0x60>
 800ab6c:	3b01      	subs	r3, #1
 800ab6e:	3201      	adds	r2, #1
 800ab70:	6023      	str	r3, [r4, #0]
 800ab72:	6062      	str	r2, [r4, #4]
 800ab74:	e7d5      	b.n	800ab22 <_sungetc_r+0xc>
 800ab76:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800ab7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab7e:	6363      	str	r3, [r4, #52]	; 0x34
 800ab80:	2303      	movs	r3, #3
 800ab82:	63a3      	str	r3, [r4, #56]	; 0x38
 800ab84:	4623      	mov	r3, r4
 800ab86:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ab8a:	6023      	str	r3, [r4, #0]
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	e7dc      	b.n	800ab4a <_sungetc_r+0x34>

0800ab90 <__ssrefill_r>:
 800ab90:	b510      	push	{r4, lr}
 800ab92:	460c      	mov	r4, r1
 800ab94:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ab96:	b169      	cbz	r1, 800abb4 <__ssrefill_r+0x24>
 800ab98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab9c:	4299      	cmp	r1, r3
 800ab9e:	d001      	beq.n	800aba4 <__ssrefill_r+0x14>
 800aba0:	f7fe fc08 	bl	80093b4 <_free_r>
 800aba4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aba6:	6063      	str	r3, [r4, #4]
 800aba8:	2000      	movs	r0, #0
 800abaa:	6360      	str	r0, [r4, #52]	; 0x34
 800abac:	b113      	cbz	r3, 800abb4 <__ssrefill_r+0x24>
 800abae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800abb0:	6023      	str	r3, [r4, #0]
 800abb2:	bd10      	pop	{r4, pc}
 800abb4:	6923      	ldr	r3, [r4, #16]
 800abb6:	6023      	str	r3, [r4, #0]
 800abb8:	2300      	movs	r3, #0
 800abba:	6063      	str	r3, [r4, #4]
 800abbc:	89a3      	ldrh	r3, [r4, #12]
 800abbe:	f043 0320 	orr.w	r3, r3, #32
 800abc2:	81a3      	strh	r3, [r4, #12]
 800abc4:	f04f 30ff 	mov.w	r0, #4294967295
 800abc8:	e7f3      	b.n	800abb2 <__ssrefill_r+0x22>
	...

0800abcc <__ssvfiscanf_r>:
 800abcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abd0:	460c      	mov	r4, r1
 800abd2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800abd6:	2100      	movs	r1, #0
 800abd8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800abdc:	49a6      	ldr	r1, [pc, #664]	; (800ae78 <__ssvfiscanf_r+0x2ac>)
 800abde:	91a0      	str	r1, [sp, #640]	; 0x280
 800abe0:	f10d 0804 	add.w	r8, sp, #4
 800abe4:	49a5      	ldr	r1, [pc, #660]	; (800ae7c <__ssvfiscanf_r+0x2b0>)
 800abe6:	4fa6      	ldr	r7, [pc, #664]	; (800ae80 <__ssvfiscanf_r+0x2b4>)
 800abe8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800ae84 <__ssvfiscanf_r+0x2b8>
 800abec:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800abf0:	4606      	mov	r6, r0
 800abf2:	91a1      	str	r1, [sp, #644]	; 0x284
 800abf4:	9300      	str	r3, [sp, #0]
 800abf6:	7813      	ldrb	r3, [r2, #0]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	f000 815a 	beq.w	800aeb2 <__ssvfiscanf_r+0x2e6>
 800abfe:	5dd9      	ldrb	r1, [r3, r7]
 800ac00:	f011 0108 	ands.w	r1, r1, #8
 800ac04:	f102 0501 	add.w	r5, r2, #1
 800ac08:	d019      	beq.n	800ac3e <__ssvfiscanf_r+0x72>
 800ac0a:	6863      	ldr	r3, [r4, #4]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	dd0f      	ble.n	800ac30 <__ssvfiscanf_r+0x64>
 800ac10:	6823      	ldr	r3, [r4, #0]
 800ac12:	781a      	ldrb	r2, [r3, #0]
 800ac14:	5cba      	ldrb	r2, [r7, r2]
 800ac16:	0712      	lsls	r2, r2, #28
 800ac18:	d401      	bmi.n	800ac1e <__ssvfiscanf_r+0x52>
 800ac1a:	462a      	mov	r2, r5
 800ac1c:	e7eb      	b.n	800abf6 <__ssvfiscanf_r+0x2a>
 800ac1e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ac20:	3201      	adds	r2, #1
 800ac22:	9245      	str	r2, [sp, #276]	; 0x114
 800ac24:	6862      	ldr	r2, [r4, #4]
 800ac26:	3301      	adds	r3, #1
 800ac28:	3a01      	subs	r2, #1
 800ac2a:	6062      	str	r2, [r4, #4]
 800ac2c:	6023      	str	r3, [r4, #0]
 800ac2e:	e7ec      	b.n	800ac0a <__ssvfiscanf_r+0x3e>
 800ac30:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ac32:	4621      	mov	r1, r4
 800ac34:	4630      	mov	r0, r6
 800ac36:	4798      	blx	r3
 800ac38:	2800      	cmp	r0, #0
 800ac3a:	d0e9      	beq.n	800ac10 <__ssvfiscanf_r+0x44>
 800ac3c:	e7ed      	b.n	800ac1a <__ssvfiscanf_r+0x4e>
 800ac3e:	2b25      	cmp	r3, #37	; 0x25
 800ac40:	d012      	beq.n	800ac68 <__ssvfiscanf_r+0x9c>
 800ac42:	469a      	mov	sl, r3
 800ac44:	6863      	ldr	r3, [r4, #4]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	f340 8091 	ble.w	800ad6e <__ssvfiscanf_r+0x1a2>
 800ac4c:	6822      	ldr	r2, [r4, #0]
 800ac4e:	7813      	ldrb	r3, [r2, #0]
 800ac50:	4553      	cmp	r3, sl
 800ac52:	f040 812e 	bne.w	800aeb2 <__ssvfiscanf_r+0x2e6>
 800ac56:	6863      	ldr	r3, [r4, #4]
 800ac58:	3b01      	subs	r3, #1
 800ac5a:	6063      	str	r3, [r4, #4]
 800ac5c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ac5e:	3201      	adds	r2, #1
 800ac60:	3301      	adds	r3, #1
 800ac62:	6022      	str	r2, [r4, #0]
 800ac64:	9345      	str	r3, [sp, #276]	; 0x114
 800ac66:	e7d8      	b.n	800ac1a <__ssvfiscanf_r+0x4e>
 800ac68:	9141      	str	r1, [sp, #260]	; 0x104
 800ac6a:	9143      	str	r1, [sp, #268]	; 0x10c
 800ac6c:	7853      	ldrb	r3, [r2, #1]
 800ac6e:	2b2a      	cmp	r3, #42	; 0x2a
 800ac70:	bf02      	ittt	eq
 800ac72:	2310      	moveq	r3, #16
 800ac74:	1c95      	addeq	r5, r2, #2
 800ac76:	9341      	streq	r3, [sp, #260]	; 0x104
 800ac78:	220a      	movs	r2, #10
 800ac7a:	46aa      	mov	sl, r5
 800ac7c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800ac80:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800ac84:	2b09      	cmp	r3, #9
 800ac86:	d91d      	bls.n	800acc4 <__ssvfiscanf_r+0xf8>
 800ac88:	487e      	ldr	r0, [pc, #504]	; (800ae84 <__ssvfiscanf_r+0x2b8>)
 800ac8a:	2203      	movs	r2, #3
 800ac8c:	f7f5 fad8 	bl	8000240 <memchr>
 800ac90:	b140      	cbz	r0, 800aca4 <__ssvfiscanf_r+0xd8>
 800ac92:	2301      	movs	r3, #1
 800ac94:	eba0 0009 	sub.w	r0, r0, r9
 800ac98:	fa03 f000 	lsl.w	r0, r3, r0
 800ac9c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ac9e:	4318      	orrs	r0, r3
 800aca0:	9041      	str	r0, [sp, #260]	; 0x104
 800aca2:	4655      	mov	r5, sl
 800aca4:	f815 3b01 	ldrb.w	r3, [r5], #1
 800aca8:	2b78      	cmp	r3, #120	; 0x78
 800acaa:	d806      	bhi.n	800acba <__ssvfiscanf_r+0xee>
 800acac:	2b57      	cmp	r3, #87	; 0x57
 800acae:	d810      	bhi.n	800acd2 <__ssvfiscanf_r+0x106>
 800acb0:	2b25      	cmp	r3, #37	; 0x25
 800acb2:	d0c6      	beq.n	800ac42 <__ssvfiscanf_r+0x76>
 800acb4:	d856      	bhi.n	800ad64 <__ssvfiscanf_r+0x198>
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d064      	beq.n	800ad84 <__ssvfiscanf_r+0x1b8>
 800acba:	2303      	movs	r3, #3
 800acbc:	9347      	str	r3, [sp, #284]	; 0x11c
 800acbe:	230a      	movs	r3, #10
 800acc0:	9342      	str	r3, [sp, #264]	; 0x108
 800acc2:	e071      	b.n	800ada8 <__ssvfiscanf_r+0x1dc>
 800acc4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800acc6:	fb02 1103 	mla	r1, r2, r3, r1
 800acca:	3930      	subs	r1, #48	; 0x30
 800accc:	9143      	str	r1, [sp, #268]	; 0x10c
 800acce:	4655      	mov	r5, sl
 800acd0:	e7d3      	b.n	800ac7a <__ssvfiscanf_r+0xae>
 800acd2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800acd6:	2a20      	cmp	r2, #32
 800acd8:	d8ef      	bhi.n	800acba <__ssvfiscanf_r+0xee>
 800acda:	a101      	add	r1, pc, #4	; (adr r1, 800ace0 <__ssvfiscanf_r+0x114>)
 800acdc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ace0:	0800ad93 	.word	0x0800ad93
 800ace4:	0800acbb 	.word	0x0800acbb
 800ace8:	0800acbb 	.word	0x0800acbb
 800acec:	0800adf1 	.word	0x0800adf1
 800acf0:	0800acbb 	.word	0x0800acbb
 800acf4:	0800acbb 	.word	0x0800acbb
 800acf8:	0800acbb 	.word	0x0800acbb
 800acfc:	0800acbb 	.word	0x0800acbb
 800ad00:	0800acbb 	.word	0x0800acbb
 800ad04:	0800acbb 	.word	0x0800acbb
 800ad08:	0800acbb 	.word	0x0800acbb
 800ad0c:	0800ae07 	.word	0x0800ae07
 800ad10:	0800addd 	.word	0x0800addd
 800ad14:	0800ad6b 	.word	0x0800ad6b
 800ad18:	0800ad6b 	.word	0x0800ad6b
 800ad1c:	0800ad6b 	.word	0x0800ad6b
 800ad20:	0800acbb 	.word	0x0800acbb
 800ad24:	0800ade1 	.word	0x0800ade1
 800ad28:	0800acbb 	.word	0x0800acbb
 800ad2c:	0800acbb 	.word	0x0800acbb
 800ad30:	0800acbb 	.word	0x0800acbb
 800ad34:	0800acbb 	.word	0x0800acbb
 800ad38:	0800ae17 	.word	0x0800ae17
 800ad3c:	0800ade9 	.word	0x0800ade9
 800ad40:	0800ad8b 	.word	0x0800ad8b
 800ad44:	0800acbb 	.word	0x0800acbb
 800ad48:	0800acbb 	.word	0x0800acbb
 800ad4c:	0800ae13 	.word	0x0800ae13
 800ad50:	0800acbb 	.word	0x0800acbb
 800ad54:	0800addd 	.word	0x0800addd
 800ad58:	0800acbb 	.word	0x0800acbb
 800ad5c:	0800acbb 	.word	0x0800acbb
 800ad60:	0800ad93 	.word	0x0800ad93
 800ad64:	3b45      	subs	r3, #69	; 0x45
 800ad66:	2b02      	cmp	r3, #2
 800ad68:	d8a7      	bhi.n	800acba <__ssvfiscanf_r+0xee>
 800ad6a:	2305      	movs	r3, #5
 800ad6c:	e01b      	b.n	800ada6 <__ssvfiscanf_r+0x1da>
 800ad6e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ad70:	4621      	mov	r1, r4
 800ad72:	4630      	mov	r0, r6
 800ad74:	4798      	blx	r3
 800ad76:	2800      	cmp	r0, #0
 800ad78:	f43f af68 	beq.w	800ac4c <__ssvfiscanf_r+0x80>
 800ad7c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ad7e:	2800      	cmp	r0, #0
 800ad80:	f040 808d 	bne.w	800ae9e <__ssvfiscanf_r+0x2d2>
 800ad84:	f04f 30ff 	mov.w	r0, #4294967295
 800ad88:	e08f      	b.n	800aeaa <__ssvfiscanf_r+0x2de>
 800ad8a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ad8c:	f042 0220 	orr.w	r2, r2, #32
 800ad90:	9241      	str	r2, [sp, #260]	; 0x104
 800ad92:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ad94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad98:	9241      	str	r2, [sp, #260]	; 0x104
 800ad9a:	2210      	movs	r2, #16
 800ad9c:	2b6f      	cmp	r3, #111	; 0x6f
 800ad9e:	9242      	str	r2, [sp, #264]	; 0x108
 800ada0:	bf34      	ite	cc
 800ada2:	2303      	movcc	r3, #3
 800ada4:	2304      	movcs	r3, #4
 800ada6:	9347      	str	r3, [sp, #284]	; 0x11c
 800ada8:	6863      	ldr	r3, [r4, #4]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	dd42      	ble.n	800ae34 <__ssvfiscanf_r+0x268>
 800adae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800adb0:	0659      	lsls	r1, r3, #25
 800adb2:	d404      	bmi.n	800adbe <__ssvfiscanf_r+0x1f2>
 800adb4:	6823      	ldr	r3, [r4, #0]
 800adb6:	781a      	ldrb	r2, [r3, #0]
 800adb8:	5cba      	ldrb	r2, [r7, r2]
 800adba:	0712      	lsls	r2, r2, #28
 800adbc:	d441      	bmi.n	800ae42 <__ssvfiscanf_r+0x276>
 800adbe:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800adc0:	2b02      	cmp	r3, #2
 800adc2:	dc50      	bgt.n	800ae66 <__ssvfiscanf_r+0x29a>
 800adc4:	466b      	mov	r3, sp
 800adc6:	4622      	mov	r2, r4
 800adc8:	a941      	add	r1, sp, #260	; 0x104
 800adca:	4630      	mov	r0, r6
 800adcc:	f000 f876 	bl	800aebc <_scanf_chars>
 800add0:	2801      	cmp	r0, #1
 800add2:	d06e      	beq.n	800aeb2 <__ssvfiscanf_r+0x2e6>
 800add4:	2802      	cmp	r0, #2
 800add6:	f47f af20 	bne.w	800ac1a <__ssvfiscanf_r+0x4e>
 800adda:	e7cf      	b.n	800ad7c <__ssvfiscanf_r+0x1b0>
 800addc:	220a      	movs	r2, #10
 800adde:	e7dd      	b.n	800ad9c <__ssvfiscanf_r+0x1d0>
 800ade0:	2300      	movs	r3, #0
 800ade2:	9342      	str	r3, [sp, #264]	; 0x108
 800ade4:	2303      	movs	r3, #3
 800ade6:	e7de      	b.n	800ada6 <__ssvfiscanf_r+0x1da>
 800ade8:	2308      	movs	r3, #8
 800adea:	9342      	str	r3, [sp, #264]	; 0x108
 800adec:	2304      	movs	r3, #4
 800adee:	e7da      	b.n	800ada6 <__ssvfiscanf_r+0x1da>
 800adf0:	4629      	mov	r1, r5
 800adf2:	4640      	mov	r0, r8
 800adf4:	f000 f9c6 	bl	800b184 <__sccl>
 800adf8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800adfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adfe:	9341      	str	r3, [sp, #260]	; 0x104
 800ae00:	4605      	mov	r5, r0
 800ae02:	2301      	movs	r3, #1
 800ae04:	e7cf      	b.n	800ada6 <__ssvfiscanf_r+0x1da>
 800ae06:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ae08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae0c:	9341      	str	r3, [sp, #260]	; 0x104
 800ae0e:	2300      	movs	r3, #0
 800ae10:	e7c9      	b.n	800ada6 <__ssvfiscanf_r+0x1da>
 800ae12:	2302      	movs	r3, #2
 800ae14:	e7c7      	b.n	800ada6 <__ssvfiscanf_r+0x1da>
 800ae16:	9841      	ldr	r0, [sp, #260]	; 0x104
 800ae18:	06c3      	lsls	r3, r0, #27
 800ae1a:	f53f aefe 	bmi.w	800ac1a <__ssvfiscanf_r+0x4e>
 800ae1e:	9b00      	ldr	r3, [sp, #0]
 800ae20:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ae22:	1d19      	adds	r1, r3, #4
 800ae24:	9100      	str	r1, [sp, #0]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f010 0f01 	tst.w	r0, #1
 800ae2c:	bf14      	ite	ne
 800ae2e:	801a      	strhne	r2, [r3, #0]
 800ae30:	601a      	streq	r2, [r3, #0]
 800ae32:	e6f2      	b.n	800ac1a <__ssvfiscanf_r+0x4e>
 800ae34:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ae36:	4621      	mov	r1, r4
 800ae38:	4630      	mov	r0, r6
 800ae3a:	4798      	blx	r3
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	d0b6      	beq.n	800adae <__ssvfiscanf_r+0x1e2>
 800ae40:	e79c      	b.n	800ad7c <__ssvfiscanf_r+0x1b0>
 800ae42:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ae44:	3201      	adds	r2, #1
 800ae46:	9245      	str	r2, [sp, #276]	; 0x114
 800ae48:	6862      	ldr	r2, [r4, #4]
 800ae4a:	3a01      	subs	r2, #1
 800ae4c:	2a00      	cmp	r2, #0
 800ae4e:	6062      	str	r2, [r4, #4]
 800ae50:	dd02      	ble.n	800ae58 <__ssvfiscanf_r+0x28c>
 800ae52:	3301      	adds	r3, #1
 800ae54:	6023      	str	r3, [r4, #0]
 800ae56:	e7ad      	b.n	800adb4 <__ssvfiscanf_r+0x1e8>
 800ae58:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ae5a:	4621      	mov	r1, r4
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	4798      	blx	r3
 800ae60:	2800      	cmp	r0, #0
 800ae62:	d0a7      	beq.n	800adb4 <__ssvfiscanf_r+0x1e8>
 800ae64:	e78a      	b.n	800ad7c <__ssvfiscanf_r+0x1b0>
 800ae66:	2b04      	cmp	r3, #4
 800ae68:	dc0e      	bgt.n	800ae88 <__ssvfiscanf_r+0x2bc>
 800ae6a:	466b      	mov	r3, sp
 800ae6c:	4622      	mov	r2, r4
 800ae6e:	a941      	add	r1, sp, #260	; 0x104
 800ae70:	4630      	mov	r0, r6
 800ae72:	f000 f87d 	bl	800af70 <_scanf_i>
 800ae76:	e7ab      	b.n	800add0 <__ssvfiscanf_r+0x204>
 800ae78:	0800ab17 	.word	0x0800ab17
 800ae7c:	0800ab91 	.word	0x0800ab91
 800ae80:	0800b60c 	.word	0x0800b60c
 800ae84:	0800b5de 	.word	0x0800b5de
 800ae88:	4b0b      	ldr	r3, [pc, #44]	; (800aeb8 <__ssvfiscanf_r+0x2ec>)
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	f43f aec5 	beq.w	800ac1a <__ssvfiscanf_r+0x4e>
 800ae90:	466b      	mov	r3, sp
 800ae92:	4622      	mov	r2, r4
 800ae94:	a941      	add	r1, sp, #260	; 0x104
 800ae96:	4630      	mov	r0, r6
 800ae98:	f3af 8000 	nop.w
 800ae9c:	e798      	b.n	800add0 <__ssvfiscanf_r+0x204>
 800ae9e:	89a3      	ldrh	r3, [r4, #12]
 800aea0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800aea4:	bf18      	it	ne
 800aea6:	f04f 30ff 	movne.w	r0, #4294967295
 800aeaa:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800aeae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeb2:	9844      	ldr	r0, [sp, #272]	; 0x110
 800aeb4:	e7f9      	b.n	800aeaa <__ssvfiscanf_r+0x2de>
 800aeb6:	bf00      	nop
 800aeb8:	00000000 	.word	0x00000000

0800aebc <_scanf_chars>:
 800aebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aec0:	4615      	mov	r5, r2
 800aec2:	688a      	ldr	r2, [r1, #8]
 800aec4:	4680      	mov	r8, r0
 800aec6:	460c      	mov	r4, r1
 800aec8:	b932      	cbnz	r2, 800aed8 <_scanf_chars+0x1c>
 800aeca:	698a      	ldr	r2, [r1, #24]
 800aecc:	2a00      	cmp	r2, #0
 800aece:	bf0c      	ite	eq
 800aed0:	2201      	moveq	r2, #1
 800aed2:	f04f 32ff 	movne.w	r2, #4294967295
 800aed6:	608a      	str	r2, [r1, #8]
 800aed8:	6822      	ldr	r2, [r4, #0]
 800aeda:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800af6c <_scanf_chars+0xb0>
 800aede:	06d1      	lsls	r1, r2, #27
 800aee0:	bf5f      	itttt	pl
 800aee2:	681a      	ldrpl	r2, [r3, #0]
 800aee4:	1d11      	addpl	r1, r2, #4
 800aee6:	6019      	strpl	r1, [r3, #0]
 800aee8:	6816      	ldrpl	r6, [r2, #0]
 800aeea:	2700      	movs	r7, #0
 800aeec:	69a0      	ldr	r0, [r4, #24]
 800aeee:	b188      	cbz	r0, 800af14 <_scanf_chars+0x58>
 800aef0:	2801      	cmp	r0, #1
 800aef2:	d107      	bne.n	800af04 <_scanf_chars+0x48>
 800aef4:	682a      	ldr	r2, [r5, #0]
 800aef6:	7811      	ldrb	r1, [r2, #0]
 800aef8:	6962      	ldr	r2, [r4, #20]
 800aefa:	5c52      	ldrb	r2, [r2, r1]
 800aefc:	b952      	cbnz	r2, 800af14 <_scanf_chars+0x58>
 800aefe:	2f00      	cmp	r7, #0
 800af00:	d031      	beq.n	800af66 <_scanf_chars+0xaa>
 800af02:	e022      	b.n	800af4a <_scanf_chars+0x8e>
 800af04:	2802      	cmp	r0, #2
 800af06:	d120      	bne.n	800af4a <_scanf_chars+0x8e>
 800af08:	682b      	ldr	r3, [r5, #0]
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	f813 3009 	ldrb.w	r3, [r3, r9]
 800af10:	071b      	lsls	r3, r3, #28
 800af12:	d41a      	bmi.n	800af4a <_scanf_chars+0x8e>
 800af14:	6823      	ldr	r3, [r4, #0]
 800af16:	06da      	lsls	r2, r3, #27
 800af18:	bf5e      	ittt	pl
 800af1a:	682b      	ldrpl	r3, [r5, #0]
 800af1c:	781b      	ldrbpl	r3, [r3, #0]
 800af1e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800af22:	682a      	ldr	r2, [r5, #0]
 800af24:	686b      	ldr	r3, [r5, #4]
 800af26:	3201      	adds	r2, #1
 800af28:	602a      	str	r2, [r5, #0]
 800af2a:	68a2      	ldr	r2, [r4, #8]
 800af2c:	3b01      	subs	r3, #1
 800af2e:	3a01      	subs	r2, #1
 800af30:	606b      	str	r3, [r5, #4]
 800af32:	3701      	adds	r7, #1
 800af34:	60a2      	str	r2, [r4, #8]
 800af36:	b142      	cbz	r2, 800af4a <_scanf_chars+0x8e>
 800af38:	2b00      	cmp	r3, #0
 800af3a:	dcd7      	bgt.n	800aeec <_scanf_chars+0x30>
 800af3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800af40:	4629      	mov	r1, r5
 800af42:	4640      	mov	r0, r8
 800af44:	4798      	blx	r3
 800af46:	2800      	cmp	r0, #0
 800af48:	d0d0      	beq.n	800aeec <_scanf_chars+0x30>
 800af4a:	6823      	ldr	r3, [r4, #0]
 800af4c:	f013 0310 	ands.w	r3, r3, #16
 800af50:	d105      	bne.n	800af5e <_scanf_chars+0xa2>
 800af52:	68e2      	ldr	r2, [r4, #12]
 800af54:	3201      	adds	r2, #1
 800af56:	60e2      	str	r2, [r4, #12]
 800af58:	69a2      	ldr	r2, [r4, #24]
 800af5a:	b102      	cbz	r2, 800af5e <_scanf_chars+0xa2>
 800af5c:	7033      	strb	r3, [r6, #0]
 800af5e:	6923      	ldr	r3, [r4, #16]
 800af60:	443b      	add	r3, r7
 800af62:	6123      	str	r3, [r4, #16]
 800af64:	2000      	movs	r0, #0
 800af66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af6a:	bf00      	nop
 800af6c:	0800b60c 	.word	0x0800b60c

0800af70 <_scanf_i>:
 800af70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af74:	4698      	mov	r8, r3
 800af76:	4b76      	ldr	r3, [pc, #472]	; (800b150 <_scanf_i+0x1e0>)
 800af78:	460c      	mov	r4, r1
 800af7a:	4682      	mov	sl, r0
 800af7c:	4616      	mov	r6, r2
 800af7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800af82:	b087      	sub	sp, #28
 800af84:	ab03      	add	r3, sp, #12
 800af86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800af8a:	4b72      	ldr	r3, [pc, #456]	; (800b154 <_scanf_i+0x1e4>)
 800af8c:	69a1      	ldr	r1, [r4, #24]
 800af8e:	4a72      	ldr	r2, [pc, #456]	; (800b158 <_scanf_i+0x1e8>)
 800af90:	2903      	cmp	r1, #3
 800af92:	bf18      	it	ne
 800af94:	461a      	movne	r2, r3
 800af96:	68a3      	ldr	r3, [r4, #8]
 800af98:	9201      	str	r2, [sp, #4]
 800af9a:	1e5a      	subs	r2, r3, #1
 800af9c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800afa0:	bf88      	it	hi
 800afa2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800afa6:	4627      	mov	r7, r4
 800afa8:	bf82      	ittt	hi
 800afaa:	eb03 0905 	addhi.w	r9, r3, r5
 800afae:	f240 135d 	movwhi	r3, #349	; 0x15d
 800afb2:	60a3      	strhi	r3, [r4, #8]
 800afb4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800afb8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800afbc:	bf98      	it	ls
 800afbe:	f04f 0900 	movls.w	r9, #0
 800afc2:	6023      	str	r3, [r4, #0]
 800afc4:	463d      	mov	r5, r7
 800afc6:	f04f 0b00 	mov.w	fp, #0
 800afca:	6831      	ldr	r1, [r6, #0]
 800afcc:	ab03      	add	r3, sp, #12
 800afce:	7809      	ldrb	r1, [r1, #0]
 800afd0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800afd4:	2202      	movs	r2, #2
 800afd6:	f7f5 f933 	bl	8000240 <memchr>
 800afda:	b328      	cbz	r0, 800b028 <_scanf_i+0xb8>
 800afdc:	f1bb 0f01 	cmp.w	fp, #1
 800afe0:	d159      	bne.n	800b096 <_scanf_i+0x126>
 800afe2:	6862      	ldr	r2, [r4, #4]
 800afe4:	b92a      	cbnz	r2, 800aff2 <_scanf_i+0x82>
 800afe6:	6822      	ldr	r2, [r4, #0]
 800afe8:	2308      	movs	r3, #8
 800afea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800afee:	6063      	str	r3, [r4, #4]
 800aff0:	6022      	str	r2, [r4, #0]
 800aff2:	6822      	ldr	r2, [r4, #0]
 800aff4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800aff8:	6022      	str	r2, [r4, #0]
 800affa:	68a2      	ldr	r2, [r4, #8]
 800affc:	1e51      	subs	r1, r2, #1
 800affe:	60a1      	str	r1, [r4, #8]
 800b000:	b192      	cbz	r2, 800b028 <_scanf_i+0xb8>
 800b002:	6832      	ldr	r2, [r6, #0]
 800b004:	1c51      	adds	r1, r2, #1
 800b006:	6031      	str	r1, [r6, #0]
 800b008:	7812      	ldrb	r2, [r2, #0]
 800b00a:	f805 2b01 	strb.w	r2, [r5], #1
 800b00e:	6872      	ldr	r2, [r6, #4]
 800b010:	3a01      	subs	r2, #1
 800b012:	2a00      	cmp	r2, #0
 800b014:	6072      	str	r2, [r6, #4]
 800b016:	dc07      	bgt.n	800b028 <_scanf_i+0xb8>
 800b018:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b01c:	4631      	mov	r1, r6
 800b01e:	4650      	mov	r0, sl
 800b020:	4790      	blx	r2
 800b022:	2800      	cmp	r0, #0
 800b024:	f040 8085 	bne.w	800b132 <_scanf_i+0x1c2>
 800b028:	f10b 0b01 	add.w	fp, fp, #1
 800b02c:	f1bb 0f03 	cmp.w	fp, #3
 800b030:	d1cb      	bne.n	800afca <_scanf_i+0x5a>
 800b032:	6863      	ldr	r3, [r4, #4]
 800b034:	b90b      	cbnz	r3, 800b03a <_scanf_i+0xca>
 800b036:	230a      	movs	r3, #10
 800b038:	6063      	str	r3, [r4, #4]
 800b03a:	6863      	ldr	r3, [r4, #4]
 800b03c:	4947      	ldr	r1, [pc, #284]	; (800b15c <_scanf_i+0x1ec>)
 800b03e:	6960      	ldr	r0, [r4, #20]
 800b040:	1ac9      	subs	r1, r1, r3
 800b042:	f000 f89f 	bl	800b184 <__sccl>
 800b046:	f04f 0b00 	mov.w	fp, #0
 800b04a:	68a3      	ldr	r3, [r4, #8]
 800b04c:	6822      	ldr	r2, [r4, #0]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d03d      	beq.n	800b0ce <_scanf_i+0x15e>
 800b052:	6831      	ldr	r1, [r6, #0]
 800b054:	6960      	ldr	r0, [r4, #20]
 800b056:	f891 c000 	ldrb.w	ip, [r1]
 800b05a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b05e:	2800      	cmp	r0, #0
 800b060:	d035      	beq.n	800b0ce <_scanf_i+0x15e>
 800b062:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b066:	d124      	bne.n	800b0b2 <_scanf_i+0x142>
 800b068:	0510      	lsls	r0, r2, #20
 800b06a:	d522      	bpl.n	800b0b2 <_scanf_i+0x142>
 800b06c:	f10b 0b01 	add.w	fp, fp, #1
 800b070:	f1b9 0f00 	cmp.w	r9, #0
 800b074:	d003      	beq.n	800b07e <_scanf_i+0x10e>
 800b076:	3301      	adds	r3, #1
 800b078:	f109 39ff 	add.w	r9, r9, #4294967295
 800b07c:	60a3      	str	r3, [r4, #8]
 800b07e:	6873      	ldr	r3, [r6, #4]
 800b080:	3b01      	subs	r3, #1
 800b082:	2b00      	cmp	r3, #0
 800b084:	6073      	str	r3, [r6, #4]
 800b086:	dd1b      	ble.n	800b0c0 <_scanf_i+0x150>
 800b088:	6833      	ldr	r3, [r6, #0]
 800b08a:	3301      	adds	r3, #1
 800b08c:	6033      	str	r3, [r6, #0]
 800b08e:	68a3      	ldr	r3, [r4, #8]
 800b090:	3b01      	subs	r3, #1
 800b092:	60a3      	str	r3, [r4, #8]
 800b094:	e7d9      	b.n	800b04a <_scanf_i+0xda>
 800b096:	f1bb 0f02 	cmp.w	fp, #2
 800b09a:	d1ae      	bne.n	800affa <_scanf_i+0x8a>
 800b09c:	6822      	ldr	r2, [r4, #0]
 800b09e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b0a2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b0a6:	d1bf      	bne.n	800b028 <_scanf_i+0xb8>
 800b0a8:	2310      	movs	r3, #16
 800b0aa:	6063      	str	r3, [r4, #4]
 800b0ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b0b0:	e7a2      	b.n	800aff8 <_scanf_i+0x88>
 800b0b2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b0b6:	6022      	str	r2, [r4, #0]
 800b0b8:	780b      	ldrb	r3, [r1, #0]
 800b0ba:	f805 3b01 	strb.w	r3, [r5], #1
 800b0be:	e7de      	b.n	800b07e <_scanf_i+0x10e>
 800b0c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b0c4:	4631      	mov	r1, r6
 800b0c6:	4650      	mov	r0, sl
 800b0c8:	4798      	blx	r3
 800b0ca:	2800      	cmp	r0, #0
 800b0cc:	d0df      	beq.n	800b08e <_scanf_i+0x11e>
 800b0ce:	6823      	ldr	r3, [r4, #0]
 800b0d0:	05db      	lsls	r3, r3, #23
 800b0d2:	d50d      	bpl.n	800b0f0 <_scanf_i+0x180>
 800b0d4:	42bd      	cmp	r5, r7
 800b0d6:	d909      	bls.n	800b0ec <_scanf_i+0x17c>
 800b0d8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b0dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b0e0:	4632      	mov	r2, r6
 800b0e2:	4650      	mov	r0, sl
 800b0e4:	4798      	blx	r3
 800b0e6:	f105 39ff 	add.w	r9, r5, #4294967295
 800b0ea:	464d      	mov	r5, r9
 800b0ec:	42bd      	cmp	r5, r7
 800b0ee:	d02d      	beq.n	800b14c <_scanf_i+0x1dc>
 800b0f0:	6822      	ldr	r2, [r4, #0]
 800b0f2:	f012 0210 	ands.w	r2, r2, #16
 800b0f6:	d113      	bne.n	800b120 <_scanf_i+0x1b0>
 800b0f8:	702a      	strb	r2, [r5, #0]
 800b0fa:	6863      	ldr	r3, [r4, #4]
 800b0fc:	9e01      	ldr	r6, [sp, #4]
 800b0fe:	4639      	mov	r1, r7
 800b100:	4650      	mov	r0, sl
 800b102:	47b0      	blx	r6
 800b104:	6821      	ldr	r1, [r4, #0]
 800b106:	f8d8 3000 	ldr.w	r3, [r8]
 800b10a:	f011 0f20 	tst.w	r1, #32
 800b10e:	d013      	beq.n	800b138 <_scanf_i+0x1c8>
 800b110:	1d1a      	adds	r2, r3, #4
 800b112:	f8c8 2000 	str.w	r2, [r8]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	6018      	str	r0, [r3, #0]
 800b11a:	68e3      	ldr	r3, [r4, #12]
 800b11c:	3301      	adds	r3, #1
 800b11e:	60e3      	str	r3, [r4, #12]
 800b120:	1bed      	subs	r5, r5, r7
 800b122:	44ab      	add	fp, r5
 800b124:	6925      	ldr	r5, [r4, #16]
 800b126:	445d      	add	r5, fp
 800b128:	6125      	str	r5, [r4, #16]
 800b12a:	2000      	movs	r0, #0
 800b12c:	b007      	add	sp, #28
 800b12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b132:	f04f 0b00 	mov.w	fp, #0
 800b136:	e7ca      	b.n	800b0ce <_scanf_i+0x15e>
 800b138:	1d1a      	adds	r2, r3, #4
 800b13a:	f8c8 2000 	str.w	r2, [r8]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f011 0f01 	tst.w	r1, #1
 800b144:	bf14      	ite	ne
 800b146:	8018      	strhne	r0, [r3, #0]
 800b148:	6018      	streq	r0, [r3, #0]
 800b14a:	e7e6      	b.n	800b11a <_scanf_i+0x1aa>
 800b14c:	2001      	movs	r0, #1
 800b14e:	e7ed      	b.n	800b12c <_scanf_i+0x1bc>
 800b150:	0800b464 	.word	0x0800b464
 800b154:	0800a455 	.word	0x0800a455
 800b158:	0800b381 	.word	0x0800b381
 800b15c:	0800b785 	.word	0x0800b785

0800b160 <_read_r>:
 800b160:	b538      	push	{r3, r4, r5, lr}
 800b162:	4d07      	ldr	r5, [pc, #28]	; (800b180 <_read_r+0x20>)
 800b164:	4604      	mov	r4, r0
 800b166:	4608      	mov	r0, r1
 800b168:	4611      	mov	r1, r2
 800b16a:	2200      	movs	r2, #0
 800b16c:	602a      	str	r2, [r5, #0]
 800b16e:	461a      	mov	r2, r3
 800b170:	f7f8 f972 	bl	8003458 <_read>
 800b174:	1c43      	adds	r3, r0, #1
 800b176:	d102      	bne.n	800b17e <_read_r+0x1e>
 800b178:	682b      	ldr	r3, [r5, #0]
 800b17a:	b103      	cbz	r3, 800b17e <_read_r+0x1e>
 800b17c:	6023      	str	r3, [r4, #0]
 800b17e:	bd38      	pop	{r3, r4, r5, pc}
 800b180:	20000e38 	.word	0x20000e38

0800b184 <__sccl>:
 800b184:	b570      	push	{r4, r5, r6, lr}
 800b186:	780b      	ldrb	r3, [r1, #0]
 800b188:	4604      	mov	r4, r0
 800b18a:	2b5e      	cmp	r3, #94	; 0x5e
 800b18c:	bf0b      	itete	eq
 800b18e:	784b      	ldrbeq	r3, [r1, #1]
 800b190:	1c48      	addne	r0, r1, #1
 800b192:	1c88      	addeq	r0, r1, #2
 800b194:	2200      	movne	r2, #0
 800b196:	bf08      	it	eq
 800b198:	2201      	moveq	r2, #1
 800b19a:	1e61      	subs	r1, r4, #1
 800b19c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b1a0:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b1a4:	42a9      	cmp	r1, r5
 800b1a6:	d1fb      	bne.n	800b1a0 <__sccl+0x1c>
 800b1a8:	b90b      	cbnz	r3, 800b1ae <__sccl+0x2a>
 800b1aa:	3801      	subs	r0, #1
 800b1ac:	bd70      	pop	{r4, r5, r6, pc}
 800b1ae:	f082 0201 	eor.w	r2, r2, #1
 800b1b2:	54e2      	strb	r2, [r4, r3]
 800b1b4:	4605      	mov	r5, r0
 800b1b6:	4628      	mov	r0, r5
 800b1b8:	f810 1b01 	ldrb.w	r1, [r0], #1
 800b1bc:	292d      	cmp	r1, #45	; 0x2d
 800b1be:	d006      	beq.n	800b1ce <__sccl+0x4a>
 800b1c0:	295d      	cmp	r1, #93	; 0x5d
 800b1c2:	d0f3      	beq.n	800b1ac <__sccl+0x28>
 800b1c4:	b909      	cbnz	r1, 800b1ca <__sccl+0x46>
 800b1c6:	4628      	mov	r0, r5
 800b1c8:	e7f0      	b.n	800b1ac <__sccl+0x28>
 800b1ca:	460b      	mov	r3, r1
 800b1cc:	e7f1      	b.n	800b1b2 <__sccl+0x2e>
 800b1ce:	786e      	ldrb	r6, [r5, #1]
 800b1d0:	2e5d      	cmp	r6, #93	; 0x5d
 800b1d2:	d0fa      	beq.n	800b1ca <__sccl+0x46>
 800b1d4:	42b3      	cmp	r3, r6
 800b1d6:	dcf8      	bgt.n	800b1ca <__sccl+0x46>
 800b1d8:	3502      	adds	r5, #2
 800b1da:	4619      	mov	r1, r3
 800b1dc:	3101      	adds	r1, #1
 800b1de:	428e      	cmp	r6, r1
 800b1e0:	5462      	strb	r2, [r4, r1]
 800b1e2:	dcfb      	bgt.n	800b1dc <__sccl+0x58>
 800b1e4:	1af1      	subs	r1, r6, r3
 800b1e6:	3901      	subs	r1, #1
 800b1e8:	1c58      	adds	r0, r3, #1
 800b1ea:	42b3      	cmp	r3, r6
 800b1ec:	bfa8      	it	ge
 800b1ee:	2100      	movge	r1, #0
 800b1f0:	1843      	adds	r3, r0, r1
 800b1f2:	e7e0      	b.n	800b1b6 <__sccl+0x32>

0800b1f4 <_raise_r>:
 800b1f4:	291f      	cmp	r1, #31
 800b1f6:	b538      	push	{r3, r4, r5, lr}
 800b1f8:	4604      	mov	r4, r0
 800b1fa:	460d      	mov	r5, r1
 800b1fc:	d904      	bls.n	800b208 <_raise_r+0x14>
 800b1fe:	2316      	movs	r3, #22
 800b200:	6003      	str	r3, [r0, #0]
 800b202:	f04f 30ff 	mov.w	r0, #4294967295
 800b206:	bd38      	pop	{r3, r4, r5, pc}
 800b208:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b20a:	b112      	cbz	r2, 800b212 <_raise_r+0x1e>
 800b20c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b210:	b94b      	cbnz	r3, 800b226 <_raise_r+0x32>
 800b212:	4620      	mov	r0, r4
 800b214:	f000 f830 	bl	800b278 <_getpid_r>
 800b218:	462a      	mov	r2, r5
 800b21a:	4601      	mov	r1, r0
 800b21c:	4620      	mov	r0, r4
 800b21e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b222:	f000 b817 	b.w	800b254 <_kill_r>
 800b226:	2b01      	cmp	r3, #1
 800b228:	d00a      	beq.n	800b240 <_raise_r+0x4c>
 800b22a:	1c59      	adds	r1, r3, #1
 800b22c:	d103      	bne.n	800b236 <_raise_r+0x42>
 800b22e:	2316      	movs	r3, #22
 800b230:	6003      	str	r3, [r0, #0]
 800b232:	2001      	movs	r0, #1
 800b234:	e7e7      	b.n	800b206 <_raise_r+0x12>
 800b236:	2400      	movs	r4, #0
 800b238:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b23c:	4628      	mov	r0, r5
 800b23e:	4798      	blx	r3
 800b240:	2000      	movs	r0, #0
 800b242:	e7e0      	b.n	800b206 <_raise_r+0x12>

0800b244 <raise>:
 800b244:	4b02      	ldr	r3, [pc, #8]	; (800b250 <raise+0xc>)
 800b246:	4601      	mov	r1, r0
 800b248:	6818      	ldr	r0, [r3, #0]
 800b24a:	f7ff bfd3 	b.w	800b1f4 <_raise_r>
 800b24e:	bf00      	nop
 800b250:	20000120 	.word	0x20000120

0800b254 <_kill_r>:
 800b254:	b538      	push	{r3, r4, r5, lr}
 800b256:	4d07      	ldr	r5, [pc, #28]	; (800b274 <_kill_r+0x20>)
 800b258:	2300      	movs	r3, #0
 800b25a:	4604      	mov	r4, r0
 800b25c:	4608      	mov	r0, r1
 800b25e:	4611      	mov	r1, r2
 800b260:	602b      	str	r3, [r5, #0]
 800b262:	f7f8 f8df 	bl	8003424 <_kill>
 800b266:	1c43      	adds	r3, r0, #1
 800b268:	d102      	bne.n	800b270 <_kill_r+0x1c>
 800b26a:	682b      	ldr	r3, [r5, #0]
 800b26c:	b103      	cbz	r3, 800b270 <_kill_r+0x1c>
 800b26e:	6023      	str	r3, [r4, #0]
 800b270:	bd38      	pop	{r3, r4, r5, pc}
 800b272:	bf00      	nop
 800b274:	20000e38 	.word	0x20000e38

0800b278 <_getpid_r>:
 800b278:	f7f8 b8cc 	b.w	8003414 <_getpid>

0800b27c <_strtol_l.constprop.0>:
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b282:	d001      	beq.n	800b288 <_strtol_l.constprop.0+0xc>
 800b284:	2b24      	cmp	r3, #36	; 0x24
 800b286:	d906      	bls.n	800b296 <_strtol_l.constprop.0+0x1a>
 800b288:	f7fd ff32 	bl	80090f0 <__errno>
 800b28c:	2316      	movs	r3, #22
 800b28e:	6003      	str	r3, [r0, #0]
 800b290:	2000      	movs	r0, #0
 800b292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b296:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b37c <_strtol_l.constprop.0+0x100>
 800b29a:	460d      	mov	r5, r1
 800b29c:	462e      	mov	r6, r5
 800b29e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b2a2:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b2a6:	f017 0708 	ands.w	r7, r7, #8
 800b2aa:	d1f7      	bne.n	800b29c <_strtol_l.constprop.0+0x20>
 800b2ac:	2c2d      	cmp	r4, #45	; 0x2d
 800b2ae:	d132      	bne.n	800b316 <_strtol_l.constprop.0+0x9a>
 800b2b0:	782c      	ldrb	r4, [r5, #0]
 800b2b2:	2701      	movs	r7, #1
 800b2b4:	1cb5      	adds	r5, r6, #2
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d05b      	beq.n	800b372 <_strtol_l.constprop.0+0xf6>
 800b2ba:	2b10      	cmp	r3, #16
 800b2bc:	d109      	bne.n	800b2d2 <_strtol_l.constprop.0+0x56>
 800b2be:	2c30      	cmp	r4, #48	; 0x30
 800b2c0:	d107      	bne.n	800b2d2 <_strtol_l.constprop.0+0x56>
 800b2c2:	782c      	ldrb	r4, [r5, #0]
 800b2c4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b2c8:	2c58      	cmp	r4, #88	; 0x58
 800b2ca:	d14d      	bne.n	800b368 <_strtol_l.constprop.0+0xec>
 800b2cc:	786c      	ldrb	r4, [r5, #1]
 800b2ce:	2310      	movs	r3, #16
 800b2d0:	3502      	adds	r5, #2
 800b2d2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b2d6:	f108 38ff 	add.w	r8, r8, #4294967295
 800b2da:	f04f 0c00 	mov.w	ip, #0
 800b2de:	fbb8 f9f3 	udiv	r9, r8, r3
 800b2e2:	4666      	mov	r6, ip
 800b2e4:	fb03 8a19 	mls	sl, r3, r9, r8
 800b2e8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b2ec:	f1be 0f09 	cmp.w	lr, #9
 800b2f0:	d816      	bhi.n	800b320 <_strtol_l.constprop.0+0xa4>
 800b2f2:	4674      	mov	r4, lr
 800b2f4:	42a3      	cmp	r3, r4
 800b2f6:	dd24      	ble.n	800b342 <_strtol_l.constprop.0+0xc6>
 800b2f8:	f1bc 0f00 	cmp.w	ip, #0
 800b2fc:	db1e      	blt.n	800b33c <_strtol_l.constprop.0+0xc0>
 800b2fe:	45b1      	cmp	r9, r6
 800b300:	d31c      	bcc.n	800b33c <_strtol_l.constprop.0+0xc0>
 800b302:	d101      	bne.n	800b308 <_strtol_l.constprop.0+0x8c>
 800b304:	45a2      	cmp	sl, r4
 800b306:	db19      	blt.n	800b33c <_strtol_l.constprop.0+0xc0>
 800b308:	fb06 4603 	mla	r6, r6, r3, r4
 800b30c:	f04f 0c01 	mov.w	ip, #1
 800b310:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b314:	e7e8      	b.n	800b2e8 <_strtol_l.constprop.0+0x6c>
 800b316:	2c2b      	cmp	r4, #43	; 0x2b
 800b318:	bf04      	itt	eq
 800b31a:	782c      	ldrbeq	r4, [r5, #0]
 800b31c:	1cb5      	addeq	r5, r6, #2
 800b31e:	e7ca      	b.n	800b2b6 <_strtol_l.constprop.0+0x3a>
 800b320:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b324:	f1be 0f19 	cmp.w	lr, #25
 800b328:	d801      	bhi.n	800b32e <_strtol_l.constprop.0+0xb2>
 800b32a:	3c37      	subs	r4, #55	; 0x37
 800b32c:	e7e2      	b.n	800b2f4 <_strtol_l.constprop.0+0x78>
 800b32e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b332:	f1be 0f19 	cmp.w	lr, #25
 800b336:	d804      	bhi.n	800b342 <_strtol_l.constprop.0+0xc6>
 800b338:	3c57      	subs	r4, #87	; 0x57
 800b33a:	e7db      	b.n	800b2f4 <_strtol_l.constprop.0+0x78>
 800b33c:	f04f 3cff 	mov.w	ip, #4294967295
 800b340:	e7e6      	b.n	800b310 <_strtol_l.constprop.0+0x94>
 800b342:	f1bc 0f00 	cmp.w	ip, #0
 800b346:	da05      	bge.n	800b354 <_strtol_l.constprop.0+0xd8>
 800b348:	2322      	movs	r3, #34	; 0x22
 800b34a:	6003      	str	r3, [r0, #0]
 800b34c:	4646      	mov	r6, r8
 800b34e:	b942      	cbnz	r2, 800b362 <_strtol_l.constprop.0+0xe6>
 800b350:	4630      	mov	r0, r6
 800b352:	e79e      	b.n	800b292 <_strtol_l.constprop.0+0x16>
 800b354:	b107      	cbz	r7, 800b358 <_strtol_l.constprop.0+0xdc>
 800b356:	4276      	negs	r6, r6
 800b358:	2a00      	cmp	r2, #0
 800b35a:	d0f9      	beq.n	800b350 <_strtol_l.constprop.0+0xd4>
 800b35c:	f1bc 0f00 	cmp.w	ip, #0
 800b360:	d000      	beq.n	800b364 <_strtol_l.constprop.0+0xe8>
 800b362:	1e69      	subs	r1, r5, #1
 800b364:	6011      	str	r1, [r2, #0]
 800b366:	e7f3      	b.n	800b350 <_strtol_l.constprop.0+0xd4>
 800b368:	2430      	movs	r4, #48	; 0x30
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d1b1      	bne.n	800b2d2 <_strtol_l.constprop.0+0x56>
 800b36e:	2308      	movs	r3, #8
 800b370:	e7af      	b.n	800b2d2 <_strtol_l.constprop.0+0x56>
 800b372:	2c30      	cmp	r4, #48	; 0x30
 800b374:	d0a5      	beq.n	800b2c2 <_strtol_l.constprop.0+0x46>
 800b376:	230a      	movs	r3, #10
 800b378:	e7ab      	b.n	800b2d2 <_strtol_l.constprop.0+0x56>
 800b37a:	bf00      	nop
 800b37c:	0800b60c 	.word	0x0800b60c

0800b380 <_strtol_r>:
 800b380:	f7ff bf7c 	b.w	800b27c <_strtol_l.constprop.0>

0800b384 <__submore>:
 800b384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b388:	460c      	mov	r4, r1
 800b38a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b38c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b390:	4299      	cmp	r1, r3
 800b392:	d11d      	bne.n	800b3d0 <__submore+0x4c>
 800b394:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b398:	f7fe f878 	bl	800948c <_malloc_r>
 800b39c:	b918      	cbnz	r0, 800b3a6 <__submore+0x22>
 800b39e:	f04f 30ff 	mov.w	r0, #4294967295
 800b3a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3aa:	63a3      	str	r3, [r4, #56]	; 0x38
 800b3ac:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b3b0:	6360      	str	r0, [r4, #52]	; 0x34
 800b3b2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b3b6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b3ba:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b3be:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b3c2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b3c6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b3ca:	6020      	str	r0, [r4, #0]
 800b3cc:	2000      	movs	r0, #0
 800b3ce:	e7e8      	b.n	800b3a2 <__submore+0x1e>
 800b3d0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b3d2:	0077      	lsls	r7, r6, #1
 800b3d4:	463a      	mov	r2, r7
 800b3d6:	f7ff fb6f 	bl	800aab8 <_realloc_r>
 800b3da:	4605      	mov	r5, r0
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	d0de      	beq.n	800b39e <__submore+0x1a>
 800b3e0:	eb00 0806 	add.w	r8, r0, r6
 800b3e4:	4601      	mov	r1, r0
 800b3e6:	4632      	mov	r2, r6
 800b3e8:	4640      	mov	r0, r8
 800b3ea:	f7fd ffcd 	bl	8009388 <memcpy>
 800b3ee:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b3f2:	f8c4 8000 	str.w	r8, [r4]
 800b3f6:	e7e9      	b.n	800b3cc <__submore+0x48>

0800b3f8 <_fstat_r>:
 800b3f8:	b538      	push	{r3, r4, r5, lr}
 800b3fa:	4d07      	ldr	r5, [pc, #28]	; (800b418 <_fstat_r+0x20>)
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	4604      	mov	r4, r0
 800b400:	4608      	mov	r0, r1
 800b402:	4611      	mov	r1, r2
 800b404:	602b      	str	r3, [r5, #0]
 800b406:	f7f8 f86c 	bl	80034e2 <_fstat>
 800b40a:	1c43      	adds	r3, r0, #1
 800b40c:	d102      	bne.n	800b414 <_fstat_r+0x1c>
 800b40e:	682b      	ldr	r3, [r5, #0]
 800b410:	b103      	cbz	r3, 800b414 <_fstat_r+0x1c>
 800b412:	6023      	str	r3, [r4, #0]
 800b414:	bd38      	pop	{r3, r4, r5, pc}
 800b416:	bf00      	nop
 800b418:	20000e38 	.word	0x20000e38

0800b41c <_isatty_r>:
 800b41c:	b538      	push	{r3, r4, r5, lr}
 800b41e:	4d06      	ldr	r5, [pc, #24]	; (800b438 <_isatty_r+0x1c>)
 800b420:	2300      	movs	r3, #0
 800b422:	4604      	mov	r4, r0
 800b424:	4608      	mov	r0, r1
 800b426:	602b      	str	r3, [r5, #0]
 800b428:	f7f8 f86b 	bl	8003502 <_isatty>
 800b42c:	1c43      	adds	r3, r0, #1
 800b42e:	d102      	bne.n	800b436 <_isatty_r+0x1a>
 800b430:	682b      	ldr	r3, [r5, #0]
 800b432:	b103      	cbz	r3, 800b436 <_isatty_r+0x1a>
 800b434:	6023      	str	r3, [r4, #0]
 800b436:	bd38      	pop	{r3, r4, r5, pc}
 800b438:	20000e38 	.word	0x20000e38

0800b43c <_malloc_usable_size_r>:
 800b43c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b440:	1f18      	subs	r0, r3, #4
 800b442:	2b00      	cmp	r3, #0
 800b444:	bfbc      	itt	lt
 800b446:	580b      	ldrlt	r3, [r1, r0]
 800b448:	18c0      	addlt	r0, r0, r3
 800b44a:	4770      	bx	lr

0800b44c <_init>:
 800b44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b44e:	bf00      	nop
 800b450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b452:	bc08      	pop	{r3}
 800b454:	469e      	mov	lr, r3
 800b456:	4770      	bx	lr

0800b458 <_fini>:
 800b458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b45a:	bf00      	nop
 800b45c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b45e:	bc08      	pop	{r3}
 800b460:	469e      	mov	lr, r3
 800b462:	4770      	bx	lr
