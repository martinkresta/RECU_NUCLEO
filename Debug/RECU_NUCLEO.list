
RECU_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfd8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000324  0800d1a8  0800d1a8  0001d1a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d4cc  0800d4cc  00020218  2**0
                  CONTENTS
  4 .ARM          00000008  0800d4cc  0800d4cc  0001d4cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d4d4  0800d4d4  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d4d4  0800d4d4  0001d4d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d4d8  0800d4d8  0001d4d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800d4dc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000da8  20000218  0800d6f4  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000fc0  0800d6f4  00020fc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c269  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004397  00000000  00000000  0003c4b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001850  00000000  00000000  00040848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001680  00000000  00000000  00042098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000271c5  00000000  00000000  00043718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002000a  00000000  00000000  0006a8dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0616  00000000  00000000  0008a8e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016aefd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007420  00000000  00000000  0016af50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000218 	.word	0x20000218
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d190 	.word	0x0800d190

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000021c 	.word	0x2000021c
 800020c:	0800d190 	.word	0x0800d190

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_ldivmod>:
 80002e0:	b97b      	cbnz	r3, 8000302 <__aeabi_ldivmod+0x22>
 80002e2:	b972      	cbnz	r2, 8000302 <__aeabi_ldivmod+0x22>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bfbe      	ittt	lt
 80002e8:	2000      	movlt	r0, #0
 80002ea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ee:	e006      	blt.n	80002fe <__aeabi_ldivmod+0x1e>
 80002f0:	bf08      	it	eq
 80002f2:	2800      	cmpeq	r0, #0
 80002f4:	bf1c      	itt	ne
 80002f6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002fa:	f04f 30ff 	movne.w	r0, #4294967295
 80002fe:	f000 b9bf 	b.w	8000680 <__aeabi_idiv0>
 8000302:	f1ad 0c08 	sub.w	ip, sp, #8
 8000306:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030a:	2900      	cmp	r1, #0
 800030c:	db09      	blt.n	8000322 <__aeabi_ldivmod+0x42>
 800030e:	2b00      	cmp	r3, #0
 8000310:	db1a      	blt.n	8000348 <__aeabi_ldivmod+0x68>
 8000312:	f000 f84d 	bl	80003b0 <__udivmoddi4>
 8000316:	f8dd e004 	ldr.w	lr, [sp, #4]
 800031a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031e:	b004      	add	sp, #16
 8000320:	4770      	bx	lr
 8000322:	4240      	negs	r0, r0
 8000324:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000328:	2b00      	cmp	r3, #0
 800032a:	db1b      	blt.n	8000364 <__aeabi_ldivmod+0x84>
 800032c:	f000 f840 	bl	80003b0 <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	4252      	negs	r2, r2
 8000342:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000346:	4770      	bx	lr
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	f000 f82f 	bl	80003b0 <__udivmoddi4>
 8000352:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000356:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035a:	b004      	add	sp, #16
 800035c:	4240      	negs	r0, r0
 800035e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000362:	4770      	bx	lr
 8000364:	4252      	negs	r2, r2
 8000366:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036a:	f000 f821 	bl	80003b0 <__udivmoddi4>
 800036e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000376:	b004      	add	sp, #16
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <COM_Init>:

static void SendVariable(uint16_t id);


void COM_Init(uint8_t nodeId)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
	mNodeId = nodeId;
 800068e:	4a04      	ldr	r2, [pc, #16]	; (80006a0 <COM_Init+0x1c>)
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	7013      	strb	r3, [r2, #0]
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	2000057c 	.word	0x2000057c

080006a4 <COM_GetRxMessage>:
	return ns;
}

// just wrapper to MCAN
uint8_t COM_GetRxMessage( s_CanRxMsg* msg)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	return MCAN_GetRxMessage(msg);
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f000 fabd 	bl	8000c2c <MCAN_GetRxMessage>
 80006b2:	4603      	mov	r3, r0
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <COM_Update_10ms>:

void COM_Update_10ms(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0

	// stream the variables to CAN
	int i;
	for(i = 0; i < STREAM_LIST_SIZE; i++)
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	e017      	b.n	80006f8 <COM_Update_10ms+0x3c>
	{
		mStreamList[i].timer+=10;
 80006c8:	4934      	ldr	r1, [pc, #208]	; (800079c <COM_Update_10ms+0xe0>)
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	4613      	mov	r3, r2
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	4413      	add	r3, r2
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	440b      	add	r3, r1
 80006d6:	3306      	adds	r3, #6
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	330a      	adds	r3, #10
 80006dc:	b298      	uxth	r0, r3
 80006de:	492f      	ldr	r1, [pc, #188]	; (800079c <COM_Update_10ms+0xe0>)
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	4613      	mov	r3, r2
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	4413      	add	r3, r2
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	440b      	add	r3, r1
 80006ec:	3306      	adds	r3, #6
 80006ee:	4602      	mov	r2, r0
 80006f0:	801a      	strh	r2, [r3, #0]
	for(i = 0; i < STREAM_LIST_SIZE; i++)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	3301      	adds	r3, #1
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2b45      	cmp	r3, #69	; 0x45
 80006fc:	dde4      	ble.n	80006c8 <COM_Update_10ms+0xc>
	}
	for(i = 0; i < STREAM_LIST_SIZE; i++)
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	e042      	b.n	800078a <COM_Update_10ms+0xce>
	{
		if (mStreamList[i].enable == 1 && mStreamList[i].sendPeriod != 0)
 8000704:	4925      	ldr	r1, [pc, #148]	; (800079c <COM_Update_10ms+0xe0>)
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	4613      	mov	r3, r2
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	4413      	add	r3, r2
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	440b      	add	r3, r1
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d135      	bne.n	8000784 <COM_Update_10ms+0xc8>
 8000718:	4920      	ldr	r1, [pc, #128]	; (800079c <COM_Update_10ms+0xe0>)
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	4613      	mov	r3, r2
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	4413      	add	r3, r2
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	440b      	add	r3, r1
 8000726:	3304      	adds	r3, #4
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d02a      	beq.n	8000784 <COM_Update_10ms+0xc8>
		{
			if (mStreamList[i].timer >= mStreamList[i].sendPeriod)
 800072e:	491b      	ldr	r1, [pc, #108]	; (800079c <COM_Update_10ms+0xe0>)
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	4613      	mov	r3, r2
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	4413      	add	r3, r2
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	440b      	add	r3, r1
 800073c:	3306      	adds	r3, #6
 800073e:	8819      	ldrh	r1, [r3, #0]
 8000740:	4816      	ldr	r0, [pc, #88]	; (800079c <COM_Update_10ms+0xe0>)
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	4613      	mov	r3, r2
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	4413      	add	r3, r2
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	4403      	add	r3, r0
 800074e:	3304      	adds	r3, #4
 8000750:	881b      	ldrh	r3, [r3, #0]
 8000752:	4299      	cmp	r1, r3
 8000754:	d316      	bcc.n	8000784 <COM_Update_10ms+0xc8>
			{
				SendVariable(mStreamList[i].varId);
 8000756:	4911      	ldr	r1, [pc, #68]	; (800079c <COM_Update_10ms+0xe0>)
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	4613      	mov	r3, r2
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	4413      	add	r3, r2
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	440b      	add	r3, r1
 8000764:	3302      	adds	r3, #2
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	4618      	mov	r0, r3
 800076a:	f000 f89b 	bl	80008a4 <SendVariable>
				mStreamList[i].timer = 0;
 800076e:	490b      	ldr	r1, [pc, #44]	; (800079c <COM_Update_10ms+0xe0>)
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	4613      	mov	r3, r2
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	4413      	add	r3, r2
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	440b      	add	r3, r1
 800077c:	3306      	adds	r3, #6
 800077e:	2200      	movs	r2, #0
 8000780:	801a      	strh	r2, [r3, #0]
				break;  // send just 1 value every 10ms
 8000782:	e006      	b.n	8000792 <COM_Update_10ms+0xd6>
	for(i = 0; i < STREAM_LIST_SIZE; i++)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	3301      	adds	r3, #1
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b45      	cmp	r3, #69	; 0x45
 800078e:	ddb9      	ble.n	8000704 <COM_Update_10ms+0x48>
			}
		}
	}
}
 8000790:	bf00      	nop
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000234 	.word	0x20000234

080007a0 <COM_AddStreamedVariable>:
	MCAN_SendFrame(cobid + mNodeId, data, dlc);
}


void COM_AddStreamedVariable(uint16_t varId, uint16_t period)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	460a      	mov	r2, r1
 80007aa:	80fb      	strh	r3, [r7, #6]
 80007ac:	4613      	mov	r3, r2
 80007ae:	80bb      	strh	r3, [r7, #4]
	// go thru the list to find if entry already exists
	int i;
	for(i = 0; i < STREAM_LIST_SIZE; i++)
 80007b0:	2300      	movs	r3, #0
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	e038      	b.n	8000828 <COM_AddStreamedVariable+0x88>
	{
		if(mStreamList[i].varId == varId)
 80007b6:	493a      	ldr	r1, [pc, #232]	; (80008a0 <COM_AddStreamedVariable+0x100>)
 80007b8:	68fa      	ldr	r2, [r7, #12]
 80007ba:	4613      	mov	r3, r2
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	4413      	add	r3, r2
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	440b      	add	r3, r1
 80007c4:	3302      	adds	r3, #2
 80007c6:	881b      	ldrh	r3, [r3, #0]
 80007c8:	88fa      	ldrh	r2, [r7, #6]
 80007ca:	429a      	cmp	r2, r3
 80007cc:	d129      	bne.n	8000822 <COM_AddStreamedVariable+0x82>
		{
			if(period != 0)
 80007ce:	88bb      	ldrh	r3, [r7, #4]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d013      	beq.n	80007fc <COM_AddStreamedVariable+0x5c>
			{
				mStreamList[i].sendPeriod = period;
 80007d4:	4932      	ldr	r1, [pc, #200]	; (80008a0 <COM_AddStreamedVariable+0x100>)
 80007d6:	68fa      	ldr	r2, [r7, #12]
 80007d8:	4613      	mov	r3, r2
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	4413      	add	r3, r2
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	440b      	add	r3, r1
 80007e2:	3304      	adds	r3, #4
 80007e4:	88ba      	ldrh	r2, [r7, #4]
 80007e6:	801a      	strh	r2, [r3, #0]
				mStreamList[i].enable = 1;
 80007e8:	492d      	ldr	r1, [pc, #180]	; (80008a0 <COM_AddStreamedVariable+0x100>)
 80007ea:	68fa      	ldr	r2, [r7, #12]
 80007ec:	4613      	mov	r3, r2
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	4413      	add	r3, r2
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	440b      	add	r3, r1
 80007f6:	2201      	movs	r2, #1
 80007f8:	701a      	strb	r2, [r3, #0]
				return;
 80007fa:	e04c      	b.n	8000896 <COM_AddStreamedVariable+0xf6>
			}
			else
			{
				mStreamList[i].sendPeriod = 0;
 80007fc:	4928      	ldr	r1, [pc, #160]	; (80008a0 <COM_AddStreamedVariable+0x100>)
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	4613      	mov	r3, r2
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	4413      	add	r3, r2
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	440b      	add	r3, r1
 800080a:	3304      	adds	r3, #4
 800080c:	2200      	movs	r2, #0
 800080e:	801a      	strh	r2, [r3, #0]
				mStreamList[i].enable = 0;
 8000810:	4923      	ldr	r1, [pc, #140]	; (80008a0 <COM_AddStreamedVariable+0x100>)
 8000812:	68fa      	ldr	r2, [r7, #12]
 8000814:	4613      	mov	r3, r2
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	4413      	add	r3, r2
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	440b      	add	r3, r1
 800081e:	2200      	movs	r2, #0
 8000820:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < STREAM_LIST_SIZE; i++)
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	3301      	adds	r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	2b45      	cmp	r3, #69	; 0x45
 800082c:	ddc3      	ble.n	80007b6 <COM_AddStreamedVariable+0x16>
			}
		}
	}

	// if not add variable to the list
	for(i = 0; i < STREAM_LIST_SIZE; i++)
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	e02d      	b.n	8000890 <COM_AddStreamedVariable+0xf0>
	{
		if(mStreamList[i].enable == 0)
 8000834:	491a      	ldr	r1, [pc, #104]	; (80008a0 <COM_AddStreamedVariable+0x100>)
 8000836:	68fa      	ldr	r2, [r7, #12]
 8000838:	4613      	mov	r3, r2
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	4413      	add	r3, r2
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	440b      	add	r3, r1
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d120      	bne.n	800088a <COM_AddStreamedVariable+0xea>
		{
			if(period != 0)
 8000848:	88bb      	ldrh	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d01d      	beq.n	800088a <COM_AddStreamedVariable+0xea>
			{
				mStreamList[i].varId = varId;
 800084e:	4914      	ldr	r1, [pc, #80]	; (80008a0 <COM_AddStreamedVariable+0x100>)
 8000850:	68fa      	ldr	r2, [r7, #12]
 8000852:	4613      	mov	r3, r2
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	4413      	add	r3, r2
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	440b      	add	r3, r1
 800085c:	3302      	adds	r3, #2
 800085e:	88fa      	ldrh	r2, [r7, #6]
 8000860:	801a      	strh	r2, [r3, #0]
				mStreamList[i].sendPeriod = period;
 8000862:	490f      	ldr	r1, [pc, #60]	; (80008a0 <COM_AddStreamedVariable+0x100>)
 8000864:	68fa      	ldr	r2, [r7, #12]
 8000866:	4613      	mov	r3, r2
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	4413      	add	r3, r2
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	440b      	add	r3, r1
 8000870:	3304      	adds	r3, #4
 8000872:	88ba      	ldrh	r2, [r7, #4]
 8000874:	801a      	strh	r2, [r3, #0]
				mStreamList[i].enable = 1;
 8000876:	490a      	ldr	r1, [pc, #40]	; (80008a0 <COM_AddStreamedVariable+0x100>)
 8000878:	68fa      	ldr	r2, [r7, #12]
 800087a:	4613      	mov	r3, r2
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	4413      	add	r3, r2
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	440b      	add	r3, r1
 8000884:	2201      	movs	r2, #1
 8000886:	701a      	strb	r2, [r3, #0]
				return;
 8000888:	e005      	b.n	8000896 <COM_AddStreamedVariable+0xf6>
	for(i = 0; i < STREAM_LIST_SIZE; i++)
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	3301      	adds	r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	2b45      	cmp	r3, #69	; 0x45
 8000894:	ddce      	ble.n	8000834 <COM_AddStreamedVariable+0x94>
			}
		}
	}
}
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	20000234 	.word	0x20000234

080008a4 <SendVariable>:
  COM_SendMessage(CMD_AC_REMOTE_REQ, data, 8);
}

/*Private methods*/
static void SendVariable(uint16_t id)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	80fb      	strh	r3, [r7, #6]
	uint16_t invalid = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	827b      	strh	r3, [r7, #18]
	uint16_t validflag = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	82fb      	strh	r3, [r7, #22]
	int16_t tmp = VAR_GetVariable(id, &invalid);
 80008b6:	f107 0212 	add.w	r2, r7, #18
 80008ba:	88fb      	ldrh	r3, [r7, #6]
 80008bc:	4611      	mov	r1, r2
 80008be:	4618      	mov	r0, r3
 80008c0:	f002 f876 	bl	80029b0 <VAR_GetVariable>
 80008c4:	4603      	mov	r3, r0
 80008c6:	82bb      	strh	r3, [r7, #20]
	validflag = (invalid == INVALID_FLAG ? 0 : 1);
 80008c8:	8a7b      	ldrh	r3, [r7, #18]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	bf14      	ite	ne
 80008ce:	2301      	movne	r3, #1
 80008d0:	2300      	moveq	r3, #0
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	82fb      	strh	r3, [r7, #22]
	uint8_t data[8];
	data[0] = id >> 8;
 80008d6:	88fb      	ldrh	r3, [r7, #6]
 80008d8:	0a1b      	lsrs	r3, r3, #8
 80008da:	b29b      	uxth	r3, r3
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	723b      	strb	r3, [r7, #8]
	data[1] = id  & 0xFF;
 80008e0:	88fb      	ldrh	r3, [r7, #6]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	727b      	strb	r3, [r7, #9]
	data[2] = tmp >> 8;
 80008e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80008ea:	121b      	asrs	r3, r3, #8
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	72bb      	strb	r3, [r7, #10]
	data[3] = tmp & 0xFF;
 80008f2:	8abb      	ldrh	r3, [r7, #20]
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	72fb      	strb	r3, [r7, #11]
	data[4] = validflag >> 8;
 80008f8:	8afb      	ldrh	r3, [r7, #22]
 80008fa:	0a1b      	lsrs	r3, r3, #8
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	733b      	strb	r3, [r7, #12]
	data[5] = validflag & 0xFF;
 8000902:	8afb      	ldrh	r3, [r7, #22]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	737b      	strb	r3, [r7, #13]
	data[6] = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	73bb      	strb	r3, [r7, #14]
	data[7] = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	73fb      	strb	r3, [r7, #15]
	MCAN_SendFrame(CMD_VAR_VALUE + mNodeId, data, 8);
 8000910:	4b07      	ldr	r3, [pc, #28]	; (8000930 <SendVariable+0x8c>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	b29b      	uxth	r3, r3
 8000916:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800091a:	b29b      	uxth	r3, r3
 800091c:	f107 0108 	add.w	r1, r7, #8
 8000920:	2208      	movs	r2, #8
 8000922:	4618      	mov	r0, r3
 8000924:	f000 f998 	bl	8000c58 <MCAN_SendFrame>
}
 8000928:	bf00      	nop
 800092a:	3718      	adds	r7, #24
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	2000057c 	.word	0x2000057c

08000934 <MCAN_Init>:



// initialization of CAN node, and buffers
void MCAN_Init(CAN_HandleTypeDef	* can, uint8_t id)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b088      	sub	sp, #32
 8000938:	af04      	add	r7, sp, #16
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	460b      	mov	r3, r1
 800093e:	70fb      	strb	r3, [r7, #3]
	uint8_t bank_offset = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	73fb      	strb	r3, [r7, #15]
	uint8_t i;

	mMcan.Rx0Buf = CB_Create(sizeof(s_CanRxMsg),RX_NMT_BUFF_SIZE);
 8000944:	21c8      	movs	r1, #200	; 0xc8
 8000946:	2024      	movs	r0, #36	; 0x24
 8000948:	f002 f886 	bl	8002a58 <CB_Create>
 800094c:	4603      	mov	r3, r0
 800094e:	4a4d      	ldr	r2, [pc, #308]	; (8000a84 <MCAN_Init+0x150>)
 8000950:	60d3      	str	r3, [r2, #12]
	mMcan.Rx1Buf = CB_Create(sizeof(s_CanRxMsg),RX_BUFF_SIZE);
 8000952:	2150      	movs	r1, #80	; 0x50
 8000954:	2024      	movs	r0, #36	; 0x24
 8000956:	f002 f87f 	bl	8002a58 <CB_Create>
 800095a:	4603      	mov	r3, r0
 800095c:	4a49      	ldr	r2, [pc, #292]	; (8000a84 <MCAN_Init+0x150>)
 800095e:	6113      	str	r3, [r2, #16]
	mMcan.TxBuf = CB_Create(sizeof(s_CanTxMsg),TX_BUFF_SIZE);
 8000960:	2164      	movs	r1, #100	; 0x64
 8000962:	2020      	movs	r0, #32
 8000964:	f002 f878 	bl	8002a58 <CB_Create>
 8000968:	4603      	mov	r3, r0
 800096a:	4a46      	ldr	r2, [pc, #280]	; (8000a84 <MCAN_Init+0x150>)
 800096c:	6153      	str	r3, [r2, #20]
	if (mMcan.Rx0Buf == NULL || mMcan.Rx1Buf == NULL ||mMcan.TxBuf == NULL)
 800096e:	4b45      	ldr	r3, [pc, #276]	; (8000a84 <MCAN_Init+0x150>)
 8000970:	68db      	ldr	r3, [r3, #12]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d002      	beq.n	800097c <MCAN_Init+0x48>
 8000976:	4b43      	ldr	r3, [pc, #268]	; (8000a84 <MCAN_Init+0x150>)
 8000978:	691b      	ldr	r3, [r3, #16]
 800097a:	2b00      	cmp	r3, #0
	{
		// TBD
	}

	mMcan.CanHw = can;
 800097c:	4a41      	ldr	r2, [pc, #260]	; (8000a84 <MCAN_Init+0x150>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6093      	str	r3, [r2, #8]
	// for devices with two cans check which HW is used and adjust filter banks offset
	#ifdef CAN2
	if(mMcan.CanHw->Instance == CAN2)
 8000982:	4b40      	ldr	r3, [pc, #256]	; (8000a84 <MCAN_Init+0x150>)
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a3f      	ldr	r2, [pc, #252]	; (8000a88 <MCAN_Init+0x154>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d101      	bne.n	8000992 <MCAN_Init+0x5e>
	{
		bank_offset = 15;
 800098e:	230f      	movs	r3, #15
 8000990:	73fb      	strb	r3, [r7, #15]
	}
	#endif


	mMcan.Node.nodeId = id;
 8000992:	4a3c      	ldr	r2, [pc, #240]	; (8000a84 <MCAN_Init+0x150>)
 8000994:	78fb      	ldrb	r3, [r7, #3]
 8000996:	7013      	strb	r3, [r2, #0]
	mMcan.Node.timeout = CO_DEFAULT_HB_TO/2;
 8000998:	4b3a      	ldr	r3, [pc, #232]	; (8000a84 <MCAN_Init+0x150>)
 800099a:	f241 3288 	movw	r2, #5000	; 0x1388
 800099e:	809a      	strh	r2, [r3, #4]
	mMcan.Node.timeout_cnt = 0;
 80009a0:	4b38      	ldr	r3, [pc, #224]	; (8000a84 <MCAN_Init+0x150>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	805a      	strh	r2, [r3, #2]

	mMcan.HbMsg.header.DLC = 1;
 80009a6:	4b37      	ldr	r3, [pc, #220]	; (8000a84 <MCAN_Init+0x150>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	629a      	str	r2, [r3, #40]	; 0x28
	mMcan.HbMsg.header.StdId = HB + mMcan.Node.nodeId;
 80009ac:	4b35      	ldr	r3, [pc, #212]	; (8000a84 <MCAN_Init+0x150>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 80009b4:	461a      	mov	r2, r3
 80009b6:	4b33      	ldr	r3, [pc, #204]	; (8000a84 <MCAN_Init+0x150>)
 80009b8:	619a      	str	r2, [r3, #24]
	mMcan.HbMsg.header.ExtId = 0x00;
 80009ba:	4b32      	ldr	r3, [pc, #200]	; (8000a84 <MCAN_Init+0x150>)
 80009bc:	2200      	movs	r2, #0
 80009be:	61da      	str	r2, [r3, #28]
	mMcan.HbMsg.header.RTR = CAN_RTR_DATA;
 80009c0:	4b30      	ldr	r3, [pc, #192]	; (8000a84 <MCAN_Init+0x150>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	; 0x24
	mMcan.HbMsg.header.IDE = CAN_ID_STD;
 80009c6:	4b2f      	ldr	r3, [pc, #188]	; (8000a84 <MCAN_Init+0x150>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	621a      	str	r2, [r3, #32]

	// init network
	for (i = 0; i < MAX_NUM_OF_NODES; i++)
 80009cc:	2300      	movs	r3, #0
 80009ce:	73bb      	strb	r3, [r7, #14]
 80009d0:	e014      	b.n	80009fc <MCAN_Init+0xc8>
	{
		mNodes[i].timeout = CO_DEFAULT_HB_TO;
 80009d2:	7bbb      	ldrb	r3, [r7, #14]
 80009d4:	4a2d      	ldr	r2, [pc, #180]	; (8000a8c <MCAN_Init+0x158>)
 80009d6:	00db      	lsls	r3, r3, #3
 80009d8:	4413      	add	r3, r2
 80009da:	f242 7210 	movw	r2, #10000	; 0x2710
 80009de:	809a      	strh	r2, [r3, #4]
		mNodes[i].canStatus = eNS_NMT_UNKNOWN;
 80009e0:	7bbb      	ldrb	r3, [r7, #14]
 80009e2:	4a2a      	ldr	r2, [pc, #168]	; (8000a8c <MCAN_Init+0x158>)
 80009e4:	00db      	lsls	r3, r3, #3
 80009e6:	4413      	add	r3, r2
 80009e8:	22ff      	movs	r2, #255	; 0xff
 80009ea:	719a      	strb	r2, [r3, #6]
		mNodes[i].nodeId = i;
 80009ec:	7bbb      	ldrb	r3, [r7, #14]
 80009ee:	4927      	ldr	r1, [pc, #156]	; (8000a8c <MCAN_Init+0x158>)
 80009f0:	7bba      	ldrb	r2, [r7, #14]
 80009f2:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
	for (i = 0; i < MAX_NUM_OF_NODES; i++)
 80009f6:	7bbb      	ldrb	r3, [r7, #14]
 80009f8:	3301      	adds	r3, #1
 80009fa:	73bb      	strb	r3, [r7, #14]
 80009fc:	7bbb      	ldrb	r3, [r7, #14]
 80009fe:	2b07      	cmp	r3, #7
 8000a00:	d9e7      	bls.n	80009d2 <MCAN_Init+0x9e>
	}
	mNodes[mMcan.Node.nodeId].canStatus = mMcan.Node.canStatus;
 8000a02:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <MCAN_Init+0x150>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	4618      	mov	r0, r3
 8000a08:	4b1e      	ldr	r3, [pc, #120]	; (8000a84 <MCAN_Init+0x150>)
 8000a0a:	7999      	ldrb	r1, [r3, #6]
 8000a0c:	4a1f      	ldr	r2, [pc, #124]	; (8000a8c <MCAN_Init+0x158>)
 8000a0e:	00c3      	lsls	r3, r0, #3
 8000a10:	4413      	add	r3, r2
 8000a12:	460a      	mov	r2, r1
 8000a14:	719a      	strb	r2, [r3, #6]



	// set the filter of FIFO0 for hearbeats (0x700 - 0x70F)
	Set_Filter_Id_Mask(mMcan.CanHw, CAN_FILTER_FIFO0, 1 + bank_offset , HB, HB+ID_RANGE, 0,0); // HeartBeats from all devices => FMI = 0/4
 8000a16:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <MCAN_Init+0x150>)
 8000a18:	6898      	ldr	r0, [r3, #8]
 8000a1a:	7bfb      	ldrb	r3, [r7, #15]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	2300      	movs	r3, #0
 8000a22:	9302      	str	r3, [sp, #8]
 8000a24:	2300      	movs	r3, #0
 8000a26:	9301      	str	r3, [sp, #4]
 8000a28:	f240 730f 	movw	r3, #1807	; 0x70f
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000a32:	2100      	movs	r1, #0
 8000a34:	f000 f992 	bl	8000d5c <Set_Filter_Id_Mask>

	// set the filter of FIFO1 for all other messages (0x000 - 0x6FF)
	Set_Filter_Id_Mask(mMcan.CanHw, CAN_FILTER_FIFO1, 2 + bank_offset , 0x000, 0x6FF, 0,0);
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <MCAN_Init+0x150>)
 8000a3a:	6898      	ldr	r0, [r3, #8]
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	3302      	adds	r3, #2
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	2300      	movs	r3, #0
 8000a44:	9302      	str	r3, [sp, #8]
 8000a46:	2300      	movs	r3, #0
 8000a48:	9301      	str	r3, [sp, #4]
 8000a4a:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	2300      	movs	r3, #0
 8000a52:	2101      	movs	r1, #1
 8000a54:	f000 f982 	bl	8000d5c <Set_Filter_Id_Mask>


	HAL_CAN_ActivateNotification(mMcan.CanHw, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING | CAN_IT_LAST_ERROR_CODE| CAN_IT_ERROR);
 8000a58:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <MCAN_Init+0x150>)
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	f648 0112 	movw	r1, #34834	; 0x8812
 8000a60:	4618      	mov	r0, r3
 8000a62:	f004 f94c 	bl	8004cfe <HAL_CAN_ActivateNotification>

	mMcan.CanHw->Instance->MCR &= ~0x00010000;	// enable CAN in debug mode (clear DBF bit)
 8000a66:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <MCAN_Init+0x150>)
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <MCAN_Init+0x150>)
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000a78:	601a      	str	r2, [r3, #0]
}
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000580 	.word	0x20000580
 8000a88:	40006800 	.word	0x40006800
 8000a8c:	200005bc 	.word	0x200005bc

08000a90 <MCAN_Start>:



// Start CANOPEN protocols
void MCAN_Start(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
	HAL_CAN_Start(mMcan.CanHw);  // start can
 8000a94:	4b09      	ldr	r3, [pc, #36]	; (8000abc <MCAN_Start+0x2c>)
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f003 feff 	bl	800489c <HAL_CAN_Start>
	mMcan.Node.canStatus = eNS_NMT_RUN;
 8000a9e:	4b07      	ldr	r3, [pc, #28]	; (8000abc <MCAN_Start+0x2c>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	719a      	strb	r2, [r3, #6]
	mNodes[mMcan.Node.nodeId].canStatus = mMcan.Node.canStatus;
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <MCAN_Start+0x2c>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	4b04      	ldr	r3, [pc, #16]	; (8000abc <MCAN_Start+0x2c>)
 8000aac:	7999      	ldrb	r1, [r3, #6]
 8000aae:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <MCAN_Start+0x30>)
 8000ab0:	00c3      	lsls	r3, r0, #3
 8000ab2:	4413      	add	r3, r2
 8000ab4:	460a      	mov	r2, r1
 8000ab6:	719a      	strb	r2, [r3, #6]
}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000580 	.word	0x20000580
 8000ac0:	200005bc 	.word	0x200005bc

08000ac4 <MCAN_Update_10ms>:
	return mNodes;
}

// Periodic update function for synchronous CAN handling
void MCAN_Update_10ms(void)
{
 8000ac4:	b5b0      	push	{r4, r5, r7, lr}
 8000ac6:	b098      	sub	sp, #96	; 0x60
 8000ac8:	af04      	add	r7, sp, #16
	uint32_t	TxMailbox;


	// Check messages from FIFO 0 (NMT, HB)

	while(0 == CB_Get(mMcan.Rx0Buf,(uint8_t*)&msg))  // process all messages in buffer
 8000aca:	e01e      	b.n	8000b0a <MCAN_Update_10ms+0x46>
	{
		if (msg.header.StdId >= HB && msg.header.StdId <= HB + ID_RANGE) // received HB
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8000ad2:	d31a      	bcc.n	8000b0a <MCAN_Update_10ms+0x46>
 8000ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad6:	f5b3 6fe2 	cmp.w	r3, #1808	; 0x710
 8000ada:	d216      	bcs.n	8000b0a <MCAN_Update_10ms+0x46>
		{
			uint8_t nodeId = msg.header.StdId - HB;
 8000adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ade:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			if (nodeId < MAX_NUM_OF_NODES)  // valid heartbeat received
 8000ae2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000ae6:	2b07      	cmp	r3, #7
 8000ae8:	d80f      	bhi.n	8000b0a <MCAN_Update_10ms+0x46>
			{
				mNodes[nodeId].canStatus = (e_NodeStatus)msg.data[0];
 8000aea:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000aee:	f897 1040 	ldrb.w	r1, [r7, #64]	; 0x40
 8000af2:	4a38      	ldr	r2, [pc, #224]	; (8000bd4 <MCAN_Update_10ms+0x110>)
 8000af4:	00db      	lsls	r3, r3, #3
 8000af6:	4413      	add	r3, r2
 8000af8:	460a      	mov	r2, r1
 8000afa:	719a      	strb	r2, [r3, #6]
				mNodes[nodeId].timeout_cnt = 0;
 8000afc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000b00:	4a34      	ldr	r2, [pc, #208]	; (8000bd4 <MCAN_Update_10ms+0x110>)
 8000b02:	00db      	lsls	r3, r3, #3
 8000b04:	4413      	add	r3, r2
 8000b06:	2200      	movs	r2, #0
 8000b08:	805a      	strh	r2, [r3, #2]
	while(0 == CB_Get(mMcan.Rx0Buf,(uint8_t*)&msg))  // process all messages in buffer
 8000b0a:	4b33      	ldr	r3, [pc, #204]	; (8000bd8 <MCAN_Update_10ms+0x114>)
 8000b0c:	68db      	ldr	r3, [r3, #12]
 8000b0e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000b12:	4611      	mov	r1, r2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f002 f841 	bl	8002b9c <CB_Get>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d0d5      	beq.n	8000acc <MCAN_Update_10ms+0x8>
			}
		}
	}

	// Check timeout of all nodes
	for(i = 0; i < MAX_NUM_OF_NODES; i++)
 8000b20:	2300      	movs	r3, #0
 8000b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b24:	e02e      	b.n	8000b84 <MCAN_Update_10ms+0xc0>
	{
		mNodes[i].timeout_cnt += 10;  // 10ms period of execution of this fcn
 8000b26:	4a2b      	ldr	r2, [pc, #172]	; (8000bd4 <MCAN_Update_10ms+0x110>)
 8000b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b2a:	00db      	lsls	r3, r3, #3
 8000b2c:	4413      	add	r3, r2
 8000b2e:	885b      	ldrh	r3, [r3, #2]
 8000b30:	330a      	adds	r3, #10
 8000b32:	b299      	uxth	r1, r3
 8000b34:	4a27      	ldr	r2, [pc, #156]	; (8000bd4 <MCAN_Update_10ms+0x110>)
 8000b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b38:	00db      	lsls	r3, r3, #3
 8000b3a:	4413      	add	r3, r2
 8000b3c:	460a      	mov	r2, r1
 8000b3e:	805a      	strh	r2, [r3, #2]
		if (mNodes[i].timeout_cnt > mNodes[i].timeout &&  // HB period elapsed
 8000b40:	4a24      	ldr	r2, [pc, #144]	; (8000bd4 <MCAN_Update_10ms+0x110>)
 8000b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	4413      	add	r3, r2
 8000b48:	885a      	ldrh	r2, [r3, #2]
 8000b4a:	4922      	ldr	r1, [pc, #136]	; (8000bd4 <MCAN_Update_10ms+0x110>)
 8000b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b4e:	00db      	lsls	r3, r3, #3
 8000b50:	440b      	add	r3, r1
 8000b52:	889b      	ldrh	r3, [r3, #4]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d912      	bls.n	8000b7e <MCAN_Update_10ms+0xba>
				mNodes[i].canStatus != eNS_NMT_UNKNOWN)
 8000b58:	4a1e      	ldr	r2, [pc, #120]	; (8000bd4 <MCAN_Update_10ms+0x110>)
 8000b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	4413      	add	r3, r2
 8000b60:	799b      	ldrb	r3, [r3, #6]
		if (mNodes[i].timeout_cnt > mNodes[i].timeout &&  // HB period elapsed
 8000b62:	2bff      	cmp	r3, #255	; 0xff
 8000b64:	d00b      	beq.n	8000b7e <MCAN_Update_10ms+0xba>
		{
			mNodes[i].timeout_cnt = 0;
 8000b66:	4a1b      	ldr	r2, [pc, #108]	; (8000bd4 <MCAN_Update_10ms+0x110>)
 8000b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b6a:	00db      	lsls	r3, r3, #3
 8000b6c:	4413      	add	r3, r2
 8000b6e:	2200      	movs	r2, #0
 8000b70:	805a      	strh	r2, [r3, #2]
			mNodes[i].canStatus = eNS_NMT_UNKNOWN;
 8000b72:	4a18      	ldr	r2, [pc, #96]	; (8000bd4 <MCAN_Update_10ms+0x110>)
 8000b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	4413      	add	r3, r2
 8000b7a:	22ff      	movs	r2, #255	; 0xff
 8000b7c:	719a      	strb	r2, [r3, #6]
	for(i = 0; i < MAX_NUM_OF_NODES; i++)
 8000b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b80:	3301      	adds	r3, #1
 8000b82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b86:	2b07      	cmp	r3, #7
 8000b88:	ddcd      	ble.n	8000b26 <MCAN_Update_10ms+0x62>
		}
	}

	// Send heartbeat if it's time
	mMcan.Node.timeout_cnt += 10;
 8000b8a:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <MCAN_Update_10ms+0x114>)
 8000b8c:	885b      	ldrh	r3, [r3, #2]
 8000b8e:	330a      	adds	r3, #10
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MCAN_Update_10ms+0x114>)
 8000b94:	805a      	strh	r2, [r3, #2]
	if (mMcan.Node.timeout_cnt >= mMcan.Node.timeout)
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <MCAN_Update_10ms+0x114>)
 8000b98:	885a      	ldrh	r2, [r3, #2]
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <MCAN_Update_10ms+0x114>)
 8000b9c:	889b      	ldrh	r3, [r3, #4]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d313      	bcc.n	8000bca <MCAN_Update_10ms+0x106>
	{
		mMcan.Node.timeout_cnt = 0;
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <MCAN_Update_10ms+0x114>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	805a      	strh	r2, [r3, #2]
		mMcan.HbMsg.data[0] = mMcan.Node.canStatus;
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <MCAN_Update_10ms+0x114>)
 8000baa:	799a      	ldrb	r2, [r3, #6]
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <MCAN_Update_10ms+0x114>)
 8000bae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		Send(mMcan.HbMsg);
 8000bb2:	4d09      	ldr	r5, [pc, #36]	; (8000bd8 <MCAN_Update_10ms+0x114>)
 8000bb4:	466c      	mov	r4, sp
 8000bb6:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8000bba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000bc0:	f105 0318 	add.w	r3, r5, #24
 8000bc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bc6:	f000 f871 	bl	8000cac <Send>
	}

}
 8000bca:	bf00      	nop
 8000bcc:	3750      	adds	r7, #80	; 0x50
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200005bc 	.word	0x200005bc
 8000bd8:	20000580 	.word	0x20000580

08000bdc <MCAN_Transmit>:


// function to be called periodically at a rate of transmitting can messages. (for example every 5 ms)
// One CAN message is is sent if TX buffer is not empty
void MCAN_Transmit(void)
{
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	b08b      	sub	sp, #44	; 0x2c
 8000be0:	af00      	add	r7, sp, #0
	s_CanTxMsg TxMsg;
	s_CanNode* tmp;
	uint32_t	TxMailbox;

	if  (0 == CB_Probe(mMcan.TxBuf,(uint8_t*)&TxMsg))  // fetch the message from the buffer
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MCAN_Transmit+0x4c>)
 8000be4:	695b      	ldr	r3, [r3, #20]
 8000be6:	f107 0208 	add.w	r2, r7, #8
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f001 ff7c 	bl	8002aea <CB_Probe>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d113      	bne.n	8000c20 <MCAN_Transmit+0x44>
	{
		if (HAL_OK == HAL_CAN_AddTxMessage(mMcan.CanHw, &TxMsg.header, TxMsg.data, &TxMailbox))  // transmit the message
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <MCAN_Transmit+0x4c>)
 8000bfa:	6898      	ldr	r0, [r3, #8]
 8000bfc:	1d3c      	adds	r4, r7, #4
 8000bfe:	f107 0308 	add.w	r3, r7, #8
 8000c02:	f103 0218 	add.w	r2, r3, #24
 8000c06:	f107 0108 	add.w	r1, r7, #8
 8000c0a:	4623      	mov	r3, r4
 8000c0c:	f003 fe8a 	bl	8004924 <HAL_CAN_AddTxMessage>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d104      	bne.n	8000c20 <MCAN_Transmit+0x44>
		{
			CB_Remove(mMcan.TxBuf);  // remove the message from the buffer only if transmission was succesfull
 8000c16:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <MCAN_Transmit+0x4c>)
 8000c18:	695b      	ldr	r3, [r3, #20]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f001 ff92 	bl	8002b44 <CB_Remove>
		}
	}
}
 8000c20:	bf00      	nop
 8000c22:	372c      	adds	r7, #44	; 0x2c
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd90      	pop	{r4, r7, pc}
 8000c28:	20000580 	.word	0x20000580

08000c2c <MCAN_GetRxMessage>:

// Gets a message from receive buffer to be processed by application
// returns 1 if message is available, otherwise return 0
uint8_t MCAN_GetRxMessage( s_CanRxMsg* msg)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	if (0 == CB_Get(mMcan.Rx1Buf,(uint8_t*)msg))
 8000c34:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <MCAN_GetRxMessage+0x28>)
 8000c36:	691b      	ldr	r3, [r3, #16]
 8000c38:	6879      	ldr	r1, [r7, #4]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f001 ffae 	bl	8002b9c <CB_Get>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d101      	bne.n	8000c4a <MCAN_GetRxMessage+0x1e>
	{
		return 1;
 8000c46:	2301      	movs	r3, #1
 8000c48:	e000      	b.n	8000c4c <MCAN_GetRxMessage+0x20>
	}
	return 0;
 8000c4a:	2300      	movs	r3, #0
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000580 	.word	0x20000580

08000c58 <MCAN_SendFrame>:
}


// Sends general CAN data message
uint8_t MCAN_SendFrame(uint16_t cobid, uint8_t* data, uint8_t dlc)
{
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b08f      	sub	sp, #60	; 0x3c
 8000c5c:	af04      	add	r7, sp, #16
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	80fb      	strh	r3, [r7, #6]
 8000c64:	4613      	mov	r3, r2
 8000c66:	717b      	strb	r3, [r7, #5]
	s_CanTxMsg msg;
	msg.header.DLC = dlc;
 8000c68:	797b      	ldrb	r3, [r7, #5]
 8000c6a:	61bb      	str	r3, [r7, #24]
	msg.header.StdId = cobid;
 8000c6c:	88fb      	ldrh	r3, [r7, #6]
 8000c6e:	60bb      	str	r3, [r7, #8]
	msg.header.ExtId = 0x00;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
	msg.header.RTR = CAN_RTR_DATA;
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
	msg.header.IDE = CAN_ID_STD;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	613b      	str	r3, [r7, #16]

	memcpy(&msg.data[0], data, dlc);
 8000c7c:	797a      	ldrb	r2, [r7, #5]
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	3318      	adds	r3, #24
 8000c84:	6839      	ldr	r1, [r7, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f00a fa20 	bl	800b0cc <memcpy>
	return Send(msg);
 8000c8c:	466c      	mov	r4, sp
 8000c8e:	f107 0318 	add.w	r3, r7, #24
 8000c92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000c98:	f107 0308 	add.w	r3, r7, #8
 8000c9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c9e:	f000 f805 	bl	8000cac <Send>
 8000ca2:	4603      	mov	r3, r0
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	372c      	adds	r7, #44	; 0x2c
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd90      	pop	{r4, r7, pc}

08000cac <Send>:

/*************** Private Fcns **************/

// CAN transmit
static uint8_t Send(s_CanTxMsg msg)
{
 8000cac:	b084      	sub	sp, #16
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	f107 0c08 	add.w	ip, r7, #8
 8000cb6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// instert to Tx buffer
	CB_Put(mMcan.TxBuf,(uint8_t*) &msg);
 8000cba:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <Send+0x2c>)
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	f107 0108 	add.w	r1, r7, #8
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f001 ffa7 	bl	8002c16 <CB_Put>
}
 8000cc8:	bf00      	nop
 8000cca:	4618      	mov	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000580 	.word	0x20000580

08000cdc <HAL_CAN_RxFifo0MsgPendingCallback>:


// interrupt handlers - callbacks
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
 {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08c      	sub	sp, #48	; 0x30
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	s_CanRxMsg tmp;
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &tmp.header, tmp.data);
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	331c      	adds	r3, #28
 8000cea:	f107 020c 	add.w	r2, r7, #12
 8000cee:	2100      	movs	r1, #0
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f003 fef2 	bl	8004ada <HAL_CAN_GetRxMessage>
	if (mMcan.CanHw == hcan)
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d107      	bne.n	8000d10 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
	{
		CB_Put(mMcan.Rx0Buf,(uint8_t*) &tmp);
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	f107 020c 	add.w	r2, r7, #12
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f001 ff83 	bl	8002c16 <CB_Put>
		//UI_LED_B_SetMode(eUI_BLINK_ONCE);  // blue blink
	}

}
 8000d10:	bf00      	nop
 8000d12:	3730      	adds	r7, #48	; 0x30
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000580 	.word	0x20000580

08000d1c <HAL_CAN_RxFifo1MsgPendingCallback>:


void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08c      	sub	sp, #48	; 0x30
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	s_CanRxMsg tmp;
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &tmp.header, tmp.data);
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	331c      	adds	r3, #28
 8000d2a:	f107 020c 	add.w	r2, r7, #12
 8000d2e:	2101      	movs	r1, #1
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f003 fed2 	bl	8004ada <HAL_CAN_GetRxMessage>
	if (mMcan.CanHw == hcan)
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d107      	bne.n	8000d50 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>
	{
		CB_Put(mMcan.Rx1Buf,(uint8_t*) &tmp);
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 8000d42:	691b      	ldr	r3, [r3, #16]
 8000d44:	f107 020c 	add.w	r2, r7, #12
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f001 ff63 	bl	8002c16 <CB_Put>
		//UI_LED_B_SetMode(eUI_BLINK_ONCE);  // blue blink
	}

}
 8000d50:	bf00      	nop
 8000d52:	3730      	adds	r7, #48	; 0x30
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000580 	.word	0x20000580

08000d5c <Set_Filter_Id_Mask>:
  Input		 		: -
  Output	  	: -
  Description : -
************************************************************************/
void Set_Filter_Id_Mask (CAN_HandleTypeDef *hcan, uint8_t fifo,  uint8_t bank, uint16_t id_1_from, uint16_t id_1_to, uint16_t id_2_from, uint16_t id_2_to)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08c      	sub	sp, #48	; 0x30
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	4608      	mov	r0, r1
 8000d66:	4611      	mov	r1, r2
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	70fb      	strb	r3, [r7, #3]
 8000d6e:	460b      	mov	r3, r1
 8000d70:	70bb      	strb	r3, [r7, #2]
 8000d72:	4613      	mov	r3, r2
 8000d74:	803b      	strh	r3, [r7, #0]
	CAN_FilterTypeDef			 filterInitStructure;

	filterInitStructure.SlaveStartFilterBank  = 14;
 8000d76:	230e      	movs	r3, #14
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c


	filterInitStructure.FilterBank									= bank;
 8000d7a:	78bb      	ldrb	r3, [r7, #2]
 8000d7c:	61fb      	str	r3, [r7, #28]


	filterInitStructure.FilterMode									=	CAN_FILTERMODE_IDMASK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	623b      	str	r3, [r7, #32]
	filterInitStructure.FilterScale									=	CAN_FILTERSCALE_16BIT;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
	filterInitStructure.FilterFIFOAssignment				=	fifo;
 8000d86:	78fb      	ldrb	r3, [r7, #3]
 8000d88:	61bb      	str	r3, [r7, #24]

	filterInitStructure.FilterIdHigh								=	id_2_from << 5;
 8000d8a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000d8c:	015b      	lsls	r3, r3, #5
 8000d8e:	60bb      	str	r3, [r7, #8]
	filterInitStructure.FilterIdLow 								=	id_1_from << 5;
 8000d90:	883b      	ldrh	r3, [r7, #0]
 8000d92:	015b      	lsls	r3, r3, #5
 8000d94:	60fb      	str	r3, [r7, #12]
	filterInitStructure.FilterMaskIdHigh						= Filter_Calc_Mask_Code(id_2_from,id_2_to);
 8000d96:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000d9a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000d9c:	4611      	mov	r1, r2
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 f816 	bl	8000dd0 <Filter_Calc_Mask_Code>
 8000da4:	4603      	mov	r3, r0
 8000da6:	613b      	str	r3, [r7, #16]
	filterInitStructure.FilterMaskIdLow 						= Filter_Calc_Mask_Code(id_1_from,id_1_to);
 8000da8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000daa:	883b      	ldrh	r3, [r7, #0]
 8000dac:	4611      	mov	r1, r2
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 f80e 	bl	8000dd0 <Filter_Calc_Mask_Code>
 8000db4:	4603      	mov	r3, r0
 8000db6:	617b      	str	r3, [r7, #20]

	filterInitStructure.FilterActivation						=	ENABLE;
 8000db8:	2301      	movs	r3, #1
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28

	HAL_CAN_ConfigFilter(hcan,&filterInitStructure);
 8000dbc:	f107 0308 	add.w	r3, r7, #8
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f003 fc8a 	bl	80046dc <HAL_CAN_ConfigFilter>
}
 8000dc8:	bf00      	nop
 8000dca:	3730      	adds	r7, #48	; 0x30
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <Filter_Calc_Mask_Code>:
  Input		 		: -
  Output	  	: -
  Description : -
************************************************************************/
uint16_t Filter_Calc_Mask_Code (uint16_t from,uint16_t to)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	460a      	mov	r2, r1
 8000dda:	80fb      	strh	r3, [r7, #6]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	80bb      	strh	r3, [r7, #4]
	uint16_t	help			 	= 0x00;
 8000de0:	2300      	movs	r3, #0
 8000de2:	81fb      	strh	r3, [r7, #14]
	uint8_t		shift_cnt		= 0x00;
 8000de4:	2300      	movs	r3, #0
 8000de6:	737b      	strb	r3, [r7, #13]
	uint8_t			first			= FALSE;
 8000de8:	2300      	movs	r3, #0
 8000dea:	733b      	strb	r3, [r7, #12]

	for (shift_cnt = 0; shift_cnt < 16; shift_cnt++)
 8000dec:	2300      	movs	r3, #0
 8000dee:	737b      	strb	r3, [r7, #13]
 8000df0:	e022      	b.n	8000e38 <Filter_Calc_Mask_Code+0x68>
	{
		if(((from & 0x8000) == (to & 0x8000)) && (!first))
 8000df2:	88fa      	ldrh	r2, [r7, #6]
 8000df4:	88bb      	ldrh	r3, [r7, #4]
 8000df6:	4053      	eors	r3, r2
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	b21b      	sxth	r3, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	db09      	blt.n	8000e14 <Filter_Calc_Mask_Code+0x44>
 8000e00:	7b3b      	ldrb	r3, [r7, #12]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d106      	bne.n	8000e14 <Filter_Calc_Mask_Code+0x44>
		{
			from = from << 1;
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	80fb      	strh	r3, [r7, #6]
			to = to << 1;
 8000e0c:	88bb      	ldrh	r3, [r7, #4]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	80bb      	strh	r3, [r7, #4]
 8000e12:	e00e      	b.n	8000e32 <Filter_Calc_Mask_Code+0x62>
		}
		else
		{
			help = help << 1;
 8000e14:	89fb      	ldrh	r3, [r7, #14]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	81fb      	strh	r3, [r7, #14]
			first = TRUE;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	733b      	strb	r3, [r7, #12]
			help |= 0x01;
 8000e1e:	89fb      	ldrh	r3, [r7, #14]
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	81fb      	strh	r3, [r7, #14]

			from = from << 1;
 8000e26:	88fb      	ldrh	r3, [r7, #6]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	80fb      	strh	r3, [r7, #6]
			to = to << 1;
 8000e2c:	88bb      	ldrh	r3, [r7, #4]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	80bb      	strh	r3, [r7, #4]
	for (shift_cnt = 0; shift_cnt < 16; shift_cnt++)
 8000e32:	7b7b      	ldrb	r3, [r7, #13]
 8000e34:	3301      	adds	r3, #1
 8000e36:	737b      	strb	r3, [r7, #13]
 8000e38:	7b7b      	ldrb	r3, [r7, #13]
 8000e3a:	2b0f      	cmp	r3, #15
 8000e3c:	d9d9      	bls.n	8000df2 <Filter_Calc_Mask_Code+0x22>
		}
	}
	help = (~help) << 5;
 8000e3e:	89fb      	ldrh	r3, [r7, #14]
 8000e40:	43db      	mvns	r3, r3
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	015b      	lsls	r3, r3, #5
 8000e46:	81fb      	strh	r3, [r7, #14]
	return help;
 8000e48:	89fb      	ldrh	r3, [r7, #14]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <ActivateBus>:
uint8_t mROM[8];

static uint8_t CalculateCRC(uint8_t* data, uint8_t len);

static void ActivateBus(uint8_t mBusId)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
	mOwPort = mBus[mBusId].Port;
 8000e62:	79fa      	ldrb	r2, [r7, #7]
 8000e64:	4912      	ldr	r1, [pc, #72]	; (8000eb0 <ActivateBus+0x58>)
 8000e66:	4613      	mov	r3, r2
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	4413      	add	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	440b      	add	r3, r1
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a10      	ldr	r2, [pc, #64]	; (8000eb4 <ActivateBus+0x5c>)
 8000e74:	6013      	str	r3, [r2, #0]
	mOwClearMask = mBus[mBusId].ClearBitMask;
 8000e76:	79fa      	ldrb	r2, [r7, #7]
 8000e78:	490d      	ldr	r1, [pc, #52]	; (8000eb0 <ActivateBus+0x58>)
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	4413      	add	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	440b      	add	r3, r1
 8000e84:	3304      	adds	r3, #4
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <ActivateBus+0x60>)
 8000e8a:	6013      	str	r3, [r2, #0]
	mOwSetMask = mBus[mBusId].SetBitMask;
 8000e8c:	79fa      	ldrb	r2, [r7, #7]
 8000e8e:	4908      	ldr	r1, [pc, #32]	; (8000eb0 <ActivateBus+0x58>)
 8000e90:	4613      	mov	r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	4413      	add	r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	440b      	add	r3, r1
 8000e9a:	3308      	adds	r3, #8
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a07      	ldr	r2, [pc, #28]	; (8000ebc <ActivateBus+0x64>)
 8000ea0:	6013      	str	r3, [r2, #0]
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000644 	.word	0x20000644
 8000eb4:	20000668 	.word	0x20000668
 8000eb8:	2000066c 	.word	0x2000066c
 8000ebc:	20000670 	.word	0x20000670

08000ec0 <OW_Init>:

//initialization of GPIO, Timer, and timing of OW bus;
void OW_Init(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
//reset list of busses
	uint8_t i;
	for (i = 0; i < MAX_NUM_OF_BUSES; i++)
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	71fb      	strb	r3, [r7, #7]
 8000eca:	e00b      	b.n	8000ee4 <OW_Init+0x24>
	{
		mBus[i].Port = NULL;
 8000ecc:	79fa      	ldrb	r2, [r7, #7]
 8000ece:	4921      	ldr	r1, [pc, #132]	; (8000f54 <OW_Init+0x94>)
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	4413      	add	r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	440b      	add	r3, r1
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < MAX_NUM_OF_BUSES; i++)
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	71fb      	strb	r3, [r7, #7]
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d9f0      	bls.n	8000ecc <OW_Init+0xc>
 // debug support (stop Timer when halted)
//	DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_TIM6_STOP;
// configure the OW pin as a open drain output


	OW_TIM->DIER |= TIM_DIER_UIE;
 8000eea:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <OW_Init+0x98>)
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	4a1a      	ldr	r2, [pc, #104]	; (8000f58 <OW_Init+0x98>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	60d3      	str	r3, [r2, #12]
	OW_TIM->PSC = 4;
 8000ef6:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <OW_Init+0x98>)
 8000ef8:	2204      	movs	r2, #4
 8000efa:	629a      	str	r2, [r3, #40]	; 0x28
	OW_TIM->CR1 |= TIM_CR1_ARPE;  // preload enable
 8000efc:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <OW_Init+0x98>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a15      	ldr	r2, [pc, #84]	; (8000f58 <OW_Init+0x98>)
 8000f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f06:	6013      	str	r3, [r2, #0]

	mTimReset[0] = DEL_RES_PULSE * TIM_CLK_PER_US;
 8000f08:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <OW_Init+0x9c>)
 8000f0a:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8000f0e:	801a      	strh	r2, [r3, #0]
	mTimReset[1] = DEL_RES_SAMPLE * TIM_CLK_PER_US;
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <OW_Init+0x9c>)
 8000f12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f16:	805a      	strh	r2, [r3, #2]
	mTimReset[2] = DEL_RES_REST * TIM_CLK_PER_US;
 8000f18:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <OW_Init+0x9c>)
 8000f1a:	f640 62d8 	movw	r2, #3800	; 0xed8
 8000f1e:	809a      	strh	r2, [r3, #4]

	mTimWriteBit[0] = DEL_WB_PULSE * TIM_CLK_PER_US;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <OW_Init+0xa0>)
 8000f22:	223c      	movs	r2, #60	; 0x3c
 8000f24:	801a      	strh	r2, [r3, #0]
	mTimWriteBit[1] = DEL_WB_WRITE * TIM_CLK_PER_US;
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <OW_Init+0xa0>)
 8000f28:	f240 228a 	movw	r2, #650	; 0x28a
 8000f2c:	805a      	strh	r2, [r3, #2]
	mTimWriteBit[2] = DEL_WB_REST * TIM_CLK_PER_US;
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <OW_Init+0xa0>)
 8000f30:	2296      	movs	r2, #150	; 0x96
 8000f32:	809a      	strh	r2, [r3, #4]

	mTimReadBit[0] = DEL_RB_PULSE * TIM_CLK_PER_US;
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <OW_Init+0xa4>)
 8000f36:	220a      	movs	r2, #10
 8000f38:	801a      	strh	r2, [r3, #0]
	mTimReadBit[1] = DEL_RB_SAMPLE * TIM_CLK_PER_US;
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <OW_Init+0xa4>)
 8000f3c:	226e      	movs	r2, #110	; 0x6e
 8000f3e:	805a      	strh	r2, [r3, #2]
	mTimReadBit[2] = DEL_RB_REST * TIM_CLK_PER_US;
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <OW_Init+0xa4>)
 8000f42:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000f46:	809a      	strh	r2, [r3, #4]

}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	20000644 	.word	0x20000644
 8000f58:	40001000 	.word	0x40001000
 8000f5c:	20000608 	.word	0x20000608
 8000f60:	20000610 	.word	0x20000610
 8000f64:	20000618 	.word	0x20000618

08000f68 <OW_AddBus>:


// define bus connected to some GPIO pin
void OW_AddBus(uint8_t busId, GPIO_TypeDef* port, uint32_t pin)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	73fb      	strb	r3, [r7, #15]
	if (busId < MAX_NUM_OF_BUSES)
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d832      	bhi.n	8000fe2 <OW_AddBus+0x7a>
	{
		// store the Bus - Pin assignment
		mBus[busId].Port = port;
 8000f7c:	7bfa      	ldrb	r2, [r7, #15]
 8000f7e:	491b      	ldr	r1, [pc, #108]	; (8000fec <OW_AddBus+0x84>)
 8000f80:	4613      	mov	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	4413      	add	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	440b      	add	r3, r1
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	601a      	str	r2, [r3, #0]
		mBus[busId].SetBitMask = pin;
 8000f8e:	7bfa      	ldrb	r2, [r7, #15]
 8000f90:	4916      	ldr	r1, [pc, #88]	; (8000fec <OW_AddBus+0x84>)
 8000f92:	4613      	mov	r3, r2
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	4413      	add	r3, r2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	3308      	adds	r3, #8
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	601a      	str	r2, [r3, #0]
		mBus[busId].ClearBitMask = pin << 16;
 8000fa2:	7bfa      	ldrb	r2, [r7, #15]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	0419      	lsls	r1, r3, #16
 8000fa8:	4810      	ldr	r0, [pc, #64]	; (8000fec <OW_AddBus+0x84>)
 8000faa:	4613      	mov	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	4413      	add	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	4403      	add	r3, r0
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	6019      	str	r1, [r3, #0]

		// configure the pin
		 /*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	68b8      	ldr	r0, [r7, #8]
 8000fc2:	f004 fbd5 	bl	8005770 <HAL_GPIO_WritePin>

		GPIO_InitTypeDef GPIO_InitStruct;
		GPIO_InitStruct.Pin = pin;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000fca:	2311      	movs	r3, #17
 8000fcc:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(port, &GPIO_InitStruct);
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4619      	mov	r1, r3
 8000fdc:	68b8      	ldr	r0, [r7, #8]
 8000fde:	f004 fa1b 	bl	8005418 <HAL_GPIO_Init>
	}
}
 8000fe2:	bf00      	nop
 8000fe4:	3728      	adds	r7, #40	; 0x28
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000644 	.word	0x20000644

08000ff0 <ClearRxBuffer>:


void ClearRxBuffer()
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
	mRxBuff[0] = 0;
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <ClearRxBuffer+0x40>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
	mRxBuff[1] = 0;
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <ClearRxBuffer+0x40>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	705a      	strb	r2, [r3, #1]
	mRxBuff[2] = 0;
 8001000:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <ClearRxBuffer+0x40>)
 8001002:	2200      	movs	r2, #0
 8001004:	709a      	strb	r2, [r3, #2]
	mRxBuff[3] = 0;
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <ClearRxBuffer+0x40>)
 8001008:	2200      	movs	r2, #0
 800100a:	70da      	strb	r2, [r3, #3]
	mRxBuff[4] = 0;
 800100c:	4b08      	ldr	r3, [pc, #32]	; (8001030 <ClearRxBuffer+0x40>)
 800100e:	2200      	movs	r2, #0
 8001010:	711a      	strb	r2, [r3, #4]
	mRxBuff[5] = 0;
 8001012:	4b07      	ldr	r3, [pc, #28]	; (8001030 <ClearRxBuffer+0x40>)
 8001014:	2200      	movs	r2, #0
 8001016:	715a      	strb	r2, [r3, #5]
	mRxBuff[6] = 0;
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <ClearRxBuffer+0x40>)
 800101a:	2200      	movs	r2, #0
 800101c:	719a      	strb	r2, [r3, #6]
	mRxBuff[7] = 0;
 800101e:	4b04      	ldr	r3, [pc, #16]	; (8001030 <ClearRxBuffer+0x40>)
 8001020:	2200      	movs	r2, #0
 8001022:	71da      	strb	r2, [r3, #7]
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	2000062c 	.word	0x2000062c

08001034 <OW_ReadSensor>:

eOwResult OW_ReadSensor(uint8_t busId, uint8_t* address, int16_t* result, uint8_t* valid)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	4603      	mov	r3, r0
 8001042:	73fb      	strb	r3, [r7, #15]
	eOwResult res = etr_OK;
 8001044:	2300      	movs	r3, #0
 8001046:	75fb      	strb	r3, [r7, #23]

	if (mBus[busId].Port == NULL)
 8001048:	7bfa      	ldrb	r2, [r7, #15]
 800104a:	4945      	ldr	r1, [pc, #276]	; (8001160 <OW_ReadSensor+0x12c>)
 800104c:	4613      	mov	r3, r2
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	4413      	add	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	440b      	add	r3, r1
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d102      	bne.n	8001062 <OW_ReadSensor+0x2e>
	{
		res = etr_UnknownBus;
 800105c:	2302      	movs	r3, #2
 800105e:	75fb      	strb	r3, [r7, #23]
 8001060:	e076      	b.n	8001150 <OW_ReadSensor+0x11c>
	}
	else if (result == NULL | valid == NULL)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	bf0c      	ite	eq
 8001068:	2301      	moveq	r3, #1
 800106a:	2300      	movne	r3, #0
 800106c:	b2da      	uxtb	r2, r3
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	bf0c      	ite	eq
 8001074:	2301      	moveq	r3, #1
 8001076:	2300      	movne	r3, #0
 8001078:	b2db      	uxtb	r3, r3
 800107a:	4313      	orrs	r3, r2
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d002      	beq.n	8001088 <OW_ReadSensor+0x54>
	{
	  res = etr_InvalidParam;
 8001082:	2305      	movs	r3, #5
 8001084:	75fb      	strb	r3, [r7, #23]
 8001086:	e063      	b.n	8001150 <OW_ReadSensor+0x11c>
	}
	else if (mBusy)
 8001088:	4b36      	ldr	r3, [pc, #216]	; (8001164 <OW_ReadSensor+0x130>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d002      	beq.n	8001096 <OW_ReadSensor+0x62>
	{
		res = etr_Busy;
 8001090:	2301      	movs	r3, #1
 8001092:	75fb      	strb	r3, [r7, #23]
 8001094:	e05c      	b.n	8001150 <OW_ReadSensor+0x11c>
	}
	else // all OK
	{
		ActivateBus(busId);  // asign active bus
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fedd 	bl	8000e58 <ActivateBus>
		ClearRxBuffer();
 800109e:	f7ff ffa7 	bl	8000ff0 <ClearRxBuffer>
		// initialize transfer parameters
		mResultPtr = result;
 80010a2:	4a31      	ldr	r2, [pc, #196]	; (8001168 <OW_ReadSensor+0x134>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6013      	str	r3, [r2, #0]
		mValidPtr = valid;
 80010a8:	4a30      	ldr	r2, [pc, #192]	; (800116c <OW_ReadSensor+0x138>)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	6013      	str	r3, [r2, #0]
		mTxBuff[0] = CMD_MATCH_ROM;
 80010ae:	4b30      	ldr	r3, [pc, #192]	; (8001170 <OW_ReadSensor+0x13c>)
 80010b0:	2255      	movs	r2, #85	; 0x55
 80010b2:	701a      	strb	r2, [r3, #0]
		mTxBuff[1] = address[0];
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	781a      	ldrb	r2, [r3, #0]
 80010b8:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <OW_ReadSensor+0x13c>)
 80010ba:	705a      	strb	r2, [r3, #1]
		mTxBuff[2] = address[1];
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	785a      	ldrb	r2, [r3, #1]
 80010c0:	4b2b      	ldr	r3, [pc, #172]	; (8001170 <OW_ReadSensor+0x13c>)
 80010c2:	709a      	strb	r2, [r3, #2]
		mTxBuff[3] = address[2];
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	789a      	ldrb	r2, [r3, #2]
 80010c8:	4b29      	ldr	r3, [pc, #164]	; (8001170 <OW_ReadSensor+0x13c>)
 80010ca:	70da      	strb	r2, [r3, #3]
		mTxBuff[4] = address[3];
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	78da      	ldrb	r2, [r3, #3]
 80010d0:	4b27      	ldr	r3, [pc, #156]	; (8001170 <OW_ReadSensor+0x13c>)
 80010d2:	711a      	strb	r2, [r3, #4]
		mTxBuff[5] = address[4];
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	791a      	ldrb	r2, [r3, #4]
 80010d8:	4b25      	ldr	r3, [pc, #148]	; (8001170 <OW_ReadSensor+0x13c>)
 80010da:	715a      	strb	r2, [r3, #5]
		mTxBuff[6] = address[5];
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	795a      	ldrb	r2, [r3, #5]
 80010e0:	4b23      	ldr	r3, [pc, #140]	; (8001170 <OW_ReadSensor+0x13c>)
 80010e2:	719a      	strb	r2, [r3, #6]
		mTxBuff[7] = address[6];
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	799a      	ldrb	r2, [r3, #6]
 80010e8:	4b21      	ldr	r3, [pc, #132]	; (8001170 <OW_ReadSensor+0x13c>)
 80010ea:	71da      	strb	r2, [r3, #7]
		mTxBuff[8] = address[7];
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	79da      	ldrb	r2, [r3, #7]
 80010f0:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <OW_ReadSensor+0x13c>)
 80010f2:	721a      	strb	r2, [r3, #8]
		mTxBuff[9] = CMD_READ_SCRATCHPAD;
 80010f4:	4b1e      	ldr	r3, [pc, #120]	; (8001170 <OW_ReadSensor+0x13c>)
 80010f6:	22be      	movs	r2, #190	; 0xbe
 80010f8:	725a      	strb	r2, [r3, #9]


		mTrStage = ets_Reset;
 80010fa:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <OW_ReadSensor+0x140>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
		mResetStage = ers_ResetPulse;
 8001100:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <OW_ReadSensor+0x144>)
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
		mBitStage = ebs_Init;
 8001106:	4b1d      	ldr	r3, [pc, #116]	; (800117c <OW_ReadSensor+0x148>)
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
		mPresencePulse = 0;
 800110c:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <OW_ReadSensor+0x14c>)
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
		mBytesToWrite = 10;
 8001112:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <OW_ReadSensor+0x150>)
 8001114:	220a      	movs	r2, #10
 8001116:	701a      	strb	r2, [r3, #0]
		mBytesToRead = 9; //2;
 8001118:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <OW_ReadSensor+0x154>)
 800111a:	2209      	movs	r2, #9
 800111c:	701a      	strb	r2, [r3, #0]
		mCurrBit = 0;
 800111e:	4b1b      	ldr	r3, [pc, #108]	; (800118c <OW_ReadSensor+0x158>)
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
		mCurrByte = 0;
 8001124:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <OW_ReadSensor+0x15c>)
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
		mCurrentTranfer = ett_ReadTemp;
 800112a:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <OW_ReadSensor+0x160>)
 800112c:	2201      	movs	r2, #1
 800112e:	701a      	strb	r2, [r3, #0]

		mBusy = 1;
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <OW_ReadSensor+0x130>)
 8001132:	2201      	movs	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]
		OW_TIM->ARR = mTimReset[ers_ResetPulse];  // first timed period
 8001136:	4b18      	ldr	r3, [pc, #96]	; (8001198 <OW_ReadSensor+0x164>)
 8001138:	881a      	ldrh	r2, [r3, #0]
 800113a:	4b18      	ldr	r3, [pc, #96]	; (800119c <OW_ReadSensor+0x168>)
 800113c:	62da      	str	r2, [r3, #44]	; 0x2c
		OW_TIM->CR1 |= TIM_CR1_CEN;
 800113e:	4b17      	ldr	r3, [pc, #92]	; (800119c <OW_ReadSensor+0x168>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a16      	ldr	r2, [pc, #88]	; (800119c <OW_ReadSensor+0x168>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6013      	str	r3, [r2, #0]
		OW_TIM->EGR = 1;
 800114a:	4b14      	ldr	r3, [pc, #80]	; (800119c <OW_ReadSensor+0x168>)
 800114c:	2201      	movs	r2, #1
 800114e:	615a      	str	r2, [r3, #20]
	}
	mLastTransferResult = res;
 8001150:	4a13      	ldr	r2, [pc, #76]	; (80011a0 <OW_ReadSensor+0x16c>)
 8001152:	7dfb      	ldrb	r3, [r7, #23]
 8001154:	7013      	strb	r3, [r2, #0]
	return res;
 8001156:	7dfb      	ldrb	r3, [r7, #23]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000644 	.word	0x20000644
 8001164:	20000640 	.word	0x20000640
 8001168:	20000638 	.word	0x20000638
 800116c:	2000063c 	.word	0x2000063c
 8001170:	20000620 	.word	0x20000620
 8001174:	20000602 	.word	0x20000602
 8001178:	20000600 	.word	0x20000600
 800117c:	20000601 	.word	0x20000601
 8001180:	20000604 	.word	0x20000604
 8001184:	200005fc 	.word	0x200005fc
 8001188:	200005fd 	.word	0x200005fd
 800118c:	200005fe 	.word	0x200005fe
 8001190:	200005ff 	.word	0x200005ff
 8001194:	20000603 	.word	0x20000603
 8001198:	20000608 	.word	0x20000608
 800119c:	40001000 	.word	0x40001000
 80011a0:	20000605 	.word	0x20000605

080011a4 <OW_ConvertAll>:
	OW_ReadSensor(busId, mROM, &mTemp, &valid);
}


eOwResult OW_ConvertAll(uint8_t busId)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
	eOwResult res = etr_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	73fb      	strb	r3, [r7, #15]

	if (mBus[busId].Port == NULL)
 80011b2:	79fa      	ldrb	r2, [r7, #7]
 80011b4:	4928      	ldr	r1, [pc, #160]	; (8001258 <OW_ConvertAll+0xb4>)
 80011b6:	4613      	mov	r3, r2
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	4413      	add	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	440b      	add	r3, r1
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d102      	bne.n	80011cc <OW_ConvertAll+0x28>
	{
		res = etr_UnknownBus;
 80011c6:	2302      	movs	r3, #2
 80011c8:	73fb      	strb	r3, [r7, #15]
 80011ca:	e03d      	b.n	8001248 <OW_ConvertAll+0xa4>
	}
	else if (mBusy)
 80011cc:	4b23      	ldr	r3, [pc, #140]	; (800125c <OW_ConvertAll+0xb8>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d002      	beq.n	80011da <OW_ConvertAll+0x36>
	{
		res = etr_Busy;
 80011d4:	2301      	movs	r3, #1
 80011d6:	73fb      	strb	r3, [r7, #15]
 80011d8:	e036      	b.n	8001248 <OW_ConvertAll+0xa4>
	}
	else // all OK
	{
		ActivateBus(busId);  // asign active bus
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fe3b 	bl	8000e58 <ActivateBus>
		ClearRxBuffer();
 80011e2:	f7ff ff05 	bl	8000ff0 <ClearRxBuffer>
		// initialize transfer parameters
		mTxBuff[0] = CMD_SKIP_ROM;
 80011e6:	4b1e      	ldr	r3, [pc, #120]	; (8001260 <OW_ConvertAll+0xbc>)
 80011e8:	22cc      	movs	r2, #204	; 0xcc
 80011ea:	701a      	strb	r2, [r3, #0]
		mTxBuff[1] = CMD_CONVERT;
 80011ec:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <OW_ConvertAll+0xbc>)
 80011ee:	2244      	movs	r2, #68	; 0x44
 80011f0:	705a      	strb	r2, [r3, #1]

		mTrStage = ets_Reset;
 80011f2:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <OW_ConvertAll+0xc0>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
		mResetStage = ers_ResetPulse;
 80011f8:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <OW_ConvertAll+0xc4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
		mBitStage = ebs_Init;
 80011fe:	4b1b      	ldr	r3, [pc, #108]	; (800126c <OW_ConvertAll+0xc8>)
 8001200:	2200      	movs	r2, #0
 8001202:	701a      	strb	r2, [r3, #0]
		mPresencePulse = 0;
 8001204:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <OW_ConvertAll+0xcc>)
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]
		mBytesToWrite = 2;
 800120a:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <OW_ConvertAll+0xd0>)
 800120c:	2202      	movs	r2, #2
 800120e:	701a      	strb	r2, [r3, #0]
		mBytesToRead = 0;
 8001210:	4b19      	ldr	r3, [pc, #100]	; (8001278 <OW_ConvertAll+0xd4>)
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
		mCurrBit = 0;
 8001216:	4b19      	ldr	r3, [pc, #100]	; (800127c <OW_ConvertAll+0xd8>)
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
		mCurrByte = 0;
 800121c:	4b18      	ldr	r3, [pc, #96]	; (8001280 <OW_ConvertAll+0xdc>)
 800121e:	2200      	movs	r2, #0
 8001220:	701a      	strb	r2, [r3, #0]
		mCurrentTranfer = ett_Convert;
 8001222:	4b18      	ldr	r3, [pc, #96]	; (8001284 <OW_ConvertAll+0xe0>)
 8001224:	2202      	movs	r2, #2
 8001226:	701a      	strb	r2, [r3, #0]

		mBusy = 1;
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <OW_ConvertAll+0xb8>)
 800122a:	2201      	movs	r2, #1
 800122c:	701a      	strb	r2, [r3, #0]
		OW_TIM->ARR = mTimReset[ers_ResetPulse];  // first timed period
 800122e:	4b16      	ldr	r3, [pc, #88]	; (8001288 <OW_ConvertAll+0xe4>)
 8001230:	881a      	ldrh	r2, [r3, #0]
 8001232:	4b16      	ldr	r3, [pc, #88]	; (800128c <OW_ConvertAll+0xe8>)
 8001234:	62da      	str	r2, [r3, #44]	; 0x2c
		OW_TIM->CR1 |= TIM_CR1_CEN;
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <OW_ConvertAll+0xe8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a14      	ldr	r2, [pc, #80]	; (800128c <OW_ConvertAll+0xe8>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6013      	str	r3, [r2, #0]
		OW_TIM->EGR = 1;
 8001242:	4b12      	ldr	r3, [pc, #72]	; (800128c <OW_ConvertAll+0xe8>)
 8001244:	2201      	movs	r2, #1
 8001246:	615a      	str	r2, [r3, #20]
	}
	mLastTransferResult = res;
 8001248:	4a11      	ldr	r2, [pc, #68]	; (8001290 <OW_ConvertAll+0xec>)
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	7013      	strb	r3, [r2, #0]
	return res;
 800124e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000644 	.word	0x20000644
 800125c:	20000640 	.word	0x20000640
 8001260:	20000620 	.word	0x20000620
 8001264:	20000602 	.word	0x20000602
 8001268:	20000600 	.word	0x20000600
 800126c:	20000601 	.word	0x20000601
 8001270:	20000604 	.word	0x20000604
 8001274:	200005fc 	.word	0x200005fc
 8001278:	200005fd 	.word	0x200005fd
 800127c:	200005fe 	.word	0x200005fe
 8001280:	200005ff 	.word	0x200005ff
 8001284:	20000603 	.word	0x20000603
 8001288:	20000608 	.word	0x20000608
 800128c:	40001000 	.word	0x40001000
 8001290:	20000605 	.word	0x20000605

08001294 <TransferComplete>:
}


// private fcn called from last IRQ of OW transfer
void TransferComplete()
{
 8001294:	b590      	push	{r4, r7, lr}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
	uint16_t rawbits;
	int16_t rawvalue;

	if (mPresencePulse == 0)
 800129a:	4b2c      	ldr	r3, [pc, #176]	; (800134c <TransferComplete+0xb8>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d102      	bne.n	80012a8 <TransferComplete+0x14>
	{
		mLastTransferResult = etr_NotPresent;
 80012a2:	4b2b      	ldr	r3, [pc, #172]	; (8001350 <TransferComplete+0xbc>)
 80012a4:	2203      	movs	r2, #3
 80012a6:	701a      	strb	r2, [r3, #0]
	}
	switch (mCurrentTranfer)
 80012a8:	4b2a      	ldr	r3, [pc, #168]	; (8001354 <TransferComplete+0xc0>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d042      	beq.n	8001336 <TransferComplete+0xa2>
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	dc43      	bgt.n	800133c <TransferComplete+0xa8>
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d002      	beq.n	80012be <TransferComplete+0x2a>
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d007      	beq.n	80012cc <TransferComplete+0x38>
 80012bc:	e03e      	b.n	800133c <TransferComplete+0xa8>
	{
		case ett_ReadRom:
			memcpy(mROM, mRxBuff, 8);
 80012be:	4b26      	ldr	r3, [pc, #152]	; (8001358 <TransferComplete+0xc4>)
 80012c0:	4a26      	ldr	r2, [pc, #152]	; (800135c <TransferComplete+0xc8>)
 80012c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012c6:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 80012ca:	e037      	b.n	800133c <TransferComplete+0xa8>
		case ett_Convert:
			// nothing
			break;
		case ett_ReadTemp:
			if (mResultPtr != NULL)
 80012cc:	4b24      	ldr	r3, [pc, #144]	; (8001360 <TransferComplete+0xcc>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d032      	beq.n	800133a <TransferComplete+0xa6>
			{
				rawbits = (uint16_t)mRxBuff[0]  |   ((uint16_t)mRxBuff[1]) << 8;
 80012d4:	4b21      	ldr	r3, [pc, #132]	; (800135c <TransferComplete+0xc8>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	b21a      	sxth	r2, r3
 80012da:	4b20      	ldr	r3, [pc, #128]	; (800135c <TransferComplete+0xc8>)
 80012dc:	785b      	ldrb	r3, [r3, #1]
 80012de:	021b      	lsls	r3, r3, #8
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	4313      	orrs	r3, r2
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	80fb      	strh	r3, [r7, #6]
				rawvalue = (int16_t)rawbits;
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	80bb      	strh	r3, [r7, #4]
				// chech CRC
				if (mRxBuff[8] == CalculateCRC(mRxBuff, 8))
 80012ec:	4b1b      	ldr	r3, [pc, #108]	; (800135c <TransferComplete+0xc8>)
 80012ee:	7a1c      	ldrb	r4, [r3, #8]
 80012f0:	2108      	movs	r1, #8
 80012f2:	481a      	ldr	r0, [pc, #104]	; (800135c <TransferComplete+0xc8>)
 80012f4:	f000 f9ec 	bl	80016d0 <CalculateCRC>
 80012f8:	4603      	mov	r3, r0
 80012fa:	429c      	cmp	r4, r3
 80012fc:	d113      	bne.n	8001326 <TransferComplete+0x92>
				{
				  // insert value only if valid CRC
				  *mResultPtr = (rawvalue * 10) / 16;
 80012fe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	2b00      	cmp	r3, #0
 800130c:	da00      	bge.n	8001310 <TransferComplete+0x7c>
 800130e:	330f      	adds	r3, #15
 8001310:	111b      	asrs	r3, r3, #4
 8001312:	461a      	mov	r2, r3
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <TransferComplete+0xcc>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	b212      	sxth	r2, r2
 800131a:	801a      	strh	r2, [r3, #0]
				  *mValidPtr = 1;
 800131c:	4b11      	ldr	r3, [pc, #68]	; (8001364 <TransferComplete+0xd0>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2201      	movs	r2, #1
 8001322:	701a      	strb	r2, [r3, #0]
 8001324:	e003      	b.n	800132e <TransferComplete+0x9a>
				}
				else
				{
				  *mValidPtr = 0;
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <TransferComplete+0xd0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
				}

				//*mResultPtr = (int16_t)((double)(((uint16_t)mRxBuff[0] | ((uint16_t)mRxBuff[1]) << 8)) / 1.6);

				mResultPtr = NULL; // clear the pointer to prevent overwrite in next cycle.
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <TransferComplete+0xcc>)
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
			}
			break;
 8001334:	e001      	b.n	800133a <TransferComplete+0xa6>
			break;
 8001336:	bf00      	nop
 8001338:	e000      	b.n	800133c <TransferComplete+0xa8>
			break;
 800133a:	bf00      	nop
	}
	mBusy = 0;
 800133c:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <TransferComplete+0xd4>)
 800133e:	2200      	movs	r2, #0
 8001340:	701a      	strb	r2, [r3, #0]
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	bd90      	pop	{r4, r7, pc}
 800134a:	bf00      	nop
 800134c:	20000604 	.word	0x20000604
 8001350:	20000605 	.word	0x20000605
 8001354:	20000603 	.word	0x20000603
 8001358:	20000674 	.word	0x20000674
 800135c:	2000062c 	.word	0x2000062c
 8001360:	20000638 	.word	0x20000638
 8001364:	2000063c 	.word	0x2000063c
 8001368:	20000640 	.word	0x20000640

0800136c <OW_IRQHandler>:
	return mROM;
}


void OW_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
	OW_TIM->SR = 0;  // Clear the UIF flag
 8001370:	4b8d      	ldr	r3, [pc, #564]	; (80015a8 <OW_IRQHandler+0x23c>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]

	if (mTrStage == ets_Write)
 8001376:	4b8d      	ldr	r3, [pc, #564]	; (80015ac <OW_IRQHandler+0x240>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b01      	cmp	r3, #1
 800137c:	f040 8086 	bne.w	800148c <OW_IRQHandler+0x120>
	{
		switch (mBitStage)
 8001380:	4b8b      	ldr	r3, [pc, #556]	; (80015b0 <OW_IRQHandler+0x244>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b02      	cmp	r3, #2
 8001386:	d026      	beq.n	80013d6 <OW_IRQHandler+0x6a>
 8001388:	2b02      	cmp	r3, #2
 800138a:	dc2a      	bgt.n	80013e2 <OW_IRQHandler+0x76>
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <OW_IRQHandler+0x2a>
 8001390:	2b01      	cmp	r3, #1
 8001392:	d006      	beq.n	80013a2 <OW_IRQHandler+0x36>
 8001394:	e025      	b.n	80013e2 <OW_IRQHandler+0x76>
		{
			case ebs_Init:
				// write 0 to GPIO
				mOwPort->BSRR = mOwClearMask;
 8001396:	4b87      	ldr	r3, [pc, #540]	; (80015b4 <OW_IRQHandler+0x248>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a87      	ldr	r2, [pc, #540]	; (80015b8 <OW_IRQHandler+0x24c>)
 800139c:	6812      	ldr	r2, [r2, #0]
 800139e:	619a      	str	r2, [r3, #24]
				break;
 80013a0:	e01f      	b.n	80013e2 <OW_IRQHandler+0x76>
			case ebs_WriteSample:
				// write the bit  value to the GPIO
				if (mTxBuff[mCurrByte] & (1 << mCurrBit))
 80013a2:	4b86      	ldr	r3, [pc, #536]	; (80015bc <OW_IRQHandler+0x250>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	461a      	mov	r2, r3
 80013a8:	4b85      	ldr	r3, [pc, #532]	; (80015c0 <OW_IRQHandler+0x254>)
 80013aa:	5c9b      	ldrb	r3, [r3, r2]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b85      	ldr	r3, [pc, #532]	; (80015c4 <OW_IRQHandler+0x258>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	fa42 f303 	asr.w	r3, r2, r3
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d005      	beq.n	80013ca <OW_IRQHandler+0x5e>
				{  // write 1
					mOwPort->BSRR = mOwSetMask;
 80013be:	4b7d      	ldr	r3, [pc, #500]	; (80015b4 <OW_IRQHandler+0x248>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a81      	ldr	r2, [pc, #516]	; (80015c8 <OW_IRQHandler+0x25c>)
 80013c4:	6812      	ldr	r2, [r2, #0]
 80013c6:	619a      	str	r2, [r3, #24]
				else
				{
					//write 0;
					mOwPort->BSRR = mOwClearMask;
				}
				break;
 80013c8:	e00b      	b.n	80013e2 <OW_IRQHandler+0x76>
					mOwPort->BSRR = mOwClearMask;
 80013ca:	4b7a      	ldr	r3, [pc, #488]	; (80015b4 <OW_IRQHandler+0x248>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a7a      	ldr	r2, [pc, #488]	; (80015b8 <OW_IRQHandler+0x24c>)
 80013d0:	6812      	ldr	r2, [r2, #0]
 80013d2:	619a      	str	r2, [r3, #24]
				break;
 80013d4:	e005      	b.n	80013e2 <OW_IRQHandler+0x76>
			case ebs_Rest:
				// write 1 to GPIO
				mOwPort->BSRR = mOwSetMask;
 80013d6:	4b77      	ldr	r3, [pc, #476]	; (80015b4 <OW_IRQHandler+0x248>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a7b      	ldr	r2, [pc, #492]	; (80015c8 <OW_IRQHandler+0x25c>)
 80013dc:	6812      	ldr	r2, [r2, #0]
 80013de:	619a      	str	r2, [r3, #24]
				// increment CurrBit
				break;
 80013e0:	bf00      	nop
		}

		mBitStage++;
 80013e2:	4b73      	ldr	r3, [pc, #460]	; (80015b0 <OW_IRQHandler+0x244>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	3301      	adds	r3, #1
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4b71      	ldr	r3, [pc, #452]	; (80015b0 <OW_IRQHandler+0x244>)
 80013ec:	701a      	strb	r2, [r3, #0]
		if (mBitStage <=2)
 80013ee:	4b70      	ldr	r3, [pc, #448]	; (80015b0 <OW_IRQHandler+0x244>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d808      	bhi.n	8001408 <OW_IRQHandler+0x9c>
		{
			OW_TIM->ARR = mTimWriteBit[mBitStage];   // prepare ARR for next bit stage
 80013f6:	4b6e      	ldr	r3, [pc, #440]	; (80015b0 <OW_IRQHandler+0x244>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	461a      	mov	r2, r3
 80013fc:	4b73      	ldr	r3, [pc, #460]	; (80015cc <OW_IRQHandler+0x260>)
 80013fe:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001402:	4b69      	ldr	r3, [pc, #420]	; (80015a8 <OW_IRQHandler+0x23c>)
 8001404:	62da      	str	r2, [r3, #44]	; 0x2c
				mBusy = 0;
			}
		}
	}

}
 8001406:	e14a      	b.n	800169e <OW_IRQHandler+0x332>
			mBitStage = 0;
 8001408:	4b69      	ldr	r3, [pc, #420]	; (80015b0 <OW_IRQHandler+0x244>)
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
			OW_TIM->ARR = mTimWriteBit[mBitStage];   // prepare ARR for first stage of next write bit
 800140e:	4b68      	ldr	r3, [pc, #416]	; (80015b0 <OW_IRQHandler+0x244>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	461a      	mov	r2, r3
 8001414:	4b6d      	ldr	r3, [pc, #436]	; (80015cc <OW_IRQHandler+0x260>)
 8001416:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800141a:	4b63      	ldr	r3, [pc, #396]	; (80015a8 <OW_IRQHandler+0x23c>)
 800141c:	62da      	str	r2, [r3, #44]	; 0x2c
			mCurrBit++;
 800141e:	4b69      	ldr	r3, [pc, #420]	; (80015c4 <OW_IRQHandler+0x258>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	3301      	adds	r3, #1
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4b67      	ldr	r3, [pc, #412]	; (80015c4 <OW_IRQHandler+0x258>)
 8001428:	701a      	strb	r2, [r3, #0]
			if (mCurrBit > 7)
 800142a:	4b66      	ldr	r3, [pc, #408]	; (80015c4 <OW_IRQHandler+0x258>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b07      	cmp	r3, #7
 8001430:	f240 8135 	bls.w	800169e <OW_IRQHandler+0x332>
				mCurrBit = 0;
 8001434:	4b63      	ldr	r3, [pc, #396]	; (80015c4 <OW_IRQHandler+0x258>)
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
				mCurrByte++;
 800143a:	4b60      	ldr	r3, [pc, #384]	; (80015bc <OW_IRQHandler+0x250>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	3301      	adds	r3, #1
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4b5e      	ldr	r3, [pc, #376]	; (80015bc <OW_IRQHandler+0x250>)
 8001444:	701a      	strb	r2, [r3, #0]
				if (mCurrByte >= mBytesToWrite)  // all bytes written
 8001446:	4b5d      	ldr	r3, [pc, #372]	; (80015bc <OW_IRQHandler+0x250>)
 8001448:	781a      	ldrb	r2, [r3, #0]
 800144a:	4b61      	ldr	r3, [pc, #388]	; (80015d0 <OW_IRQHandler+0x264>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	429a      	cmp	r2, r3
 8001450:	f0c0 8125 	bcc.w	800169e <OW_IRQHandler+0x332>
					mCurrByte = 0;
 8001454:	4b59      	ldr	r3, [pc, #356]	; (80015bc <OW_IRQHandler+0x250>)
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
					if (mBytesToRead > 0)
 800145a:	4b5e      	ldr	r3, [pc, #376]	; (80015d4 <OW_IRQHandler+0x268>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d00b      	beq.n	800147a <OW_IRQHandler+0x10e>
						mTrStage = ets_Read;   // switch to reading stage
 8001462:	4b52      	ldr	r3, [pc, #328]	; (80015ac <OW_IRQHandler+0x240>)
 8001464:	2202      	movs	r2, #2
 8001466:	701a      	strb	r2, [r3, #0]
						OW_TIM->ARR = mTimReadBit[mBitStage];   // prepare ARR for first stage of first read bit
 8001468:	4b51      	ldr	r3, [pc, #324]	; (80015b0 <OW_IRQHandler+0x244>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	461a      	mov	r2, r3
 800146e:	4b5a      	ldr	r3, [pc, #360]	; (80015d8 <OW_IRQHandler+0x26c>)
 8001470:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001474:	4b4c      	ldr	r3, [pc, #304]	; (80015a8 <OW_IRQHandler+0x23c>)
 8001476:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001478:	e111      	b.n	800169e <OW_IRQHandler+0x332>
						OW_TIM->CR1 &= ~TIM_CR1_CEN;
 800147a:	4b4b      	ldr	r3, [pc, #300]	; (80015a8 <OW_IRQHandler+0x23c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a4a      	ldr	r2, [pc, #296]	; (80015a8 <OW_IRQHandler+0x23c>)
 8001480:	f023 0301 	bic.w	r3, r3, #1
 8001484:	6013      	str	r3, [r2, #0]
						TransferComplete();
 8001486:	f7ff ff05 	bl	8001294 <TransferComplete>
}
 800148a:	e108      	b.n	800169e <OW_IRQHandler+0x332>
	else if (mTrStage == ets_Read)
 800148c:	4b47      	ldr	r3, [pc, #284]	; (80015ac <OW_IRQHandler+0x240>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b02      	cmp	r3, #2
 8001492:	f040 80a7 	bne.w	80015e4 <OW_IRQHandler+0x278>
		switch (mBitStage)
 8001496:	4b46      	ldr	r3, [pc, #280]	; (80015b0 <OW_IRQHandler+0x244>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b02      	cmp	r3, #2
 800149c:	d012      	beq.n	80014c4 <OW_IRQHandler+0x158>
 800149e:	2b02      	cmp	r3, #2
 80014a0:	dc44      	bgt.n	800152c <OW_IRQHandler+0x1c0>
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d002      	beq.n	80014ac <OW_IRQHandler+0x140>
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d006      	beq.n	80014b8 <OW_IRQHandler+0x14c>
 80014aa:	e03f      	b.n	800152c <OW_IRQHandler+0x1c0>
					mOwPort->BSRR = mOwClearMask;
 80014ac:	4b41      	ldr	r3, [pc, #260]	; (80015b4 <OW_IRQHandler+0x248>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a41      	ldr	r2, [pc, #260]	; (80015b8 <OW_IRQHandler+0x24c>)
 80014b2:	6812      	ldr	r2, [r2, #0]
 80014b4:	619a      	str	r2, [r3, #24]
					break;
 80014b6:	e039      	b.n	800152c <OW_IRQHandler+0x1c0>
					mOwPort->BSRR = mOwSetMask;
 80014b8:	4b3e      	ldr	r3, [pc, #248]	; (80015b4 <OW_IRQHandler+0x248>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a42      	ldr	r2, [pc, #264]	; (80015c8 <OW_IRQHandler+0x25c>)
 80014be:	6812      	ldr	r2, [r2, #0]
 80014c0:	619a      	str	r2, [r3, #24]
					break;
 80014c2:	e033      	b.n	800152c <OW_IRQHandler+0x1c0>
					if (mOwPort->IDR & mOwSetMask)
 80014c4:	4b3b      	ldr	r3, [pc, #236]	; (80015b4 <OW_IRQHandler+0x248>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	691a      	ldr	r2, [r3, #16]
 80014ca:	4b3f      	ldr	r3, [pc, #252]	; (80015c8 <OW_IRQHandler+0x25c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4013      	ands	r3, r2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d014      	beq.n	80014fe <OW_IRQHandler+0x192>
						mRxBuff[mCurrByte] |= (1 << mCurrBit);
 80014d4:	4b39      	ldr	r3, [pc, #228]	; (80015bc <OW_IRQHandler+0x250>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b40      	ldr	r3, [pc, #256]	; (80015dc <OW_IRQHandler+0x270>)
 80014dc:	5c9b      	ldrb	r3, [r3, r2]
 80014de:	b25a      	sxtb	r2, r3
 80014e0:	4b38      	ldr	r3, [pc, #224]	; (80015c4 <OW_IRQHandler+0x258>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	4619      	mov	r1, r3
 80014e6:	2301      	movs	r3, #1
 80014e8:	408b      	lsls	r3, r1
 80014ea:	b25b      	sxtb	r3, r3
 80014ec:	4313      	orrs	r3, r2
 80014ee:	b259      	sxtb	r1, r3
 80014f0:	4b32      	ldr	r3, [pc, #200]	; (80015bc <OW_IRQHandler+0x250>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	461a      	mov	r2, r3
 80014f6:	b2c9      	uxtb	r1, r1
 80014f8:	4b38      	ldr	r3, [pc, #224]	; (80015dc <OW_IRQHandler+0x270>)
 80014fa:	5499      	strb	r1, [r3, r2]
					break;
 80014fc:	e015      	b.n	800152a <OW_IRQHandler+0x1be>
						mRxBuff[mCurrByte] &= ~(1 << mCurrBit);
 80014fe:	4b2f      	ldr	r3, [pc, #188]	; (80015bc <OW_IRQHandler+0x250>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	4b35      	ldr	r3, [pc, #212]	; (80015dc <OW_IRQHandler+0x270>)
 8001506:	5c9b      	ldrb	r3, [r3, r2]
 8001508:	b25a      	sxtb	r2, r3
 800150a:	4b2e      	ldr	r3, [pc, #184]	; (80015c4 <OW_IRQHandler+0x258>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	4619      	mov	r1, r3
 8001510:	2301      	movs	r3, #1
 8001512:	408b      	lsls	r3, r1
 8001514:	b25b      	sxtb	r3, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	b25b      	sxtb	r3, r3
 800151a:	4013      	ands	r3, r2
 800151c:	b259      	sxtb	r1, r3
 800151e:	4b27      	ldr	r3, [pc, #156]	; (80015bc <OW_IRQHandler+0x250>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	b2c9      	uxtb	r1, r1
 8001526:	4b2d      	ldr	r3, [pc, #180]	; (80015dc <OW_IRQHandler+0x270>)
 8001528:	5499      	strb	r1, [r3, r2]
					break;
 800152a:	bf00      	nop
				mBitStage++;
 800152c:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <OW_IRQHandler+0x244>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	3301      	adds	r3, #1
 8001532:	b2da      	uxtb	r2, r3
 8001534:	4b1e      	ldr	r3, [pc, #120]	; (80015b0 <OW_IRQHandler+0x244>)
 8001536:	701a      	strb	r2, [r3, #0]
				if (mBitStage > 2)
 8001538:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <OW_IRQHandler+0x244>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d929      	bls.n	8001594 <OW_IRQHandler+0x228>
					mBitStage = 0;
 8001540:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <OW_IRQHandler+0x244>)
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]
					mCurrBit++;
 8001546:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <OW_IRQHandler+0x258>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	3301      	adds	r3, #1
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4b1d      	ldr	r3, [pc, #116]	; (80015c4 <OW_IRQHandler+0x258>)
 8001550:	701a      	strb	r2, [r3, #0]
					if (mCurrBit > 7)
 8001552:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <OW_IRQHandler+0x258>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b07      	cmp	r3, #7
 8001558:	d91c      	bls.n	8001594 <OW_IRQHandler+0x228>
						mCurrBit = 0;
 800155a:	4b1a      	ldr	r3, [pc, #104]	; (80015c4 <OW_IRQHandler+0x258>)
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]
						mCurrByte++;
 8001560:	4b16      	ldr	r3, [pc, #88]	; (80015bc <OW_IRQHandler+0x250>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	3301      	adds	r3, #1
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b14      	ldr	r3, [pc, #80]	; (80015bc <OW_IRQHandler+0x250>)
 800156a:	701a      	strb	r2, [r3, #0]
						if (mCurrByte >= mBytesToRead)  // all bytes written
 800156c:	4b13      	ldr	r3, [pc, #76]	; (80015bc <OW_IRQHandler+0x250>)
 800156e:	781a      	ldrb	r2, [r3, #0]
 8001570:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <OW_IRQHandler+0x268>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	429a      	cmp	r2, r3
 8001576:	d30d      	bcc.n	8001594 <OW_IRQHandler+0x228>
							OW_TIM->CR1 &= ~TIM_CR1_CEN;
 8001578:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <OW_IRQHandler+0x23c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <OW_IRQHandler+0x23c>)
 800157e:	f023 0301 	bic.w	r3, r3, #1
 8001582:	6013      	str	r3, [r2, #0]
							TransferComplete();
 8001584:	f7ff fe86 	bl	8001294 <TransferComplete>
							mCurrByte = 0;
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <OW_IRQHandler+0x250>)
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
							mBusy  = 0;
 800158e:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <OW_IRQHandler+0x274>)
 8001590:	2200      	movs	r2, #0
 8001592:	701a      	strb	r2, [r3, #0]
				OW_TIM->ARR = mTimReadBit[mBitStage]; // prepare ARR for next period
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <OW_IRQHandler+0x244>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <OW_IRQHandler+0x26c>)
 800159c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80015a0:	4b01      	ldr	r3, [pc, #4]	; (80015a8 <OW_IRQHandler+0x23c>)
 80015a2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80015a4:	e07b      	b.n	800169e <OW_IRQHandler+0x332>
 80015a6:	bf00      	nop
 80015a8:	40001000 	.word	0x40001000
 80015ac:	20000602 	.word	0x20000602
 80015b0:	20000601 	.word	0x20000601
 80015b4:	20000668 	.word	0x20000668
 80015b8:	2000066c 	.word	0x2000066c
 80015bc:	200005ff 	.word	0x200005ff
 80015c0:	20000620 	.word	0x20000620
 80015c4:	200005fe 	.word	0x200005fe
 80015c8:	20000670 	.word	0x20000670
 80015cc:	20000610 	.word	0x20000610
 80015d0:	200005fc 	.word	0x200005fc
 80015d4:	200005fd 	.word	0x200005fd
 80015d8:	20000618 	.word	0x20000618
 80015dc:	2000062c 	.word	0x2000062c
 80015e0:	20000640 	.word	0x20000640
	else if (mTrStage == ets_Reset)
 80015e4:	4b2f      	ldr	r3, [pc, #188]	; (80016a4 <OW_IRQHandler+0x338>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d158      	bne.n	800169e <OW_IRQHandler+0x332>
		switch (mResetStage)
 80015ec:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <OW_IRQHandler+0x33c>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d012      	beq.n	800161a <OW_IRQHandler+0x2ae>
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	dc20      	bgt.n	800163a <OW_IRQHandler+0x2ce>
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d002      	beq.n	8001602 <OW_IRQHandler+0x296>
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d006      	beq.n	800160e <OW_IRQHandler+0x2a2>
 8001600:	e01b      	b.n	800163a <OW_IRQHandler+0x2ce>
				mOwPort->BSRR = mOwClearMask;
 8001602:	4b2a      	ldr	r3, [pc, #168]	; (80016ac <OW_IRQHandler+0x340>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a2a      	ldr	r2, [pc, #168]	; (80016b0 <OW_IRQHandler+0x344>)
 8001608:	6812      	ldr	r2, [r2, #0]
 800160a:	619a      	str	r2, [r3, #24]
				break;
 800160c:	e015      	b.n	800163a <OW_IRQHandler+0x2ce>
				mOwPort->BSRR = mOwSetMask;
 800160e:	4b27      	ldr	r3, [pc, #156]	; (80016ac <OW_IRQHandler+0x340>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a28      	ldr	r2, [pc, #160]	; (80016b4 <OW_IRQHandler+0x348>)
 8001614:	6812      	ldr	r2, [r2, #0]
 8001616:	619a      	str	r2, [r3, #24]
				break;
 8001618:	e00f      	b.n	800163a <OW_IRQHandler+0x2ce>
				if (mOwPort->IDR & mOwSetMask)
 800161a:	4b24      	ldr	r3, [pc, #144]	; (80016ac <OW_IRQHandler+0x340>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	691a      	ldr	r2, [r3, #16]
 8001620:	4b24      	ldr	r3, [pc, #144]	; (80016b4 <OW_IRQHandler+0x348>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4013      	ands	r3, r2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <OW_IRQHandler+0x2c6>
					mPresencePulse = 0;
 800162a:	4b23      	ldr	r3, [pc, #140]	; (80016b8 <OW_IRQHandler+0x34c>)
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
				break;
 8001630:	e002      	b.n	8001638 <OW_IRQHandler+0x2cc>
					mPresencePulse = 1;
 8001632:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <OW_IRQHandler+0x34c>)
 8001634:	2201      	movs	r2, #1
 8001636:	701a      	strb	r2, [r3, #0]
				break;
 8001638:	bf00      	nop
		mResetStage++;
 800163a:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <OW_IRQHandler+0x33c>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	3301      	adds	r3, #1
 8001640:	b2da      	uxtb	r2, r3
 8001642:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <OW_IRQHandler+0x33c>)
 8001644:	701a      	strb	r2, [r3, #0]
		if (mResetStage <= 2)   // still in Reset phase
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <OW_IRQHandler+0x33c>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d808      	bhi.n	8001660 <OW_IRQHandler+0x2f4>
			OW_TIM->ARR = mTimReset[mResetStage];  // prepare period for next reset stage
 800164e:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <OW_IRQHandler+0x33c>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	461a      	mov	r2, r3
 8001654:	4b19      	ldr	r3, [pc, #100]	; (80016bc <OW_IRQHandler+0x350>)
 8001656:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800165a:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <OW_IRQHandler+0x354>)
 800165c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800165e:	e01e      	b.n	800169e <OW_IRQHandler+0x332>
			mResetStage = 0;
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <OW_IRQHandler+0x33c>)
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]
			mBitStage = 0;   // reset the bit stage for next phase
 8001666:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <OW_IRQHandler+0x358>)
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
			if (mPresencePulse)  // device detected switch to write phase
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <OW_IRQHandler+0x34c>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d00b      	beq.n	800168c <OW_IRQHandler+0x320>
				mTrStage = ets_Write;
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <OW_IRQHandler+0x338>)
 8001676:	2201      	movs	r2, #1
 8001678:	701a      	strb	r2, [r3, #0]
				OW_TIM->ARR = mTimWriteBit[mBitStage];  // prepare period for first write bit stage
 800167a:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <OW_IRQHandler+0x358>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	461a      	mov	r2, r3
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <OW_IRQHandler+0x35c>)
 8001682:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <OW_IRQHandler+0x354>)
 8001688:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800168a:	e008      	b.n	800169e <OW_IRQHandler+0x332>
				OW_TIM->CR1 &= ~TIM_CR1_CEN;
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <OW_IRQHandler+0x354>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <OW_IRQHandler+0x354>)
 8001692:	f023 0301 	bic.w	r3, r3, #1
 8001696:	6013      	str	r3, [r2, #0]
				mBusy = 0;
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <OW_IRQHandler+0x360>)
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000602 	.word	0x20000602
 80016a8:	20000600 	.word	0x20000600
 80016ac:	20000668 	.word	0x20000668
 80016b0:	2000066c 	.word	0x2000066c
 80016b4:	20000670 	.word	0x20000670
 80016b8:	20000604 	.word	0x20000604
 80016bc:	20000608 	.word	0x20000608
 80016c0:	40001000 	.word	0x40001000
 80016c4:	20000601 	.word	0x20000601
 80016c8:	20000610 	.word	0x20000610
 80016cc:	20000640 	.word	0x20000640

080016d0 <CalculateCRC>:



static uint8_t CalculateCRC(uint8_t* data, uint8_t len)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	70fb      	strb	r3, [r7, #3]
  uint8_t crc=0;
 80016dc:	2300      	movs	r3, #0
 80016de:	73fb      	strb	r3, [r7, #15]
  uint8_t inbyte;

    for (uint8_t i=0; i<len;i++)
 80016e0:	2300      	movs	r3, #0
 80016e2:	73bb      	strb	r3, [r7, #14]
 80016e4:	e025      	b.n	8001732 <CalculateCRC+0x62>
    {
      uint8_t inbyte = data[i];
 80016e6:	7bbb      	ldrb	r3, [r7, #14]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	4413      	add	r3, r2
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	737b      	strb	r3, [r7, #13]
      for (uint8_t j=0;j<8;j++)
 80016f0:	2300      	movs	r3, #0
 80016f2:	733b      	strb	r3, [r7, #12]
 80016f4:	e017      	b.n	8001726 <CalculateCRC+0x56>
      {
        uint8_t mix = (crc ^ inbyte) & 0x01;
 80016f6:	7bfa      	ldrb	r2, [r7, #15]
 80016f8:	7b7b      	ldrb	r3, [r7, #13]
 80016fa:	4053      	eors	r3, r2
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	72fb      	strb	r3, [r7, #11]
        crc >>= 1;
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	085b      	lsrs	r3, r3, #1
 8001708:	73fb      	strb	r3, [r7, #15]
        if (mix)
 800170a:	7afb      	ldrb	r3, [r7, #11]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d004      	beq.n	800171a <CalculateCRC+0x4a>
          crc ^= 0x8C;
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8001716:	43db      	mvns	r3, r3
 8001718:	73fb      	strb	r3, [r7, #15]

        inbyte >>= 1;
 800171a:	7b7b      	ldrb	r3, [r7, #13]
 800171c:	085b      	lsrs	r3, r3, #1
 800171e:	737b      	strb	r3, [r7, #13]
      for (uint8_t j=0;j<8;j++)
 8001720:	7b3b      	ldrb	r3, [r7, #12]
 8001722:	3301      	adds	r3, #1
 8001724:	733b      	strb	r3, [r7, #12]
 8001726:	7b3b      	ldrb	r3, [r7, #12]
 8001728:	2b07      	cmp	r3, #7
 800172a:	d9e4      	bls.n	80016f6 <CalculateCRC+0x26>
    for (uint8_t i=0; i<len;i++)
 800172c:	7bbb      	ldrb	r3, [r7, #14]
 800172e:	3301      	adds	r3, #1
 8001730:	73bb      	strb	r3, [r7, #14]
 8001732:	7bba      	ldrb	r2, [r7, #14]
 8001734:	78fb      	ldrb	r3, [r7, #3]
 8001736:	429a      	cmp	r2, r3
 8001738:	d3d5      	bcc.n	80016e6 <CalculateCRC+0x16>
      }
    }
    return crc;
 800173a:	7bfb      	ldrb	r3, [r7, #15]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <RTC_GetTime>:

/* USER CODE END 0 */


sDateTime RTC_GetTime()
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	; 0x28
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  sDateTime dt;
  RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 8001750:	f107 0308 	add.w	r3, r7, #8
 8001754:	2200      	movs	r2, #0
 8001756:	4619      	mov	r1, r3
 8001758:	4816      	ldr	r0, [pc, #88]	; (80017b4 <RTC_GetTime+0x6c>)
 800175a:	f007 fe0b 	bl	8009374 <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 800175e:	f107 031c 	add.w	r3, r7, #28
 8001762:	2200      	movs	r2, #0
 8001764:	4619      	mov	r1, r3
 8001766:	4813      	ldr	r0, [pc, #76]	; (80017b4 <RTC_GetTime+0x6c>)
 8001768:	f007 fee6 	bl	8009538 <HAL_RTC_GetDate>

  dt.Year = 2000 + sdatestructureget.Year;
 800176c:	7ffb      	ldrb	r3, [r7, #31]
 800176e:	b29b      	uxth	r3, r3
 8001770:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001774:	b29b      	uxth	r3, r3
 8001776:	84fb      	strh	r3, [r7, #38]	; 0x26
  dt.Month = sdatestructureget.Month;
 8001778:	7f7b      	ldrb	r3, [r7, #29]
 800177a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dt.Day = sdatestructureget.Date;
 800177e:	7fbb      	ldrb	r3, [r7, #30]
 8001780:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  dt.Hour = stimestructureget.Hours;
 8001784:	7a3b      	ldrb	r3, [r7, #8]
 8001786:	f887 3020 	strb.w	r3, [r7, #32]
  dt.Minute = stimestructureget.Minutes;
 800178a:	7a7b      	ldrb	r3, [r7, #9]
 800178c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  dt.Second = stimestructureget.Seconds;
 8001790:	7abb      	ldrb	r3, [r7, #10]
 8001792:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dt.WeekDay = sdatestructureget.WeekDay;
 8001796:	7f3b      	ldrb	r3, [r7, #28]
 8001798:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  return dt;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	461a      	mov	r2, r3
 80017a0:	f107 0320 	add.w	r3, r7, #32
 80017a4:	cb03      	ldmia	r3!, {r0, r1}
 80017a6:	6010      	str	r0, [r2, #0]
 80017a8:	6051      	str	r1, [r2, #4]
}
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	3728      	adds	r7, #40	; 0x28
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000e48 	.word	0x20000e48

080017b8 <RTC_SetTime>:

void RTC_SetTime(sDateTime dt)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0
 80017be:	463b      	mov	r3, r7
 80017c0:	e883 0003 	stmia.w	r3, {r0, r1}
  /* Configure RTC Calendar */
   RTC_DateTypeDef sdatestructure;
   RTC_TimeTypeDef stimestructure;

   /*##-1- Configure the Date #################################################*/
   sdatestructure.Year = dt.Year - 2000;
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	3330      	adds	r3, #48	; 0x30
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	77fb      	strb	r3, [r7, #31]
   sdatestructure.Month = dt.Month;
 80017ce:	793b      	ldrb	r3, [r7, #4]
 80017d0:	777b      	strb	r3, [r7, #29]
   sdatestructure.Date = dt.Day;
 80017d2:	78fb      	ldrb	r3, [r7, #3]
 80017d4:	77bb      	strb	r3, [r7, #30]
   sdatestructure.WeekDay = dt.WeekDay;
 80017d6:	797b      	ldrb	r3, [r7, #5]
 80017d8:	773b      	strb	r3, [r7, #28]

   if(HAL_RTC_SetDate(&hrtc,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 80017da:	f107 031c 	add.w	r3, r7, #28
 80017de:	2200      	movs	r2, #0
 80017e0:	4619      	mov	r1, r3
 80017e2:	4810      	ldr	r0, [pc, #64]	; (8001824 <RTC_SetTime+0x6c>)
 80017e4:	f007 fe24 	bl	8009430 <HAL_RTC_SetDate>
     /* Initialization Error */
   //  Error_Handler();
   }

   /*##-2- Configure the Time #################################################*/
   stimestructure.Hours = dt.Hour;
 80017e8:	783b      	ldrb	r3, [r7, #0]
 80017ea:	723b      	strb	r3, [r7, #8]
   stimestructure.Minutes = dt.Minute;
 80017ec:	787b      	ldrb	r3, [r7, #1]
 80017ee:	727b      	strb	r3, [r7, #9]
   stimestructure.Seconds = dt.Second;
 80017f0:	78bb      	ldrb	r3, [r7, #2]
 80017f2:	72bb      	strb	r3, [r7, #10]
   stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 80017f4:	2300      	movs	r3, #0
 80017f6:	72fb      	strb	r3, [r7, #11]
   stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
   stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61bb      	str	r3, [r7, #24]

   if(HAL_RTC_SetTime(&hrtc,&stimestructure,RTC_FORMAT_BIN) != HAL_OK)
 8001800:	f107 0308 	add.w	r3, r7, #8
 8001804:	2200      	movs	r2, #0
 8001806:	4619      	mov	r1, r3
 8001808:	4806      	ldr	r0, [pc, #24]	; (8001824 <RTC_SetTime+0x6c>)
 800180a:	f007 fd19 	bl	8009240 <HAL_RTC_SetTime>
     /* Initialization Error */
   //  Error_Handler();
   }

   /*##-3- Writes a data in a RTC Backup data Register1 #######################*/
   HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 800180e:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001812:	2101      	movs	r1, #1
 8001814:	4803      	ldr	r0, [pc, #12]	; (8001824 <RTC_SetTime+0x6c>)
 8001816:	f007 ff9b 	bl	8009750 <HAL_RTCEx_BKUPWrite>
	
	// LOG_InsertGeneralMessage("Real Time Clock changed !");
 }
 800181a:	bf00      	nop
 800181c:	3720      	adds	r7, #32
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000e48 	.word	0x20000e48

08001828 <RTC_SetUnixTime>:

 
 void RTC_SetUnixTime(uint32_t unixtime)
 {
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	 struct tm * tm_now;
	 time_t unixnow = unixtime;
 8001830:	6879      	ldr	r1, [r7, #4]
 8001832:	2000      	movs	r0, #0
 8001834:	460a      	mov	r2, r1
 8001836:	4603      	mov	r3, r0
 8001838:	e9c7 2304 	strd	r2, r3, [r7, #16]
	 tm_now = localtime(&unixnow);
 800183c:	f107 0310 	add.w	r3, r7, #16
 8001840:	4618      	mov	r0, r3
 8001842:	f009 fb21 	bl	800ae88 <localtime>
 8001846:	61f8      	str	r0, [r7, #28]
	 sDateTime time;
	 time.Second = tm_now->tm_sec;
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	b2db      	uxtb	r3, r3
 800184e:	72bb      	strb	r3, [r7, #10]
	 time.Minute = tm_now->tm_min;
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	b2db      	uxtb	r3, r3
 8001856:	727b      	strb	r3, [r7, #9]
	 time.Hour = tm_now->tm_hour;    
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	723b      	strb	r3, [r7, #8]
	 time.Day = tm_now->tm_mday;
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	72fb      	strb	r3, [r7, #11]
	 time.Month = tm_now->tm_mon +1;
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	3301      	adds	r3, #1
 8001870:	b2db      	uxtb	r3, r3
 8001872:	733b      	strb	r3, [r7, #12]
	 time.Year = tm_now->tm_year + 1900;
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	b29b      	uxth	r3, r3
 800187a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800187e:	b29b      	uxth	r3, r3
 8001880:	81fb      	strh	r3, [r7, #14]
	 RTC_SetTime(time);
 8001882:	f107 0308 	add.w	r3, r7, #8
 8001886:	e893 0003 	ldmia.w	r3, {r0, r1}
 800188a:	f7ff ff95 	bl	80017b8 <RTC_SetTime>
 }
 800188e:	bf00      	nop
 8001890:	3720      	adds	r7, #32
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <SENS_Init>:


uint16_t scd_timer;

void SENS_Init(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  scd_timer = 0;
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <SENS_Init+0x1c>)
 800189e:	2200      	movs	r2, #0
 80018a0:	801a      	strh	r2, [r3, #0]
  mNumOfSensors = 0;
 80018a2:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <SENS_Init+0x20>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	701a      	strb	r2, [r3, #0]
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	200006f8 	.word	0x200006f8
 80018b8:	200006f4 	.word	0x200006f4

080018bc <SENS_AddSensor>:

void SENS_AddSensor(sI2cSensor sensor)
{
 80018bc:	b590      	push	{r4, r7, lr}
 80018be:	b087      	sub	sp, #28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 // assert(sensor.Id >= SENS_MAX_SENSORS);
  uint8_t i = sensor.Id;
 80018c8:	793b      	ldrb	r3, [r7, #4]
 80018ca:	75fb      	strb	r3, [r7, #23]

  mSensors[mNumOfSensors] = sensor;
 80018cc:	4b1b      	ldr	r3, [pc, #108]	; (800193c <SENS_AddSensor+0x80>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	4619      	mov	r1, r3
 80018d2:	4a1b      	ldr	r2, [pc, #108]	; (8001940 <SENS_AddSensor+0x84>)
 80018d4:	460b      	mov	r3, r1
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	440b      	add	r3, r1
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	461c      	mov	r4, r3
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80018e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  // for some types of sensors it is necessary to start the measurements
  if(sensor.Type == st_SDP810_125)
 80018ea:	797b      	ldrb	r3, [r7, #5]
 80018ec:	2b03      	cmp	r3, #3
 80018ee:	d107      	bne.n	8001900 <SENS_AddSensor+0x44>
  {
    HAL_Delay(5);
 80018f0:	2005      	movs	r0, #5
 80018f2:	f002 fdd3 	bl	800449c <HAL_Delay>
    SDPx_StartMeasurement(&sensor);
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 faad 	bl	8001e58 <SDPx_StartMeasurement>
 80018fe:	e012      	b.n	8001926 <SENS_AddSensor+0x6a>
  }

  else if(sensor.Type == st_SCD4x)
 8001900:	797b      	ldrb	r3, [r7, #5]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d10f      	bne.n	8001926 <SENS_AddSensor+0x6a>
  {
    HAL_Delay(5);
 8001906:	2005      	movs	r0, #5
 8001908:	f002 fdc8 	bl	800449c <HAL_Delay>
    SCD4x_SetAltitude(&sensor, 411);
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	f240 119b 	movw	r1, #411	; 0x19b
 8001912:	4618      	mov	r0, r3
 8001914:	f000 f9e6 	bl	8001ce4 <SCD4x_SetAltitude>
    HAL_Delay(5);
 8001918:	2005      	movs	r0, #5
 800191a:	f002 fdbf 	bl	800449c <HAL_Delay>
    SCD4x_StartMeasurement(&sensor);
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	4618      	mov	r0, r3
 8001922:	f000 f9bf 	bl	8001ca4 <SCD4x_StartMeasurement>
  }

  mNumOfSensors++;
 8001926:	4b05      	ldr	r3, [pc, #20]	; (800193c <SENS_AddSensor+0x80>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	3301      	adds	r3, #1
 800192c:	b2da      	uxtb	r2, r3
 800192e:	4b03      	ldr	r3, [pc, #12]	; (800193c <SENS_AddSensor+0x80>)
 8001930:	701a      	strb	r2, [r3, #0]

}
 8001932:	bf00      	nop
 8001934:	371c      	adds	r7, #28
 8001936:	46bd      	mov	sp, r7
 8001938:	bd90      	pop	{r4, r7, pc}
 800193a:	bf00      	nop
 800193c:	200006f4 	.word	0x200006f4
 8001940:	2000067c 	.word	0x2000067c

08001944 <SENS_Update_1s>:
}



void SENS_Update_1s(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0

  uint8_t i, valid;



  for(i = 0; i < mNumOfSensors; i++)
 800194a:	2300      	movs	r3, #0
 800194c:	73fb      	strb	r3, [r7, #15]
 800194e:	e116      	b.n	8001b7e <SENS_Update_1s+0x23a>
  {
    hum = -1;
 8001950:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001954:	813b      	strh	r3, [r7, #8]
    temp = -1;
 8001956:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800195a:	817b      	strh	r3, [r7, #10]
    co2 = -1;
 800195c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001960:	81bb      	strh	r3, [r7, #12]
    dp = -1;
 8001962:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001966:	80fb      	strh	r3, [r7, #6]

    switch (mSensors[i].Type)
 8001968:	7bfa      	ldrb	r2, [r7, #15]
 800196a:	4990      	ldr	r1, [pc, #576]	; (8001bac <SENS_Update_1s+0x268>)
 800196c:	4613      	mov	r3, r2
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	4413      	add	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	3301      	adds	r3, #1
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b03      	cmp	r3, #3
 800197c:	f200 80fc 	bhi.w	8001b78 <SENS_Update_1s+0x234>
 8001980:	a201      	add	r2, pc, #4	; (adr r2, 8001988 <SENS_Update_1s+0x44>)
 8001982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001986:	bf00      	nop
 8001988:	08001999 	.word	0x08001999
 800198c:	08001a6f 	.word	0x08001a6f
 8001990:	08001b79 	.word	0x08001b79
 8001994:	08001b01 	.word	0x08001b01
    {
      case  st_SHT4x:
       if(0 == Read_SHT4x(&(mSensors[i]),&temp, &hum)) valid = 1;
 8001998:	7bfa      	ldrb	r2, [r7, #15]
 800199a:	4613      	mov	r3, r2
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	4413      	add	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4a82      	ldr	r2, [pc, #520]	; (8001bac <SENS_Update_1s+0x268>)
 80019a4:	4413      	add	r3, r2
 80019a6:	f107 0208 	add.w	r2, r7, #8
 80019aa:	f107 010a 	add.w	r1, r7, #10
 80019ae:	4618      	mov	r0, r3
 80019b0:	f000 f902 	bl	8001bb8 <Read_SHT4x>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d102      	bne.n	80019c0 <SENS_Update_1s+0x7c>
 80019ba:	2301      	movs	r3, #1
 80019bc:	73bb      	strb	r3, [r7, #14]
 80019be:	e001      	b.n	80019c4 <SENS_Update_1s+0x80>
       else valid = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	73bb      	strb	r3, [r7, #14]
       if (temp == -1 && hum == -1)  valid = 0;
 80019c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80019c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019cc:	d106      	bne.n	80019dc <SENS_Update_1s+0x98>
 80019ce:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80019d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d6:	d101      	bne.n	80019dc <SENS_Update_1s+0x98>
 80019d8:	2300      	movs	r3, #0
 80019da:	73bb      	strb	r3, [r7, #14]
       if(valid)
 80019dc:	7bbb      	ldrb	r3, [r7, #14]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d022      	beq.n	8001a28 <SENS_Update_1s+0xe4>
       {
         VAR_SetVariable(mSensors[i].VarId_1, temp, 1);
 80019e2:	7bfa      	ldrb	r2, [r7, #15]
 80019e4:	4971      	ldr	r1, [pc, #452]	; (8001bac <SENS_Update_1s+0x268>)
 80019e6:	4613      	mov	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4413      	add	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	440b      	add	r3, r1
 80019f0:	3308      	adds	r3, #8
 80019f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80019fc:	2201      	movs	r2, #1
 80019fe:	4618      	mov	r0, r3
 8001a00:	f001 f80a 	bl	8002a18 <VAR_SetVariable>
         VAR_SetVariable(mSensors[i].VarId_2, hum, 1);
 8001a04:	7bfa      	ldrb	r2, [r7, #15]
 8001a06:	4969      	ldr	r1, [pc, #420]	; (8001bac <SENS_Update_1s+0x268>)
 8001a08:	4613      	mov	r3, r2
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	4413      	add	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	440b      	add	r3, r1
 8001a12:	330a      	adds	r3, #10
 8001a14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	4618      	mov	r0, r3
 8001a22:	f000 fff9 	bl	8002a18 <VAR_SetVariable>
       else
       {
         VAR_SetVariable(mSensors[i].VarId_1, temp, 0);
         VAR_SetVariable(mSensors[i].VarId_2, hum, 0);
       }
       break;
 8001a26:	e0a7      	b.n	8001b78 <SENS_Update_1s+0x234>
         VAR_SetVariable(mSensors[i].VarId_1, temp, 0);
 8001a28:	7bfa      	ldrb	r2, [r7, #15]
 8001a2a:	4960      	ldr	r1, [pc, #384]	; (8001bac <SENS_Update_1s+0x268>)
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	4413      	add	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	440b      	add	r3, r1
 8001a36:	3308      	adds	r3, #8
 8001a38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001a42:	2200      	movs	r2, #0
 8001a44:	4618      	mov	r0, r3
 8001a46:	f000 ffe7 	bl	8002a18 <VAR_SetVariable>
         VAR_SetVariable(mSensors[i].VarId_2, hum, 0);
 8001a4a:	7bfa      	ldrb	r2, [r7, #15]
 8001a4c:	4957      	ldr	r1, [pc, #348]	; (8001bac <SENS_Update_1s+0x268>)
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	440b      	add	r3, r1
 8001a58:	330a      	adds	r3, #10
 8001a5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8001a64:	2200      	movs	r2, #0
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 ffd6 	bl	8002a18 <VAR_SetVariable>
       break;
 8001a6c:	e084      	b.n	8001b78 <SENS_Update_1s+0x234>

     case st_SCD4x:
       if (scd_timer >= 6)
 8001a6e:	4b50      	ldr	r3, [pc, #320]	; (8001bb0 <SENS_Update_1s+0x26c>)
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	2b05      	cmp	r3, #5
 8001a74:	d97f      	bls.n	8001b76 <SENS_Update_1s+0x232>
       {
         if(0 == SCD4x_Read(&(mSensors[i]),&co2, &temp, &hum)) valid = 1;
 8001a76:	7bfa      	ldrb	r2, [r7, #15]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	4413      	add	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4a4a      	ldr	r2, [pc, #296]	; (8001bac <SENS_Update_1s+0x268>)
 8001a82:	1898      	adds	r0, r3, r2
 8001a84:	f107 0308 	add.w	r3, r7, #8
 8001a88:	f107 020a 	add.w	r2, r7, #10
 8001a8c:	f107 010c 	add.w	r1, r7, #12
 8001a90:	f000 f960 	bl	8001d54 <SCD4x_Read>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d102      	bne.n	8001aa0 <SENS_Update_1s+0x15c>
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	73bb      	strb	r3, [r7, #14]
 8001a9e:	e001      	b.n	8001aa4 <SENS_Update_1s+0x160>
         else valid = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	73bb      	strb	r3, [r7, #14]
         if (co2 == -1)  valid = 0;
 8001aa4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aac:	d101      	bne.n	8001ab2 <SENS_Update_1s+0x16e>
 8001aae:	2300      	movs	r3, #0
 8001ab0:	73bb      	strb	r3, [r7, #14]
         if(valid)
 8001ab2:	7bbb      	ldrb	r3, [r7, #14]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d011      	beq.n	8001adc <SENS_Update_1s+0x198>
         {
           VAR_SetVariable(mSensors[i].VarId_1, co2, 1);
 8001ab8:	7bfa      	ldrb	r2, [r7, #15]
 8001aba:	493c      	ldr	r1, [pc, #240]	; (8001bac <SENS_Update_1s+0x268>)
 8001abc:	4613      	mov	r3, r2
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4413      	add	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	3308      	adds	r3, #8
 8001ac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f000 ff9f 	bl	8002a18 <VAR_SetVariable>
         else
         {
           VAR_SetVariable(mSensors[i].VarId_1, co2, 0);
         }
       }
       break;
 8001ada:	e04c      	b.n	8001b76 <SENS_Update_1s+0x232>
           VAR_SetVariable(mSensors[i].VarId_1, co2, 0);
 8001adc:	7bfa      	ldrb	r2, [r7, #15]
 8001ade:	4933      	ldr	r1, [pc, #204]	; (8001bac <SENS_Update_1s+0x268>)
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	4413      	add	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	3308      	adds	r3, #8
 8001aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f000 ff8d 	bl	8002a18 <VAR_SetVariable>
       break;
 8001afe:	e03a      	b.n	8001b76 <SENS_Update_1s+0x232>
     case st_SPS30:
       // not supported
       break;

     case st_SDP810_125:
       if(0 == SDPx_Read(&(mSensors[i]), &dp)) valid = 1;
 8001b00:	7bfa      	ldrb	r2, [r7, #15]
 8001b02:	4613      	mov	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	4413      	add	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4a28      	ldr	r2, [pc, #160]	; (8001bac <SENS_Update_1s+0x268>)
 8001b0c:	4413      	add	r3, r2
 8001b0e:	1dba      	adds	r2, r7, #6
 8001b10:	4611      	mov	r1, r2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 f9c0 	bl	8001e98 <SDPx_Read>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d102      	bne.n	8001b24 <SENS_Update_1s+0x1e0>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	73bb      	strb	r3, [r7, #14]
 8001b22:	e001      	b.n	8001b28 <SENS_Update_1s+0x1e4>
       else valid = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	73bb      	strb	r3, [r7, #14]
      // if (dp == -1)  valid = 0;
       if(valid)
 8001b28:	7bbb      	ldrb	r3, [r7, #14]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d011      	beq.n	8001b52 <SENS_Update_1s+0x20e>
       {
         VAR_SetVariable(mSensors[i].VarId_1, dp, 1);
 8001b2e:	7bfa      	ldrb	r2, [r7, #15]
 8001b30:	491e      	ldr	r1, [pc, #120]	; (8001bac <SENS_Update_1s+0x268>)
 8001b32:	4613      	mov	r3, r2
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	4413      	add	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	3308      	adds	r3, #8
 8001b3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 ff64 	bl	8002a18 <VAR_SetVariable>
       }
       else
       {
         VAR_SetVariable(mSensors[i].VarId_1, dp, 0);
       }
       break;
 8001b50:	e012      	b.n	8001b78 <SENS_Update_1s+0x234>
         VAR_SetVariable(mSensors[i].VarId_1, dp, 0);
 8001b52:	7bfa      	ldrb	r2, [r7, #15]
 8001b54:	4915      	ldr	r1, [pc, #84]	; (8001bac <SENS_Update_1s+0x268>)
 8001b56:	4613      	mov	r3, r2
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	4413      	add	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	440b      	add	r3, r1
 8001b60:	3308      	adds	r3, #8
 8001b62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f000 ff52 	bl	8002a18 <VAR_SetVariable>
       break;
 8001b74:	e000      	b.n	8001b78 <SENS_Update_1s+0x234>
       break;
 8001b76:	bf00      	nop
  for(i = 0; i < mNumOfSensors; i++)
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	73fb      	strb	r3, [r7, #15]
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <SENS_Update_1s+0x270>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	7bfa      	ldrb	r2, [r7, #15]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	f4ff aee3 	bcc.w	8001950 <SENS_Update_1s+0xc>
    }
  }

  scd_timer++;
 8001b8a:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <SENS_Update_1s+0x26c>)
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <SENS_Update_1s+0x26c>)
 8001b94:	801a      	strh	r2, [r3, #0]
  if (scd_timer > 6) scd_timer = 0;
 8001b96:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <SENS_Update_1s+0x26c>)
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	2b06      	cmp	r3, #6
 8001b9c:	d902      	bls.n	8001ba4 <SENS_Update_1s+0x260>
 8001b9e:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <SENS_Update_1s+0x26c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	801a      	strh	r2, [r3, #0]
}
 8001ba4:	bf00      	nop
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	2000067c 	.word	0x2000067c
 8001bb0:	200006f8 	.word	0x200006f8
 8001bb4:	200006f4 	.word	0x200006f4

08001bb8 <Read_SHT4x>:



int16_t Read_SHT4x(sI2cSensor* sens, int16_t* temperature, int16_t* humidity)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08e      	sub	sp, #56	; 0x38
 8001bbc:	af02      	add	r7, sp, #8
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  int16_t temp;
  int16_t rh;
  uint16_t temp_raw;
  uint16_t rh_raw;

  txData[0] = 0xFD;
 8001bc4:	23fd      	movs	r3, #253	; 0xfd
 8001bc6:	743b      	strb	r3, [r7, #16]

  if(HAL_OK != HAL_I2C_Master_Transmit(sens->BusHandle, 0x88, txData, 1, 50))
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6858      	ldr	r0, [r3, #4]
 8001bcc:	f107 0210 	add.w	r2, r7, #16
 8001bd0:	2332      	movs	r3, #50	; 0x32
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	2188      	movs	r1, #136	; 0x88
 8001bd8:	f003 ff42 	bl	8005a60 <HAL_I2C_Master_Transmit>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <Read_SHT4x+0x2e>
  {
    return 1;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e057      	b.n	8001c96 <Read_SHT4x+0xde>
  }
  HAL_Delay(20);
 8001be6:	2014      	movs	r0, #20
 8001be8:	f002 fc58 	bl	800449c <HAL_Delay>
  if(HAL_OK != HAL_I2C_Master_Receive(sens->BusHandle, 0x89, rxData, 6, 50))
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6858      	ldr	r0, [r3, #4]
 8001bf0:	f107 021c 	add.w	r2, r7, #28
 8001bf4:	2332      	movs	r3, #50	; 0x32
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	2306      	movs	r3, #6
 8001bfa:	2189      	movs	r1, #137	; 0x89
 8001bfc:	f004 f82e 	bl	8005c5c <HAL_I2C_Master_Receive>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <Read_SHT4x+0x52>
  {
    return 1;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e045      	b.n	8001c96 <Read_SHT4x+0xde>
  }
  temp_raw = (uint16_t)rxData[0] * 256 + rxData[1];
 8001c0a:	7f3b      	ldrb	r3, [r7, #28]
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	021b      	lsls	r3, r3, #8
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	7f7b      	ldrb	r3, [r7, #29]
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	4413      	add	r3, r2
 8001c18:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rh_raw = (uint16_t)rxData[3] * 256 + rxData[4];
 8001c1a:	7ffb      	ldrb	r3, [r7, #31]
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	021b      	lsls	r3, r3, #8
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	4413      	add	r3, r2
 8001c2a:	857b      	strh	r3, [r7, #42]	; 0x2a
  temp = -450 + (1750 * temp_raw)/0xFFFF;
 8001c2c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001c2e:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8001c32:	fb02 f303 	mul.w	r3, r2, r3
 8001c36:	4a1a      	ldr	r2, [pc, #104]	; (8001ca0 <Read_SHT4x+0xe8>)
 8001c38:	fb82 1203 	smull	r1, r2, r2, r3
 8001c3c:	441a      	add	r2, r3
 8001c3e:	13d2      	asrs	r2, r2, #15
 8001c40:	17db      	asrs	r3, r3, #31
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	f5a3 73e1 	sub.w	r3, r3, #450	; 0x1c2
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	853b      	strh	r3, [r7, #40]	; 0x28
  rh = -6 + (125 * rh_raw)/0xFFFF;
 8001c4e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001c50:	4613      	mov	r3, r2
 8001c52:	015b      	lsls	r3, r3, #5
 8001c54:	1a9b      	subs	r3, r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	4a11      	ldr	r2, [pc, #68]	; (8001ca0 <Read_SHT4x+0xe8>)
 8001c5c:	fb82 1203 	smull	r1, r2, r2, r3
 8001c60:	441a      	add	r2, r3
 8001c62:	13d2      	asrs	r2, r2, #15
 8001c64:	17db      	asrs	r3, r3, #31
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	3b06      	subs	r3, #6
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  if (rh > 100) rh = 100;
 8001c70:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001c74:	2b64      	cmp	r3, #100	; 0x64
 8001c76:	dd01      	ble.n	8001c7c <Read_SHT4x+0xc4>
 8001c78:	2364      	movs	r3, #100	; 0x64
 8001c7a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  if (rh < 0) rh = 0;
 8001c7c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	da01      	bge.n	8001c88 <Read_SHT4x+0xd0>
 8001c84:	2300      	movs	r3, #0
 8001c86:	85fb      	strh	r3, [r7, #46]	; 0x2e
  *temperature = temp;
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001c8c:	801a      	strh	r2, [r3, #0]
  *humidity = rh;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001c92:	801a      	strh	r2, [r3, #0]
  return 0;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3730      	adds	r7, #48	; 0x30
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	80008001 	.word	0x80008001

08001ca4 <SCD4x_StartMeasurement>:


int16_t SCD4x_StartMeasurement(sI2cSensor* sens)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	; 0x28
 8001ca8:	af02      	add	r7, sp, #8
 8001caa:	6078      	str	r0, [r7, #4]
  uint8_t rxData[10];
  uint8_t txData[10];

  txData[0] = 0x21;
 8001cac:	2321      	movs	r3, #33	; 0x21
 8001cae:	723b      	strb	r3, [r7, #8]
  txData[1] = 0xB1;
 8001cb0:	23b1      	movs	r3, #177	; 0xb1
 8001cb2:	727b      	strb	r3, [r7, #9]
  uint8_t wradd = (SENS_I2C_ADR_SCD41 << 1);
 8001cb4:	23c4      	movs	r3, #196	; 0xc4
 8001cb6:	77fb      	strb	r3, [r7, #31]
  uint8_t readd = (SENS_I2C_ADR_SCD41 << 1) | 0x01;
 8001cb8:	23c5      	movs	r3, #197	; 0xc5
 8001cba:	77bb      	strb	r3, [r7, #30]

  if(HAL_OK != HAL_I2C_Master_Transmit(sens->BusHandle, wradd, txData, 2, 50))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6858      	ldr	r0, [r3, #4]
 8001cc0:	7ffb      	ldrb	r3, [r7, #31]
 8001cc2:	b299      	uxth	r1, r3
 8001cc4:	f107 0208 	add.w	r2, r7, #8
 8001cc8:	2332      	movs	r3, #50	; 0x32
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	2302      	movs	r3, #2
 8001cce:	f003 fec7 	bl	8005a60 <HAL_I2C_Master_Transmit>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <SCD4x_StartMeasurement+0x38>
  {
    return 1;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e7ff      	b.n	8001cdc <SCD4x_StartMeasurement+0x38>
  }
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3720      	adds	r7, #32
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <SCD4x_SetAltitude>:
  }
}


int16_t SCD4x_SetAltitude(sI2cSensor* sens, uint16_t alt)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af02      	add	r7, sp, #8
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	807b      	strh	r3, [r7, #2]
  uint8_t rxData[10];
  uint8_t txData[10];

  txData[0] = 0x24;
 8001cf0:	2324      	movs	r3, #36	; 0x24
 8001cf2:	723b      	strb	r3, [r7, #8]
  txData[1] = 0x27;
 8001cf4:	2327      	movs	r3, #39	; 0x27
 8001cf6:	727b      	strb	r3, [r7, #9]
  txData[2] = alt / 0xff;
 8001cf8:	887b      	ldrh	r3, [r7, #2]
 8001cfa:	4a15      	ldr	r2, [pc, #84]	; (8001d50 <SCD4x_SetAltitude+0x6c>)
 8001cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001d00:	09db      	lsrs	r3, r3, #7
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	72bb      	strb	r3, [r7, #10]
  txData[3] = (alt & 0xFF);
 8001d08:	887b      	ldrh	r3, [r7, #2]
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	72fb      	strb	r3, [r7, #11]
  txData[4] = CalculateCRC(&(txData[2]),2);
 8001d0e:	f107 0308 	add.w	r3, r7, #8
 8001d12:	3302      	adds	r3, #2
 8001d14:	2102      	movs	r1, #2
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 f908 	bl	8001f2c <CalculateCRC>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	733b      	strb	r3, [r7, #12]

  uint8_t wradd = (SENS_I2C_ADR_SCD41 << 1);
 8001d20:	23c4      	movs	r3, #196	; 0xc4
 8001d22:	77fb      	strb	r3, [r7, #31]
  uint8_t readd = (SENS_I2C_ADR_SCD41 << 1) | 0x01;
 8001d24:	23c5      	movs	r3, #197	; 0xc5
 8001d26:	77bb      	strb	r3, [r7, #30]

  if(HAL_OK != HAL_I2C_Master_Transmit(sens->BusHandle, wradd, txData, 5, 50))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6858      	ldr	r0, [r3, #4]
 8001d2c:	7ffb      	ldrb	r3, [r7, #31]
 8001d2e:	b299      	uxth	r1, r3
 8001d30:	f107 0208 	add.w	r2, r7, #8
 8001d34:	2332      	movs	r3, #50	; 0x32
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	2305      	movs	r3, #5
 8001d3a:	f003 fe91 	bl	8005a60 <HAL_I2C_Master_Transmit>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <SCD4x_SetAltitude+0x64>
  {
    return 1;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e7ff      	b.n	8001d48 <SCD4x_SetAltitude+0x64>
  }
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3720      	adds	r7, #32
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	80808081 	.word	0x80808081

08001d54 <SCD4x_Read>:



int16_t SCD4x_Read(sI2cSensor* sens, int16_t* co2, int16_t* temperature, int16_t* humidity)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b090      	sub	sp, #64	; 0x40
 8001d58:	af02      	add	r7, sp, #8
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
 8001d60:	603b      	str	r3, [r7, #0]

  uint16_t temp_raw;
  uint16_t rh_raw;
  uint16_t co2_raw;

  uint8_t wradd = (SENS_I2C_ADR_SCD41 << 1);
 8001d62:	23c4      	movs	r3, #196	; 0xc4
 8001d64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint8_t readd = (SENS_I2C_ADR_SCD41 << 1) | 0x01;
 8001d68:	23c5      	movs	r3, #197	; 0xc5
 8001d6a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

  txData[0] = 0xEC;
 8001d6e:	23ec      	movs	r3, #236	; 0xec
 8001d70:	753b      	strb	r3, [r7, #20]
  txData[1] = 0x05;
 8001d72:	2305      	movs	r3, #5
 8001d74:	757b      	strb	r3, [r7, #21]

  if(HAL_OK != HAL_I2C_Master_Transmit(sens->BusHandle, wradd, txData, 2, 50))
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6858      	ldr	r0, [r3, #4]
 8001d7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001d7e:	b299      	uxth	r1, r3
 8001d80:	f107 0214 	add.w	r2, r7, #20
 8001d84:	2332      	movs	r3, #50	; 0x32
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	2302      	movs	r3, #2
 8001d8a:	f003 fe69 	bl	8005a60 <HAL_I2C_Master_Transmit>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <SCD4x_Read+0x44>
  {
    return 1;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e058      	b.n	8001e4a <SCD4x_Read+0xf6>
  }
  HAL_Delay(5);
 8001d98:	2005      	movs	r0, #5
 8001d9a:	f002 fb7f 	bl	800449c <HAL_Delay>
  if(HAL_OK != HAL_I2C_Master_Receive(sens->BusHandle, readd, rxData, 9, 100))
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6858      	ldr	r0, [r3, #4]
 8001da2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001da6:	b299      	uxth	r1, r3
 8001da8:	f107 0220 	add.w	r2, r7, #32
 8001dac:	2364      	movs	r3, #100	; 0x64
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	2309      	movs	r3, #9
 8001db2:	f003 ff53 	bl	8005c5c <HAL_I2C_Master_Receive>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <SCD4x_Read+0x6c>
  {
    return 1;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e044      	b.n	8001e4a <SCD4x_Read+0xf6>
  }
  co2_raw = (uint16_t)rxData[0] * 256 + rxData[1];
 8001dc0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	021b      	lsls	r3, r3, #8
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	86bb      	strh	r3, [r7, #52]	; 0x34
  temp_raw = (uint16_t)rxData[3] * 256 + rxData[4];
 8001dd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	021b      	lsls	r3, r3, #8
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	4413      	add	r3, r2
 8001de6:	867b      	strh	r3, [r7, #50]	; 0x32
  rh_raw = (uint16_t)rxData[6] * 256 + rxData[7];
 8001de8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	021b      	lsls	r3, r3, #8
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	4413      	add	r3, r2
 8001dfa:	863b      	strh	r3, [r7, #48]	; 0x30
  co = co2_raw;
 8001dfc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001dfe:	85fb      	strh	r3, [r7, #46]	; 0x2e
  temp = -45 + (175 * temp_raw)/0xFFFF;
 8001e00:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001e02:	22af      	movs	r2, #175	; 0xaf
 8001e04:	fb02 f303 	mul.w	r3, r2, r3
 8001e08:	4a12      	ldr	r2, [pc, #72]	; (8001e54 <SCD4x_Read+0x100>)
 8001e0a:	fb82 1203 	smull	r1, r2, r2, r3
 8001e0e:	441a      	add	r2, r3
 8001e10:	13d2      	asrs	r2, r2, #15
 8001e12:	17db      	asrs	r3, r3, #31
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	3b2d      	subs	r3, #45	; 0x2d
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rh = (100 * rh_raw)/0xFFFF;
 8001e1e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001e20:	2264      	movs	r2, #100	; 0x64
 8001e22:	fb02 f303 	mul.w	r3, r2, r3
 8001e26:	4a0b      	ldr	r2, [pc, #44]	; (8001e54 <SCD4x_Read+0x100>)
 8001e28:	fb82 1203 	smull	r1, r2, r2, r3
 8001e2c:	441a      	add	r2, r3
 8001e2e:	13d2      	asrs	r2, r2, #15
 8001e30:	17db      	asrs	r3, r3, #31
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	857b      	strh	r3, [r7, #42]	; 0x2a
  *co2 = co;
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001e3a:	801a      	strh	r2, [r3, #0]
  *temperature = temp;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001e40:	801a      	strh	r2, [r3, #0]
  *humidity = rh;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001e46:	801a      	strh	r2, [r3, #0]
  return 0;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3738      	adds	r7, #56	; 0x38
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	80008001 	.word	0x80008001

08001e58 <SDPx_StartMeasurement>:




int16_t SDPx_StartMeasurement(sI2cSensor* sens)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08a      	sub	sp, #40	; 0x28
 8001e5c:	af02      	add	r7, sp, #8
 8001e5e:	6078      	str	r0, [r7, #4]
  uint8_t rxData[10];
  uint8_t txData[10];

  txData[0] = 0x36;
 8001e60:	2336      	movs	r3, #54	; 0x36
 8001e62:	723b      	strb	r3, [r7, #8]
  txData[1] = 0x15;
 8001e64:	2315      	movs	r3, #21
 8001e66:	727b      	strb	r3, [r7, #9]
  uint8_t wradd = (SENS_I2C_ADR_SDP810 << 1);
 8001e68:	234a      	movs	r3, #74	; 0x4a
 8001e6a:	77fb      	strb	r3, [r7, #31]
  uint8_t readd = (SENS_I2C_ADR_SDP810 << 1) | 0x01;
 8001e6c:	234b      	movs	r3, #75	; 0x4b
 8001e6e:	77bb      	strb	r3, [r7, #30]

  if(HAL_OK != HAL_I2C_Master_Transmit(sens->BusHandle, wradd, txData, 2, 50))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6858      	ldr	r0, [r3, #4]
 8001e74:	7ffb      	ldrb	r3, [r7, #31]
 8001e76:	b299      	uxth	r1, r3
 8001e78:	f107 0208 	add.w	r2, r7, #8
 8001e7c:	2332      	movs	r3, #50	; 0x32
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	2302      	movs	r3, #2
 8001e82:	f003 fded 	bl	8005a60 <HAL_I2C_Master_Transmit>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <SDPx_StartMeasurement+0x38>
  {
    return 1;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e7ff      	b.n	8001e90 <SDPx_StartMeasurement+0x38>
  }
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3720      	adds	r7, #32
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <SDPx_Read>:
    return 1;
  }
}

int16_t SDPx_Read(sI2cSensor* sens, int16_t* dp)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08c      	sub	sp, #48	; 0x30
 8001e9c:	af02      	add	r7, sp, #8
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]

  int16_t pressure_raw;
  int16_t pressure;
  int16_t temp;

  uint8_t wradd = (SENS_I2C_ADR_SDP810 << 1);
 8001ea2:	234a      	movs	r3, #74	; 0x4a
 8001ea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t readd = (SENS_I2C_ADR_SDP810 << 1) | 0x01;
 8001ea8:	234b      	movs	r3, #75	; 0x4b
 8001eaa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


  if(HAL_OK != HAL_I2C_Master_Receive(sens->BusHandle, readd, rxData, 9, 100))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6858      	ldr	r0, [r3, #4]
 8001eb2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001eb6:	b299      	uxth	r1, r3
 8001eb8:	f107 0214 	add.w	r2, r7, #20
 8001ebc:	2364      	movs	r3, #100	; 0x64
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	2309      	movs	r3, #9
 8001ec2:	f003 fecb 	bl	8005c5c <HAL_I2C_Master_Receive>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <SDPx_Read+0x38>
  {
    return 1;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e022      	b.n	8001f16 <SDPx_Read+0x7e>
  }
  pressure_raw = (((int16_t)rxData[0] << 8) | rxData[1]);
 8001ed0:	7d3b      	ldrb	r3, [r7, #20]
 8001ed2:	021b      	lsls	r3, r3, #8
 8001ed4:	b21a      	sxth	r2, r3
 8001ed6:	7d7b      	ldrb	r3, [r7, #21]
 8001ed8:	b21b      	sxth	r3, r3
 8001eda:	4313      	orrs	r3, r2
 8001edc:	84bb      	strh	r3, [r7, #36]	; 0x24
  pressure = pressure_raw / 240;
 8001ede:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001ee2:	4a0f      	ldr	r2, [pc, #60]	; (8001f20 <SDPx_Read+0x88>)
 8001ee4:	fb82 1203 	smull	r1, r2, r2, r3
 8001ee8:	441a      	add	r2, r3
 8001eea:	11d2      	asrs	r2, r2, #7
 8001eec:	17db      	asrs	r3, r3, #31
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	847b      	strh	r3, [r7, #34]	; 0x22
  temp =  ((uint16_t)rxData[3] * 256 + rxData[4])/200;
 8001ef2:	7dfb      	ldrb	r3, [r7, #23]
 8001ef4:	021b      	lsls	r3, r3, #8
 8001ef6:	7e3a      	ldrb	r2, [r7, #24]
 8001ef8:	4413      	add	r3, r2
 8001efa:	4a0a      	ldr	r2, [pc, #40]	; (8001f24 <SDPx_Read+0x8c>)
 8001efc:	fb82 1203 	smull	r1, r2, r2, r3
 8001f00:	1192      	asrs	r2, r2, #6
 8001f02:	17db      	asrs	r3, r3, #31
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	843b      	strh	r3, [r7, #32]
  *dp = pressure;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001f0c:	801a      	strh	r2, [r3, #0]
  mDP = pressure;
 8001f0e:	4a06      	ldr	r2, [pc, #24]	; (8001f28 <SDPx_Read+0x90>)
 8001f10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f12:	8013      	strh	r3, [r2, #0]
  return 0;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3728      	adds	r7, #40	; 0x28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	88888889 	.word	0x88888889
 8001f24:	51eb851f 	.word	0x51eb851f
 8001f28:	200006f6 	.word	0x200006f6

08001f2c <CalculateCRC>:




static uint8_t CalculateCRC(uint8_t* data, uint8_t len)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	70fb      	strb	r3, [r7, #3]
  uint16_t current_byte;
  uint8_t crc = CRC8_INIT;
 8001f38:	23ff      	movs	r3, #255	; 0xff
 8001f3a:	737b      	strb	r3, [r7, #13]
  uint8_t crc_bit;
  /* calculates 8-Bit checksum with given polynomial */
  for (current_byte = 0; current_byte < len; ++current_byte)
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	81fb      	strh	r3, [r7, #14]
 8001f40:	e021      	b.n	8001f86 <CalculateCRC+0x5a>
  {
    crc ^= (data[current_byte]);
 8001f42:	89fb      	ldrh	r3, [r7, #14]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	4413      	add	r3, r2
 8001f48:	781a      	ldrb	r2, [r3, #0]
 8001f4a:	7b7b      	ldrb	r3, [r7, #13]
 8001f4c:	4053      	eors	r3, r2
 8001f4e:	737b      	strb	r3, [r7, #13]
    for (crc_bit = 8; crc_bit > 0; --crc_bit)
 8001f50:	2308      	movs	r3, #8
 8001f52:	733b      	strb	r3, [r7, #12]
 8001f54:	e011      	b.n	8001f7a <CalculateCRC+0x4e>
    {
      if (crc & 0x80)
 8001f56:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	da07      	bge.n	8001f6e <CalculateCRC+0x42>
      {
        crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8001f5e:	7b7b      	ldrb	r3, [r7, #13]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	b25b      	sxtb	r3, r3
 8001f64:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8001f68:	b25b      	sxtb	r3, r3
 8001f6a:	737b      	strb	r3, [r7, #13]
 8001f6c:	e002      	b.n	8001f74 <CalculateCRC+0x48>
      }
      else
      {
        crc = (crc << 1);
 8001f6e:	7b7b      	ldrb	r3, [r7, #13]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	737b      	strb	r3, [r7, #13]
    for (crc_bit = 8; crc_bit > 0; --crc_bit)
 8001f74:	7b3b      	ldrb	r3, [r7, #12]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	733b      	strb	r3, [r7, #12]
 8001f7a:	7b3b      	ldrb	r3, [r7, #12]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1ea      	bne.n	8001f56 <CalculateCRC+0x2a>
  for (current_byte = 0; current_byte < len; ++current_byte)
 8001f80:	89fb      	ldrh	r3, [r7, #14]
 8001f82:	3301      	adds	r3, #1
 8001f84:	81fb      	strh	r3, [r7, #14]
 8001f86:	78fb      	ldrb	r3, [r7, #3]
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	89fa      	ldrh	r2, [r7, #14]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d3d8      	bcc.n	8001f42 <CalculateCRC+0x16>
      }
    }
  }
  return crc;
 8001f90:	7b7b      	ldrb	r3, [r7, #13]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <TEMP_Init>:
/* Private methods */

/* Public methods */

void TEMP_Init(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
	mTimer = 0;
 8001fa4:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <TEMP_Init+0x2c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	801a      	strh	r2, [r3, #0]
	mReadId = 0;
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <TEMP_Init+0x30>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	701a      	strb	r2, [r3, #0]
	mConvertId = 0;
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <TEMP_Init+0x34>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
	mNumOfAssignedSensors = 0;
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <TEMP_Init+0x38>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]
	mNumOfBuses = 0;
 8001fbc:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <TEMP_Init+0x3c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]
}
 8001fc2:	bf00      	nop
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	200008dc 	.word	0x200008dc
 8001fd0:	200008de 	.word	0x200008de
 8001fd4:	200008df 	.word	0x200008df
 8001fd8:	200006fa 	.word	0x200006fa
 8001fdc:	200008e0 	.word	0x200008e0

08001fe0 <TEMP_Update100ms>:

void TEMP_Update100ms(void)
{
 8001fe0:	b590      	push	{r4, r7, lr}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
	// cyclically read all assigned sensors and trig the conversion

	if (mTimer == 0)
 8001fe6:	4b85      	ldr	r3, [pc, #532]	; (80021fc <TEMP_Update100ms+0x21c>)
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f040 80ab 	bne.w	8002146 <TEMP_Update100ms+0x166>
	{
		// copy results to VARS
		int i;
		for(i = 0; i < mNumOfAssignedSensors; i++)
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	607b      	str	r3, [r7, #4]
 8001ff4:	e0a0      	b.n	8002138 <TEMP_Update100ms+0x158>
		{
			mSensors[i].errorCnt++;  // just assume error to simplify the code :-)
 8001ff6:	4982      	ldr	r1, [pc, #520]	; (8002200 <TEMP_Update100ms+0x220>)
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4413      	add	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	440b      	add	r3, r1
 8002004:	330b      	adds	r3, #11
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	3301      	adds	r3, #1
 800200a:	b2d8      	uxtb	r0, r3
 800200c:	497c      	ldr	r1, [pc, #496]	; (8002200 <TEMP_Update100ms+0x220>)
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	330b      	adds	r3, #11
 800201c:	4602      	mov	r2, r0
 800201e:	701a      	strb	r2, [r3, #0]
			// check the validity of last readout
			if ((mSensors[i].rawTempC_10ths >= -300) && (mSensors[i].rawTempC_10ths <= 1250) && mSensors[i].status == ets_Valid)  // valid range from -30 to 125 deg C
 8002020:	4977      	ldr	r1, [pc, #476]	; (8002200 <TEMP_Update100ms+0x220>)
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4413      	add	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	3304      	adds	r3, #4
 8002030:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002034:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 8002038:	db4e      	blt.n	80020d8 <TEMP_Update100ms+0xf8>
 800203a:	4971      	ldr	r1, [pc, #452]	; (8002200 <TEMP_Update100ms+0x220>)
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	3304      	adds	r3, #4
 800204a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800204e:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8002052:	4293      	cmp	r3, r2
 8002054:	dc40      	bgt.n	80020d8 <TEMP_Update100ms+0xf8>
 8002056:	496a      	ldr	r1, [pc, #424]	; (8002200 <TEMP_Update100ms+0x220>)
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	4413      	add	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	3306      	adds	r3, #6
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d135      	bne.n	80020d8 <TEMP_Update100ms+0xf8>
			{
				mSensors[i].errorCnt = 0;
 800206c:	4964      	ldr	r1, [pc, #400]	; (8002200 <TEMP_Update100ms+0x220>)
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	4413      	add	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	330b      	adds	r3, #11
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
				mSensors[i].tempC_10ths = mSensors[i].rawTempC_10ths;  // copy the raw value to valid value
 8002080:	495f      	ldr	r1, [pc, #380]	; (8002200 <TEMP_Update100ms+0x220>)
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	4613      	mov	r3, r2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	4413      	add	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	440b      	add	r3, r1
 800208e:	3304      	adds	r3, #4
 8002090:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002094:	495a      	ldr	r1, [pc, #360]	; (8002200 <TEMP_Update100ms+0x220>)
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	4613      	mov	r3, r2
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	4413      	add	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	440b      	add	r3, r1
 80020a2:	3302      	adds	r3, #2
 80020a4:	4602      	mov	r2, r0
 80020a6:	801a      	strh	r2, [r3, #0]
				VAR_SetVariable(mSensors[i].VarId, mSensors[i].tempC_10ths, 1);
 80020a8:	4955      	ldr	r1, [pc, #340]	; (8002200 <TEMP_Update100ms+0x220>)
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	4613      	mov	r3, r2
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	4413      	add	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	3308      	adds	r3, #8
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	b2d8      	uxtb	r0, r3
 80020bc:	4950      	ldr	r1, [pc, #320]	; (8002200 <TEMP_Update100ms+0x220>)
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	4413      	add	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	3302      	adds	r3, #2
 80020cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020d0:	2201      	movs	r2, #1
 80020d2:	4619      	mov	r1, r3
 80020d4:	f000 fca0 	bl	8002a18 <VAR_SetVariable>
			}

			if (mSensors[i].errorCnt > MAX_ERR_TO_INVALIDATE)
 80020d8:	4949      	ldr	r1, [pc, #292]	; (8002200 <TEMP_Update100ms+0x220>)
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	4413      	add	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	330b      	adds	r3, #11
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b05      	cmp	r3, #5
 80020ec:	d921      	bls.n	8002132 <TEMP_Update100ms+0x152>
			{
				mSensors[i].errorCnt = 0;
 80020ee:	4944      	ldr	r1, [pc, #272]	; (8002200 <TEMP_Update100ms+0x220>)
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	4413      	add	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	330b      	adds	r3, #11
 80020fe:	2200      	movs	r2, #0
 8002100:	701a      	strb	r2, [r3, #0]
				VAR_SetVariable(mSensors[i].VarId, mSensors[i].tempC_10ths, 0);  // set invalid flag also to variables..
 8002102:	493f      	ldr	r1, [pc, #252]	; (8002200 <TEMP_Update100ms+0x220>)
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	4413      	add	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	3308      	adds	r3, #8
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	b2d8      	uxtb	r0, r3
 8002116:	493a      	ldr	r1, [pc, #232]	; (8002200 <TEMP_Update100ms+0x220>)
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	4413      	add	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	440b      	add	r3, r1
 8002124:	3302      	adds	r3, #2
 8002126:	f9b3 3000 	ldrsh.w	r3, [r3]
 800212a:	2200      	movs	r2, #0
 800212c:	4619      	mov	r1, r3
 800212e:	f000 fc73 	bl	8002a18 <VAR_SetVariable>
		for(i = 0; i < mNumOfAssignedSensors; i++)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3301      	adds	r3, #1
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	4b32      	ldr	r3, [pc, #200]	; (8002204 <TEMP_Update100ms+0x224>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	461a      	mov	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4293      	cmp	r3, r2
 8002142:	f6ff af58 	blt.w	8001ff6 <TEMP_Update100ms+0x16>
		}
		// trig conversion

	}

	if (mTimer < mNumOfBuses)
 8002146:	4b30      	ldr	r3, [pc, #192]	; (8002208 <TEMP_Update100ms+0x228>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	b29a      	uxth	r2, r3
 800214c:	4b2b      	ldr	r3, [pc, #172]	; (80021fc <TEMP_Update100ms+0x21c>)
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d905      	bls.n	8002160 <TEMP_Update100ms+0x180>
	{
		OW_ConvertAll(mTimer);  //  convert one Bus
 8002154:	4b29      	ldr	r3, [pc, #164]	; (80021fc <TEMP_Update100ms+0x21c>)
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff f822 	bl	80011a4 <OW_ConvertAll>
	}


	if (mTimer > 20)  // 2 sec delay
 8002160:	4b26      	ldr	r3, [pc, #152]	; (80021fc <TEMP_Update100ms+0x21c>)
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	2b14      	cmp	r3, #20
 8002166:	d933      	bls.n	80021d0 <TEMP_Update100ms+0x1f0>
	{

		OW_ReadSensor(mSensors[mReadId].owBusId,
 8002168:	4b28      	ldr	r3, [pc, #160]	; (800220c <TEMP_Update100ms+0x22c>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	4619      	mov	r1, r3
 800216e:	4a24      	ldr	r2, [pc, #144]	; (8002200 <TEMP_Update100ms+0x220>)
 8002170:	460b      	mov	r3, r1
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	440b      	add	r3, r1
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	330a      	adds	r3, #10
 800217c:	7818      	ldrb	r0, [r3, #0]
									&(mSensorsAddress[mSensors[mReadId].sensorId]),
 800217e:	4b23      	ldr	r3, [pc, #140]	; (800220c <TEMP_Update100ms+0x22c>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	4619      	mov	r1, r3
 8002184:	4a1e      	ldr	r2, [pc, #120]	; (8002200 <TEMP_Update100ms+0x220>)
 8002186:	460b      	mov	r3, r1
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	440b      	add	r3, r1
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4a1e      	ldr	r2, [pc, #120]	; (8002210 <TEMP_Update100ms+0x230>)
 8002196:	1899      	adds	r1, r3, r2
									&(mSensors[mReadId].rawTempC_10ths),
 8002198:	4b1c      	ldr	r3, [pc, #112]	; (800220c <TEMP_Update100ms+0x22c>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	461a      	mov	r2, r3
		OW_ReadSensor(mSensors[mReadId].owBusId,
 800219e:	4613      	mov	r3, r2
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	4413      	add	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4a16      	ldr	r2, [pc, #88]	; (8002200 <TEMP_Update100ms+0x220>)
 80021a8:	4413      	add	r3, r2
 80021aa:	1d1a      	adds	r2, r3, #4
									&(mSensors[mReadId].status));
 80021ac:	4b17      	ldr	r3, [pc, #92]	; (800220c <TEMP_Update100ms+0x22c>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	461c      	mov	r4, r3
 80021b2:	4623      	mov	r3, r4
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	4423      	add	r3, r4
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4c11      	ldr	r4, [pc, #68]	; (8002200 <TEMP_Update100ms+0x220>)
 80021bc:	4423      	add	r3, r4
 80021be:	3306      	adds	r3, #6
		OW_ReadSensor(mSensors[mReadId].owBusId,
 80021c0:	f7fe ff38 	bl	8001034 <OW_ReadSensor>
		mReadId++;
 80021c4:	4b11      	ldr	r3, [pc, #68]	; (800220c <TEMP_Update100ms+0x22c>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	3301      	adds	r3, #1
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	4b0f      	ldr	r3, [pc, #60]	; (800220c <TEMP_Update100ms+0x22c>)
 80021ce:	701a      	strb	r2, [r3, #0]

	}
	mTimer++;
 80021d0:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <TEMP_Update100ms+0x21c>)
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	3301      	adds	r3, #1
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	4b08      	ldr	r3, [pc, #32]	; (80021fc <TEMP_Update100ms+0x21c>)
 80021da:	801a      	strh	r2, [r3, #0]

	if (mReadId >= mNumOfAssignedSensors)
 80021dc:	4b0b      	ldr	r3, [pc, #44]	; (800220c <TEMP_Update100ms+0x22c>)
 80021de:	781a      	ldrb	r2, [r3, #0]
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <TEMP_Update100ms+0x224>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d305      	bcc.n	80021f4 <TEMP_Update100ms+0x214>
	{
		mReadId = 0;
 80021e8:	4b08      	ldr	r3, [pc, #32]	; (800220c <TEMP_Update100ms+0x22c>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	701a      	strb	r2, [r3, #0]
		mTimer = 0;
 80021ee:	4b03      	ldr	r3, [pc, #12]	; (80021fc <TEMP_Update100ms+0x21c>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	801a      	strh	r2, [r3, #0]
	}

}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd90      	pop	{r4, r7, pc}
 80021fc:	200008dc 	.word	0x200008dc
 8002200:	200006fc 	.word	0x200006fc
 8002204:	200006fa 	.word	0x200006fa
 8002208:	200008e0 	.word	0x200008e0
 800220c:	200008de 	.word	0x200008de
 8002210:	20000000 	.word	0x20000000

08002214 <TEMP_AddHwBus>:

uint8_t TEMP_AddHwBus(uint8_t busId, GPIO_TypeDef* port, uint32_t pin)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
 8002220:	73fb      	strb	r3, [r7, #15]
	if (mNumOfBuses < MAX_NUM_OF_BUSES)
 8002222:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <TEMP_AddHwBus+0x3c>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d80d      	bhi.n	8002246 <TEMP_AddHwBus+0x32>
	{
		OW_AddBus(busId,port, pin);
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	68b9      	ldr	r1, [r7, #8]
 8002230:	4618      	mov	r0, r3
 8002232:	f7fe fe99 	bl	8000f68 <OW_AddBus>
		mNumOfBuses ++;
 8002236:	4b06      	ldr	r3, [pc, #24]	; (8002250 <TEMP_AddHwBus+0x3c>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	3301      	adds	r3, #1
 800223c:	b2da      	uxtb	r2, r3
 800223e:	4b04      	ldr	r3, [pc, #16]	; (8002250 <TEMP_AddHwBus+0x3c>)
 8002240:	701a      	strb	r2, [r3, #0]
		return 0;
 8002242:	2300      	movs	r3, #0
 8002244:	e000      	b.n	8002248 <TEMP_AddHwBus+0x34>
	}
	else
	{
		return 1;
 8002246:	2301      	movs	r3, #1
	}

}
 8002248:	4618      	mov	r0, r3
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	200008e0 	.word	0x200008e0

08002254 <TEMP_AssignSensor>:



uint8_t TEMP_AssignSensor(uint8_t sensorId, uint8_t varId, uint8_t busId)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	71fb      	strb	r3, [r7, #7]
 800225e:	460b      	mov	r3, r1
 8002260:	71bb      	strb	r3, [r7, #6]
 8002262:	4613      	mov	r3, r2
 8002264:	717b      	strb	r3, [r7, #5]
	if (mNumOfAssignedSensors < NUM_OF_ALL_SENSORS)
 8002266:	4b2e      	ldr	r3, [pc, #184]	; (8002320 <TEMP_AssignSensor+0xcc>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b27      	cmp	r3, #39	; 0x27
 800226c:	d851      	bhi.n	8002312 <TEMP_AssignSensor+0xbe>
	{
		mSensors[mNumOfAssignedSensors].sensorId = sensorId;
 800226e:	4b2c      	ldr	r3, [pc, #176]	; (8002320 <TEMP_AssignSensor+0xcc>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	4619      	mov	r1, r3
 8002274:	4a2b      	ldr	r2, [pc, #172]	; (8002324 <TEMP_AssignSensor+0xd0>)
 8002276:	460b      	mov	r3, r1
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	440b      	add	r3, r1
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	79fa      	ldrb	r2, [r7, #7]
 8002282:	701a      	strb	r2, [r3, #0]
		mSensors[mNumOfAssignedSensors].tempC_10ths = 0x8000;
 8002284:	4b26      	ldr	r3, [pc, #152]	; (8002320 <TEMP_AssignSensor+0xcc>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	4619      	mov	r1, r3
 800228a:	4a26      	ldr	r2, [pc, #152]	; (8002324 <TEMP_AssignSensor+0xd0>)
 800228c:	460b      	mov	r3, r1
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	440b      	add	r3, r1
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	3302      	adds	r3, #2
 8002298:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800229c:	801a      	strh	r2, [r3, #0]
		mSensors[mNumOfAssignedSensors].status = ets_NotValid;
 800229e:	4b20      	ldr	r3, [pc, #128]	; (8002320 <TEMP_AssignSensor+0xcc>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	4619      	mov	r1, r3
 80022a4:	4a1f      	ldr	r2, [pc, #124]	; (8002324 <TEMP_AssignSensor+0xd0>)
 80022a6:	460b      	mov	r3, r1
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	440b      	add	r3, r1
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	3306      	adds	r3, #6
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]
		mSensors[mNumOfAssignedSensors].VarId = varId;
 80022b6:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <TEMP_AssignSensor+0xcc>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	4619      	mov	r1, r3
 80022bc:	79bb      	ldrb	r3, [r7, #6]
 80022be:	b298      	uxth	r0, r3
 80022c0:	4a18      	ldr	r2, [pc, #96]	; (8002324 <TEMP_AssignSensor+0xd0>)
 80022c2:	460b      	mov	r3, r1
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	440b      	add	r3, r1
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	3308      	adds	r3, #8
 80022ce:	4602      	mov	r2, r0
 80022d0:	801a      	strh	r2, [r3, #0]
		mSensors[mNumOfAssignedSensors].owBusId = busId;
 80022d2:	4b13      	ldr	r3, [pc, #76]	; (8002320 <TEMP_AssignSensor+0xcc>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	4619      	mov	r1, r3
 80022d8:	4a12      	ldr	r2, [pc, #72]	; (8002324 <TEMP_AssignSensor+0xd0>)
 80022da:	460b      	mov	r3, r1
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	440b      	add	r3, r1
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	330a      	adds	r3, #10
 80022e6:	797a      	ldrb	r2, [r7, #5]
 80022e8:	701a      	strb	r2, [r3, #0]
		mSensors[mNumOfAssignedSensors].errorCnt = 0;
 80022ea:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <TEMP_AssignSensor+0xcc>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	4619      	mov	r1, r3
 80022f0:	4a0c      	ldr	r2, [pc, #48]	; (8002324 <TEMP_AssignSensor+0xd0>)
 80022f2:	460b      	mov	r3, r1
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	440b      	add	r3, r1
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	330b      	adds	r3, #11
 80022fe:	2200      	movs	r2, #0
 8002300:	701a      	strb	r2, [r3, #0]
		mNumOfAssignedSensors++;
 8002302:	4b07      	ldr	r3, [pc, #28]	; (8002320 <TEMP_AssignSensor+0xcc>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	3301      	adds	r3, #1
 8002308:	b2da      	uxtb	r2, r3
 800230a:	4b05      	ldr	r3, [pc, #20]	; (8002320 <TEMP_AssignSensor+0xcc>)
 800230c:	701a      	strb	r2, [r3, #0]
		return 0;
 800230e:	2300      	movs	r3, #0
 8002310:	e000      	b.n	8002314 <TEMP_AssignSensor+0xc0>
	}
	else
	{
		return 1;
 8002312:	2301      	movs	r3, #1
	}
}
 8002314:	4618      	mov	r0, r3
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	200006fa 	.word	0x200006fa
 8002324:	200006fc 	.word	0x200006fc

08002328 <UI_Init>:
void UI_Struct_Initialisation (sUI init_struct, sUI *target);



void UI_Init (sUIHwInit* hw)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b088      	sub	sp, #32
 800232c:	af02      	add	r7, sp, #8
 800232e:	6078      	str	r0, [r7, #4]
	sUI init_struct;
	
	init_struct.Status			= eUI_OFF;
 8002330:	2300      	movs	r3, #0
 8002332:	72bb      	strb	r3, [r7, #10]
	init_struct.Led_Cnt			= 0x00;
 8002334:	2300      	movs	r3, #0
 8002336:	813b      	strh	r3, [r7, #8]
	
	init_struct.Pin					= hw->Led_Life.Pin;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	613b      	str	r3, [r7, #16]
	init_struct.Port				= hw->Led_Life.Port;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	60fb      	str	r3, [r7, #12]
	init_struct.Logic				= hw->Led_Life.Logic;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	7a1b      	ldrb	r3, [r3, #8]
 8002348:	753b      	strb	r3, [r7, #20]
	UI_Struct_Initialisation (init_struct, &LED_Life);
 800234a:	4b27      	ldr	r3, [pc, #156]	; (80023e8 <UI_Init+0xc0>)
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	f107 0308 	add.w	r3, r7, #8
 8002352:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002354:	f000 f852 	bl	80023fc <UI_Struct_Initialisation>
	
	init_struct.Pin					= hw->Led_R.Pin;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	613b      	str	r3, [r7, #16]
	init_struct.Port				= hw->Led_R.Port;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	60fb      	str	r3, [r7, #12]
	init_struct.Logic				= hw->Led_R.Logic;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	7d1b      	ldrb	r3, [r3, #20]
 8002368:	753b      	strb	r3, [r7, #20]
	UI_Struct_Initialisation (init_struct, &LED_R);
 800236a:	4b20      	ldr	r3, [pc, #128]	; (80023ec <UI_Init+0xc4>)
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	f107 0308 	add.w	r3, r7, #8
 8002372:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002374:	f000 f842 	bl	80023fc <UI_Struct_Initialisation>

#ifndef LIMITED_UI

	init_struct.Pin					= hw->Led_G.Pin;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	613b      	str	r3, [r7, #16]
	init_struct.Port				= hw->Led_G.Port;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	60fb      	str	r3, [r7, #12]
	init_struct.Logic				= hw->Led_G.Logic;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 3020 	ldrb.w	r3, [r3, #32]
 800238a:	753b      	strb	r3, [r7, #20]
	UI_Struct_Initialisation (init_struct, &LED_G);
 800238c:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <UI_Init+0xc8>)
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	f107 0308 	add.w	r3, r7, #8
 8002394:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002396:	f000 f831 	bl	80023fc <UI_Struct_Initialisation>

	init_struct.Pin					= hw->Led_B.Pin;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239e:	613b      	str	r3, [r7, #16]
	init_struct.Port				= hw->Led_B.Port;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	60fb      	str	r3, [r7, #12]
	init_struct.Logic				= hw->Led_B.Logic;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80023ac:	753b      	strb	r3, [r7, #20]
	UI_Struct_Initialisation (init_struct, &LED_B);
 80023ae:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <UI_Init+0xcc>)
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	f107 0308 	add.w	r3, r7, #8
 80023b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023b8:	f000 f820 	bl	80023fc <UI_Struct_Initialisation>

	init_struct.Pin					= hw->Buzzer.Pin;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c0:	613b      	str	r3, [r7, #16]
	init_struct.Port				= hw->Buzzer.Port;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	60fb      	str	r3, [r7, #12]
	init_struct.Logic				= hw->Buzzer.Logic;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023ce:	753b      	strb	r3, [r7, #20]
  UI_Struct_Initialisation (init_struct, &Buzzer);
 80023d0:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <UI_Init+0xd0>)
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	f107 0308 	add.w	r3, r7, #8
 80023d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023da:	f000 f80f 	bl	80023fc <UI_Struct_Initialisation>
#endif
}
 80023de:	bf00      	nop
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	200008e4 	.word	0x200008e4
 80023ec:	200008f4 	.word	0x200008f4
 80023f0:	20000904 	.word	0x20000904
 80023f4:	20000914 	.word	0x20000914
 80023f8:	20000924 	.word	0x20000924

080023fc <UI_Struct_Initialisation>:
/**
* @brief  Reading of actual states on defined Digital input
* @param	*di_input	Pointer to Digital input
*/
void UI_Struct_Initialisation (sUI init_struct, sUI *target)
{
 80023fc:	b590      	push	{r4, r7, lr}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	463c      	mov	r4, r7
 8002404:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	*target = init_struct;
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	461c      	mov	r4, r3
 800240c:	463b      	mov	r3, r7
 800240e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002410:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	UI_Control(target,0);
 8002414:	2100      	movs	r1, #0
 8002416:	6a38      	ldr	r0, [r7, #32]
 8002418:	f000 f83e 	bl	8002498 <UI_Control>
}
 800241c:	bf00      	nop
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	bd90      	pop	{r4, r7, pc}

08002424 <UI_Update_10ms>:


// periodicaly scheduled updtae function
void UI_Update_10ms()
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
	UI_Control(&LED_Life, 	0x00);
 8002428:	2100      	movs	r1, #0
 800242a:	480a      	ldr	r0, [pc, #40]	; (8002454 <UI_Update_10ms+0x30>)
 800242c:	f000 f834 	bl	8002498 <UI_Control>
	UI_Control(&LED_R, 	0x00);
 8002430:	2100      	movs	r1, #0
 8002432:	4809      	ldr	r0, [pc, #36]	; (8002458 <UI_Update_10ms+0x34>)
 8002434:	f000 f830 	bl	8002498 <UI_Control>
#ifndef LIMITED_UI
	UI_Control(&LED_G, 	0x00);
 8002438:	2100      	movs	r1, #0
 800243a:	4808      	ldr	r0, [pc, #32]	; (800245c <UI_Update_10ms+0x38>)
 800243c:	f000 f82c 	bl	8002498 <UI_Control>
	UI_Control(&LED_B, 	0x00);
 8002440:	2100      	movs	r1, #0
 8002442:	4807      	ldr	r0, [pc, #28]	; (8002460 <UI_Update_10ms+0x3c>)
 8002444:	f000 f828 	bl	8002498 <UI_Control>
	UI_Control(&Buzzer, 	0x00);
 8002448:	2100      	movs	r1, #0
 800244a:	4806      	ldr	r0, [pc, #24]	; (8002464 <UI_Update_10ms+0x40>)
 800244c:	f000 f824 	bl	8002498 <UI_Control>
#endif
}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}
 8002454:	200008e4 	.word	0x200008e4
 8002458:	200008f4 	.word	0x200008f4
 800245c:	20000904 	.word	0x20000904
 8002460:	20000914 	.word	0x20000914
 8002464:	20000924 	.word	0x20000924

08002468 <UI_LED_Life_SetMode>:
		LED_B.Led_Cnt = 0;
	}
}

void UI_LED_Life_SetMode(eUI_Status status)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	71fb      	strb	r3, [r7, #7]
	if (LED_Life.Status != status)
 8002472:	4b08      	ldr	r3, [pc, #32]	; (8002494 <UI_LED_Life_SetMode+0x2c>)
 8002474:	789b      	ldrb	r3, [r3, #2]
 8002476:	79fa      	ldrb	r2, [r7, #7]
 8002478:	429a      	cmp	r2, r3
 800247a:	d005      	beq.n	8002488 <UI_LED_Life_SetMode+0x20>
	{
		LED_Life.Status = status;
 800247c:	4a05      	ldr	r2, [pc, #20]	; (8002494 <UI_LED_Life_SetMode+0x2c>)
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	7093      	strb	r3, [r2, #2]
		LED_Life.Led_Cnt = 0;
 8002482:	4b04      	ldr	r3, [pc, #16]	; (8002494 <UI_LED_Life_SetMode+0x2c>)
 8002484:	2200      	movs	r2, #0
 8002486:	801a      	strh	r2, [r3, #0]
	}
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	200008e4 	.word	0x200008e4

08002498 <UI_Control>:
  * @brief  Controlling states of LED 
  * @param  led: Pointer to specific LED
  * @param  led_switch: If isn't this parameter null, the function inverts status of specific LED, but LED has to be in TOGGLE mode!
  */
static void UI_Control (sUI *led,uint8_t led_switch)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	70fb      	strb	r3, [r7, #3]

	switch(led->Status)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	789b      	ldrb	r3, [r3, #2]
 80024a8:	2b08      	cmp	r3, #8
 80024aa:	f200 823f 	bhi.w	800292c <UI_Control+0x494>
 80024ae:	a201      	add	r2, pc, #4	; (adr r2, 80024b4 <UI_Control+0x1c>)
 80024b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b4:	080024d9 	.word	0x080024d9
 80024b8:	08002509 	.word	0x08002509
 80024bc:	08002539 	.word	0x08002539
 80024c0:	080025b1 	.word	0x080025b1
 80024c4:	08002629 	.word	0x08002629
 80024c8:	0800269d 	.word	0x0800269d
 80024cc:	08002713 	.word	0x08002713
 80024d0:	080027a7 	.word	0x080027a7
 80024d4:	0800278b 	.word	0x0800278b
	{
		case eUI_OFF:
			if(led->Logic == eUIL_NEGATIVE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	7b1b      	ldrb	r3, [r3, #12]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d109      	bne.n	80024f4 <UI_Control+0x5c>
			{
				HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6858      	ldr	r0, [r3, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	2201      	movs	r2, #1
 80024ec:	4619      	mov	r1, r3
 80024ee:	f003 f93f 	bl	8005770 <HAL_GPIO_WritePin>
			}
			else
			{
				HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
			}
			break;
 80024f2:	e226      	b.n	8002942 <UI_Control+0x4aa>
				HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6858      	ldr	r0, [r3, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	2200      	movs	r2, #0
 8002500:	4619      	mov	r1, r3
 8002502:	f003 f935 	bl	8005770 <HAL_GPIO_WritePin>
			break;
 8002506:	e21c      	b.n	8002942 <UI_Control+0x4aa>
		case eUI_ON:
			if(led->Logic == eUIL_NEGATIVE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	7b1b      	ldrb	r3, [r3, #12]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d109      	bne.n	8002524 <UI_Control+0x8c>
			{
				HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6858      	ldr	r0, [r3, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	b29b      	uxth	r3, r3
 800251a:	2200      	movs	r2, #0
 800251c:	4619      	mov	r1, r3
 800251e:	f003 f927 	bl	8005770 <HAL_GPIO_WritePin>
			}
			else
			{
				HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
			}			
			break;
 8002522:	e20e      	b.n	8002942 <UI_Control+0x4aa>
				HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6858      	ldr	r0, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	b29b      	uxth	r3, r3
 800252e:	2201      	movs	r2, #1
 8002530:	4619      	mov	r1, r3
 8002532:	f003 f91d 	bl	8005770 <HAL_GPIO_WritePin>
			break;
 8002536:	e204      	b.n	8002942 <UI_Control+0x4aa>
		case eUI_BLINKING_SLOW:
			if(led->Led_Cnt <= 50)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	2b32      	cmp	r3, #50	; 0x32
 800253e:	d817      	bhi.n	8002570 <UI_Control+0xd8>
			{
				if(led->Logic == eUIL_NEGATIVE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	7b1b      	ldrb	r3, [r3, #12]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d109      	bne.n	800255c <UI_Control+0xc4>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6858      	ldr	r0, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	b29b      	uxth	r3, r3
 8002552:	2200      	movs	r2, #0
 8002554:	4619      	mov	r1, r3
 8002556:	f003 f90b 	bl	8005770 <HAL_GPIO_WritePin>
 800255a:	e020      	b.n	800259e <UI_Control+0x106>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6858      	ldr	r0, [r3, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	b29b      	uxth	r3, r3
 8002566:	2201      	movs	r2, #1
 8002568:	4619      	mov	r1, r3
 800256a:	f003 f901 	bl	8005770 <HAL_GPIO_WritePin>
 800256e:	e016      	b.n	800259e <UI_Control+0x106>
				}	
			}
			else
			{
				if(led->Logic == eUIL_NEGATIVE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	7b1b      	ldrb	r3, [r3, #12]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d109      	bne.n	800258c <UI_Control+0xf4>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6858      	ldr	r0, [r3, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	b29b      	uxth	r3, r3
 8002582:	2201      	movs	r2, #1
 8002584:	4619      	mov	r1, r3
 8002586:	f003 f8f3 	bl	8005770 <HAL_GPIO_WritePin>
 800258a:	e008      	b.n	800259e <UI_Control+0x106>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6858      	ldr	r0, [r3, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	b29b      	uxth	r3, r3
 8002596:	2200      	movs	r2, #0
 8002598:	4619      	mov	r1, r3
 800259a:	f003 f8e9 	bl	8005770 <HAL_GPIO_WritePin>
				}
			}

			if(led->Led_Cnt >= 100)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	2b63      	cmp	r3, #99	; 0x63
 80025a4:	f240 81c4 	bls.w	8002930 <UI_Control+0x498>
			{
				led->Led_Cnt = 0;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	801a      	strh	r2, [r3, #0]
			}
			break;
 80025ae:	e1bf      	b.n	8002930 <UI_Control+0x498>
		case eUI_BLINKING_FAST:
			if(led->Led_Cnt <= 10 )
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	2b0a      	cmp	r3, #10
 80025b6:	d817      	bhi.n	80025e8 <UI_Control+0x150>
			{
				if(led->Logic == eUIL_NEGATIVE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	7b1b      	ldrb	r3, [r3, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d109      	bne.n	80025d4 <UI_Control+0x13c>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6858      	ldr	r0, [r3, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	2200      	movs	r2, #0
 80025cc:	4619      	mov	r1, r3
 80025ce:	f003 f8cf 	bl	8005770 <HAL_GPIO_WritePin>
 80025d2:	e020      	b.n	8002616 <UI_Control+0x17e>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6858      	ldr	r0, [r3, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	b29b      	uxth	r3, r3
 80025de:	2201      	movs	r2, #1
 80025e0:	4619      	mov	r1, r3
 80025e2:	f003 f8c5 	bl	8005770 <HAL_GPIO_WritePin>
 80025e6:	e016      	b.n	8002616 <UI_Control+0x17e>
				}	
			}
			else
			{
				if(led->Logic == eUIL_NEGATIVE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	7b1b      	ldrb	r3, [r3, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d109      	bne.n	8002604 <UI_Control+0x16c>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6858      	ldr	r0, [r3, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	2201      	movs	r2, #1
 80025fc:	4619      	mov	r1, r3
 80025fe:	f003 f8b7 	bl	8005770 <HAL_GPIO_WritePin>
 8002602:	e008      	b.n	8002616 <UI_Control+0x17e>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6858      	ldr	r0, [r3, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	b29b      	uxth	r3, r3
 800260e:	2200      	movs	r2, #0
 8002610:	4619      	mov	r1, r3
 8002612:	f003 f8ad 	bl	8005770 <HAL_GPIO_WritePin>
				}
			}

			if(led->Led_Cnt >= 20)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	2b13      	cmp	r3, #19
 800261c:	f240 818a 	bls.w	8002934 <UI_Control+0x49c>
			{
				led->Led_Cnt = 0;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	801a      	strh	r2, [r3, #0]
			}			
			break;
 8002626:	e185      	b.n	8002934 <UI_Control+0x49c>
		case eUI_BLINK_ONCE:
			if(led->Led_Cnt <= 2)  // blink for 20ms
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	881b      	ldrh	r3, [r3, #0]
 800262c:	2b02      	cmp	r3, #2
 800262e:	d817      	bhi.n	8002660 <UI_Control+0x1c8>
			{
				if(led->Logic == eUIL_NEGATIVE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	7b1b      	ldrb	r3, [r3, #12]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d109      	bne.n	800264c <UI_Control+0x1b4>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6858      	ldr	r0, [r3, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	b29b      	uxth	r3, r3
 8002642:	2200      	movs	r2, #0
 8002644:	4619      	mov	r1, r3
 8002646:	f003 f893 	bl	8005770 <HAL_GPIO_WritePin>
				}
				
				led->Status = eUI_OFF;   // go to permanent off state
				led->Led_Cnt = 0;
			}		
			break;
 800264a:	e17a      	b.n	8002942 <UI_Control+0x4aa>
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6858      	ldr	r0, [r3, #4]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	b29b      	uxth	r3, r3
 8002656:	2201      	movs	r2, #1
 8002658:	4619      	mov	r1, r3
 800265a:	f003 f889 	bl	8005770 <HAL_GPIO_WritePin>
			break;
 800265e:	e170      	b.n	8002942 <UI_Control+0x4aa>
				if(led->Logic == eUIL_NEGATIVE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	7b1b      	ldrb	r3, [r3, #12]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d109      	bne.n	800267c <UI_Control+0x1e4>
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6858      	ldr	r0, [r3, #4]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	b29b      	uxth	r3, r3
 8002672:	2201      	movs	r2, #1
 8002674:	4619      	mov	r1, r3
 8002676:	f003 f87b 	bl	8005770 <HAL_GPIO_WritePin>
 800267a:	e008      	b.n	800268e <UI_Control+0x1f6>
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6858      	ldr	r0, [r3, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	b29b      	uxth	r3, r3
 8002686:	2200      	movs	r2, #0
 8002688:	4619      	mov	r1, r3
 800268a:	f003 f871 	bl	8005770 <HAL_GPIO_WritePin>
				led->Status = eUI_OFF;   // go to permanent off state
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	709a      	strb	r2, [r3, #2]
				led->Led_Cnt = 0;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	801a      	strh	r2, [r3, #0]
			break;
 800269a:	e152      	b.n	8002942 <UI_Control+0x4aa>
		 case eUI_BEEP_ONCE:
					if(led->Led_Cnt <= 300)  // beep for 3 sec
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	881b      	ldrh	r3, [r3, #0]
 80026a0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80026a4:	d817      	bhi.n	80026d6 <UI_Control+0x23e>
					{
						if(led->Logic == eUIL_NEGATIVE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	7b1b      	ldrb	r3, [r3, #12]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d109      	bne.n	80026c2 <UI_Control+0x22a>
						{
							HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6858      	ldr	r0, [r3, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	2200      	movs	r2, #0
 80026ba:	4619      	mov	r1, r3
 80026bc:	f003 f858 	bl	8005770 <HAL_GPIO_WritePin>
						}

						led->Status = eUI_OFF;   // go to permanent off state
						led->Led_Cnt = 0;
					}
					break;
 80026c0:	e13f      	b.n	8002942 <UI_Control+0x4aa>
							HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6858      	ldr	r0, [r3, #4]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	2201      	movs	r2, #1
 80026ce:	4619      	mov	r1, r3
 80026d0:	f003 f84e 	bl	8005770 <HAL_GPIO_WritePin>
					break;
 80026d4:	e135      	b.n	8002942 <UI_Control+0x4aa>
						if(led->Logic == eUIL_NEGATIVE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	7b1b      	ldrb	r3, [r3, #12]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d109      	bne.n	80026f2 <UI_Control+0x25a>
							HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6858      	ldr	r0, [r3, #4]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	2201      	movs	r2, #1
 80026ea:	4619      	mov	r1, r3
 80026ec:	f003 f840 	bl	8005770 <HAL_GPIO_WritePin>
 80026f0:	e008      	b.n	8002704 <UI_Control+0x26c>
							HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6858      	ldr	r0, [r3, #4]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	2200      	movs	r2, #0
 80026fe:	4619      	mov	r1, r3
 8002700:	f003 f836 	bl	8005770 <HAL_GPIO_WritePin>
						led->Status = eUI_OFF;   // go to permanent off state
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	709a      	strb	r2, [r3, #2]
						led->Led_Cnt = 0;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	801a      	strh	r2, [r3, #0]
					break;
 8002710:	e117      	b.n	8002942 <UI_Control+0x4aa>
		case eUI_FLASH:
			if(led->Led_Cnt < 2)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	881b      	ldrh	r3, [r3, #0]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d817      	bhi.n	800274a <UI_Control+0x2b2>
			{
				if(led->Logic == eUIL_NEGATIVE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	7b1b      	ldrb	r3, [r3, #12]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d109      	bne.n	8002736 <UI_Control+0x29e>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6858      	ldr	r0, [r3, #4]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	b29b      	uxth	r3, r3
 800272c:	2200      	movs	r2, #0
 800272e:	4619      	mov	r1, r3
 8002730:	f003 f81e 	bl	8005770 <HAL_GPIO_WritePin>
 8002734:	e020      	b.n	8002778 <UI_Control+0x2e0>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6858      	ldr	r0, [r3, #4]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	b29b      	uxth	r3, r3
 8002740:	2201      	movs	r2, #1
 8002742:	4619      	mov	r1, r3
 8002744:	f003 f814 	bl	8005770 <HAL_GPIO_WritePin>
 8002748:	e016      	b.n	8002778 <UI_Control+0x2e0>
				}	
			}
			else
			{
				if(led->Logic == eUIL_NEGATIVE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	7b1b      	ldrb	r3, [r3, #12]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d109      	bne.n	8002766 <UI_Control+0x2ce>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6858      	ldr	r0, [r3, #4]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	b29b      	uxth	r3, r3
 800275c:	2201      	movs	r2, #1
 800275e:	4619      	mov	r1, r3
 8002760:	f003 f806 	bl	8005770 <HAL_GPIO_WritePin>
 8002764:	e008      	b.n	8002778 <UI_Control+0x2e0>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6858      	ldr	r0, [r3, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	b29b      	uxth	r3, r3
 8002770:	2200      	movs	r2, #0
 8002772:	4619      	mov	r1, r3
 8002774:	f002 fffc 	bl	8005770 <HAL_GPIO_WritePin>
				}
			}

			if(led->Led_Cnt >= 200)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	2bc7      	cmp	r3, #199	; 0xc7
 800277e:	f240 80db 	bls.w	8002938 <UI_Control+0x4a0>
			{
				led->Led_Cnt = 0;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	801a      	strh	r2, [r3, #0]
			}			
			break;
 8002788:	e0d6      	b.n	8002938 <UI_Control+0x4a0>
		case eUI_TOGGLE:
			if(led_switch)
 800278a:	78fb      	ldrb	r3, [r7, #3]
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 80d5 	beq.w	800293c <UI_Control+0x4a4>
			{
				HAL_GPIO_TogglePin(led->Port,led->Pin);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	b29b      	uxth	r3, r3
 800279c:	4619      	mov	r1, r3
 800279e:	4610      	mov	r0, r2
 80027a0:	f002 ffff 	bl	80057a2 <HAL_GPIO_TogglePin>
			}
			break;
 80027a4:	e0ca      	b.n	800293c <UI_Control+0x4a4>
		case eUI_COMBI_1:
			if(led->Led_Cnt < 10)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	2b09      	cmp	r3, #9
 80027ac:	d817      	bhi.n	80027de <UI_Control+0x346>
			{
				if(led->Logic == eUIL_NEGATIVE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	7b1b      	ldrb	r3, [r3, #12]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d109      	bne.n	80027ca <UI_Control+0x332>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6858      	ldr	r0, [r3, #4]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	2200      	movs	r2, #0
 80027c2:	4619      	mov	r1, r3
 80027c4:	f002 ffd4 	bl	8005770 <HAL_GPIO_WritePin>
 80027c8:	e0a8      	b.n	800291c <UI_Control+0x484>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6858      	ldr	r0, [r3, #4]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	2201      	movs	r2, #1
 80027d6:	4619      	mov	r1, r3
 80027d8:	f002 ffca 	bl	8005770 <HAL_GPIO_WritePin>
 80027dc:	e09e      	b.n	800291c <UI_Control+0x484>
				}	
			}
			else if((led->Led_Cnt >= 10)&&(led->Led_Cnt < 50))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	2b09      	cmp	r3, #9
 80027e4:	d91b      	bls.n	800281e <UI_Control+0x386>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	2b31      	cmp	r3, #49	; 0x31
 80027ec:	d817      	bhi.n	800281e <UI_Control+0x386>
			{
				if(led->Logic == eUIL_NEGATIVE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	7b1b      	ldrb	r3, [r3, #12]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d109      	bne.n	800280a <UI_Control+0x372>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6858      	ldr	r0, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	2201      	movs	r2, #1
 8002802:	4619      	mov	r1, r3
 8002804:	f002 ffb4 	bl	8005770 <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 8002808:	e088      	b.n	800291c <UI_Control+0x484>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6858      	ldr	r0, [r3, #4]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	b29b      	uxth	r3, r3
 8002814:	2200      	movs	r2, #0
 8002816:	4619      	mov	r1, r3
 8002818:	f002 ffaa 	bl	8005770 <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 800281c:	e07e      	b.n	800291c <UI_Control+0x484>
				}
			}
			else if((led->Led_Cnt >= 50)&&(led->Led_Cnt < 60))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	2b31      	cmp	r3, #49	; 0x31
 8002824:	d91b      	bls.n	800285e <UI_Control+0x3c6>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	2b3b      	cmp	r3, #59	; 0x3b
 800282c:	d817      	bhi.n	800285e <UI_Control+0x3c6>
			{
				if(led->Logic == eUIL_NEGATIVE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	7b1b      	ldrb	r3, [r3, #12]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <UI_Control+0x3b2>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6858      	ldr	r0, [r3, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	b29b      	uxth	r3, r3
 8002840:	2200      	movs	r2, #0
 8002842:	4619      	mov	r1, r3
 8002844:	f002 ff94 	bl	8005770 <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 8002848:	e068      	b.n	800291c <UI_Control+0x484>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6858      	ldr	r0, [r3, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	b29b      	uxth	r3, r3
 8002854:	2201      	movs	r2, #1
 8002856:	4619      	mov	r1, r3
 8002858:	f002 ff8a 	bl	8005770 <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 800285c:	e05e      	b.n	800291c <UI_Control+0x484>
				}	
			}
			else if((led->Led_Cnt >= 60)&&(led->Led_Cnt < 100))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	2b3b      	cmp	r3, #59	; 0x3b
 8002864:	d91b      	bls.n	800289e <UI_Control+0x406>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	2b63      	cmp	r3, #99	; 0x63
 800286c:	d817      	bhi.n	800289e <UI_Control+0x406>
			{
				if(led->Logic == eUIL_NEGATIVE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	7b1b      	ldrb	r3, [r3, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d109      	bne.n	800288a <UI_Control+0x3f2>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6858      	ldr	r0, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	b29b      	uxth	r3, r3
 8002880:	2201      	movs	r2, #1
 8002882:	4619      	mov	r1, r3
 8002884:	f002 ff74 	bl	8005770 <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 8002888:	e048      	b.n	800291c <UI_Control+0x484>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6858      	ldr	r0, [r3, #4]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	b29b      	uxth	r3, r3
 8002894:	2200      	movs	r2, #0
 8002896:	4619      	mov	r1, r3
 8002898:	f002 ff6a 	bl	8005770 <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 800289c:	e03e      	b.n	800291c <UI_Control+0x484>
				}
			}
			else if((led->Led_Cnt >= 100)&&(led->Led_Cnt < 150))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	2b63      	cmp	r3, #99	; 0x63
 80028a4:	d91b      	bls.n	80028de <UI_Control+0x446>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	2b95      	cmp	r3, #149	; 0x95
 80028ac:	d817      	bhi.n	80028de <UI_Control+0x446>
			{
				if(led->Logic == eUIL_NEGATIVE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	7b1b      	ldrb	r3, [r3, #12]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d109      	bne.n	80028ca <UI_Control+0x432>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6858      	ldr	r0, [r3, #4]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	b29b      	uxth	r3, r3
 80028c0:	2200      	movs	r2, #0
 80028c2:	4619      	mov	r1, r3
 80028c4:	f002 ff54 	bl	8005770 <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 80028c8:	e028      	b.n	800291c <UI_Control+0x484>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6858      	ldr	r0, [r3, #4]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	2201      	movs	r2, #1
 80028d6:	4619      	mov	r1, r3
 80028d8:	f002 ff4a 	bl	8005770 <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 80028dc:	e01e      	b.n	800291c <UI_Control+0x484>
				}	
			}
			else if((led->Led_Cnt >= 150)&&(led->Led_Cnt < 200))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	2b95      	cmp	r3, #149	; 0x95
 80028e4:	d91a      	bls.n	800291c <UI_Control+0x484>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	2bc7      	cmp	r3, #199	; 0xc7
 80028ec:	d816      	bhi.n	800291c <UI_Control+0x484>
			{
				if(led->Logic == eUIL_NEGATIVE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	7b1b      	ldrb	r3, [r3, #12]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d109      	bne.n	800290a <UI_Control+0x472>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6858      	ldr	r0, [r3, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	b29b      	uxth	r3, r3
 8002900:	2201      	movs	r2, #1
 8002902:	4619      	mov	r1, r3
 8002904:	f002 ff34 	bl	8005770 <HAL_GPIO_WritePin>
 8002908:	e008      	b.n	800291c <UI_Control+0x484>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6858      	ldr	r0, [r3, #4]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	b29b      	uxth	r3, r3
 8002914:	2200      	movs	r2, #0
 8002916:	4619      	mov	r1, r3
 8002918:	f002 ff2a 	bl	8005770 <HAL_GPIO_WritePin>
				}
			}

			if(led->Led_Cnt >= 200)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	2bc7      	cmp	r3, #199	; 0xc7
 8002922:	d90d      	bls.n	8002940 <UI_Control+0x4a8>
			{
				led->Led_Cnt = 0;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	801a      	strh	r2, [r3, #0]
			}			
			
			break;
 800292a:	e009      	b.n	8002940 <UI_Control+0x4a8>
		default:
			break;
 800292c:	bf00      	nop
 800292e:	e008      	b.n	8002942 <UI_Control+0x4aa>
			break;
 8002930:	bf00      	nop
 8002932:	e006      	b.n	8002942 <UI_Control+0x4aa>
			break;
 8002934:	bf00      	nop
 8002936:	e004      	b.n	8002942 <UI_Control+0x4aa>
			break;
 8002938:	bf00      	nop
 800293a:	e002      	b.n	8002942 <UI_Control+0x4aa>
			break;
 800293c:	bf00      	nop
 800293e:	e000      	b.n	8002942 <UI_Control+0x4aa>
			break;
 8002940:	bf00      	nop
	}
	
	if(led->Led_Cnt < 0xFFFF)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800294a:	4293      	cmp	r3, r2
 800294c:	d005      	beq.n	800295a <UI_Control+0x4c2>
	{
		led->Led_Cnt++;		
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	881b      	ldrh	r3, [r3, #0]
 8002952:	3301      	adds	r3, #1
 8002954:	b29a      	uxth	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	801a      	strh	r2, [r3, #0]
	}	
}
 800295a:	bf00      	nop
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop

08002964 <VAR_Init>:

int16_t mDummyVar = 0x8000;


void VAR_Init(void)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < NUM_OF_VARIABLES; i++)
 800296a:	2300      	movs	r3, #0
 800296c:	607b      	str	r3, [r7, #4]
 800296e:	e013      	b.n	8002998 <VAR_Init+0x34>
	{
		Vars[i].valid = 0;
 8002970:	4a0e      	ldr	r2, [pc, #56]	; (80029ac <VAR_Init+0x48>)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2100      	movs	r1, #0
 8002976:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		Vars[i].local = 0;
 800297a:	4a0c      	ldr	r2, [pc, #48]	; (80029ac <VAR_Init+0x48>)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	2200      	movs	r2, #0
 8002984:	705a      	strb	r2, [r3, #1]
		Vars[i].value = 0;
 8002986:	4a09      	ldr	r2, [pc, #36]	; (80029ac <VAR_Init+0x48>)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	2200      	movs	r2, #0
 8002990:	805a      	strh	r2, [r3, #2]
	for(i = 0; i < NUM_OF_VARIABLES; i++)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	3301      	adds	r3, #1
 8002996:	607b      	str	r3, [r7, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2bfe      	cmp	r3, #254	; 0xfe
 800299c:	dde8      	ble.n	8002970 <VAR_Init+0xc>
	}
}
 800299e:	bf00      	nop
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	20000934 	.word	0x20000934

080029b0 <VAR_GetVariable>:

int16_t VAR_GetVariable(uint16_t varId, uint16_t* invalid)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	4603      	mov	r3, r0
 80029b8:	6039      	str	r1, [r7, #0]
 80029ba:	80fb      	strh	r3, [r7, #6]
	if (varId < NUM_OF_VARIABLES)
 80029bc:	88fb      	ldrh	r3, [r7, #6]
 80029be:	2bfe      	cmp	r3, #254	; 0xfe
 80029c0:	d816      	bhi.n	80029f0 <VAR_GetVariable+0x40>
	{
		if(Vars[varId].valid == 0)
 80029c2:	88fb      	ldrh	r3, [r7, #6]
 80029c4:	4a13      	ldr	r2, [pc, #76]	; (8002a14 <VAR_GetVariable+0x64>)
 80029c6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d109      	bne.n	80029e2 <VAR_GetVariable+0x32>
		{
			if (invalid != NULL) *invalid |= INVALID_FLAG;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d006      	beq.n	80029e2 <VAR_GetVariable+0x32>
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	881b      	ldrh	r3, [r3, #0]
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	b29a      	uxth	r2, r3
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	801a      	strh	r2, [r3, #0]
		}
		return Vars[varId].value;
 80029e2:	88fb      	ldrh	r3, [r7, #6]
 80029e4:	4a0b      	ldr	r2, [pc, #44]	; (8002a14 <VAR_GetVariable+0x64>)
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029ee:	e00a      	b.n	8002a06 <VAR_GetVariable+0x56>
	}
	else
	{
		if (invalid != NULL) *invalid |= INVALID_FLAG;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d006      	beq.n	8002a04 <VAR_GetVariable+0x54>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	881b      	ldrh	r3, [r3, #0]
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	801a      	strh	r2, [r3, #0]
		return 0;
 8002a04:	2300      	movs	r3, #0
	}
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	20000934 	.word	0x20000934

08002a18 <VAR_SetVariable>:
		return &(Vars[varId].value);
	}
}

void VAR_SetVariable(uint8_t varId, int16_t value, uint8_t valid)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	71fb      	strb	r3, [r7, #7]
 8002a22:	460b      	mov	r3, r1
 8002a24:	80bb      	strh	r3, [r7, #4]
 8002a26:	4613      	mov	r3, r2
 8002a28:	71bb      	strb	r3, [r7, #6]
	if (varId < NUM_OF_VARIABLES)
 8002a2a:	79fb      	ldrb	r3, [r7, #7]
 8002a2c:	2bff      	cmp	r3, #255	; 0xff
 8002a2e:	d00a      	beq.n	8002a46 <VAR_SetVariable+0x2e>
	{
		Vars[varId].valid = valid;
 8002a30:	79fb      	ldrb	r3, [r7, #7]
 8002a32:	4908      	ldr	r1, [pc, #32]	; (8002a54 <VAR_SetVariable+0x3c>)
 8002a34:	79ba      	ldrb	r2, [r7, #6]
 8002a36:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
		Vars[varId].value = value;
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	4a05      	ldr	r2, [pc, #20]	; (8002a54 <VAR_SetVariable+0x3c>)
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	88ba      	ldrh	r2, [r7, #4]
 8002a44:	805a      	strh	r2, [r3, #2]
	}
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	20000934 	.word	0x20000934

08002a58 <CB_Create>:
 // s_CanTxMsg Msg;

	

CB_handle CB_Create(uint8_t elementsize, uint16_t length)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	460a      	mov	r2, r1
 8002a62:	71fb      	strb	r3, [r7, #7]
 8002a64:	4613      	mov	r3, r2
 8002a66:	80bb      	strh	r3, [r7, #4]
	CB_handle cb = malloc(sizeof(s_CB)); 
 8002a68:	2010      	movs	r0, #16
 8002a6a:	f008 fb1f 	bl	800b0ac <malloc>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	60fb      	str	r3, [r7, #12]
	cb->buff = malloc (length * elementsize);  // TBD : check pointer
 8002a72:	88bb      	ldrh	r3, [r7, #4]
 8002a74:	79fa      	ldrb	r2, [r7, #7]
 8002a76:	fb02 f303 	mul.w	r3, r2, r3
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f008 fb16 	bl	800b0ac <malloc>
 8002a80:	4603      	mov	r3, r0
 8002a82:	461a      	mov	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	601a      	str	r2, [r3, #0]
	cb->length = length;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	88ba      	ldrh	r2, [r7, #4]
 8002a8c:	80da      	strh	r2, [r3, #6]
	cb->head = 0;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	811a      	strh	r2, [r3, #8]
	cb->tail = 0;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	815a      	strh	r2, [r3, #10]
	cb->full = 0;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	731a      	strb	r2, [r3, #12]
	cb->sizeOfElement = elementsize;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	79fa      	ldrb	r2, [r7, #7]
 8002aa4:	711a      	strb	r2, [r3, #4]
	
	
	return cb;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <CB_IsEmpty>:
	return noi;
	
}

uint8_t CB_IsEmpty(CB_handle cb)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
	if (cb!= NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00e      	beq.n	8002adc <CB_IsEmpty+0x2c>
	{
		return (!cb->full && (cb->head == cb->tail));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	7b1b      	ldrb	r3, [r3, #12]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d107      	bne.n	8002ad6 <CB_IsEmpty+0x26>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	891a      	ldrh	r2, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	895b      	ldrh	r3, [r3, #10]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d101      	bne.n	8002ad6 <CB_IsEmpty+0x26>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <CB_IsEmpty+0x28>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	e000      	b.n	8002ade <CB_IsEmpty+0x2e>
	}
	return 1; 
 8002adc:	2301      	movs	r3, #1
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <CB_Probe>:

// Gets the item from the buffer, but do not remove it from the buffer
// To remove the intem, call CB_Probe() + CB_Remove(), or use CB_Get() to get and remove in one step 

uint8_t CB_Probe(CB_handle cb, uint8_t * item)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b082      	sub	sp, #8
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
 8002af2:	6039      	str	r1, [r7, #0]
	if (cb!= NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d01f      	beq.n	8002b3a <CB_Probe+0x50>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002afa:	b672      	cpsid	i
}
 8002afc:	bf00      	nop
	{

		
		__disable_irq();
			if(!CB_IsEmpty(cb))
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7ff ffd6 	bl	8002ab0 <CB_IsEmpty>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d113      	bne.n	8002b32 <CB_Probe+0x48>
			{
				
				memcpy(item, &cb->buff[cb->tail * cb->sizeOfElement], cb->sizeOfElement);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	8952      	ldrh	r2, [r2, #10]
 8002b12:	4611      	mov	r1, r2
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	7912      	ldrb	r2, [r2, #4]
 8002b18:	fb01 f202 	mul.w	r2, r1, r2
 8002b1c:	1899      	adds	r1, r3, r2
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	791b      	ldrb	r3, [r3, #4]
 8002b22:	461a      	mov	r2, r3
 8002b24:	6838      	ldr	r0, [r7, #0]
 8002b26:	f008 fad1 	bl	800b0cc <memcpy>
  __ASM volatile ("cpsie i" : : : "memory");
 8002b2a:	b662      	cpsie	i
}
 8002b2c:	bf00      	nop
				//cb->tail = (cb->tail + 1) % cb->length;
				//cb->full = 0;
				__enable_irq();
				return 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e004      	b.n	8002b3c <CB_Probe+0x52>
  __ASM volatile ("cpsie i" : : : "memory");
 8002b32:	b662      	cpsie	i
}
 8002b34:	bf00      	nop

			}
			else  // empty buffer
			{
				__enable_irq();
				return 1;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e000      	b.n	8002b3c <CB_Probe+0x52>
			}
		}

	// TBD assert
	return 1;
 8002b3a:	2301      	movs	r3, #1

}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <CB_Remove>:


// Removes the item from the buffer, use together with CB_Probe()
uint8_t CB_Remove(CB_handle cb)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
	if (cb!= NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d01f      	beq.n	8002b92 <CB_Remove+0x4e>
  __ASM volatile ("cpsid i" : : : "memory");
 8002b52:	b672      	cpsid	i
}
 8002b54:	bf00      	nop
	{
		
		__disable_irq();
			if(!CB_IsEmpty(cb))
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7ff ffaa 	bl	8002ab0 <CB_IsEmpty>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d113      	bne.n	8002b8a <CB_Remove+0x46>
			{
				cb->tail = (cb->tail + 1) % cb->length;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	895b      	ldrh	r3, [r3, #10]
 8002b66:	3301      	adds	r3, #1
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	88d2      	ldrh	r2, [r2, #6]
 8002b6c:	fb93 f1f2 	sdiv	r1, r3, r2
 8002b70:	fb01 f202 	mul.w	r2, r1, r2
 8002b74:	1a9b      	subs	r3, r3, r2
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	815a      	strh	r2, [r3, #10]
				cb->full = 0;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	731a      	strb	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8002b82:	b662      	cpsie	i
}
 8002b84:	bf00      	nop
				__enable_irq();
				return 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	e004      	b.n	8002b94 <CB_Remove+0x50>
  __ASM volatile ("cpsie i" : : : "memory");
 8002b8a:	b662      	cpsie	i
}
 8002b8c:	bf00      	nop

			}
			else  // empty buffer
			{
				__enable_irq();
				return 1;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <CB_Remove+0x50>
			}
		}

	// TBD assert
	return 1;
 8002b92:	2301      	movs	r3, #1

}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <CB_Get>:


uint8_t CB_Get(CB_handle cb, uint8_t * item)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
	if (cb!= NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d02f      	beq.n	8002c0c <CB_Get+0x70>
  __ASM volatile ("cpsid i" : : : "memory");
 8002bac:	b672      	cpsid	i
}
 8002bae:	bf00      	nop
	{
		
		__disable_irq();
			if(!CB_IsEmpty(cb))
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f7ff ff7d 	bl	8002ab0 <CB_IsEmpty>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d123      	bne.n	8002c04 <CB_Get+0x68>
			{
				
				memcpy(item, &cb->buff[cb->tail * cb->sizeOfElement], cb->sizeOfElement);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	8952      	ldrh	r2, [r2, #10]
 8002bc4:	4611      	mov	r1, r2
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	7912      	ldrb	r2, [r2, #4]
 8002bca:	fb01 f202 	mul.w	r2, r1, r2
 8002bce:	1899      	adds	r1, r3, r2
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	791b      	ldrb	r3, [r3, #4]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	6838      	ldr	r0, [r7, #0]
 8002bd8:	f008 fa78 	bl	800b0cc <memcpy>
				cb->tail = (cb->tail + 1) % cb->length;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	895b      	ldrh	r3, [r3, #10]
 8002be0:	3301      	adds	r3, #1
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	88d2      	ldrh	r2, [r2, #6]
 8002be6:	fb93 f1f2 	sdiv	r1, r3, r2
 8002bea:	fb01 f202 	mul.w	r2, r1, r2
 8002bee:	1a9b      	subs	r3, r3, r2
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	815a      	strh	r2, [r3, #10]
				cb->full = 0;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	731a      	strb	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8002bfc:	b662      	cpsie	i
}
 8002bfe:	bf00      	nop
				__enable_irq();
				return 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	e004      	b.n	8002c0e <CB_Get+0x72>
  __ASM volatile ("cpsie i" : : : "memory");
 8002c04:	b662      	cpsie	i
}
 8002c06:	bf00      	nop

			}
			else  // empty buffer
			{
				__enable_irq();
				return 1;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e000      	b.n	8002c0e <CB_Get+0x72>
			}
		}

	// TBD assert
	return 1;
 8002c0c:	2301      	movs	r3, #1

}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <CB_Put>:


uint8_t CB_Put(CB_handle cb, uint8_t* item)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	6039      	str	r1, [r7, #0]
	
	if (cb != NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d03b      	beq.n	8002c9e <CB_Put+0x88>
	{	
		memcpy(&cb->buff[cb->head * cb->sizeOfElement],item, cb->sizeOfElement);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	8912      	ldrh	r2, [r2, #8]
 8002c2e:	4611      	mov	r1, r2
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	7912      	ldrb	r2, [r2, #4]
 8002c34:	fb01 f202 	mul.w	r2, r1, r2
 8002c38:	1898      	adds	r0, r3, r2
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	791b      	ldrb	r3, [r3, #4]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	6839      	ldr	r1, [r7, #0]
 8002c42:	f008 fa43 	bl	800b0cc <memcpy>
		if(cb->full)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	7b1b      	ldrb	r3, [r3, #12]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00c      	beq.n	8002c68 <CB_Put+0x52>
		{
			cb->tail = (cb->tail + 1) % cb->length;		
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	895b      	ldrh	r3, [r3, #10]
 8002c52:	3301      	adds	r3, #1
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	88d2      	ldrh	r2, [r2, #6]
 8002c58:	fb93 f1f2 	sdiv	r1, r3, r2
 8002c5c:	fb01 f202 	mul.w	r2, r1, r2
 8002c60:	1a9b      	subs	r3, r3, r2
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	815a      	strh	r2, [r3, #10]
		}
		cb->head = (cb->head + 1) % cb->length;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	891b      	ldrh	r3, [r3, #8]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	88d2      	ldrh	r2, [r2, #6]
 8002c72:	fb93 f1f2 	sdiv	r1, r3, r2
 8002c76:	fb01 f202 	mul.w	r2, r1, r2
 8002c7a:	1a9b      	subs	r3, r3, r2
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	811a      	strh	r2, [r3, #8]
		cb->full = (cb->head == cb->tail? 1 : 0);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	891a      	ldrh	r2, [r3, #8]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	895b      	ldrh	r3, [r3, #10]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	bf0c      	ite	eq
 8002c8e:	2301      	moveq	r3, #1
 8002c90:	2300      	movne	r3, #0
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	461a      	mov	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	731a      	strb	r2, [r3, #12]

		return 0;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	e000      	b.n	8002ca0 <CB_Put+0x8a>
	}
	else
	{
		return 1;
 8002c9e:	2301      	movs	r3, #1
	}
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <WDG_Init>:
#include "main.h"
#include "watchdog.h"


void WDG_Init(uint32_t period_ms)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
	__HAL_DBGMCU_FREEZE_IWDG();  // stop the watchdog in debug mode
 8002cb0:	4b0e      	ldr	r3, [pc, #56]	; (8002cec <WDG_Init+0x44>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	4a0d      	ldr	r2, [pc, #52]	; (8002cec <WDG_Init+0x44>)
 8002cb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cba:	6093      	str	r3, [r2, #8]
	if (period_ms > 32000)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002cc2:	d902      	bls.n	8002cca <WDG_Init+0x22>
	{
		period_ms = 32000;
 8002cc4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002cc8:	607b      	str	r3, [r7, #4]
	}
	hiwdg.Instance = IWDG;
 8002cca:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <WDG_Init+0x48>)
 8002ccc:	4a09      	ldr	r2, [pc, #36]	; (8002cf4 <WDG_Init+0x4c>)
 8002cce:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8002cd0:	4b07      	ldr	r3, [pc, #28]	; (8002cf0 <WDG_Init+0x48>)
 8002cd2:	2206      	movs	r2, #6
 8002cd4:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Reload = period_ms/8;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	08db      	lsrs	r3, r3, #3
 8002cda:	4a05      	ldr	r2, [pc, #20]	; (8002cf0 <WDG_Init+0x48>)
 8002cdc:	6093      	str	r3, [r2, #8]
	HAL_IWDG_Init(&hiwdg);
 8002cde:	4804      	ldr	r0, [pc, #16]	; (8002cf0 <WDG_Init+0x48>)
 8002ce0:	f005 f8d4 	bl	8007e8c <HAL_IWDG_Init>
}
 8002ce4:	bf00      	nop
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	e0042000 	.word	0xe0042000
 8002cf0:	20000e3c 	.word	0x20000e3c
 8002cf4:	40003000 	.word	0x40003000

08002cf8 <WDG_Refresh>:

void WDG_Refresh()
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);
 8002cfc:	4802      	ldr	r0, [pc, #8]	; (8002d08 <WDG_Refresh+0x10>)
 8002cfe:	f005 f907 	bl	8007f10 <HAL_IWDG_Refresh>
}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000e3c 	.word	0x20000e3c

08002d0c <APP_Init>:

uint8_t mFanPct = 20;

// public methods
void APP_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b090      	sub	sp, #64	; 0x40
 8002d10:	af00      	add	r7, sp, #0
	sUIHwInit uihw;


	Scheduler_Init();
 8002d12:	f000 feaf 	bl	8003a74 <Scheduler_Init>
	OW_Init();
 8002d16:	f7fe f8d3 	bl	8000ec0 <OW_Init>
	TEMP_Init();
 8002d1a:	f7ff f941 	bl	8001fa0 <TEMP_Init>
	VAR_Init();
 8002d1e:	f7ff fe21 	bl	8002964 <VAR_Init>
	MCAN_Init(&hcan1, THIS_NODE);
 8002d22:	2105      	movs	r1, #5
 8002d24:	486f      	ldr	r0, [pc, #444]	; (8002ee4 <APP_Init+0x1d8>)
 8002d26:	f7fd fe05 	bl	8000934 <MCAN_Init>
	COM_Init(THIS_NODE);
 8002d2a:	2005      	movs	r0, #5
 8002d2c:	f7fd fcaa 	bl	8000684 <COM_Init>
	SENS_Init();
 8002d30:	f7fe fdb2 	bl	8001898 <SENS_Init>
	WDG_Init(3000);
 8002d34:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002d38:	f7ff ffb6 	bl	8002ca8 <WDG_Init>
	RECON_Init();
 8002d3c:	f000 f97c 	bl	8003038 <RECON_Init>


  /*Assign pins for onboard UI  */
	uihw.Led_Life.Pin = LD2_Pin;
 8002d40:	2320      	movs	r3, #32
 8002d42:	60bb      	str	r3, [r7, #8]
	uihw.Led_Life.Port = LD2_GPIO_Port;
 8002d44:	4b68      	ldr	r3, [pc, #416]	; (8002ee8 <APP_Init+0x1dc>)
 8002d46:	607b      	str	r3, [r7, #4]
	uihw.Led_Life.Logic = eUIL_POSITIVE;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	733b      	strb	r3, [r7, #12]

	uihw.Led_R.Pin = LED_R_Pin;
 8002d4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d50:	617b      	str	r3, [r7, #20]
	uihw.Led_R.Port = LED_R_GPIO_Port;
 8002d52:	4b66      	ldr	r3, [pc, #408]	; (8002eec <APP_Init+0x1e0>)
 8002d54:	613b      	str	r3, [r7, #16]
	uihw.Led_R.Logic = eUIL_NEGATIVE;
 8002d56:	2300      	movs	r3, #0
 8002d58:	763b      	strb	r3, [r7, #24]

	uihw.Led_G.Pin = LED_G_Pin;
 8002d5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d5e:	623b      	str	r3, [r7, #32]
	uihw.Led_G.Port = LED_G_GPIO_Port;
 8002d60:	4b62      	ldr	r3, [pc, #392]	; (8002eec <APP_Init+0x1e0>)
 8002d62:	61fb      	str	r3, [r7, #28]
	uihw.Led_G.Logic = eUIL_NEGATIVE;
 8002d64:	2300      	movs	r3, #0
 8002d66:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	uihw.Led_B.Pin = LED_B_Pin;
 8002d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uihw.Led_B.Port = LED_B_GPIO_Port;
 8002d70:	4b5e      	ldr	r3, [pc, #376]	; (8002eec <APP_Init+0x1e0>)
 8002d72:	62bb      	str	r3, [r7, #40]	; 0x28
	uihw.Led_B.Logic = eUIL_NEGATIVE;
 8002d74:	2300      	movs	r3, #0
 8002d76:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	uihw.Buzzer.Pin = BUZZ_Pin;
 8002d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d7e:	63bb      	str	r3, [r7, #56]	; 0x38
	uihw.Buzzer.Port = BUZZ_GPIO_Port;
 8002d80:	4b5a      	ldr	r3, [pc, #360]	; (8002eec <APP_Init+0x1e0>)
 8002d82:	637b      	str	r3, [r7, #52]	; 0x34
	uihw.Buzzer.Logic = eUIL_POSITIVE;
 8002d84:	2301      	movs	r3, #1
 8002d86:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

	UI_Init(&uihw);
 8002d8a:	1d3b      	adds	r3, r7, #4
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff facb 	bl	8002328 <UI_Init>
	UI_LED_Life_SetMode(eUI_BLINKING_SLOW);
 8002d92:	2002      	movs	r0, #2
 8002d94:	f7ff fb68 	bl	8002468 <UI_LED_Life_SetMode>
	/*Gestures definition*/


	/* Temperature sensors configuration */
	// define hardware OW busses
	TEMP_AddHwBus(0,OW1_GPIO_Port, OW1_Pin);
 8002d98:	2208      	movs	r2, #8
 8002d9a:	4955      	ldr	r1, [pc, #340]	; (8002ef0 <APP_Init+0x1e4>)
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	f7ff fa39 	bl	8002214 <TEMP_AddHwBus>

	// assign TEMP sensors on OW1 :
	// default sensor assignment:
	TEMP_AssignSensor(T305, VAR_TEMP_RECU_WC, 0);
 8002da2:	2200      	movs	r2, #0
 8002da4:	2183      	movs	r1, #131	; 0x83
 8002da6:	201e      	movs	r0, #30
 8002da8:	f7ff fa54 	bl	8002254 <TEMP_AssignSensor>
	//TEMP_AssignSensor(T309, VAR_TEMP_RECU_WH, 0);
	TEMP_AssignSensor(T115, VAR_TEMP_RECU_FC, 0);
 8002dac:	2200      	movs	r2, #0
 8002dae:	2180      	movs	r1, #128	; 0x80
 8002db0:	2018      	movs	r0, #24
 8002db2:	f7ff fa4f 	bl	8002254 <TEMP_AssignSensor>

	/* assign SENSIRION sensors  */

  // I2C1
  //DP Fresh
  mSS.BusHandle = &hi2c1;
 8002db6:	4b4f      	ldr	r3, [pc, #316]	; (8002ef4 <APP_Init+0x1e8>)
 8002db8:	4a4f      	ldr	r2, [pc, #316]	; (8002ef8 <APP_Init+0x1ec>)
 8002dba:	605a      	str	r2, [r3, #4]
  mSS.Id = 1;
 8002dbc:	4b4d      	ldr	r3, [pc, #308]	; (8002ef4 <APP_Init+0x1e8>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	701a      	strb	r2, [r3, #0]
  mSS.Type = st_SDP810_125;
 8002dc2:	4b4c      	ldr	r3, [pc, #304]	; (8002ef4 <APP_Init+0x1e8>)
 8002dc4:	2203      	movs	r2, #3
 8002dc6:	705a      	strb	r2, [r3, #1]
  mSS.VarId_1 = VAR_DP_RECU_F;
 8002dc8:	4b4a      	ldr	r3, [pc, #296]	; (8002ef4 <APP_Init+0x1e8>)
 8002dca:	228a      	movs	r2, #138	; 0x8a
 8002dcc:	811a      	strh	r2, [r3, #8]
  SENS_AddSensor(mSS);
 8002dce:	4b49      	ldr	r3, [pc, #292]	; (8002ef4 <APP_Init+0x1e8>)
 8002dd0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002dd4:	f7fe fd72 	bl	80018bc <SENS_AddSensor>

  // CO2 waste hot
  mSS.BusHandle = &hi2c1;
 8002dd8:	4b46      	ldr	r3, [pc, #280]	; (8002ef4 <APP_Init+0x1e8>)
 8002dda:	4a47      	ldr	r2, [pc, #284]	; (8002ef8 <APP_Init+0x1ec>)
 8002ddc:	605a      	str	r2, [r3, #4]
  mSS.Id = 2;
 8002dde:	4b45      	ldr	r3, [pc, #276]	; (8002ef4 <APP_Init+0x1e8>)
 8002de0:	2202      	movs	r2, #2
 8002de2:	701a      	strb	r2, [r3, #0]
  mSS.Type = st_SCD4x;
 8002de4:	4b43      	ldr	r3, [pc, #268]	; (8002ef4 <APP_Init+0x1e8>)
 8002de6:	2201      	movs	r2, #1
 8002de8:	705a      	strb	r2, [r3, #1]
  mSS.VarId_1 = VAR_CO2_RECU;
 8002dea:	4b42      	ldr	r3, [pc, #264]	; (8002ef4 <APP_Init+0x1e8>)
 8002dec:	2289      	movs	r2, #137	; 0x89
 8002dee:	811a      	strh	r2, [r3, #8]
  SENS_AddSensor(mSS);
 8002df0:	4b40      	ldr	r3, [pc, #256]	; (8002ef4 <APP_Init+0x1e8>)
 8002df2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002df6:	f7fe fd61 	bl	80018bc <SENS_AddSensor>

  // RH + Temp waste hot
  mSS.BusHandle = &hi2c1;
 8002dfa:	4b3e      	ldr	r3, [pc, #248]	; (8002ef4 <APP_Init+0x1e8>)
 8002dfc:	4a3e      	ldr	r2, [pc, #248]	; (8002ef8 <APP_Init+0x1ec>)
 8002dfe:	605a      	str	r2, [r3, #4]
  mSS.Id = 4;
 8002e00:	4b3c      	ldr	r3, [pc, #240]	; (8002ef4 <APP_Init+0x1e8>)
 8002e02:	2204      	movs	r2, #4
 8002e04:	701a      	strb	r2, [r3, #0]
  mSS.Type = st_SHT4x;
 8002e06:	4b3b      	ldr	r3, [pc, #236]	; (8002ef4 <APP_Init+0x1e8>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	705a      	strb	r2, [r3, #1]
  mSS.VarId_1 = VAR_TEMP_RECU_WH;
 8002e0c:	4b39      	ldr	r3, [pc, #228]	; (8002ef4 <APP_Init+0x1e8>)
 8002e0e:	2282      	movs	r2, #130	; 0x82
 8002e10:	811a      	strh	r2, [r3, #8]
  mSS.VarId_2 = VAR_RH_RECU_WH;
 8002e12:	4b38      	ldr	r3, [pc, #224]	; (8002ef4 <APP_Init+0x1e8>)
 8002e14:	2285      	movs	r2, #133	; 0x85
 8002e16:	815a      	strh	r2, [r3, #10]
  SENS_AddSensor(mSS);
 8002e18:	4b36      	ldr	r3, [pc, #216]	; (8002ef4 <APP_Init+0x1e8>)
 8002e1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002e1e:	f7fe fd4d 	bl	80018bc <SENS_AddSensor>


  // I2C2
  //DP Waste
  mSS.BusHandle = &hi2c2;
 8002e22:	4b34      	ldr	r3, [pc, #208]	; (8002ef4 <APP_Init+0x1e8>)
 8002e24:	4a35      	ldr	r2, [pc, #212]	; (8002efc <APP_Init+0x1f0>)
 8002e26:	605a      	str	r2, [r3, #4]
  mSS.Id = 3;
 8002e28:	4b32      	ldr	r3, [pc, #200]	; (8002ef4 <APP_Init+0x1e8>)
 8002e2a:	2203      	movs	r2, #3
 8002e2c:	701a      	strb	r2, [r3, #0]
  mSS.Type = st_SDP810_125;
 8002e2e:	4b31      	ldr	r3, [pc, #196]	; (8002ef4 <APP_Init+0x1e8>)
 8002e30:	2203      	movs	r2, #3
 8002e32:	705a      	strb	r2, [r3, #1]
  mSS.VarId_1 = VAR_DP_RECU_W;
 8002e34:	4b2f      	ldr	r3, [pc, #188]	; (8002ef4 <APP_Init+0x1e8>)
 8002e36:	228b      	movs	r2, #139	; 0x8b
 8002e38:	811a      	strh	r2, [r3, #8]
  SENS_AddSensor(mSS);
 8002e3a:	4b2e      	ldr	r3, [pc, #184]	; (8002ef4 <APP_Init+0x1e8>)
 8002e3c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002e40:	f7fe fd3c 	bl	80018bc <SENS_AddSensor>


  // RH + Temp fresh  hot
  mSS.BusHandle = &hi2c2;
 8002e44:	4b2b      	ldr	r3, [pc, #172]	; (8002ef4 <APP_Init+0x1e8>)
 8002e46:	4a2d      	ldr	r2, [pc, #180]	; (8002efc <APP_Init+0x1f0>)
 8002e48:	605a      	str	r2, [r3, #4]
  mSS.Id = 0;
 8002e4a:	4b2a      	ldr	r3, [pc, #168]	; (8002ef4 <APP_Init+0x1e8>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	701a      	strb	r2, [r3, #0]
  mSS.Type = st_SHT4x;
 8002e50:	4b28      	ldr	r3, [pc, #160]	; (8002ef4 <APP_Init+0x1e8>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	705a      	strb	r2, [r3, #1]
  mSS.VarId_1 = VAR_TEMP_RECU_FH;
 8002e56:	4b27      	ldr	r3, [pc, #156]	; (8002ef4 <APP_Init+0x1e8>)
 8002e58:	2281      	movs	r2, #129	; 0x81
 8002e5a:	811a      	strh	r2, [r3, #8]
  mSS.VarId_2 = VAR_RH_RECU_FH;
 8002e5c:	4b25      	ldr	r3, [pc, #148]	; (8002ef4 <APP_Init+0x1e8>)
 8002e5e:	2284      	movs	r2, #132	; 0x84
 8002e60:	815a      	strh	r2, [r3, #10]
  SENS_AddSensor(mSS);
 8002e62:	4b24      	ldr	r3, [pc, #144]	; (8002ef4 <APP_Init+0x1e8>)
 8002e64:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002e68:	f7fe fd28 	bl	80018bc <SENS_AddSensor>



	/* Configure CAN streamed variables */

	COM_AddStreamedVariable(VAR_TEMP_RECU_WC, 3000);
 8002e6c:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002e70:	2083      	movs	r0, #131	; 0x83
 8002e72:	f7fd fc95 	bl	80007a0 <COM_AddStreamedVariable>
	COM_AddStreamedVariable(VAR_TEMP_RECU_WH, 3000);
 8002e76:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002e7a:	2082      	movs	r0, #130	; 0x82
 8002e7c:	f7fd fc90 	bl	80007a0 <COM_AddStreamedVariable>
	COM_AddStreamedVariable(VAR_TEMP_RECU_FC, 3000);
 8002e80:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002e84:	2080      	movs	r0, #128	; 0x80
 8002e86:	f7fd fc8b 	bl	80007a0 <COM_AddStreamedVariable>
	COM_AddStreamedVariable(VAR_TEMP_RECU_FH, 3000);
 8002e8a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002e8e:	2081      	movs	r0, #129	; 0x81
 8002e90:	f7fd fc86 	bl	80007a0 <COM_AddStreamedVariable>

	COM_AddStreamedVariable(VAR_RH_RECU_FH, 3000);
 8002e94:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002e98:	2084      	movs	r0, #132	; 0x84
 8002e9a:	f7fd fc81 	bl	80007a0 <COM_AddStreamedVariable>
	COM_AddStreamedVariable(VAR_RH_RECU_WH, 3000);
 8002e9e:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002ea2:	2085      	movs	r0, #133	; 0x85
 8002ea4:	f7fd fc7c 	bl	80007a0 <COM_AddStreamedVariable>

	COM_AddStreamedVariable(VAR_CO2_RECU, 3000);
 8002ea8:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002eac:	2089      	movs	r0, #137	; 0x89
 8002eae:	f7fd fc77 	bl	80007a0 <COM_AddStreamedVariable>
  COM_AddStreamedVariable(VAR_DP_RECU_F, 3000);
 8002eb2:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002eb6:	208a      	movs	r0, #138	; 0x8a
 8002eb8:	f7fd fc72 	bl	80007a0 <COM_AddStreamedVariable>
  COM_AddStreamedVariable(VAR_DP_RECU_W, 3000);
 8002ebc:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002ec0:	208b      	movs	r0, #139	; 0x8b
 8002ec2:	f7fd fc6d 	bl	80007a0 <COM_AddStreamedVariable>


  COM_AddStreamedVariable(VAR_RECU_FAN_F, 3000);
 8002ec6:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002eca:	208c      	movs	r0, #140	; 0x8c
 8002ecc:	f7fd fc68 	bl	80007a0 <COM_AddStreamedVariable>
  COM_AddStreamedVariable(VAR_RECU_FAN_W, 3000);
 8002ed0:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002ed4:	208d      	movs	r0, #141	; 0x8d
 8002ed6:	f7fd fc63 	bl	80007a0 <COM_AddStreamedVariable>
	/*configure elmeters*/

//	ELM_AddMeter(ELM_OTHER, EL1_Pin, VAR_CONS_OTHER_WH);


}
 8002eda:	bf00      	nop
 8002edc:	3740      	adds	r7, #64	; 0x40
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000d6c 	.word	0x20000d6c
 8002ee8:	40020000 	.word	0x40020000
 8002eec:	40020400 	.word	0x40020400
 8002ef0:	40020800 	.word	0x40020800
 8002ef4:	20000d30 	.word	0x20000d30
 8002ef8:	20000d94 	.word	0x20000d94
 8002efc:	20000de8 	.word	0x20000de8

08002f00 <APP_Start>:

void APP_Start(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b08a      	sub	sp, #40	; 0x28
 8002f04:	af00      	add	r7, sp, #0

	MCAN_Start();
 8002f06:	f7fd fdc3 	bl	8000a90 <MCAN_Start>
	while (1)   // endless loop
	{
  Scheduler_Check_Flag();
 8002f0a:	f000 fe2d 	bl	8003b68 <Scheduler_Check_Flag>

		s_CanRxMsg rmsg;
		while(1 == COM_GetRxMessage(&rmsg))  // process all messages in buffer
 8002f0e:	e003      	b.n	8002f18 <APP_Start+0x18>
		{
				ProcessMessage(&rmsg);
 8002f10:	1d3b      	adds	r3, r7, #4
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 f822 	bl	8002f5c <ProcessMessage>
		while(1 == COM_GetRxMessage(&rmsg))  // process all messages in buffer
 8002f18:	1d3b      	adds	r3, r7, #4
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fd fbc2 	bl	80006a4 <COM_GetRxMessage>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d0f4      	beq.n	8002f10 <APP_Start+0x10>
	{
 8002f26:	e7f0      	b.n	8002f0a <APP_Start+0xa>

08002f28 <APP_Update_1s>:


}

void APP_Update_1s(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
	static uint8_t dayNumber = 0;
	uint8_t newDayNumber = 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	73fb      	strb	r3, [r7, #15]
	sDateTime now = RTC_GetTime();
 8002f32:	1d3b      	adds	r3, r7, #4
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fe fc07 	bl	8001748 <RTC_GetTime>
	newDayNumber = now.Day;
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	73fb      	strb	r3, [r7, #15]
	if (dayNumber != newDayNumber)
 8002f3e:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <APP_Update_1s+0x30>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	7bfa      	ldrb	r2, [r7, #15]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d002      	beq.n	8002f4e <APP_Update_1s+0x26>
	{
		dayNumber = newDayNumber;
 8002f48:	4a03      	ldr	r2, [pc, #12]	; (8002f58 <APP_Update_1s+0x30>)
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
 8002f4c:	7013      	strb	r3, [r2, #0]
      }

     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
  }*/

}
 8002f4e:	bf00      	nop
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20000d3c 	.word	0x20000d3c

08002f5c <ProcessMessage>:

static void ProcessMessage(s_CanRxMsg* msg)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
	uint16_t cmd = msg->header.StdId & 0xFF0;  // maskout nodeid
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8002f6e:	82fb      	strh	r3, [r7, #22]
	//uint8_t producer = msg->header.StdId & 0x00F;  // maskout cmd
	int16_t par1,par2,par3; //,par4;
	uint32_t unixtime = 0;
 8002f70:	2300      	movs	r3, #0
 8002f72:	613b      	str	r3, [r7, #16]
	par1 = (msg->data[0] << 8) | msg->data[1];
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	7f1b      	ldrb	r3, [r3, #28]
 8002f78:	021b      	lsls	r3, r3, #8
 8002f7a:	b21a      	sxth	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	7f5b      	ldrb	r3, [r3, #29]
 8002f80:	b21b      	sxth	r3, r3
 8002f82:	4313      	orrs	r3, r2
 8002f84:	81fb      	strh	r3, [r7, #14]
	par2 = (msg->data[2] << 8) | msg->data[3];
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	7f9b      	ldrb	r3, [r3, #30]
 8002f8a:	021b      	lsls	r3, r3, #8
 8002f8c:	b21a      	sxth	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	7fdb      	ldrb	r3, [r3, #31]
 8002f92:	b21b      	sxth	r3, r3
 8002f94:	4313      	orrs	r3, r2
 8002f96:	81bb      	strh	r3, [r7, #12]
	par3 = (msg->data[4] << 8) | msg->data[5];
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f9e:	021b      	lsls	r3, r3, #8
 8002fa0:	b21a      	sxth	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fa8:	b21b      	sxth	r3, r3
 8002faa:	4313      	orrs	r3, r2
 8002fac:	817b      	strh	r3, [r7, #10]
	// par4 = (msg->data[6] << 8) | msg->data[7];

	switch (cmd)
 8002fae:	8afb      	ldrh	r3, [r7, #22]
 8002fb0:	f5b3 6fa2 	cmp.w	r3, #1296	; 0x510
 8002fb4:	d019      	beq.n	8002fea <ProcessMessage+0x8e>
 8002fb6:	f5b3 6fa2 	cmp.w	r3, #1296	; 0x510
 8002fba:	dc39      	bgt.n	8003030 <ProcessMessage+0xd4>
 8002fbc:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8002fc0:	d032      	beq.n	8003028 <ProcessMessage+0xcc>
 8002fc2:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8002fc6:	dc33      	bgt.n	8003030 <ProcessMessage+0xd4>
 8002fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fcc:	d02e      	beq.n	800302c <ProcessMessage+0xd0>
 8002fce:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8002fd2:	d000      	beq.n	8002fd6 <ProcessMessage+0x7a>
			unixtime |= msg->data[2] << 8;
			unixtime |= msg->data[3];
			RTC_SetUnixTime(unixtime);
			break;
	}
	return;
 8002fd4:	e02c      	b.n	8003030 <ProcessMessage+0xd4>
			VAR_SetVariable(par1, par2, par3);
 8002fd6:	89fb      	ldrh	r3, [r7, #14]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	897a      	ldrh	r2, [r7, #10]
 8002fdc:	b2d2      	uxtb	r2, r2
 8002fde:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff fd18 	bl	8002a18 <VAR_SetVariable>
			break;
 8002fe8:	e021      	b.n	800302e <ProcessMessage+0xd2>
			unixtime |= msg->data[0] << 24;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	7f1b      	ldrb	r3, [r3, #28]
 8002fee:	061b      	lsls	r3, r3, #24
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
			unixtime |= msg->data[1] << 16;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	7f5b      	ldrb	r3, [r3, #29]
 8002ffc:	041b      	lsls	r3, r3, #16
 8002ffe:	461a      	mov	r2, r3
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	4313      	orrs	r3, r2
 8003004:	613b      	str	r3, [r7, #16]
			unixtime |= msg->data[2] << 8;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	7f9b      	ldrb	r3, [r3, #30]
 800300a:	021b      	lsls	r3, r3, #8
 800300c:	461a      	mov	r2, r3
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
			unixtime |= msg->data[3];
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	7fdb      	ldrb	r3, [r3, #31]
 8003018:	461a      	mov	r2, r3
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
			RTC_SetUnixTime(unixtime);
 8003020:	6938      	ldr	r0, [r7, #16]
 8003022:	f7fe fc01 	bl	8001828 <RTC_SetUnixTime>
			break;
 8003026:	e002      	b.n	800302e <ProcessMessage+0xd2>
			break;
 8003028:	bf00      	nop
 800302a:	e000      	b.n	800302e <ProcessMessage+0xd2>
			break;
 800302c:	bf00      	nop
	return;
 800302e:	bf00      	nop
 8003030:	bf00      	nop
}
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <RECON_Init>:

void SetFanPct(uint8_t Fan, uint8_t pct);


void RECON_Init(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  mPWM.OCMode = TIM_OCMODE_PWM1;
 800303c:	4b18      	ldr	r3, [pc, #96]	; (80030a0 <RECON_Init+0x68>)
 800303e:	2260      	movs	r2, #96	; 0x60
 8003040:	601a      	str	r2, [r3, #0]
  mPWM.Pulse = 200;
 8003042:	4b17      	ldr	r3, [pc, #92]	; (80030a0 <RECON_Init+0x68>)
 8003044:	22c8      	movs	r2, #200	; 0xc8
 8003046:	605a      	str	r2, [r3, #4]
  mPWM.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003048:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <RECON_Init+0x68>)
 800304a:	2200      	movs	r2, #0
 800304c:	609a      	str	r2, [r3, #8]
  mPWM.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800304e:	4b14      	ldr	r3, [pc, #80]	; (80030a0 <RECON_Init+0x68>)
 8003050:	2200      	movs	r2, #0
 8003052:	60da      	str	r2, [r3, #12]
  mPWM.OCFastMode = TIM_OCFAST_DISABLE;
 8003054:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <RECON_Init+0x68>)
 8003056:	2200      	movs	r2, #0
 8003058:	611a      	str	r2, [r3, #16]
  mPWM.OCIdleState = TIM_OCIDLESTATE_RESET;
 800305a:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <RECON_Init+0x68>)
 800305c:	2200      	movs	r2, #0
 800305e:	615a      	str	r2, [r3, #20]
  mPWM.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003060:	4b0f      	ldr	r3, [pc, #60]	; (80030a0 <RECON_Init+0x68>)
 8003062:	2200      	movs	r2, #0
 8003064:	619a      	str	r2, [r3, #24]

  mFanInPct = 30;
 8003066:	4b0f      	ldr	r3, [pc, #60]	; (80030a4 <RECON_Init+0x6c>)
 8003068:	221e      	movs	r2, #30
 800306a:	801a      	strh	r2, [r3, #0]
  mFanOutPct = 30;
 800306c:	4b0e      	ldr	r3, [pc, #56]	; (80030a8 <RECON_Init+0x70>)
 800306e:	221e      	movs	r2, #30
 8003070:	801a      	strh	r2, [r3, #0]
  SetFanPct(FAN_IN,mFanInPct);
 8003072:	4b0c      	ldr	r3, [pc, #48]	; (80030a4 <RECON_Init+0x6c>)
 8003074:	881b      	ldrh	r3, [r3, #0]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	4619      	mov	r1, r3
 800307a:	2000      	movs	r0, #0
 800307c:	f000 f964 	bl	8003348 <SetFanPct>
  SetFanPct(FAN_OUT,mFanOutPct);
 8003080:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <RECON_Init+0x70>)
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	b2db      	uxtb	r3, r3
 8003086:	4619      	mov	r1, r3
 8003088:	2001      	movs	r0, #1
 800308a:	f000 f95d 	bl	8003348 <SetFanPct>
  mManualControl = 0;
 800308e:	4b07      	ldr	r3, [pc, #28]	; (80030ac <RECON_Init+0x74>)
 8003090:	2200      	movs	r2, #0
 8003092:	701a      	strb	r2, [r3, #0]
  mAntiDryOn = 0;
 8003094:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <RECON_Init+0x78>)
 8003096:	2200      	movs	r2, #0
 8003098:	701a      	strb	r2, [r3, #0]
}
 800309a:	bf00      	nop
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	20000d40 	.word	0x20000d40
 80030a4:	20000d5c 	.word	0x20000d5c
 80030a8:	20000d5e 	.word	0x20000d5e
 80030ac:	20000d68 	.word	0x20000d68
 80030b0:	20000d69 	.word	0x20000d69

080030b4 <RECON_Update_1s>:

void RECON_Update_1s(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
  int16_t fc_temp, wc_temp, co2 ,soc, wh_humidity, dumping_factor;
  uint16_t fan_limit, invalid ;

  mActionTimer++;
 80030ba:	4b9b      	ldr	r3, [pc, #620]	; (8003328 <RECON_Update_1s+0x274>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	3301      	adds	r3, #1
 80030c0:	4a99      	ldr	r2, [pc, #612]	; (8003328 <RECON_Update_1s+0x274>)
 80030c2:	6013      	str	r3, [r2, #0]

  // Chech day/night time
  sDateTime now = RTC_GetTime();
 80030c4:	463b      	mov	r3, r7
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fe fb3e 	bl	8001748 <RTC_GetTime>
  if(now.Hour > 6 && now.Hour < 21) fan_limit = FAN_MAX_DAY_FULL;
 80030cc:	783b      	ldrb	r3, [r7, #0]
 80030ce:	2b06      	cmp	r3, #6
 80030d0:	d905      	bls.n	80030de <RECON_Update_1s+0x2a>
 80030d2:	783b      	ldrb	r3, [r7, #0]
 80030d4:	2b14      	cmp	r3, #20
 80030d6:	d802      	bhi.n	80030de <RECON_Update_1s+0x2a>
 80030d8:	2337      	movs	r3, #55	; 0x37
 80030da:	82fb      	strh	r3, [r7, #22]
 80030dc:	e001      	b.n	80030e2 <RECON_Update_1s+0x2e>
  else fan_limit = FAN_MAX_NIGHT;
 80030de:	2319      	movs	r3, #25
 80030e0:	82fb      	strh	r3, [r7, #22]

  // collect the variables
  invalid = 0;
 80030e2:	2300      	movs	r3, #0
 80030e4:	813b      	strh	r3, [r7, #8]
  fc_temp = VAR_GetVariable(VAR_TEMP_RECU_FC,&invalid);  // input fresh air
 80030e6:	f107 0308 	add.w	r3, r7, #8
 80030ea:	4619      	mov	r1, r3
 80030ec:	2080      	movs	r0, #128	; 0x80
 80030ee:	f7ff fc5f 	bl	80029b0 <VAR_GetVariable>
 80030f2:	4603      	mov	r3, r0
 80030f4:	82bb      	strh	r3, [r7, #20]
  wc_temp = VAR_GetVariable(VAR_TEMP_RECU_WC,&invalid);  // input fresh air
 80030f6:	f107 0308 	add.w	r3, r7, #8
 80030fa:	4619      	mov	r1, r3
 80030fc:	2083      	movs	r0, #131	; 0x83
 80030fe:	f7ff fc57 	bl	80029b0 <VAR_GetVariable>
 8003102:	4603      	mov	r3, r0
 8003104:	827b      	strh	r3, [r7, #18]
  soc  = VAR_GetVariable(VAR_BAT_SOC,&invalid);     // battery soc
 8003106:	f107 0308 	add.w	r3, r7, #8
 800310a:	4619      	mov	r1, r3
 800310c:	200a      	movs	r0, #10
 800310e:	f7ff fc4f 	bl	80029b0 <VAR_GetVariable>
 8003112:	4603      	mov	r3, r0
 8003114:	823b      	strh	r3, [r7, #16]

  if(invalid)  // safety configuration in case some critical inputs are not valid
 8003116:	893b      	ldrh	r3, [r7, #8]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d008      	beq.n	800312e <RECON_Update_1s+0x7a>
  {
    SetFanPct(FAN_IN,0);
 800311c:	2100      	movs	r1, #0
 800311e:	2000      	movs	r0, #0
 8003120:	f000 f912 	bl	8003348 <SetFanPct>
    SetFanPct(FAN_OUT,10);
 8003124:	210a      	movs	r1, #10
 8003126:	2001      	movs	r0, #1
 8003128:	f000 f90e 	bl	8003348 <SetFanPct>
    return ;
 800312c:	e0f8      	b.n	8003320 <RECON_Update_1s+0x26c>
  }

  co2 = VAR_GetVariable(VAR_CO2_RECU, &invalid);
 800312e:	f107 0308 	add.w	r3, r7, #8
 8003132:	4619      	mov	r1, r3
 8003134:	2089      	movs	r0, #137	; 0x89
 8003136:	f7ff fc3b 	bl	80029b0 <VAR_GetVariable>
 800313a:	4603      	mov	r3, r0
 800313c:	81fb      	strh	r3, [r7, #14]
  wh_humidity = VAR_GetVariable(VAR_RH_RECU_WH, &invalid);
 800313e:	f107 0308 	add.w	r3, r7, #8
 8003142:	4619      	mov	r1, r3
 8003144:	2085      	movs	r0, #133	; 0x85
 8003146:	f7ff fc33 	bl	80029b0 <VAR_GetVariable>
 800314a:	4603      	mov	r3, r0
 800314c:	81bb      	strh	r3, [r7, #12]


  // check SOC - low power configuration.
  if(soc < LOW_SOC_OFF_THRESHOLD)
 800314e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003152:	2b27      	cmp	r3, #39	; 0x27
 8003154:	dc08      	bgt.n	8003168 <RECON_Update_1s+0xb4>
  {
    SetFanPct(FAN_IN,0);
 8003156:	2100      	movs	r1, #0
 8003158:	2000      	movs	r0, #0
 800315a:	f000 f8f5 	bl	8003348 <SetFanPct>
    SetFanPct(FAN_OUT,10);
 800315e:	210a      	movs	r1, #10
 8003160:	2001      	movs	r0, #1
 8003162:	f000 f8f1 	bl	8003348 <SetFanPct>
    return ;
 8003166:	e0db      	b.n	8003320 <RECON_Update_1s+0x26c>
  }

  if(soc < LOW_SOC_ECO_THRESHOLD && fan_limit > FAN_MAX_DAY_ECO)
 8003168:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800316c:	2b54      	cmp	r3, #84	; 0x54
 800316e:	dc04      	bgt.n	800317a <RECON_Update_1s+0xc6>
 8003170:	8afb      	ldrh	r3, [r7, #22]
 8003172:	2b23      	cmp	r3, #35	; 0x23
 8003174:	d901      	bls.n	800317a <RECON_Update_1s+0xc6>
  {
    fan_limit = FAN_MAX_DAY_ECO;
 8003176:	2323      	movs	r3, #35	; 0x23
 8003178:	82fb      	strh	r3, [r7, #22]
  }



  if(mManualControl == 0)
 800317a:	4b6c      	ldr	r3, [pc, #432]	; (800332c <RECON_Update_1s+0x278>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d133      	bne.n	80031ea <RECON_Update_1s+0x136>
  {
    // select control mode (co2 based or anti-dry  limitation)
    if((mAntiDryOn == 0) && wh_humidity <= RH_ANTI_DRY) // activate anti dry
 8003182:	4b6b      	ldr	r3, [pc, #428]	; (8003330 <RECON_Update_1s+0x27c>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d107      	bne.n	800319a <RECON_Update_1s+0xe6>
 800318a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800318e:	2b35      	cmp	r3, #53	; 0x35
 8003190:	dc03      	bgt.n	800319a <RECON_Update_1s+0xe6>
    {
      mAntiDryOn = 1;
 8003192:	4b67      	ldr	r3, [pc, #412]	; (8003330 <RECON_Update_1s+0x27c>)
 8003194:	2201      	movs	r2, #1
 8003196:	701a      	strb	r2, [r3, #0]
 8003198:	e00a      	b.n	80031b0 <RECON_Update_1s+0xfc>

    }
    else if((mAntiDryOn == 1) && wh_humidity > RH_ANTI_DRY + RH_ANTI_DRY_HIST) // deactivate anti dry feature and check CO2
 800319a:	4b65      	ldr	r3, [pc, #404]	; (8003330 <RECON_Update_1s+0x27c>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d106      	bne.n	80031b0 <RECON_Update_1s+0xfc>
 80031a2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80031a6:	2b37      	cmp	r3, #55	; 0x37
 80031a8:	dd02      	ble.n	80031b0 <RECON_Update_1s+0xfc>
    {
      mAntiDryOn = 0;
 80031aa:	4b61      	ldr	r3, [pc, #388]	; (8003330 <RECON_Update_1s+0x27c>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	701a      	strb	r2, [r3, #0]
    }

    // set fan limit  if anti dry mode is active
    if (mAntiDryOn == 1)
 80031b0:	4b5f      	ldr	r3, [pc, #380]	; (8003330 <RECON_Update_1s+0x27c>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <RECON_Update_1s+0x108>
    {
      fan_limit = FAN_ANTI_DRY;  // limit the fans to FAN_ANTI_DRY.  (The air humidity has higher prio than CO2 concentration)
 80031b8:	230f      	movs	r3, #15
 80031ba:	82fb      	strh	r3, [r7, #22]
    {
      // do not overwrite the fan limit
    }

    // optimal Fan PWM is calculated with respect to CO2 concentration.
    if(co2 > 600)
 80031bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031c0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80031c4:	dd0d      	ble.n	80031e2 <RECON_Update_1s+0x12e>
    {
      mFansPct = (co2 - 600) / 10;
 80031c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031ca:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80031ce:	4a59      	ldr	r2, [pc, #356]	; (8003334 <RECON_Update_1s+0x280>)
 80031d0:	fb82 1203 	smull	r1, r2, r2, r3
 80031d4:	1092      	asrs	r2, r2, #2
 80031d6:	17db      	asrs	r3, r3, #31
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	b29a      	uxth	r2, r3
 80031dc:	4b56      	ldr	r3, [pc, #344]	; (8003338 <RECON_Update_1s+0x284>)
 80031de:	801a      	strh	r2, [r3, #0]
 80031e0:	e01a      	b.n	8003218 <RECON_Update_1s+0x164>
    }
    else
    {
      mFansPct = 10;
 80031e2:	4b55      	ldr	r3, [pc, #340]	; (8003338 <RECON_Update_1s+0x284>)
 80031e4:	220a      	movs	r2, #10
 80031e6:	801a      	strh	r2, [r3, #0]
 80031e8:	e016      	b.n	8003218 <RECON_Update_1s+0x164>

  }

  else  // manual control by the button
  {
    fan_limit = 100;
 80031ea:	2364      	movs	r3, #100	; 0x64
 80031ec:	82fb      	strh	r3, [r7, #22]
    if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 80031ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031f2:	4852      	ldr	r0, [pc, #328]	; (800333c <RECON_Update_1s+0x288>)
 80031f4:	f002 faa4 	bl	8005740 <HAL_GPIO_ReadPin>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10c      	bne.n	8003218 <RECON_Update_1s+0x164>
   {
      mFansPct += 5;
 80031fe:	4b4e      	ldr	r3, [pc, #312]	; (8003338 <RECON_Update_1s+0x284>)
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	3305      	adds	r3, #5
 8003204:	b29a      	uxth	r2, r3
 8003206:	4b4c      	ldr	r3, [pc, #304]	; (8003338 <RECON_Update_1s+0x284>)
 8003208:	801a      	strh	r2, [r3, #0]
      if(mFansPct > 100)
 800320a:	4b4b      	ldr	r3, [pc, #300]	; (8003338 <RECON_Update_1s+0x284>)
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	2b64      	cmp	r3, #100	; 0x64
 8003210:	d902      	bls.n	8003218 <RECON_Update_1s+0x164>
      {
        mFansPct = FAN_MIN;
 8003212:	4b49      	ldr	r3, [pc, #292]	; (8003338 <RECON_Update_1s+0x284>)
 8003214:	220a      	movs	r2, #10
 8003216:	801a      	strh	r2, [r3, #0]
  }


  // now we can adjust ratio of the two fans and also apply the antifreeze feature if needed

  if(wc_temp > (ANTIFREEZE_TEMP_OUT_C10 + ANTIFREEZE_HYST_C10))  // no risk of freezink -> full ventilataion
 8003218:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800321c:	2b50      	cmp	r3, #80	; 0x50
 800321e:	dd29      	ble.n	8003274 <RECON_Update_1s+0x1c0>
  {
    mFanOutPct = mFansPct;
 8003220:	4b45      	ldr	r3, [pc, #276]	; (8003338 <RECON_Update_1s+0x284>)
 8003222:	881a      	ldrh	r2, [r3, #0]
 8003224:	4b46      	ldr	r3, [pc, #280]	; (8003340 <RECON_Update_1s+0x28c>)
 8003226:	801a      	strh	r2, [r3, #0]

    // apply limitations
    if(mFanOutPct > fan_limit) mFanOutPct = fan_limit;
 8003228:	4b45      	ldr	r3, [pc, #276]	; (8003340 <RECON_Update_1s+0x28c>)
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	8afa      	ldrh	r2, [r7, #22]
 800322e:	429a      	cmp	r2, r3
 8003230:	d202      	bcs.n	8003238 <RECON_Update_1s+0x184>
 8003232:	4a43      	ldr	r2, [pc, #268]	; (8003340 <RECON_Update_1s+0x28c>)
 8003234:	8afb      	ldrh	r3, [r7, #22]
 8003236:	8013      	strh	r3, [r2, #0]

    // calculate input fan relatively to output fan
    mFanInPct = (mFanOutPct * 9) / 10;   // optimal fan ratio to avoid overpressure/underpressure
 8003238:	4b41      	ldr	r3, [pc, #260]	; (8003340 <RECON_Update_1s+0x28c>)
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	461a      	mov	r2, r3
 800323e:	4613      	mov	r3, r2
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	4413      	add	r3, r2
 8003244:	4a3b      	ldr	r2, [pc, #236]	; (8003334 <RECON_Update_1s+0x280>)
 8003246:	fb82 1203 	smull	r1, r2, r2, r3
 800324a:	1092      	asrs	r2, r2, #2
 800324c:	17db      	asrs	r3, r3, #31
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	b29a      	uxth	r2, r3
 8003252:	4b3c      	ldr	r3, [pc, #240]	; (8003344 <RECON_Update_1s+0x290>)
 8003254:	801a      	strh	r2, [r3, #0]
    //mFanInPct = mFansPct;

    // range check (this can corrupt optimal fan ratio, but whatever)
    if(mFanInPct < FAN_MIN)  mFanInPct = FAN_MIN;
 8003256:	4b3b      	ldr	r3, [pc, #236]	; (8003344 <RECON_Update_1s+0x290>)
 8003258:	881b      	ldrh	r3, [r3, #0]
 800325a:	2b09      	cmp	r3, #9
 800325c:	d802      	bhi.n	8003264 <RECON_Update_1s+0x1b0>
 800325e:	4b39      	ldr	r3, [pc, #228]	; (8003344 <RECON_Update_1s+0x290>)
 8003260:	220a      	movs	r2, #10
 8003262:	801a      	strh	r2, [r3, #0]
    if(mFanOutPct < FAN_MIN) mFanOutPct = FAN_MIN;
 8003264:	4b36      	ldr	r3, [pc, #216]	; (8003340 <RECON_Update_1s+0x28c>)
 8003266:	881b      	ldrh	r3, [r3, #0]
 8003268:	2b09      	cmp	r3, #9
 800326a:	d84b      	bhi.n	8003304 <RECON_Update_1s+0x250>
 800326c:	4b34      	ldr	r3, [pc, #208]	; (8003340 <RECON_Update_1s+0x28c>)
 800326e:	220a      	movs	r2, #10
 8003270:	801a      	strh	r2, [r3, #0]
 8003272:	e047      	b.n	8003304 <RECON_Update_1s+0x250>

  }
  else if(wc_temp > ANTIFREEZE_TEMP_OUT_C10) // mitigating risk of freezing - reduced fresh(cold) air fan
 8003274:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003278:	2b28      	cmp	r3, #40	; 0x28
 800327a:	dd3d      	ble.n	80032f8 <RECON_Update_1s+0x244>
  {
    dumping_factor = ((wc_temp - ANTIFREEZE_TEMP_OUT_C10) / 10);
 800327c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003280:	3b28      	subs	r3, #40	; 0x28
 8003282:	4a2c      	ldr	r2, [pc, #176]	; (8003334 <RECON_Update_1s+0x280>)
 8003284:	fb82 1203 	smull	r1, r2, r2, r3
 8003288:	1092      	asrs	r2, r2, #2
 800328a:	17db      	asrs	r3, r3, #31
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	817b      	strh	r3, [r7, #10]
    mFanOutPct = mFansPct;
 8003290:	4b29      	ldr	r3, [pc, #164]	; (8003338 <RECON_Update_1s+0x284>)
 8003292:	881a      	ldrh	r2, [r3, #0]
 8003294:	4b2a      	ldr	r3, [pc, #168]	; (8003340 <RECON_Update_1s+0x28c>)
 8003296:	801a      	strh	r2, [r3, #0]
    mFanInPct = (mFansPct * (5 + dumping_factor)) / 10;  // input fan limted down to 50% of the output fan
 8003298:	4b27      	ldr	r3, [pc, #156]	; (8003338 <RECON_Update_1s+0x284>)
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	461a      	mov	r2, r3
 800329e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80032a2:	3305      	adds	r3, #5
 80032a4:	fb02 f303 	mul.w	r3, r2, r3
 80032a8:	4a22      	ldr	r2, [pc, #136]	; (8003334 <RECON_Update_1s+0x280>)
 80032aa:	fb82 1203 	smull	r1, r2, r2, r3
 80032ae:	1092      	asrs	r2, r2, #2
 80032b0:	17db      	asrs	r3, r3, #31
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	4b23      	ldr	r3, [pc, #140]	; (8003344 <RECON_Update_1s+0x290>)
 80032b8:	801a      	strh	r2, [r3, #0]

    // range check
    if(mFanOutPct < FAN_MIN) mFanOutPct = FAN_MIN;
 80032ba:	4b21      	ldr	r3, [pc, #132]	; (8003340 <RECON_Update_1s+0x28c>)
 80032bc:	881b      	ldrh	r3, [r3, #0]
 80032be:	2b09      	cmp	r3, #9
 80032c0:	d802      	bhi.n	80032c8 <RECON_Update_1s+0x214>
 80032c2:	4b1f      	ldr	r3, [pc, #124]	; (8003340 <RECON_Update_1s+0x28c>)
 80032c4:	220a      	movs	r2, #10
 80032c6:	801a      	strh	r2, [r3, #0]
    if(mFanOutPct > fan_limit)
 80032c8:	4b1d      	ldr	r3, [pc, #116]	; (8003340 <RECON_Update_1s+0x28c>)
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	8afa      	ldrh	r2, [r7, #22]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d218      	bcs.n	8003304 <RECON_Update_1s+0x250>
    {
      mFanOutPct = fan_limit;
 80032d2:	4a1b      	ldr	r2, [pc, #108]	; (8003340 <RECON_Update_1s+0x28c>)
 80032d4:	8afb      	ldrh	r3, [r7, #22]
 80032d6:	8013      	strh	r3, [r2, #0]
      mFanInPct = (fan_limit * (5 + dumping_factor)) / 10;
 80032d8:	8afb      	ldrh	r3, [r7, #22]
 80032da:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80032de:	3205      	adds	r2, #5
 80032e0:	fb02 f303 	mul.w	r3, r2, r3
 80032e4:	4a13      	ldr	r2, [pc, #76]	; (8003334 <RECON_Update_1s+0x280>)
 80032e6:	fb82 1203 	smull	r1, r2, r2, r3
 80032ea:	1092      	asrs	r2, r2, #2
 80032ec:	17db      	asrs	r3, r3, #31
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	4b14      	ldr	r3, [pc, #80]	; (8003344 <RECON_Update_1s+0x290>)
 80032f4:	801a      	strh	r2, [r3, #0]
 80032f6:	e005      	b.n	8003304 <RECON_Update_1s+0x250>
    }

  }
  else // high risk of freezing.  Turn off the input fan completely
  {
    mFanOutPct = 10;  // minimal output fan
 80032f8:	4b11      	ldr	r3, [pc, #68]	; (8003340 <RECON_Update_1s+0x28c>)
 80032fa:	220a      	movs	r2, #10
 80032fc:	801a      	strh	r2, [r3, #0]
    mFanInPct = 0;  // stopped input fan
 80032fe:	4b11      	ldr	r3, [pc, #68]	; (8003344 <RECON_Update_1s+0x290>)
 8003300:	2200      	movs	r2, #0
 8003302:	801a      	strh	r2, [r3, #0]
  }

  SetFanPct(FAN_IN,mFanInPct);
 8003304:	4b0f      	ldr	r3, [pc, #60]	; (8003344 <RECON_Update_1s+0x290>)
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	4619      	mov	r1, r3
 800330c:	2000      	movs	r0, #0
 800330e:	f000 f81b 	bl	8003348 <SetFanPct>
  SetFanPct(FAN_OUT,mFanOutPct);
 8003312:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <RECON_Update_1s+0x28c>)
 8003314:	881b      	ldrh	r3, [r3, #0]
 8003316:	b2db      	uxtb	r3, r3
 8003318:	4619      	mov	r1, r3
 800331a:	2001      	movs	r0, #1
 800331c:	f000 f814 	bl	8003348 <SetFanPct>

}
 8003320:	3718      	adds	r7, #24
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	20000d64 	.word	0x20000d64
 800332c:	20000d68 	.word	0x20000d68
 8003330:	20000d69 	.word	0x20000d69
 8003334:	66666667 	.word	0x66666667
 8003338:	20000d60 	.word	0x20000d60
 800333c:	40020800 	.word	0x40020800
 8003340:	20000d5e 	.word	0x20000d5e
 8003344:	20000d5c 	.word	0x20000d5c

08003348 <SetFanPct>:




void SetFanPct(uint8_t Fan, uint8_t pct)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	460a      	mov	r2, r1
 8003352:	71fb      	strb	r3, [r7, #7]
 8003354:	4613      	mov	r3, r2
 8003356:	71bb      	strb	r3, [r7, #6]
  mPWM.Pulse = pct * 10;
 8003358:	79ba      	ldrb	r2, [r7, #6]
 800335a:	4613      	mov	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	461a      	mov	r2, r3
 8003364:	4b1f      	ldr	r3, [pc, #124]	; (80033e4 <SetFanPct+0x9c>)
 8003366:	605a      	str	r2, [r3, #4]
  if(Fan == FAN_IN)
 8003368:	79fb      	ldrb	r3, [r7, #7]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d119      	bne.n	80033a2 <SetFanPct+0x5a>
  {
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800336e:	2100      	movs	r1, #0
 8003370:	481d      	ldr	r0, [pc, #116]	; (80033e8 <SetFanPct+0xa0>)
 8003372:	f006 fb77 	bl	8009a64 <HAL_TIM_PWM_Stop>
    if (HAL_TIM_PWM_ConfigChannel(&htim1, &mPWM, TIM_CHANNEL_1) != HAL_OK)
 8003376:	2200      	movs	r2, #0
 8003378:	491a      	ldr	r1, [pc, #104]	; (80033e4 <SetFanPct+0x9c>)
 800337a:	481b      	ldr	r0, [pc, #108]	; (80033e8 <SetFanPct+0xa0>)
 800337c:	f006 fcea 	bl	8009d54 <HAL_TIM_PWM_ConfigChannel>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <SetFanPct+0x42>
    {
      Error_Handler();
 8003386:	f000 fb6f 	bl	8003a68 <Error_Handler>
    }
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800338a:	2100      	movs	r1, #0
 800338c:	4816      	ldr	r0, [pc, #88]	; (80033e8 <SetFanPct+0xa0>)
 800338e:	f006 faa1 	bl	80098d4 <HAL_TIM_PWM_Start>
    VAR_SetVariable(VAR_RECU_FAN_F, pct,1);
 8003392:	79bb      	ldrb	r3, [r7, #6]
 8003394:	b21b      	sxth	r3, r3
 8003396:	2201      	movs	r2, #1
 8003398:	4619      	mov	r1, r3
 800339a:	208c      	movs	r0, #140	; 0x8c
 800339c:	f7ff fb3c 	bl	8002a18 <VAR_SetVariable>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
    VAR_SetVariable(VAR_RECU_FAN_W, pct,1);
  }


}
 80033a0:	e01b      	b.n	80033da <SetFanPct+0x92>
  else if(Fan == FAN_OUT)
 80033a2:	79fb      	ldrb	r3, [r7, #7]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d118      	bne.n	80033da <SetFanPct+0x92>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80033a8:	2104      	movs	r1, #4
 80033aa:	480f      	ldr	r0, [pc, #60]	; (80033e8 <SetFanPct+0xa0>)
 80033ac:	f006 fb5a 	bl	8009a64 <HAL_TIM_PWM_Stop>
    if (HAL_TIM_PWM_ConfigChannel(&htim1, &mPWM, TIM_CHANNEL_2) != HAL_OK)
 80033b0:	2204      	movs	r2, #4
 80033b2:	490c      	ldr	r1, [pc, #48]	; (80033e4 <SetFanPct+0x9c>)
 80033b4:	480c      	ldr	r0, [pc, #48]	; (80033e8 <SetFanPct+0xa0>)
 80033b6:	f006 fccd 	bl	8009d54 <HAL_TIM_PWM_ConfigChannel>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <SetFanPct+0x7c>
      Error_Handler();
 80033c0:	f000 fb52 	bl	8003a68 <Error_Handler>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80033c4:	2104      	movs	r1, #4
 80033c6:	4808      	ldr	r0, [pc, #32]	; (80033e8 <SetFanPct+0xa0>)
 80033c8:	f006 fa84 	bl	80098d4 <HAL_TIM_PWM_Start>
    VAR_SetVariable(VAR_RECU_FAN_W, pct,1);
 80033cc:	79bb      	ldrb	r3, [r7, #6]
 80033ce:	b21b      	sxth	r3, r3
 80033d0:	2201      	movs	r2, #1
 80033d2:	4619      	mov	r1, r3
 80033d4:	208d      	movs	r0, #141	; 0x8d
 80033d6:	f7ff fb1f 	bl	8002a18 <VAR_SetVariable>
}
 80033da:	bf00      	nop
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20000d40 	.word	0x20000d40
 80033e8:	20000e68 	.word	0x20000e68

080033ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033f0:	f000 ffe2 	bl	80043b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033f4:	f000 f81e 	bl	8003434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033f8:	f000 fa9e 	bl	8003938 <MX_GPIO_Init>
  MX_TIM1_Init();
 80033fc:	f000 f990 	bl	8003720 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8003400:	f000 fa70 	bl	80038e4 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8003404:	f000 f886 	bl	8003514 <MX_CAN1_Init>
  MX_I2C1_Init();
 8003408:	f000 f8ba 	bl	8003580 <MX_I2C1_Init>
  MX_TIM6_Init();
 800340c:	f000 fa34 	bl	8003878 <MX_TIM6_Init>
  MX_IWDG_Init();
 8003410:	f000 f912 	bl	8003638 <MX_IWDG_Init>
  MX_RTC_Init();
 8003414:	f000 f92a 	bl	800366c <MX_RTC_Init>
  MX_I2C2_Init();
 8003418:	f000 f8e0 	bl	80035dc <MX_I2C2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

 // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);

  APP_Init();
 800341c:	f7ff fc76 	bl	8002d0c <APP_Init>

  APP_Start();
 8003420:	f7ff fd6e 	bl	8002f00 <APP_Start>

  while (1)
  {

     if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 8003424:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003428:	4801      	ldr	r0, [pc, #4]	; (8003430 <main+0x44>)
 800342a:	f002 f989 	bl	8005740 <HAL_GPIO_ReadPin>
 800342e:	e7f9      	b.n	8003424 <main+0x38>
 8003430:	40020800 	.word	0x40020800

08003434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b094      	sub	sp, #80	; 0x50
 8003438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800343a:	f107 031c 	add.w	r3, r7, #28
 800343e:	2234      	movs	r2, #52	; 0x34
 8003440:	2100      	movs	r1, #0
 8003442:	4618      	mov	r0, r3
 8003444:	f007 fe50 	bl	800b0e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003448:	f107 0308 	add.w	r3, r7, #8
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	605a      	str	r2, [r3, #4]
 8003452:	609a      	str	r2, [r3, #8]
 8003454:	60da      	str	r2, [r3, #12]
 8003456:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003458:	2300      	movs	r3, #0
 800345a:	607b      	str	r3, [r7, #4]
 800345c:	4b2b      	ldr	r3, [pc, #172]	; (800350c <SystemClock_Config+0xd8>)
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	4a2a      	ldr	r2, [pc, #168]	; (800350c <SystemClock_Config+0xd8>)
 8003462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003466:	6413      	str	r3, [r2, #64]	; 0x40
 8003468:	4b28      	ldr	r3, [pc, #160]	; (800350c <SystemClock_Config+0xd8>)
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003470:	607b      	str	r3, [r7, #4]
 8003472:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003474:	2300      	movs	r3, #0
 8003476:	603b      	str	r3, [r7, #0]
 8003478:	4b25      	ldr	r3, [pc, #148]	; (8003510 <SystemClock_Config+0xdc>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003480:	4a23      	ldr	r2, [pc, #140]	; (8003510 <SystemClock_Config+0xdc>)
 8003482:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003486:	6013      	str	r3, [r2, #0]
 8003488:	4b21      	ldr	r3, [pc, #132]	; (8003510 <SystemClock_Config+0xdc>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003490:	603b      	str	r3, [r7, #0]
 8003492:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003494:	2309      	movs	r3, #9
 8003496:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003498:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800349c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800349e:	2301      	movs	r3, #1
 80034a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80034a2:	2301      	movs	r3, #1
 80034a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034a6:	2302      	movs	r3, #2
 80034a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80034aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80034b0:	2308      	movs	r3, #8
 80034b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 200;
 80034b4:	23c8      	movs	r3, #200	; 0xc8
 80034b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80034b8:	2304      	movs	r3, #4
 80034ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80034bc:	2302      	movs	r3, #2
 80034be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80034c0:	2302      	movs	r3, #2
 80034c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034c4:	f107 031c 	add.w	r3, r7, #28
 80034c8:	4618      	mov	r0, r3
 80034ca:	f005 fba5 	bl	8008c18 <HAL_RCC_OscConfig>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80034d4:	f000 fac8 	bl	8003a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034d8:	230f      	movs	r3, #15
 80034da:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034dc:	2302      	movs	r3, #2
 80034de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034e0:	2300      	movs	r3, #0
 80034e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80034e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80034ee:	f107 0308 	add.w	r3, r7, #8
 80034f2:	2101      	movs	r1, #1
 80034f4:	4618      	mov	r0, r3
 80034f6:	f004 fd1b 	bl	8007f30 <HAL_RCC_ClockConfig>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8003500:	f000 fab2 	bl	8003a68 <Error_Handler>
  }
}
 8003504:	bf00      	nop
 8003506:	3750      	adds	r7, #80	; 0x50
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40023800 	.word	0x40023800
 8003510:	40007000 	.word	0x40007000

08003514 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003518:	4b17      	ldr	r3, [pc, #92]	; (8003578 <MX_CAN1_Init+0x64>)
 800351a:	4a18      	ldr	r2, [pc, #96]	; (800357c <MX_CAN1_Init+0x68>)
 800351c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 800351e:	4b16      	ldr	r3, [pc, #88]	; (8003578 <MX_CAN1_Init+0x64>)
 8003520:	2205      	movs	r2, #5
 8003522:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003524:	4b14      	ldr	r3, [pc, #80]	; (8003578 <MX_CAN1_Init+0x64>)
 8003526:	2200      	movs	r2, #0
 8003528:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800352a:	4b13      	ldr	r3, [pc, #76]	; (8003578 <MX_CAN1_Init+0x64>)
 800352c:	2200      	movs	r2, #0
 800352e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8003530:	4b11      	ldr	r3, [pc, #68]	; (8003578 <MX_CAN1_Init+0x64>)
 8003532:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003536:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8003538:	4b0f      	ldr	r3, [pc, #60]	; (8003578 <MX_CAN1_Init+0x64>)
 800353a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800353e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003540:	4b0d      	ldr	r3, [pc, #52]	; (8003578 <MX_CAN1_Init+0x64>)
 8003542:	2200      	movs	r2, #0
 8003544:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8003546:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <MX_CAN1_Init+0x64>)
 8003548:	2201      	movs	r2, #1
 800354a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800354c:	4b0a      	ldr	r3, [pc, #40]	; (8003578 <MX_CAN1_Init+0x64>)
 800354e:	2200      	movs	r2, #0
 8003550:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8003552:	4b09      	ldr	r3, [pc, #36]	; (8003578 <MX_CAN1_Init+0x64>)
 8003554:	2201      	movs	r2, #1
 8003556:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003558:	4b07      	ldr	r3, [pc, #28]	; (8003578 <MX_CAN1_Init+0x64>)
 800355a:	2200      	movs	r2, #0
 800355c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 800355e:	4b06      	ldr	r3, [pc, #24]	; (8003578 <MX_CAN1_Init+0x64>)
 8003560:	2201      	movs	r2, #1
 8003562:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003564:	4804      	ldr	r0, [pc, #16]	; (8003578 <MX_CAN1_Init+0x64>)
 8003566:	f000 ffbd 	bl	80044e4 <HAL_CAN_Init>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8003570:	f000 fa7a 	bl	8003a68 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003574:	bf00      	nop
 8003576:	bd80      	pop	{r7, pc}
 8003578:	20000d6c 	.word	0x20000d6c
 800357c:	40006400 	.word	0x40006400

08003580 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003584:	4b13      	ldr	r3, [pc, #76]	; (80035d4 <MX_I2C1_Init+0x54>)
 8003586:	4a14      	ldr	r2, [pc, #80]	; (80035d8 <MX_I2C1_Init+0x58>)
 8003588:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 800358a:	4b12      	ldr	r3, [pc, #72]	; (80035d4 <MX_I2C1_Init+0x54>)
 800358c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003590:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003592:	4b10      	ldr	r3, [pc, #64]	; (80035d4 <MX_I2C1_Init+0x54>)
 8003594:	2200      	movs	r2, #0
 8003596:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003598:	4b0e      	ldr	r3, [pc, #56]	; (80035d4 <MX_I2C1_Init+0x54>)
 800359a:	2200      	movs	r2, #0
 800359c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800359e:	4b0d      	ldr	r3, [pc, #52]	; (80035d4 <MX_I2C1_Init+0x54>)
 80035a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80035a6:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <MX_I2C1_Init+0x54>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80035ac:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <MX_I2C1_Init+0x54>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035b2:	4b08      	ldr	r3, [pc, #32]	; (80035d4 <MX_I2C1_Init+0x54>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80035b8:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <MX_I2C1_Init+0x54>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80035be:	4805      	ldr	r0, [pc, #20]	; (80035d4 <MX_I2C1_Init+0x54>)
 80035c0:	f002 f90a 	bl	80057d8 <HAL_I2C_Init>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80035ca:	f000 fa4d 	bl	8003a68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000d94 	.word	0x20000d94
 80035d8:	40005400 	.word	0x40005400

080035dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80035e0:	4b13      	ldr	r3, [pc, #76]	; (8003630 <MX_I2C2_Init+0x54>)
 80035e2:	4a14      	ldr	r2, [pc, #80]	; (8003634 <MX_I2C2_Init+0x58>)
 80035e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 10000;
 80035e6:	4b12      	ldr	r3, [pc, #72]	; (8003630 <MX_I2C2_Init+0x54>)
 80035e8:	f242 7210 	movw	r2, #10000	; 0x2710
 80035ec:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80035ee:	4b10      	ldr	r3, [pc, #64]	; (8003630 <MX_I2C2_Init+0x54>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80035f4:	4b0e      	ldr	r3, [pc, #56]	; (8003630 <MX_I2C2_Init+0x54>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035fa:	4b0d      	ldr	r3, [pc, #52]	; (8003630 <MX_I2C2_Init+0x54>)
 80035fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003600:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003602:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <MX_I2C2_Init+0x54>)
 8003604:	2200      	movs	r2, #0
 8003606:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003608:	4b09      	ldr	r3, [pc, #36]	; (8003630 <MX_I2C2_Init+0x54>)
 800360a:	2200      	movs	r2, #0
 800360c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800360e:	4b08      	ldr	r3, [pc, #32]	; (8003630 <MX_I2C2_Init+0x54>)
 8003610:	2200      	movs	r2, #0
 8003612:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003614:	4b06      	ldr	r3, [pc, #24]	; (8003630 <MX_I2C2_Init+0x54>)
 8003616:	2200      	movs	r2, #0
 8003618:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800361a:	4805      	ldr	r0, [pc, #20]	; (8003630 <MX_I2C2_Init+0x54>)
 800361c:	f002 f8dc 	bl	80057d8 <HAL_I2C_Init>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 8003626:	f000 fa1f 	bl	8003a68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800362a:	bf00      	nop
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	20000de8 	.word	0x20000de8
 8003634:	40005800 	.word	0x40005800

08003638 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800363c:	4b09      	ldr	r3, [pc, #36]	; (8003664 <MX_IWDG_Init+0x2c>)
 800363e:	4a0a      	ldr	r2, [pc, #40]	; (8003668 <MX_IWDG_Init+0x30>)
 8003640:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8003642:	4b08      	ldr	r3, [pc, #32]	; (8003664 <MX_IWDG_Init+0x2c>)
 8003644:	2206      	movs	r2, #6
 8003646:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8003648:	4b06      	ldr	r3, [pc, #24]	; (8003664 <MX_IWDG_Init+0x2c>)
 800364a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800364e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003650:	4804      	ldr	r0, [pc, #16]	; (8003664 <MX_IWDG_Init+0x2c>)
 8003652:	f004 fc1b 	bl	8007e8c <HAL_IWDG_Init>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800365c:	f000 fa04 	bl	8003a68 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8003660:	bf00      	nop
 8003662:	bd80      	pop	{r7, pc}
 8003664:	20000e3c 	.word	0x20000e3c
 8003668:	40003000 	.word	0x40003000

0800366c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003672:	1d3b      	adds	r3, r7, #4
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	605a      	str	r2, [r3, #4]
 800367a:	609a      	str	r2, [r3, #8]
 800367c:	60da      	str	r2, [r3, #12]
 800367e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003680:	2300      	movs	r3, #0
 8003682:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003684:	4b24      	ldr	r3, [pc, #144]	; (8003718 <MX_RTC_Init+0xac>)
 8003686:	4a25      	ldr	r2, [pc, #148]	; (800371c <MX_RTC_Init+0xb0>)
 8003688:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800368a:	4b23      	ldr	r3, [pc, #140]	; (8003718 <MX_RTC_Init+0xac>)
 800368c:	2200      	movs	r2, #0
 800368e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 124;
 8003690:	4b21      	ldr	r3, [pc, #132]	; (8003718 <MX_RTC_Init+0xac>)
 8003692:	227c      	movs	r2, #124	; 0x7c
 8003694:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 3999;
 8003696:	4b20      	ldr	r3, [pc, #128]	; (8003718 <MX_RTC_Init+0xac>)
 8003698:	f640 729f 	movw	r2, #3999	; 0xf9f
 800369c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800369e:	4b1e      	ldr	r3, [pc, #120]	; (8003718 <MX_RTC_Init+0xac>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80036a4:	4b1c      	ldr	r3, [pc, #112]	; (8003718 <MX_RTC_Init+0xac>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80036aa:	4b1b      	ldr	r3, [pc, #108]	; (8003718 <MX_RTC_Init+0xac>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80036b0:	4819      	ldr	r0, [pc, #100]	; (8003718 <MX_RTC_Init+0xac>)
 80036b2:	f005 fd4f 	bl	8009154 <HAL_RTC_Init>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80036bc:	f000 f9d4 	bl	8003a68 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80036c0:	2300      	movs	r3, #0
 80036c2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80036c4:	2300      	movs	r3, #0
 80036c6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80036c8:	2300      	movs	r3, #0
 80036ca:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80036cc:	2300      	movs	r3, #0
 80036ce:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80036d0:	2300      	movs	r3, #0
 80036d2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80036d4:	1d3b      	adds	r3, r7, #4
 80036d6:	2201      	movs	r2, #1
 80036d8:	4619      	mov	r1, r3
 80036da:	480f      	ldr	r0, [pc, #60]	; (8003718 <MX_RTC_Init+0xac>)
 80036dc:	f005 fdb0 	bl	8009240 <HAL_RTC_SetTime>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 80036e6:	f000 f9bf 	bl	8003a68 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80036ea:	2301      	movs	r3, #1
 80036ec:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80036ee:	2301      	movs	r3, #1
 80036f0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80036f2:	2301      	movs	r3, #1
 80036f4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80036f6:	2300      	movs	r3, #0
 80036f8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80036fa:	463b      	mov	r3, r7
 80036fc:	2201      	movs	r2, #1
 80036fe:	4619      	mov	r1, r3
 8003700:	4805      	ldr	r0, [pc, #20]	; (8003718 <MX_RTC_Init+0xac>)
 8003702:	f005 fe95 	bl	8009430 <HAL_RTC_SetDate>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 800370c:	f000 f9ac 	bl	8003a68 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003710:	bf00      	nop
 8003712:	3718      	adds	r7, #24
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	20000e48 	.word	0x20000e48
 800371c:	40002800 	.word	0x40002800

08003720 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b096      	sub	sp, #88	; 0x58
 8003724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003726:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	605a      	str	r2, [r3, #4]
 8003730:	609a      	str	r2, [r3, #8]
 8003732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003734:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800373e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	605a      	str	r2, [r3, #4]
 8003748:	609a      	str	r2, [r3, #8]
 800374a:	60da      	str	r2, [r3, #12]
 800374c:	611a      	str	r2, [r3, #16]
 800374e:	615a      	str	r2, [r3, #20]
 8003750:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003752:	1d3b      	adds	r3, r7, #4
 8003754:	2220      	movs	r2, #32
 8003756:	2100      	movs	r1, #0
 8003758:	4618      	mov	r0, r3
 800375a:	f007 fcc5 	bl	800b0e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800375e:	4b44      	ldr	r3, [pc, #272]	; (8003870 <MX_TIM1_Init+0x150>)
 8003760:	4a44      	ldr	r2, [pc, #272]	; (8003874 <MX_TIM1_Init+0x154>)
 8003762:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24;
 8003764:	4b42      	ldr	r3, [pc, #264]	; (8003870 <MX_TIM1_Init+0x150>)
 8003766:	2218      	movs	r2, #24
 8003768:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800376a:	4b41      	ldr	r3, [pc, #260]	; (8003870 <MX_TIM1_Init+0x150>)
 800376c:	2200      	movs	r2, #0
 800376e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8003770:	4b3f      	ldr	r3, [pc, #252]	; (8003870 <MX_TIM1_Init+0x150>)
 8003772:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003776:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003778:	4b3d      	ldr	r3, [pc, #244]	; (8003870 <MX_TIM1_Init+0x150>)
 800377a:	2200      	movs	r2, #0
 800377c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800377e:	4b3c      	ldr	r3, [pc, #240]	; (8003870 <MX_TIM1_Init+0x150>)
 8003780:	2200      	movs	r2, #0
 8003782:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003784:	4b3a      	ldr	r3, [pc, #232]	; (8003870 <MX_TIM1_Init+0x150>)
 8003786:	2200      	movs	r2, #0
 8003788:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800378a:	4839      	ldr	r0, [pc, #228]	; (8003870 <MX_TIM1_Init+0x150>)
 800378c:	f005 fffa 	bl	8009784 <HAL_TIM_Base_Init>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003796:	f000 f967 	bl	8003a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800379a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800379e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80037a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037a4:	4619      	mov	r1, r3
 80037a6:	4832      	ldr	r0, [pc, #200]	; (8003870 <MX_TIM1_Init+0x150>)
 80037a8:	f006 fb96 	bl	8009ed8 <HAL_TIM_ConfigClockSource>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80037b2:	f000 f959 	bl	8003a68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80037b6:	482e      	ldr	r0, [pc, #184]	; (8003870 <MX_TIM1_Init+0x150>)
 80037b8:	f006 f833 	bl	8009822 <HAL_TIM_PWM_Init>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80037c2:	f000 f951 	bl	8003a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037c6:	2300      	movs	r3, #0
 80037c8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037ca:	2300      	movs	r3, #0
 80037cc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80037ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037d2:	4619      	mov	r1, r3
 80037d4:	4826      	ldr	r0, [pc, #152]	; (8003870 <MX_TIM1_Init+0x150>)
 80037d6:	f006 ff89 	bl	800a6ec <HAL_TIMEx_MasterConfigSynchronization>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80037e0:	f000 f942 	bl	8003a68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037e4:	2360      	movs	r3, #96	; 0x60
 80037e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 200;
 80037e8:	23c8      	movs	r3, #200	; 0xc8
 80037ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037ec:	2300      	movs	r3, #0
 80037ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80037f0:	2300      	movs	r3, #0
 80037f2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037f4:	2300      	movs	r3, #0
 80037f6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80037f8:	2300      	movs	r3, #0
 80037fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80037fc:	2300      	movs	r3, #0
 80037fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003804:	2200      	movs	r2, #0
 8003806:	4619      	mov	r1, r3
 8003808:	4819      	ldr	r0, [pc, #100]	; (8003870 <MX_TIM1_Init+0x150>)
 800380a:	f006 faa3 	bl	8009d54 <HAL_TIM_PWM_ConfigChannel>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003814:	f000 f928 	bl	8003a68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800381c:	2204      	movs	r2, #4
 800381e:	4619      	mov	r1, r3
 8003820:	4813      	ldr	r0, [pc, #76]	; (8003870 <MX_TIM1_Init+0x150>)
 8003822:	f006 fa97 	bl	8009d54 <HAL_TIM_PWM_ConfigChannel>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800382c:	f000 f91c 	bl	8003a68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003830:	2300      	movs	r3, #0
 8003832:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003834:	2300      	movs	r3, #0
 8003836:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003838:	2300      	movs	r3, #0
 800383a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800383c:	2300      	movs	r3, #0
 800383e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003840:	2300      	movs	r3, #0
 8003842:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003844:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003848:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800384a:	2300      	movs	r3, #0
 800384c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800384e:	1d3b      	adds	r3, r7, #4
 8003850:	4619      	mov	r1, r3
 8003852:	4807      	ldr	r0, [pc, #28]	; (8003870 <MX_TIM1_Init+0x150>)
 8003854:	f006 ffc6 	bl	800a7e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800385e:	f000 f903 	bl	8003a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003862:	4803      	ldr	r0, [pc, #12]	; (8003870 <MX_TIM1_Init+0x150>)
 8003864:	f000 fbba 	bl	8003fdc <HAL_TIM_MspPostInit>

}
 8003868:	bf00      	nop
 800386a:	3758      	adds	r7, #88	; 0x58
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	20000e68 	.word	0x20000e68
 8003874:	40010000 	.word	0x40010000

08003878 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800387e:	463b      	mov	r3, r7
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003886:	4b15      	ldr	r3, [pc, #84]	; (80038dc <MX_TIM6_Init+0x64>)
 8003888:	4a15      	ldr	r2, [pc, #84]	; (80038e0 <MX_TIM6_Init+0x68>)
 800388a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 800388c:	4b13      	ldr	r3, [pc, #76]	; (80038dc <MX_TIM6_Init+0x64>)
 800388e:	2204      	movs	r2, #4
 8003890:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003892:	4b12      	ldr	r3, [pc, #72]	; (80038dc <MX_TIM6_Init+0x64>)
 8003894:	2200      	movs	r2, #0
 8003896:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8003898:	4b10      	ldr	r3, [pc, #64]	; (80038dc <MX_TIM6_Init+0x64>)
 800389a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800389e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038a0:	4b0e      	ldr	r3, [pc, #56]	; (80038dc <MX_TIM6_Init+0x64>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80038a6:	480d      	ldr	r0, [pc, #52]	; (80038dc <MX_TIM6_Init+0x64>)
 80038a8:	f005 ff6c 	bl	8009784 <HAL_TIM_Base_Init>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80038b2:	f000 f8d9 	bl	8003a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038b6:	2300      	movs	r3, #0
 80038b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038ba:	2300      	movs	r3, #0
 80038bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80038be:	463b      	mov	r3, r7
 80038c0:	4619      	mov	r1, r3
 80038c2:	4806      	ldr	r0, [pc, #24]	; (80038dc <MX_TIM6_Init+0x64>)
 80038c4:	f006 ff12 	bl	800a6ec <HAL_TIMEx_MasterConfigSynchronization>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80038ce:	f000 f8cb 	bl	8003a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80038d2:	bf00      	nop
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	20000eb0 	.word	0x20000eb0
 80038e0:	40001000 	.word	0x40001000

080038e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80038e8:	4b11      	ldr	r3, [pc, #68]	; (8003930 <MX_USART2_UART_Init+0x4c>)
 80038ea:	4a12      	ldr	r2, [pc, #72]	; (8003934 <MX_USART2_UART_Init+0x50>)
 80038ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80038ee:	4b10      	ldr	r3, [pc, #64]	; (8003930 <MX_USART2_UART_Init+0x4c>)
 80038f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80038f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80038f6:	4b0e      	ldr	r3, [pc, #56]	; (8003930 <MX_USART2_UART_Init+0x4c>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80038fc:	4b0c      	ldr	r3, [pc, #48]	; (8003930 <MX_USART2_UART_Init+0x4c>)
 80038fe:	2200      	movs	r2, #0
 8003900:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003902:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <MX_USART2_UART_Init+0x4c>)
 8003904:	2200      	movs	r2, #0
 8003906:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003908:	4b09      	ldr	r3, [pc, #36]	; (8003930 <MX_USART2_UART_Init+0x4c>)
 800390a:	220c      	movs	r2, #12
 800390c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800390e:	4b08      	ldr	r3, [pc, #32]	; (8003930 <MX_USART2_UART_Init+0x4c>)
 8003910:	2200      	movs	r2, #0
 8003912:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003914:	4b06      	ldr	r3, [pc, #24]	; (8003930 <MX_USART2_UART_Init+0x4c>)
 8003916:	2200      	movs	r2, #0
 8003918:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800391a:	4805      	ldr	r0, [pc, #20]	; (8003930 <MX_USART2_UART_Init+0x4c>)
 800391c:	f006 ffc8 	bl	800a8b0 <HAL_UART_Init>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003926:	f000 f89f 	bl	8003a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800392a:	bf00      	nop
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	20000ef8 	.word	0x20000ef8
 8003934:	40004400 	.word	0x40004400

08003938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b08a      	sub	sp, #40	; 0x28
 800393c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800393e:	f107 0314 	add.w	r3, r7, #20
 8003942:	2200      	movs	r2, #0
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	605a      	str	r2, [r3, #4]
 8003948:	609a      	str	r2, [r3, #8]
 800394a:	60da      	str	r2, [r3, #12]
 800394c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800394e:	2300      	movs	r3, #0
 8003950:	613b      	str	r3, [r7, #16]
 8003952:	4b41      	ldr	r3, [pc, #260]	; (8003a58 <MX_GPIO_Init+0x120>)
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	4a40      	ldr	r2, [pc, #256]	; (8003a58 <MX_GPIO_Init+0x120>)
 8003958:	f043 0304 	orr.w	r3, r3, #4
 800395c:	6313      	str	r3, [r2, #48]	; 0x30
 800395e:	4b3e      	ldr	r3, [pc, #248]	; (8003a58 <MX_GPIO_Init+0x120>)
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	f003 0304 	and.w	r3, r3, #4
 8003966:	613b      	str	r3, [r7, #16]
 8003968:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800396a:	2300      	movs	r3, #0
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	4b3a      	ldr	r3, [pc, #232]	; (8003a58 <MX_GPIO_Init+0x120>)
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	4a39      	ldr	r2, [pc, #228]	; (8003a58 <MX_GPIO_Init+0x120>)
 8003974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003978:	6313      	str	r3, [r2, #48]	; 0x30
 800397a:	4b37      	ldr	r3, [pc, #220]	; (8003a58 <MX_GPIO_Init+0x120>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003986:	2300      	movs	r3, #0
 8003988:	60bb      	str	r3, [r7, #8]
 800398a:	4b33      	ldr	r3, [pc, #204]	; (8003a58 <MX_GPIO_Init+0x120>)
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	4a32      	ldr	r2, [pc, #200]	; (8003a58 <MX_GPIO_Init+0x120>)
 8003990:	f043 0301 	orr.w	r3, r3, #1
 8003994:	6313      	str	r3, [r2, #48]	; 0x30
 8003996:	4b30      	ldr	r3, [pc, #192]	; (8003a58 <MX_GPIO_Init+0x120>)
 8003998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	60bb      	str	r3, [r7, #8]
 80039a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039a2:	2300      	movs	r3, #0
 80039a4:	607b      	str	r3, [r7, #4]
 80039a6:	4b2c      	ldr	r3, [pc, #176]	; (8003a58 <MX_GPIO_Init+0x120>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	4a2b      	ldr	r2, [pc, #172]	; (8003a58 <MX_GPIO_Init+0x120>)
 80039ac:	f043 0302 	orr.w	r3, r3, #2
 80039b0:	6313      	str	r3, [r2, #48]	; 0x30
 80039b2:	4b29      	ldr	r3, [pc, #164]	; (8003a58 <MX_GPIO_Init+0x120>)
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	607b      	str	r3, [r7, #4]
 80039bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OW1_GPIO_Port, OW1_Pin, GPIO_PIN_RESET);
 80039be:	2200      	movs	r2, #0
 80039c0:	2108      	movs	r1, #8
 80039c2:	4826      	ldr	r0, [pc, #152]	; (8003a5c <MX_GPIO_Init+0x124>)
 80039c4:	f001 fed4 	bl	8005770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80039c8:	2200      	movs	r2, #0
 80039ca:	2120      	movs	r1, #32
 80039cc:	4824      	ldr	r0, [pc, #144]	; (8003a60 <MX_GPIO_Init+0x128>)
 80039ce:	f001 fecf 	bl	8005770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_B_Pin|LED_G_Pin|LED_R_Pin|BUZZ_Pin, GPIO_PIN_RESET);
 80039d2:	2200      	movs	r2, #0
 80039d4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80039d8:	4822      	ldr	r0, [pc, #136]	; (8003a64 <MX_GPIO_Init+0x12c>)
 80039da:	f001 fec9 	bl	8005770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80039de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80039e4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80039e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ea:	2300      	movs	r3, #0
 80039ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80039ee:	f107 0314 	add.w	r3, r7, #20
 80039f2:	4619      	mov	r1, r3
 80039f4:	4819      	ldr	r0, [pc, #100]	; (8003a5c <MX_GPIO_Init+0x124>)
 80039f6:	f001 fd0f 	bl	8005418 <HAL_GPIO_Init>

  /*Configure GPIO pin : OW1_Pin */
  GPIO_InitStruct.Pin = OW1_Pin;
 80039fa:	2308      	movs	r3, #8
 80039fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80039fe:	2311      	movs	r3, #17
 8003a00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a02:	2300      	movs	r3, #0
 8003a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a06:	2300      	movs	r3, #0
 8003a08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OW1_GPIO_Port, &GPIO_InitStruct);
 8003a0a:	f107 0314 	add.w	r3, r7, #20
 8003a0e:	4619      	mov	r1, r3
 8003a10:	4812      	ldr	r0, [pc, #72]	; (8003a5c <MX_GPIO_Init+0x124>)
 8003a12:	f001 fd01 	bl	8005418 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003a16:	2320      	movs	r3, #32
 8003a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a22:	2300      	movs	r3, #0
 8003a24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003a26:	f107 0314 	add.w	r3, r7, #20
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	480c      	ldr	r0, [pc, #48]	; (8003a60 <MX_GPIO_Init+0x128>)
 8003a2e:	f001 fcf3 	bl	8005418 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_B_Pin LED_G_Pin LED_R_Pin BUZZ_Pin */
  GPIO_InitStruct.Pin = LED_B_Pin|LED_G_Pin|LED_R_Pin|BUZZ_Pin;
 8003a32:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a40:	2300      	movs	r3, #0
 8003a42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a44:	f107 0314 	add.w	r3, r7, #20
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4806      	ldr	r0, [pc, #24]	; (8003a64 <MX_GPIO_Init+0x12c>)
 8003a4c:	f001 fce4 	bl	8005418 <HAL_GPIO_Init>

}
 8003a50:	bf00      	nop
 8003a52:	3728      	adds	r7, #40	; 0x28
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	40020800 	.word	0x40020800
 8003a60:	40020000 	.word	0x40020000
 8003a64:	40020400 	.word	0x40020400

08003a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003a6c:	b672      	cpsid	i
}
 8003a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a70:	e7fe      	b.n	8003a70 <Error_Handler+0x8>
	...

08003a74 <Scheduler_Init>:
**********************************************************************	
	* @brief	Initialisation timimg struct
***********************************************************************
*/
void Scheduler_Init (void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
		Timer_1ms.timer_limit = 1;
 8003a78:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <Scheduler_Init+0x44>)
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	809a      	strh	r2, [r3, #4]
		Timer_5ms.timer_limit = 5;
 8003a7e:	4b0f      	ldr	r3, [pc, #60]	; (8003abc <Scheduler_Init+0x48>)
 8003a80:	2205      	movs	r2, #5
 8003a82:	809a      	strh	r2, [r3, #4]
		Timer_10ms.timer_limit = 10;
 8003a84:	4b0e      	ldr	r3, [pc, #56]	; (8003ac0 <Scheduler_Init+0x4c>)
 8003a86:	220a      	movs	r2, #10
 8003a88:	809a      	strh	r2, [r3, #4]
		Timer_50ms.timer_limit = 50;
 8003a8a:	4b0e      	ldr	r3, [pc, #56]	; (8003ac4 <Scheduler_Init+0x50>)
 8003a8c:	2232      	movs	r2, #50	; 0x32
 8003a8e:	809a      	strh	r2, [r3, #4]
		Timer_100ms.timer_limit = 100;
 8003a90:	4b0d      	ldr	r3, [pc, #52]	; (8003ac8 <Scheduler_Init+0x54>)
 8003a92:	2264      	movs	r2, #100	; 0x64
 8003a94:	809a      	strh	r2, [r3, #4]
		Timer_250ms.timer_limit = 250;
 8003a96:	4b0d      	ldr	r3, [pc, #52]	; (8003acc <Scheduler_Init+0x58>)
 8003a98:	22fa      	movs	r2, #250	; 0xfa
 8003a9a:	809a      	strh	r2, [r3, #4]
		Timer_500ms.timer_limit = 500;
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <Scheduler_Init+0x5c>)
 8003a9e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003aa2:	809a      	strh	r2, [r3, #4]
		Timer_1s.timer_limit = 1000;
 8003aa4:	4b0b      	ldr	r3, [pc, #44]	; (8003ad4 <Scheduler_Init+0x60>)
 8003aa6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003aaa:	809a      	strh	r2, [r3, #4]
}
 8003aac:	bf00      	nop
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	20000f3c 	.word	0x20000f3c
 8003abc:	20000f44 	.word	0x20000f44
 8003ac0:	20000f4c 	.word	0x20000f4c
 8003ac4:	20000f54 	.word	0x20000f54
 8003ac8:	20000f5c 	.word	0x20000f5c
 8003acc:	20000f64 	.word	0x20000f64
 8003ad0:	20000f6c 	.word	0x20000f6c
 8003ad4:	20000f74 	.word	0x20000f74

08003ad8 <Scheduler_Update_1ms>:
**********************************************************************	
	* @brief	Timer control. Calling of all defined timers
***********************************************************************
*/
void Scheduler_Update_1ms (void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
	Timer_Increment(&Timer_1ms);
 8003adc:	480c      	ldr	r0, [pc, #48]	; (8003b10 <Scheduler_Update_1ms+0x38>)
 8003ade:	f000 f827 	bl	8003b30 <Timer_Increment>
	Timer_Increment(&Timer_5ms);
 8003ae2:	480c      	ldr	r0, [pc, #48]	; (8003b14 <Scheduler_Update_1ms+0x3c>)
 8003ae4:	f000 f824 	bl	8003b30 <Timer_Increment>
	Timer_Increment(&Timer_10ms);
 8003ae8:	480b      	ldr	r0, [pc, #44]	; (8003b18 <Scheduler_Update_1ms+0x40>)
 8003aea:	f000 f821 	bl	8003b30 <Timer_Increment>
	Timer_Increment(&Timer_50ms);
 8003aee:	480b      	ldr	r0, [pc, #44]	; (8003b1c <Scheduler_Update_1ms+0x44>)
 8003af0:	f000 f81e 	bl	8003b30 <Timer_Increment>
	Timer_Increment(&Timer_100ms);
 8003af4:	480a      	ldr	r0, [pc, #40]	; (8003b20 <Scheduler_Update_1ms+0x48>)
 8003af6:	f000 f81b 	bl	8003b30 <Timer_Increment>
	Timer_Increment(&Timer_250ms);
 8003afa:	480a      	ldr	r0, [pc, #40]	; (8003b24 <Scheduler_Update_1ms+0x4c>)
 8003afc:	f000 f818 	bl	8003b30 <Timer_Increment>
	Timer_Increment(&Timer_500ms);
 8003b00:	4809      	ldr	r0, [pc, #36]	; (8003b28 <Scheduler_Update_1ms+0x50>)
 8003b02:	f000 f815 	bl	8003b30 <Timer_Increment>
	Timer_Increment(&Timer_1s);
 8003b06:	4809      	ldr	r0, [pc, #36]	; (8003b2c <Scheduler_Update_1ms+0x54>)
 8003b08:	f000 f812 	bl	8003b30 <Timer_Increment>
	
}
 8003b0c:	bf00      	nop
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	20000f3c 	.word	0x20000f3c
 8003b14:	20000f44 	.word	0x20000f44
 8003b18:	20000f4c 	.word	0x20000f4c
 8003b1c:	20000f54 	.word	0x20000f54
 8003b20:	20000f5c 	.word	0x20000f5c
 8003b24:	20000f64 	.word	0x20000f64
 8003b28:	20000f6c 	.word	0x20000f6c
 8003b2c:	20000f74 	.word	0x20000f74

08003b30 <Timer_Increment>:
	* @brief	Incrementing of all counters and setting flags , where is condition met!
	* @param	timer: Pointer to specific timer	
***********************************************************************
*/
inline static void Timer_Increment (sTimer *timer)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
	timer->timer_cnt++;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	885b      	ldrh	r3, [r3, #2]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	805a      	strh	r2, [r3, #2]
	if(timer->timer_cnt >= timer->timer_limit)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	885a      	ldrh	r2, [r3, #2]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	889b      	ldrh	r3, [r3, #4]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d305      	bcc.n	8003b5c <Timer_Increment+0x2c>
	{
		timer->flag = eFLAG_REACHED;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	701a      	strb	r2, [r3, #0]
		timer->timer_cnt = 0;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	805a      	strh	r2, [r3, #2]
	}
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <Scheduler_Check_Flag>:
	* @brief Checking flags in structures and call specific tasks	
***********************************************************************
*/

void Scheduler_Check_Flag(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
	if(Timer_1ms.flag)
 8003b6c:	4b24      	ldr	r3, [pc, #144]	; (8003c00 <Scheduler_Check_Flag+0x98>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d004      	beq.n	8003b7e <Scheduler_Check_Flag+0x16>
	{
		Timer_Task_1ms();
 8003b74:	f000 f854 	bl	8003c20 <Timer_Task_1ms>
		Timer_1ms.flag = eFLAG_NOT_YET;
 8003b78:	4b21      	ldr	r3, [pc, #132]	; (8003c00 <Scheduler_Check_Flag+0x98>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	701a      	strb	r2, [r3, #0]
	}
	
	if(Timer_5ms.flag)
 8003b7e:	4b21      	ldr	r3, [pc, #132]	; (8003c04 <Scheduler_Check_Flag+0x9c>)
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d004      	beq.n	8003b90 <Scheduler_Check_Flag+0x28>
	{
		Timer_Task_5ms();
 8003b86:	f000 f852 	bl	8003c2e <Timer_Task_5ms>
		Timer_5ms.flag = eFLAG_NOT_YET;
 8003b8a:	4b1e      	ldr	r3, [pc, #120]	; (8003c04 <Scheduler_Check_Flag+0x9c>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	701a      	strb	r2, [r3, #0]
	}
	
	if(Timer_10ms.flag)
 8003b90:	4b1d      	ldr	r3, [pc, #116]	; (8003c08 <Scheduler_Check_Flag+0xa0>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d004      	beq.n	8003ba2 <Scheduler_Check_Flag+0x3a>
	{
		Timer_Task_10ms();
 8003b98:	f000 f84f 	bl	8003c3a <Timer_Task_10ms>
		Timer_10ms.flag = eFLAG_NOT_YET;
 8003b9c:	4b1a      	ldr	r3, [pc, #104]	; (8003c08 <Scheduler_Check_Flag+0xa0>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	701a      	strb	r2, [r3, #0]
	}
	
	if(Timer_50ms.flag)
 8003ba2:	4b1a      	ldr	r3, [pc, #104]	; (8003c0c <Scheduler_Check_Flag+0xa4>)
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d004      	beq.n	8003bb4 <Scheduler_Check_Flag+0x4c>
	{
		Timer_Task_50ms();
 8003baa:	f000 f850 	bl	8003c4e <Timer_Task_50ms>
		Timer_50ms.flag = eFLAG_NOT_YET;
 8003bae:	4b17      	ldr	r3, [pc, #92]	; (8003c0c <Scheduler_Check_Flag+0xa4>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	701a      	strb	r2, [r3, #0]
	}
	
	if(Timer_100ms.flag)
 8003bb4:	4b16      	ldr	r3, [pc, #88]	; (8003c10 <Scheduler_Check_Flag+0xa8>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d004      	beq.n	8003bc6 <Scheduler_Check_Flag+0x5e>
	{
		Timer_Task_100ms();
 8003bbc:	f000 f84e 	bl	8003c5c <Timer_Task_100ms>
		Timer_100ms.flag = eFLAG_NOT_YET;
 8003bc0:	4b13      	ldr	r3, [pc, #76]	; (8003c10 <Scheduler_Check_Flag+0xa8>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	701a      	strb	r2, [r3, #0]
	}
	
	if(Timer_250ms.flag)
 8003bc6:	4b13      	ldr	r3, [pc, #76]	; (8003c14 <Scheduler_Check_Flag+0xac>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d004      	beq.n	8003bd8 <Scheduler_Check_Flag+0x70>
	{
		Timer_Task_250ms();
 8003bce:	f000 f84b 	bl	8003c68 <Timer_Task_250ms>
		Timer_250ms.flag = eFLAG_NOT_YET;
 8003bd2:	4b10      	ldr	r3, [pc, #64]	; (8003c14 <Scheduler_Check_Flag+0xac>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	701a      	strb	r2, [r3, #0]
	}
	
	if(Timer_500ms.flag)
 8003bd8:	4b0f      	ldr	r3, [pc, #60]	; (8003c18 <Scheduler_Check_Flag+0xb0>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d004      	beq.n	8003bea <Scheduler_Check_Flag+0x82>
	{
		Timer_Task_500ms();
 8003be0:	f000 f849 	bl	8003c76 <Timer_Task_500ms>
		Timer_500ms.flag = eFLAG_NOT_YET;
 8003be4:	4b0c      	ldr	r3, [pc, #48]	; (8003c18 <Scheduler_Check_Flag+0xb0>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	701a      	strb	r2, [r3, #0]
	}
	
	if(Timer_1s.flag)
 8003bea:	4b0c      	ldr	r3, [pc, #48]	; (8003c1c <Scheduler_Check_Flag+0xb4>)
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d004      	beq.n	8003bfc <Scheduler_Check_Flag+0x94>
	{
		Timer_Task_1s();
 8003bf2:	f000 f847 	bl	8003c84 <Timer_Task_1s>
		Timer_1s.flag = eFLAG_NOT_YET;
 8003bf6:	4b09      	ldr	r3, [pc, #36]	; (8003c1c <Scheduler_Check_Flag+0xb4>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	701a      	strb	r2, [r3, #0]
	}	
}
 8003bfc:	bf00      	nop
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	20000f3c 	.word	0x20000f3c
 8003c04:	20000f44 	.word	0x20000f44
 8003c08:	20000f4c 	.word	0x20000f4c
 8003c0c:	20000f54 	.word	0x20000f54
 8003c10:	20000f5c 	.word	0x20000f5c
 8003c14:	20000f64 	.word	0x20000f64
 8003c18:	20000f6c 	.word	0x20000f6c
 8003c1c:	20000f74 	.word	0x20000f74

08003c20 <Timer_Task_1ms>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_1ms(void)
{	
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
	//DI_Read_All();
}
 8003c24:	bf00      	nop
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <Timer_Task_5ms>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_5ms(void)
{	
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	af00      	add	r7, sp, #0
	MCAN_Transmit();
 8003c32:	f7fc ffd3 	bl	8000bdc <MCAN_Transmit>
}
 8003c36:	bf00      	nop
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <Timer_Task_10ms>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_10ms(void)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	af00      	add	r7, sp, #0
	COM_Update_10ms();
 8003c3e:	f7fc fd3d 	bl	80006bc <COM_Update_10ms>
	UI_Update_10ms();
 8003c42:	f7fe fbef 	bl	8002424 <UI_Update_10ms>
	MCAN_Update_10ms();
 8003c46:	f7fc ff3d 	bl	8000ac4 <MCAN_Update_10ms>
}
 8003c4a:	bf00      	nop
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <Timer_Task_50ms>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_50ms(void)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	af00      	add	r7, sp, #0
}
 8003c52:	bf00      	nop
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <Timer_Task_100ms>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_100ms(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0

	TEMP_Update100ms();
 8003c60:	f7fe f9be 	bl	8001fe0 <TEMP_Update100ms>
}
 8003c64:	bf00      	nop
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <Timer_Task_250ms>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_250ms(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
}
 8003c6c:	bf00      	nop
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <Timer_Task_500ms>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_500ms(void)
{
 8003c76:	b480      	push	{r7}
 8003c78:	af00      	add	r7, sp, #0

}
 8003c7a:	bf00      	nop
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <Timer_Task_1s>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_1s(void)
{	
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
	APP_Update_1s();
 8003c88:	f7ff f94e 	bl	8002f28 <APP_Update_1s>
	WDG_Refresh();
 8003c8c:	f7ff f834 	bl	8002cf8 <WDG_Refresh>
	SENS_Update_1s();
 8003c90:	f7fd fe58 	bl	8001944 <SENS_Update_1s>
	RECON_Update_1s();
 8003c94:	f7ff fa0e 	bl	80030b4 <RECON_Update_1s>
			OW_ConvertAll();
	  }*/
	//OW_ReadRom(0);
	//OW_Read(0);
	//OW_ConvertAll();
}
 8003c98:	bf00      	nop
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	607b      	str	r3, [r7, #4]
 8003ca6:	4b10      	ldr	r3, [pc, #64]	; (8003ce8 <HAL_MspInit+0x4c>)
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003caa:	4a0f      	ldr	r2, [pc, #60]	; (8003ce8 <HAL_MspInit+0x4c>)
 8003cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8003cb2:	4b0d      	ldr	r3, [pc, #52]	; (8003ce8 <HAL_MspInit+0x4c>)
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cba:	607b      	str	r3, [r7, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	603b      	str	r3, [r7, #0]
 8003cc2:	4b09      	ldr	r3, [pc, #36]	; (8003ce8 <HAL_MspInit+0x4c>)
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	4a08      	ldr	r2, [pc, #32]	; (8003ce8 <HAL_MspInit+0x4c>)
 8003cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8003cce:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <HAL_MspInit+0x4c>)
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd6:	603b      	str	r3, [r7, #0]
 8003cd8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003cda:	2007      	movs	r0, #7
 8003cdc:	f001 fb2a 	bl	8005334 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ce0:	bf00      	nop
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40023800 	.word	0x40023800

08003cec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b08a      	sub	sp, #40	; 0x28
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cf4:	f107 0314 	add.w	r3, r7, #20
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	605a      	str	r2, [r3, #4]
 8003cfe:	609a      	str	r2, [r3, #8]
 8003d00:	60da      	str	r2, [r3, #12]
 8003d02:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a25      	ldr	r2, [pc, #148]	; (8003da0 <HAL_CAN_MspInit+0xb4>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d144      	bne.n	8003d98 <HAL_CAN_MspInit+0xac>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003d0e:	2300      	movs	r3, #0
 8003d10:	613b      	str	r3, [r7, #16]
 8003d12:	4b24      	ldr	r3, [pc, #144]	; (8003da4 <HAL_CAN_MspInit+0xb8>)
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	4a23      	ldr	r2, [pc, #140]	; (8003da4 <HAL_CAN_MspInit+0xb8>)
 8003d18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d1e:	4b21      	ldr	r3, [pc, #132]	; (8003da4 <HAL_CAN_MspInit+0xb8>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60fb      	str	r3, [r7, #12]
 8003d2e:	4b1d      	ldr	r3, [pc, #116]	; (8003da4 <HAL_CAN_MspInit+0xb8>)
 8003d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d32:	4a1c      	ldr	r2, [pc, #112]	; (8003da4 <HAL_CAN_MspInit+0xb8>)
 8003d34:	f043 0301 	orr.w	r3, r3, #1
 8003d38:	6313      	str	r3, [r2, #48]	; 0x30
 8003d3a:	4b1a      	ldr	r3, [pc, #104]	; (8003da4 <HAL_CAN_MspInit+0xb8>)
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003d46:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d50:	2300      	movs	r3, #0
 8003d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d54:	2303      	movs	r3, #3
 8003d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003d58:	2309      	movs	r3, #9
 8003d5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d5c:	f107 0314 	add.w	r3, r7, #20
 8003d60:	4619      	mov	r1, r3
 8003d62:	4811      	ldr	r0, [pc, #68]	; (8003da8 <HAL_CAN_MspInit+0xbc>)
 8003d64:	f001 fb58 	bl	8005418 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8003d68:	2200      	movs	r2, #0
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	2013      	movs	r0, #19
 8003d6e:	f001 faec 	bl	800534a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8003d72:	2013      	movs	r0, #19
 8003d74:	f001 fb05 	bl	8005382 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8003d78:	2200      	movs	r2, #0
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	2014      	movs	r0, #20
 8003d7e:	f001 fae4 	bl	800534a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003d82:	2014      	movs	r0, #20
 8003d84:	f001 fafd 	bl	8005382 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8003d88:	2200      	movs	r2, #0
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	2015      	movs	r0, #21
 8003d8e:	f001 fadc 	bl	800534a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003d92:	2015      	movs	r0, #21
 8003d94:	f001 faf5 	bl	8005382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003d98:	bf00      	nop
 8003d9a:	3728      	adds	r7, #40	; 0x28
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40006400 	.word	0x40006400
 8003da4:	40023800 	.word	0x40023800
 8003da8:	40020000 	.word	0x40020000

08003dac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08c      	sub	sp, #48	; 0x30
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003db4:	f107 031c 	add.w	r3, r7, #28
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	605a      	str	r2, [r3, #4]
 8003dbe:	609a      	str	r2, [r3, #8]
 8003dc0:	60da      	str	r2, [r3, #12]
 8003dc2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a4a      	ldr	r2, [pc, #296]	; (8003ef4 <HAL_I2C_MspInit+0x148>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d135      	bne.n	8003e3a <HAL_I2C_MspInit+0x8e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61bb      	str	r3, [r7, #24]
 8003dd2:	4b49      	ldr	r3, [pc, #292]	; (8003ef8 <HAL_I2C_MspInit+0x14c>)
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd6:	4a48      	ldr	r2, [pc, #288]	; (8003ef8 <HAL_I2C_MspInit+0x14c>)
 8003dd8:	f043 0302 	orr.w	r3, r3, #2
 8003ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8003dde:	4b46      	ldr	r3, [pc, #280]	; (8003ef8 <HAL_I2C_MspInit+0x14c>)
 8003de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	61bb      	str	r3, [r7, #24]
 8003de8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003dea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003df0:	2312      	movs	r3, #18
 8003df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df4:	2300      	movs	r3, #0
 8003df6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003dfc:	2304      	movs	r3, #4
 8003dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e00:	f107 031c 	add.w	r3, r7, #28
 8003e04:	4619      	mov	r1, r3
 8003e06:	483d      	ldr	r0, [pc, #244]	; (8003efc <HAL_I2C_MspInit+0x150>)
 8003e08:	f001 fb06 	bl	8005418 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	617b      	str	r3, [r7, #20]
 8003e10:	4b39      	ldr	r3, [pc, #228]	; (8003ef8 <HAL_I2C_MspInit+0x14c>)
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	4a38      	ldr	r2, [pc, #224]	; (8003ef8 <HAL_I2C_MspInit+0x14c>)
 8003e16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e1a:	6413      	str	r3, [r2, #64]	; 0x40
 8003e1c:	4b36      	ldr	r3, [pc, #216]	; (8003ef8 <HAL_I2C_MspInit+0x14c>)
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e24:	617b      	str	r3, [r7, #20]
 8003e26:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003e28:	2200      	movs	r2, #0
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	201f      	movs	r0, #31
 8003e2e:	f001 fa8c 	bl	800534a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003e32:	201f      	movs	r0, #31
 8003e34:	f001 faa5 	bl	8005382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003e38:	e058      	b.n	8003eec <HAL_I2C_MspInit+0x140>
  else if(hi2c->Instance==I2C2)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a30      	ldr	r2, [pc, #192]	; (8003f00 <HAL_I2C_MspInit+0x154>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d153      	bne.n	8003eec <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e44:	2300      	movs	r3, #0
 8003e46:	613b      	str	r3, [r7, #16]
 8003e48:	4b2b      	ldr	r3, [pc, #172]	; (8003ef8 <HAL_I2C_MspInit+0x14c>)
 8003e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4c:	4a2a      	ldr	r2, [pc, #168]	; (8003ef8 <HAL_I2C_MspInit+0x14c>)
 8003e4e:	f043 0302 	orr.w	r3, r3, #2
 8003e52:	6313      	str	r3, [r2, #48]	; 0x30
 8003e54:	4b28      	ldr	r3, [pc, #160]	; (8003ef8 <HAL_I2C_MspInit+0x14c>)
 8003e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	613b      	str	r3, [r7, #16]
 8003e5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e60:	2300      	movs	r3, #0
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	4b24      	ldr	r3, [pc, #144]	; (8003ef8 <HAL_I2C_MspInit+0x14c>)
 8003e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e68:	4a23      	ldr	r2, [pc, #140]	; (8003ef8 <HAL_I2C_MspInit+0x14c>)
 8003e6a:	f043 0304 	orr.w	r3, r3, #4
 8003e6e:	6313      	str	r3, [r2, #48]	; 0x30
 8003e70:	4b21      	ldr	r3, [pc, #132]	; (8003ef8 <HAL_I2C_MspInit+0x14c>)
 8003e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e82:	2312      	movs	r3, #18
 8003e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e86:	2300      	movs	r3, #0
 8003e88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003e8e:	2304      	movs	r3, #4
 8003e90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e92:	f107 031c 	add.w	r3, r7, #28
 8003e96:	4619      	mov	r1, r3
 8003e98:	4818      	ldr	r0, [pc, #96]	; (8003efc <HAL_I2C_MspInit+0x150>)
 8003e9a:	f001 fabd 	bl	8005418 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ea4:	2312      	movs	r3, #18
 8003ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eac:	2303      	movs	r3, #3
 8003eae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003eb0:	2304      	movs	r3, #4
 8003eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003eb4:	f107 031c 	add.w	r3, r7, #28
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4812      	ldr	r0, [pc, #72]	; (8003f04 <HAL_I2C_MspInit+0x158>)
 8003ebc:	f001 faac 	bl	8005418 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	60bb      	str	r3, [r7, #8]
 8003ec4:	4b0c      	ldr	r3, [pc, #48]	; (8003ef8 <HAL_I2C_MspInit+0x14c>)
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec8:	4a0b      	ldr	r2, [pc, #44]	; (8003ef8 <HAL_I2C_MspInit+0x14c>)
 8003eca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ece:	6413      	str	r3, [r2, #64]	; 0x40
 8003ed0:	4b09      	ldr	r3, [pc, #36]	; (8003ef8 <HAL_I2C_MspInit+0x14c>)
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ed8:	60bb      	str	r3, [r7, #8]
 8003eda:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8003edc:	2200      	movs	r2, #0
 8003ede:	2100      	movs	r1, #0
 8003ee0:	2021      	movs	r0, #33	; 0x21
 8003ee2:	f001 fa32 	bl	800534a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003ee6:	2021      	movs	r0, #33	; 0x21
 8003ee8:	f001 fa4b 	bl	8005382 <HAL_NVIC_EnableIRQ>
}
 8003eec:	bf00      	nop
 8003eee:	3730      	adds	r7, #48	; 0x30
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40005400 	.word	0x40005400
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	40020400 	.word	0x40020400
 8003f00:	40005800 	.word	0x40005800
 8003f04:	40020800 	.word	0x40020800

08003f08 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b09a      	sub	sp, #104	; 0x68
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f10:	f107 030c 	add.w	r3, r7, #12
 8003f14:	225c      	movs	r2, #92	; 0x5c
 8003f16:	2100      	movs	r1, #0
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f007 f8e5 	bl	800b0e8 <memset>
  if(hrtc->Instance==RTC)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a0c      	ldr	r2, [pc, #48]	; (8003f54 <HAL_RTC_MspInit+0x4c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d110      	bne.n	8003f4a <HAL_RTC_MspInit+0x42>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003f28:	2320      	movs	r3, #32
 8003f2a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV16;
 8003f2c:	4b0a      	ldr	r3, [pc, #40]	; (8003f58 <HAL_RTC_MspInit+0x50>)
 8003f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f30:	f107 030c 	add.w	r3, r7, #12
 8003f34:	4618      	mov	r0, r3
 8003f36:	f004 f915 	bl	8008164 <HAL_RCCEx_PeriphCLKConfig>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 8003f40:	f7ff fd92 	bl	8003a68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003f44:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <HAL_RTC_MspInit+0x54>)
 8003f46:	2201      	movs	r2, #1
 8003f48:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003f4a:	bf00      	nop
 8003f4c:	3768      	adds	r7, #104	; 0x68
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	40002800 	.word	0x40002800
 8003f58:	00100300 	.word	0x00100300
 8003f5c:	42470e3c 	.word	0x42470e3c

08003f60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a18      	ldr	r2, [pc, #96]	; (8003fd0 <HAL_TIM_Base_MspInit+0x70>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d10e      	bne.n	8003f90 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f72:	2300      	movs	r3, #0
 8003f74:	60fb      	str	r3, [r7, #12]
 8003f76:	4b17      	ldr	r3, [pc, #92]	; (8003fd4 <HAL_TIM_Base_MspInit+0x74>)
 8003f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7a:	4a16      	ldr	r2, [pc, #88]	; (8003fd4 <HAL_TIM_Base_MspInit+0x74>)
 8003f7c:	f043 0301 	orr.w	r3, r3, #1
 8003f80:	6453      	str	r3, [r2, #68]	; 0x44
 8003f82:	4b14      	ldr	r3, [pc, #80]	; (8003fd4 <HAL_TIM_Base_MspInit+0x74>)
 8003f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003f8e:	e01a      	b.n	8003fc6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM6)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a10      	ldr	r2, [pc, #64]	; (8003fd8 <HAL_TIM_Base_MspInit+0x78>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d115      	bne.n	8003fc6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60bb      	str	r3, [r7, #8]
 8003f9e:	4b0d      	ldr	r3, [pc, #52]	; (8003fd4 <HAL_TIM_Base_MspInit+0x74>)
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	4a0c      	ldr	r2, [pc, #48]	; (8003fd4 <HAL_TIM_Base_MspInit+0x74>)
 8003fa4:	f043 0310 	orr.w	r3, r3, #16
 8003fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8003faa:	4b0a      	ldr	r3, [pc, #40]	; (8003fd4 <HAL_TIM_Base_MspInit+0x74>)
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	f003 0310 	and.w	r3, r3, #16
 8003fb2:	60bb      	str	r3, [r7, #8]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	2100      	movs	r1, #0
 8003fba:	2036      	movs	r0, #54	; 0x36
 8003fbc:	f001 f9c5 	bl	800534a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003fc0:	2036      	movs	r0, #54	; 0x36
 8003fc2:	f001 f9de 	bl	8005382 <HAL_NVIC_EnableIRQ>
}
 8003fc6:	bf00      	nop
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	40010000 	.word	0x40010000
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	40001000 	.word	0x40001000

08003fdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b088      	sub	sp, #32
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fe4:	f107 030c 	add.w	r3, r7, #12
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	605a      	str	r2, [r3, #4]
 8003fee:	609a      	str	r2, [r3, #8]
 8003ff0:	60da      	str	r2, [r3, #12]
 8003ff2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a12      	ldr	r2, [pc, #72]	; (8004044 <HAL_TIM_MspPostInit+0x68>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d11e      	bne.n	800403c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ffe:	2300      	movs	r3, #0
 8004000:	60bb      	str	r3, [r7, #8]
 8004002:	4b11      	ldr	r3, [pc, #68]	; (8004048 <HAL_TIM_MspPostInit+0x6c>)
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	4a10      	ldr	r2, [pc, #64]	; (8004048 <HAL_TIM_MspPostInit+0x6c>)
 8004008:	f043 0301 	orr.w	r3, r3, #1
 800400c:	6313      	str	r3, [r2, #48]	; 0x30
 800400e:	4b0e      	ldr	r3, [pc, #56]	; (8004048 <HAL_TIM_MspPostInit+0x6c>)
 8004010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	60bb      	str	r3, [r7, #8]
 8004018:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_FAN_IN_Pin|PWM_FAN_OUT_Pin;
 800401a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800401e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004020:	2312      	movs	r3, #18
 8004022:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004024:	2300      	movs	r3, #0
 8004026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004028:	2300      	movs	r3, #0
 800402a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800402c:	2301      	movs	r3, #1
 800402e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004030:	f107 030c 	add.w	r3, r7, #12
 8004034:	4619      	mov	r1, r3
 8004036:	4805      	ldr	r0, [pc, #20]	; (800404c <HAL_TIM_MspPostInit+0x70>)
 8004038:	f001 f9ee 	bl	8005418 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800403c:	bf00      	nop
 800403e:	3720      	adds	r7, #32
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40010000 	.word	0x40010000
 8004048:	40023800 	.word	0x40023800
 800404c:	40020000 	.word	0x40020000

08004050 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b08a      	sub	sp, #40	; 0x28
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004058:	f107 0314 	add.w	r3, r7, #20
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	605a      	str	r2, [r3, #4]
 8004062:	609a      	str	r2, [r3, #8]
 8004064:	60da      	str	r2, [r3, #12]
 8004066:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a19      	ldr	r2, [pc, #100]	; (80040d4 <HAL_UART_MspInit+0x84>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d12b      	bne.n	80040ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004072:	2300      	movs	r3, #0
 8004074:	613b      	str	r3, [r7, #16]
 8004076:	4b18      	ldr	r3, [pc, #96]	; (80040d8 <HAL_UART_MspInit+0x88>)
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	4a17      	ldr	r2, [pc, #92]	; (80040d8 <HAL_UART_MspInit+0x88>)
 800407c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004080:	6413      	str	r3, [r2, #64]	; 0x40
 8004082:	4b15      	ldr	r3, [pc, #84]	; (80040d8 <HAL_UART_MspInit+0x88>)
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408a:	613b      	str	r3, [r7, #16]
 800408c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	4b11      	ldr	r3, [pc, #68]	; (80040d8 <HAL_UART_MspInit+0x88>)
 8004094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004096:	4a10      	ldr	r2, [pc, #64]	; (80040d8 <HAL_UART_MspInit+0x88>)
 8004098:	f043 0301 	orr.w	r3, r3, #1
 800409c:	6313      	str	r3, [r2, #48]	; 0x30
 800409e:	4b0e      	ldr	r3, [pc, #56]	; (80040d8 <HAL_UART_MspInit+0x88>)
 80040a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80040aa:	230c      	movs	r3, #12
 80040ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ae:	2302      	movs	r3, #2
 80040b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b2:	2300      	movs	r3, #0
 80040b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040b6:	2303      	movs	r3, #3
 80040b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80040ba:	2307      	movs	r3, #7
 80040bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040be:	f107 0314 	add.w	r3, r7, #20
 80040c2:	4619      	mov	r1, r3
 80040c4:	4805      	ldr	r0, [pc, #20]	; (80040dc <HAL_UART_MspInit+0x8c>)
 80040c6:	f001 f9a7 	bl	8005418 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80040ca:	bf00      	nop
 80040cc:	3728      	adds	r7, #40	; 0x28
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	40004400 	.word	0x40004400
 80040d8:	40023800 	.word	0x40023800
 80040dc:	40020000 	.word	0x40020000

080040e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80040e4:	e7fe      	b.n	80040e4 <NMI_Handler+0x4>

080040e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040e6:	b480      	push	{r7}
 80040e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040ea:	e7fe      	b.n	80040ea <HardFault_Handler+0x4>

080040ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040f0:	e7fe      	b.n	80040f0 <MemManage_Handler+0x4>

080040f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040f2:	b480      	push	{r7}
 80040f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040f6:	e7fe      	b.n	80040f6 <BusFault_Handler+0x4>

080040f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040fc:	e7fe      	b.n	80040fc <UsageFault_Handler+0x4>

080040fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040fe:	b480      	push	{r7}
 8004100:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004102:	bf00      	nop
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004110:	bf00      	nop
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800411a:	b480      	push	{r7}
 800411c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800411e:	bf00      	nop
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800412c:	f000 f996 	bl	800445c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Scheduler_Update_1ms();
 8004130:	f7ff fcd2 	bl	8003ad8 <Scheduler_Update_1ms>
  /* USER CODE END SysTick_IRQn 1 */
}
 8004134:	bf00      	nop
 8004136:	bd80      	pop	{r7, pc}

08004138 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800413c:	4802      	ldr	r0, [pc, #8]	; (8004148 <CAN1_TX_IRQHandler+0x10>)
 800413e:	f000 fe04 	bl	8004d4a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8004142:	bf00      	nop
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	20000d6c 	.word	0x20000d6c

0800414c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004150:	4802      	ldr	r0, [pc, #8]	; (800415c <CAN1_RX0_IRQHandler+0x10>)
 8004152:	f000 fdfa 	bl	8004d4a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004156:	bf00      	nop
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	20000d6c 	.word	0x20000d6c

08004160 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004164:	4802      	ldr	r0, [pc, #8]	; (8004170 <CAN1_RX1_IRQHandler+0x10>)
 8004166:	f000 fdf0 	bl	8004d4a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800416a:	bf00      	nop
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20000d6c 	.word	0x20000d6c

08004174 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004178:	4802      	ldr	r0, [pc, #8]	; (8004184 <I2C1_EV_IRQHandler+0x10>)
 800417a:	f001 ff95 	bl	80060a8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800417e:	bf00      	nop
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	20000d94 	.word	0x20000d94

08004188 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800418c:	4802      	ldr	r0, [pc, #8]	; (8004198 <I2C2_EV_IRQHandler+0x10>)
 800418e:	f001 ff8b 	bl	80060a8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8004192:	bf00      	nop
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	20000de8 	.word	0x20000de8

0800419c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
   OW_IRQHandler();
 80041a0:	f7fd f8e4 	bl	800136c <OW_IRQHandler>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80041a4:	4802      	ldr	r0, [pc, #8]	; (80041b0 <TIM6_DAC_IRQHandler+0x14>)
 80041a6:	f005 fccd 	bl	8009b44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80041aa:	bf00      	nop
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20000eb0 	.word	0x20000eb0

080041b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
	return 1;
 80041b8:	2301      	movs	r3, #1
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <_kill>:

int _kill(int pid, int sig)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80041ce:	f006 fe31 	bl	800ae34 <__errno>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2216      	movs	r2, #22
 80041d6:	601a      	str	r2, [r3, #0]
	return -1;
 80041d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <_exit>:

void _exit (int status)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80041ec:	f04f 31ff 	mov.w	r1, #4294967295
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7ff ffe7 	bl	80041c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80041f6:	e7fe      	b.n	80041f6 <_exit+0x12>

080041f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004204:	2300      	movs	r3, #0
 8004206:	617b      	str	r3, [r7, #20]
 8004208:	e00a      	b.n	8004220 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800420a:	f3af 8000 	nop.w
 800420e:	4601      	mov	r1, r0
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	1c5a      	adds	r2, r3, #1
 8004214:	60ba      	str	r2, [r7, #8]
 8004216:	b2ca      	uxtb	r2, r1
 8004218:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	3301      	adds	r3, #1
 800421e:	617b      	str	r3, [r7, #20]
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	429a      	cmp	r2, r3
 8004226:	dbf0      	blt.n	800420a <_read+0x12>
	}

return len;
 8004228:	687b      	ldr	r3, [r7, #4]
}
 800422a:	4618      	mov	r0, r3
 800422c:	3718      	adds	r7, #24
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b086      	sub	sp, #24
 8004236:	af00      	add	r7, sp, #0
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	60b9      	str	r1, [r7, #8]
 800423c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800423e:	2300      	movs	r3, #0
 8004240:	617b      	str	r3, [r7, #20]
 8004242:	e009      	b.n	8004258 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	60ba      	str	r2, [r7, #8]
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	4618      	mov	r0, r3
 800424e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	3301      	adds	r3, #1
 8004256:	617b      	str	r3, [r7, #20]
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	429a      	cmp	r2, r3
 800425e:	dbf1      	blt.n	8004244 <_write+0x12>
	}
	return len;
 8004260:	687b      	ldr	r3, [r7, #4]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3718      	adds	r7, #24
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <_close>:

int _close(int file)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
	return -1;
 8004272:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004276:	4618      	mov	r0, r3
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
 800428a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004292:	605a      	str	r2, [r3, #4]
	return 0;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <_isatty>:

int _isatty(int file)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
	return 1;
 80042aa:	2301      	movs	r3, #1
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
	return 0;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
	...

080042d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042dc:	4a14      	ldr	r2, [pc, #80]	; (8004330 <_sbrk+0x5c>)
 80042de:	4b15      	ldr	r3, [pc, #84]	; (8004334 <_sbrk+0x60>)
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042e8:	4b13      	ldr	r3, [pc, #76]	; (8004338 <_sbrk+0x64>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d102      	bne.n	80042f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042f0:	4b11      	ldr	r3, [pc, #68]	; (8004338 <_sbrk+0x64>)
 80042f2:	4a12      	ldr	r2, [pc, #72]	; (800433c <_sbrk+0x68>)
 80042f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042f6:	4b10      	ldr	r3, [pc, #64]	; (8004338 <_sbrk+0x64>)
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4413      	add	r3, r2
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	429a      	cmp	r2, r3
 8004302:	d207      	bcs.n	8004314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004304:	f006 fd96 	bl	800ae34 <__errno>
 8004308:	4603      	mov	r3, r0
 800430a:	220c      	movs	r2, #12
 800430c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800430e:	f04f 33ff 	mov.w	r3, #4294967295
 8004312:	e009      	b.n	8004328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004314:	4b08      	ldr	r3, [pc, #32]	; (8004338 <_sbrk+0x64>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800431a:	4b07      	ldr	r3, [pc, #28]	; (8004338 <_sbrk+0x64>)
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4413      	add	r3, r2
 8004322:	4a05      	ldr	r2, [pc, #20]	; (8004338 <_sbrk+0x64>)
 8004324:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004326:	68fb      	ldr	r3, [r7, #12]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	20020000 	.word	0x20020000
 8004334:	00000400 	.word	0x00000400
 8004338:	20000f80 	.word	0x20000f80
 800433c:	20000fc0 	.word	0x20000fc0

08004340 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004344:	4b06      	ldr	r3, [pc, #24]	; (8004360 <SystemInit+0x20>)
 8004346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434a:	4a05      	ldr	r2, [pc, #20]	; (8004360 <SystemInit+0x20>)
 800434c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004350:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004354:	bf00      	nop
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	e000ed00 	.word	0xe000ed00

08004364 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004364:	f8df d034 	ldr.w	sp, [pc, #52]	; 800439c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004368:	480d      	ldr	r0, [pc, #52]	; (80043a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800436a:	490e      	ldr	r1, [pc, #56]	; (80043a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800436c:	4a0e      	ldr	r2, [pc, #56]	; (80043a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800436e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004370:	e002      	b.n	8004378 <LoopCopyDataInit>

08004372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004376:	3304      	adds	r3, #4

08004378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800437a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800437c:	d3f9      	bcc.n	8004372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800437e:	4a0b      	ldr	r2, [pc, #44]	; (80043ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004380:	4c0b      	ldr	r4, [pc, #44]	; (80043b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004384:	e001      	b.n	800438a <LoopFillZerobss>

08004386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004388:	3204      	adds	r2, #4

0800438a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800438a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800438c:	d3fb      	bcc.n	8004386 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800438e:	f7ff ffd7 	bl	8004340 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004392:	f006 fd55 	bl	800ae40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004396:	f7ff f829 	bl	80033ec <main>
  bx  lr    
 800439a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800439c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80043a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043a4:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 80043a8:	0800d4dc 	.word	0x0800d4dc
  ldr r2, =_sbss
 80043ac:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 80043b0:	20000fc0 	.word	0x20000fc0

080043b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043b4:	e7fe      	b.n	80043b4 <ADC_IRQHandler>
	...

080043b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043bc:	4b0e      	ldr	r3, [pc, #56]	; (80043f8 <HAL_Init+0x40>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a0d      	ldr	r2, [pc, #52]	; (80043f8 <HAL_Init+0x40>)
 80043c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80043c8:	4b0b      	ldr	r3, [pc, #44]	; (80043f8 <HAL_Init+0x40>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a0a      	ldr	r2, [pc, #40]	; (80043f8 <HAL_Init+0x40>)
 80043ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043d4:	4b08      	ldr	r3, [pc, #32]	; (80043f8 <HAL_Init+0x40>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a07      	ldr	r2, [pc, #28]	; (80043f8 <HAL_Init+0x40>)
 80043da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043e0:	2003      	movs	r0, #3
 80043e2:	f000 ffa7 	bl	8005334 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043e6:	2000      	movs	r0, #0
 80043e8:	f000 f808 	bl	80043fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043ec:	f7ff fc56 	bl	8003c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	40023c00 	.word	0x40023c00

080043fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004404:	4b12      	ldr	r3, [pc, #72]	; (8004450 <HAL_InitTick+0x54>)
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	4b12      	ldr	r3, [pc, #72]	; (8004454 <HAL_InitTick+0x58>)
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	4619      	mov	r1, r3
 800440e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004412:	fbb3 f3f1 	udiv	r3, r3, r1
 8004416:	fbb2 f3f3 	udiv	r3, r2, r3
 800441a:	4618      	mov	r0, r3
 800441c:	f000 ffbf 	bl	800539e <HAL_SYSTICK_Config>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e00e      	b.n	8004448 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b0f      	cmp	r3, #15
 800442e:	d80a      	bhi.n	8004446 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004430:	2200      	movs	r2, #0
 8004432:	6879      	ldr	r1, [r7, #4]
 8004434:	f04f 30ff 	mov.w	r0, #4294967295
 8004438:	f000 ff87 	bl	800534a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800443c:	4a06      	ldr	r2, [pc, #24]	; (8004458 <HAL_InitTick+0x5c>)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	e000      	b.n	8004448 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
}
 8004448:	4618      	mov	r0, r3
 800444a:	3708      	adds	r7, #8
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	20000144 	.word	0x20000144
 8004454:	2000014c 	.word	0x2000014c
 8004458:	20000148 	.word	0x20000148

0800445c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004460:	4b06      	ldr	r3, [pc, #24]	; (800447c <HAL_IncTick+0x20>)
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	461a      	mov	r2, r3
 8004466:	4b06      	ldr	r3, [pc, #24]	; (8004480 <HAL_IncTick+0x24>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4413      	add	r3, r2
 800446c:	4a04      	ldr	r2, [pc, #16]	; (8004480 <HAL_IncTick+0x24>)
 800446e:	6013      	str	r3, [r2, #0]
}
 8004470:	bf00      	nop
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	2000014c 	.word	0x2000014c
 8004480:	20000f84 	.word	0x20000f84

08004484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
  return uwTick;
 8004488:	4b03      	ldr	r3, [pc, #12]	; (8004498 <HAL_GetTick+0x14>)
 800448a:	681b      	ldr	r3, [r3, #0]
}
 800448c:	4618      	mov	r0, r3
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	20000f84 	.word	0x20000f84

0800449c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044a4:	f7ff ffee 	bl	8004484 <HAL_GetTick>
 80044a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b4:	d005      	beq.n	80044c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044b6:	4b0a      	ldr	r3, [pc, #40]	; (80044e0 <HAL_Delay+0x44>)
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	461a      	mov	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4413      	add	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80044c2:	bf00      	nop
 80044c4:	f7ff ffde 	bl	8004484 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d8f7      	bhi.n	80044c4 <HAL_Delay+0x28>
  {
  }
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	2000014c 	.word	0x2000014c

080044e4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e0ed      	b.n	80046d2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d102      	bne.n	8004508 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7ff fbf2 	bl	8003cec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f042 0201 	orr.w	r2, r2, #1
 8004516:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004518:	f7ff ffb4 	bl	8004484 <HAL_GetTick>
 800451c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800451e:	e012      	b.n	8004546 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004520:	f7ff ffb0 	bl	8004484 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b0a      	cmp	r3, #10
 800452c:	d90b      	bls.n	8004546 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2205      	movs	r2, #5
 800453e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e0c5      	b.n	80046d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b00      	cmp	r3, #0
 8004552:	d0e5      	beq.n	8004520 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0202 	bic.w	r2, r2, #2
 8004562:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004564:	f7ff ff8e 	bl	8004484 <HAL_GetTick>
 8004568:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800456a:	e012      	b.n	8004592 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800456c:	f7ff ff8a 	bl	8004484 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b0a      	cmp	r3, #10
 8004578:	d90b      	bls.n	8004592 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2205      	movs	r2, #5
 800458a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e09f      	b.n	80046d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1e5      	bne.n	800456c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	7e1b      	ldrb	r3, [r3, #24]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d108      	bne.n	80045ba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	e007      	b.n	80045ca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	7e5b      	ldrb	r3, [r3, #25]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d108      	bne.n	80045e4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	e007      	b.n	80045f4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	7e9b      	ldrb	r3, [r3, #26]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d108      	bne.n	800460e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0220 	orr.w	r2, r2, #32
 800460a:	601a      	str	r2, [r3, #0]
 800460c:	e007      	b.n	800461e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 0220 	bic.w	r2, r2, #32
 800461c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	7edb      	ldrb	r3, [r3, #27]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d108      	bne.n	8004638 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0210 	bic.w	r2, r2, #16
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	e007      	b.n	8004648 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0210 	orr.w	r2, r2, #16
 8004646:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	7f1b      	ldrb	r3, [r3, #28]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d108      	bne.n	8004662 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0208 	orr.w	r2, r2, #8
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	e007      	b.n	8004672 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 0208 	bic.w	r2, r2, #8
 8004670:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	7f5b      	ldrb	r3, [r3, #29]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d108      	bne.n	800468c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f042 0204 	orr.w	r2, r2, #4
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	e007      	b.n	800469c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 0204 	bic.w	r2, r2, #4
 800469a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	431a      	orrs	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	ea42 0103 	orr.w	r1, r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	1e5a      	subs	r2, r3, #1
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
	...

080046dc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046f2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80046f4:	7cfb      	ldrb	r3, [r7, #19]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d003      	beq.n	8004702 <HAL_CAN_ConfigFilter+0x26>
 80046fa:	7cfb      	ldrb	r3, [r7, #19]
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	f040 80be 	bne.w	800487e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004702:	4b65      	ldr	r3, [pc, #404]	; (8004898 <HAL_CAN_ConfigFilter+0x1bc>)
 8004704:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800470c:	f043 0201 	orr.w	r2, r3, #1
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800471c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	021b      	lsls	r3, r3, #8
 8004732:	431a      	orrs	r2, r3
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	f003 031f 	and.w	r3, r3, #31
 8004742:	2201      	movs	r2, #1
 8004744:	fa02 f303 	lsl.w	r3, r2, r3
 8004748:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	43db      	mvns	r3, r3
 8004754:	401a      	ands	r2, r3
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d123      	bne.n	80047ac <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	43db      	mvns	r3, r3
 800476e:	401a      	ands	r2, r3
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004786:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	3248      	adds	r2, #72	; 0x48
 800478c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80047a0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80047a2:	6979      	ldr	r1, [r7, #20]
 80047a4:	3348      	adds	r3, #72	; 0x48
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	440b      	add	r3, r1
 80047aa:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d122      	bne.n	80047fa <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	431a      	orrs	r2, r3
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80047d4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	3248      	adds	r2, #72	; 0x48
 80047da:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80047ee:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80047f0:	6979      	ldr	r1, [r7, #20]
 80047f2:	3348      	adds	r3, #72	; 0x48
 80047f4:	00db      	lsls	r3, r3, #3
 80047f6:	440b      	add	r3, r1
 80047f8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d109      	bne.n	8004816 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	43db      	mvns	r3, r3
 800480c:	401a      	ands	r2, r3
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004814:	e007      	b.n	8004826 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	431a      	orrs	r2, r3
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d109      	bne.n	8004842 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	43db      	mvns	r3, r3
 8004838:	401a      	ands	r2, r3
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004840:	e007      	b.n	8004852 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	431a      	orrs	r2, r3
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d107      	bne.n	800486a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	431a      	orrs	r2, r3
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004870:	f023 0201 	bic.w	r2, r3, #1
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800487a:	2300      	movs	r3, #0
 800487c:	e006      	b.n	800488c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004882:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
  }
}
 800488c:	4618      	mov	r0, r3
 800488e:	371c      	adds	r7, #28
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	40006400 	.word	0x40006400

0800489c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d12e      	bne.n	800490e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 0201 	bic.w	r2, r2, #1
 80048c6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80048c8:	f7ff fddc 	bl	8004484 <HAL_GetTick>
 80048cc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80048ce:	e012      	b.n	80048f6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80048d0:	f7ff fdd8 	bl	8004484 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b0a      	cmp	r3, #10
 80048dc:	d90b      	bls.n	80048f6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2205      	movs	r2, #5
 80048ee:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e012      	b.n	800491c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1e5      	bne.n	80048d0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800490a:	2300      	movs	r3, #0
 800490c:	e006      	b.n	800491c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004912:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
  }
}
 800491c:	4618      	mov	r0, r3
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004924:	b480      	push	{r7}
 8004926:	b089      	sub	sp, #36	; 0x24
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
 8004930:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004938:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004942:	7ffb      	ldrb	r3, [r7, #31]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d003      	beq.n	8004950 <HAL_CAN_AddTxMessage+0x2c>
 8004948:	7ffb      	ldrb	r3, [r7, #31]
 800494a:	2b02      	cmp	r3, #2
 800494c:	f040 80b8 	bne.w	8004ac0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10a      	bne.n	8004970 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004960:	2b00      	cmp	r3, #0
 8004962:	d105      	bne.n	8004970 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 80a0 	beq.w	8004ab0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	0e1b      	lsrs	r3, r3, #24
 8004974:	f003 0303 	and.w	r3, r3, #3
 8004978:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2b02      	cmp	r3, #2
 800497e:	d907      	bls.n	8004990 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e09e      	b.n	8004ace <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004990:	2201      	movs	r2, #1
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	409a      	lsls	r2, r3
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10d      	bne.n	80049be <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80049ac:	68f9      	ldr	r1, [r7, #12]
 80049ae:	6809      	ldr	r1, [r1, #0]
 80049b0:	431a      	orrs	r2, r3
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	3318      	adds	r3, #24
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	440b      	add	r3, r1
 80049ba:	601a      	str	r2, [r3, #0]
 80049bc:	e00f      	b.n	80049de <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80049c8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80049ce:	68f9      	ldr	r1, [r7, #12]
 80049d0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80049d2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	3318      	adds	r3, #24
 80049d8:	011b      	lsls	r3, r3, #4
 80049da:	440b      	add	r3, r1
 80049dc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6819      	ldr	r1, [r3, #0]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	691a      	ldr	r2, [r3, #16]
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	3318      	adds	r3, #24
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	440b      	add	r3, r1
 80049ee:	3304      	adds	r3, #4
 80049f0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	7d1b      	ldrb	r3, [r3, #20]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d111      	bne.n	8004a1e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	3318      	adds	r3, #24
 8004a02:	011b      	lsls	r3, r3, #4
 8004a04:	4413      	add	r3, r2
 8004a06:	3304      	adds	r3, #4
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	6811      	ldr	r1, [r2, #0]
 8004a0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	3318      	adds	r3, #24
 8004a16:	011b      	lsls	r3, r3, #4
 8004a18:	440b      	add	r3, r1
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	3307      	adds	r3, #7
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	061a      	lsls	r2, r3, #24
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	3306      	adds	r3, #6
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	041b      	lsls	r3, r3, #16
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3305      	adds	r3, #5
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	021b      	lsls	r3, r3, #8
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	3204      	adds	r2, #4
 8004a3e:	7812      	ldrb	r2, [r2, #0]
 8004a40:	4610      	mov	r0, r2
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	6811      	ldr	r1, [r2, #0]
 8004a46:	ea43 0200 	orr.w	r2, r3, r0
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	011b      	lsls	r3, r3, #4
 8004a4e:	440b      	add	r3, r1
 8004a50:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004a54:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	3303      	adds	r3, #3
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	061a      	lsls	r2, r3, #24
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	3302      	adds	r3, #2
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	041b      	lsls	r3, r3, #16
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	021b      	lsls	r3, r3, #8
 8004a70:	4313      	orrs	r3, r2
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	7812      	ldrb	r2, [r2, #0]
 8004a76:	4610      	mov	r0, r2
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	6811      	ldr	r1, [r2, #0]
 8004a7c:	ea43 0200 	orr.w	r2, r3, r0
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	440b      	add	r3, r1
 8004a86:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004a8a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	3318      	adds	r3, #24
 8004a94:	011b      	lsls	r3, r3, #4
 8004a96:	4413      	add	r3, r2
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	6811      	ldr	r1, [r2, #0]
 8004a9e:	f043 0201 	orr.w	r2, r3, #1
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	3318      	adds	r3, #24
 8004aa6:	011b      	lsls	r3, r3, #4
 8004aa8:	440b      	add	r3, r1
 8004aaa:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004aac:	2300      	movs	r3, #0
 8004aae:	e00e      	b.n	8004ace <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e006      	b.n	8004ace <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
  }
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3724      	adds	r7, #36	; 0x24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004ada:	b480      	push	{r7}
 8004adc:	b087      	sub	sp, #28
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	60f8      	str	r0, [r7, #12]
 8004ae2:	60b9      	str	r1, [r7, #8]
 8004ae4:	607a      	str	r2, [r7, #4]
 8004ae6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004aee:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004af0:	7dfb      	ldrb	r3, [r7, #23]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d003      	beq.n	8004afe <HAL_CAN_GetRxMessage+0x24>
 8004af6:	7dfb      	ldrb	r3, [r7, #23]
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	f040 80f3 	bne.w	8004ce4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d10e      	bne.n	8004b22 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f003 0303 	and.w	r3, r3, #3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d116      	bne.n	8004b40 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e0e7      	b.n	8004cf2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	f003 0303 	and.w	r3, r3, #3
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d107      	bne.n	8004b40 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b34:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e0d8      	b.n	8004cf2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	331b      	adds	r3, #27
 8004b48:	011b      	lsls	r3, r3, #4
 8004b4a:	4413      	add	r3, r2
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0204 	and.w	r2, r3, #4
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10c      	bne.n	8004b78 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	331b      	adds	r3, #27
 8004b66:	011b      	lsls	r3, r3, #4
 8004b68:	4413      	add	r3, r2
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	0d5b      	lsrs	r3, r3, #21
 8004b6e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	601a      	str	r2, [r3, #0]
 8004b76:	e00b      	b.n	8004b90 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	331b      	adds	r3, #27
 8004b80:	011b      	lsls	r3, r3, #4
 8004b82:	4413      	add	r3, r2
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	08db      	lsrs	r3, r3, #3
 8004b88:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	331b      	adds	r3, #27
 8004b98:	011b      	lsls	r3, r3, #4
 8004b9a:	4413      	add	r3, r2
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0202 	and.w	r2, r3, #2
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	331b      	adds	r3, #27
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	4413      	add	r3, r2
 8004bb2:	3304      	adds	r3, #4
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 020f 	and.w	r2, r3, #15
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	331b      	adds	r3, #27
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	4413      	add	r3, r2
 8004bca:	3304      	adds	r3, #4
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	0a1b      	lsrs	r3, r3, #8
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	331b      	adds	r3, #27
 8004bde:	011b      	lsls	r3, r3, #4
 8004be0:	4413      	add	r3, r2
 8004be2:	3304      	adds	r3, #4
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	0c1b      	lsrs	r3, r3, #16
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	011b      	lsls	r3, r3, #4
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	b2da      	uxtb	r2, r3
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	011b      	lsls	r3, r3, #4
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	0a1a      	lsrs	r2, r3, #8
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	011b      	lsls	r3, r3, #4
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	0c1a      	lsrs	r2, r3, #16
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	3302      	adds	r3, #2
 8004c34:	b2d2      	uxtb	r2, r2
 8004c36:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	4413      	add	r3, r2
 8004c42:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	0e1a      	lsrs	r2, r3, #24
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	3303      	adds	r3, #3
 8004c4e:	b2d2      	uxtb	r2, r2
 8004c50:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	011b      	lsls	r3, r3, #4
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	3304      	adds	r3, #4
 8004c66:	b2d2      	uxtb	r2, r2
 8004c68:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	011b      	lsls	r3, r3, #4
 8004c72:	4413      	add	r3, r2
 8004c74:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	0a1a      	lsrs	r2, r3, #8
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	3305      	adds	r3, #5
 8004c80:	b2d2      	uxtb	r2, r2
 8004c82:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	011b      	lsls	r3, r3, #4
 8004c8c:	4413      	add	r3, r2
 8004c8e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	0c1a      	lsrs	r2, r3, #16
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	3306      	adds	r3, #6
 8004c9a:	b2d2      	uxtb	r2, r2
 8004c9c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	011b      	lsls	r3, r3, #4
 8004ca6:	4413      	add	r3, r2
 8004ca8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	0e1a      	lsrs	r2, r3, #24
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	3307      	adds	r3, #7
 8004cb4:	b2d2      	uxtb	r2, r2
 8004cb6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d108      	bne.n	8004cd0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68da      	ldr	r2, [r3, #12]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f042 0220 	orr.w	r2, r2, #32
 8004ccc:	60da      	str	r2, [r3, #12]
 8004cce:	e007      	b.n	8004ce0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	691a      	ldr	r2, [r3, #16]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f042 0220 	orr.w	r2, r2, #32
 8004cde:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	e006      	b.n	8004cf2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
  }
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	371c      	adds	r7, #28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b085      	sub	sp, #20
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
 8004d06:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d0e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004d10:	7bfb      	ldrb	r3, [r7, #15]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d002      	beq.n	8004d1c <HAL_CAN_ActivateNotification+0x1e>
 8004d16:	7bfb      	ldrb	r3, [r7, #15]
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d109      	bne.n	8004d30 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6959      	ldr	r1, [r3, #20]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	e006      	b.n	8004d3e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
  }
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3714      	adds	r7, #20
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b08a      	sub	sp, #40	; 0x28
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004d52:	2300      	movs	r3, #0
 8004d54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d07c      	beq.n	8004e8a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d023      	beq.n	8004de2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 f983 	bl	80050b8 <HAL_CAN_TxMailbox0CompleteCallback>
 8004db2:	e016      	b.n	8004de2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	f003 0304 	and.w	r3, r3, #4
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d004      	beq.n	8004dc8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc6:	e00c      	b.n	8004de2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	f003 0308 	and.w	r3, r3, #8
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d004      	beq.n	8004ddc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8004dda:	e002      	b.n	8004de2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 f989 	bl	80050f4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d024      	beq.n	8004e36 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004df4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 f963 	bl	80050cc <HAL_CAN_TxMailbox1CompleteCallback>
 8004e06:	e016      	b.n	8004e36 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d004      	beq.n	8004e1c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004e18:	627b      	str	r3, [r7, #36]	; 0x24
 8004e1a:	e00c      	b.n	8004e36 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d004      	beq.n	8004e30 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e2e:	e002      	b.n	8004e36 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f969 	bl	8005108 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d024      	beq.n	8004e8a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004e48:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d003      	beq.n	8004e5c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f943 	bl	80050e0 <HAL_CAN_TxMailbox2CompleteCallback>
 8004e5a:	e016      	b.n	8004e8a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d004      	beq.n	8004e70 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e6e:	e00c      	b.n	8004e8a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d004      	beq.n	8004e84 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e80:	627b      	str	r3, [r7, #36]	; 0x24
 8004e82:	e002      	b.n	8004e8a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f949 	bl	800511c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	f003 0308 	and.w	r3, r3, #8
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00c      	beq.n	8004eae <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f003 0310 	and.w	r3, r3, #16
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d007      	beq.n	8004eae <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ea4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2210      	movs	r2, #16
 8004eac:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	f003 0304 	and.w	r3, r3, #4
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00b      	beq.n	8004ed0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	f003 0308 	and.w	r3, r3, #8
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d006      	beq.n	8004ed0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2208      	movs	r2, #8
 8004ec8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f930 	bl	8005130 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004ed0:	6a3b      	ldr	r3, [r7, #32]
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d009      	beq.n	8004eee <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f003 0303 	and.w	r3, r3, #3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d002      	beq.n	8004eee <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f7fb fef7 	bl	8000cdc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00c      	beq.n	8004f12 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	f003 0310 	and.w	r3, r3, #16
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d007      	beq.n	8004f12 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f08:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2210      	movs	r2, #16
 8004f10:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004f12:	6a3b      	ldr	r3, [r7, #32]
 8004f14:	f003 0320 	and.w	r3, r3, #32
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00b      	beq.n	8004f34 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f003 0308 	and.w	r3, r3, #8
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d006      	beq.n	8004f34 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2208      	movs	r2, #8
 8004f2c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f908 	bl	8005144 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004f34:	6a3b      	ldr	r3, [r7, #32]
 8004f36:	f003 0310 	and.w	r3, r3, #16
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d009      	beq.n	8004f52 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	f003 0303 	and.w	r3, r3, #3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7fb fee5 	bl	8000d1c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004f52:	6a3b      	ldr	r3, [r7, #32]
 8004f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00b      	beq.n	8004f74 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	f003 0310 	and.w	r3, r3, #16
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d006      	beq.n	8004f74 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2210      	movs	r2, #16
 8004f6c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f8f2 	bl	8005158 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004f74:	6a3b      	ldr	r3, [r7, #32]
 8004f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00b      	beq.n	8004f96 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	f003 0308 	and.w	r3, r3, #8
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d006      	beq.n	8004f96 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2208      	movs	r2, #8
 8004f8e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 f8eb 	bl	800516c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d07b      	beq.n	8005098 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	f003 0304 	and.w	r3, r3, #4
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d072      	beq.n	8005090 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d008      	beq.n	8004fc6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	f043 0301 	orr.w	r3, r3, #1
 8004fc4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d008      	beq.n	8004fe2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fdc:	f043 0302 	orr.w	r3, r3, #2
 8004fe0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d008      	beq.n	8004ffe <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff8:	f043 0304 	orr.w	r3, r3, #4
 8004ffc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004ffe:	6a3b      	ldr	r3, [r7, #32]
 8005000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005004:	2b00      	cmp	r3, #0
 8005006:	d043      	beq.n	8005090 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800500e:	2b00      	cmp	r3, #0
 8005010:	d03e      	beq.n	8005090 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005018:	2b60      	cmp	r3, #96	; 0x60
 800501a:	d02b      	beq.n	8005074 <HAL_CAN_IRQHandler+0x32a>
 800501c:	2b60      	cmp	r3, #96	; 0x60
 800501e:	d82e      	bhi.n	800507e <HAL_CAN_IRQHandler+0x334>
 8005020:	2b50      	cmp	r3, #80	; 0x50
 8005022:	d022      	beq.n	800506a <HAL_CAN_IRQHandler+0x320>
 8005024:	2b50      	cmp	r3, #80	; 0x50
 8005026:	d82a      	bhi.n	800507e <HAL_CAN_IRQHandler+0x334>
 8005028:	2b40      	cmp	r3, #64	; 0x40
 800502a:	d019      	beq.n	8005060 <HAL_CAN_IRQHandler+0x316>
 800502c:	2b40      	cmp	r3, #64	; 0x40
 800502e:	d826      	bhi.n	800507e <HAL_CAN_IRQHandler+0x334>
 8005030:	2b30      	cmp	r3, #48	; 0x30
 8005032:	d010      	beq.n	8005056 <HAL_CAN_IRQHandler+0x30c>
 8005034:	2b30      	cmp	r3, #48	; 0x30
 8005036:	d822      	bhi.n	800507e <HAL_CAN_IRQHandler+0x334>
 8005038:	2b10      	cmp	r3, #16
 800503a:	d002      	beq.n	8005042 <HAL_CAN_IRQHandler+0x2f8>
 800503c:	2b20      	cmp	r3, #32
 800503e:	d005      	beq.n	800504c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005040:	e01d      	b.n	800507e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	f043 0308 	orr.w	r3, r3, #8
 8005048:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800504a:	e019      	b.n	8005080 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	f043 0310 	orr.w	r3, r3, #16
 8005052:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005054:	e014      	b.n	8005080 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	f043 0320 	orr.w	r3, r3, #32
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800505e:	e00f      	b.n	8005080 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005066:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005068:	e00a      	b.n	8005080 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005070:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005072:	e005      	b.n	8005080 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800507a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800507c:	e000      	b.n	8005080 <HAL_CAN_IRQHandler+0x336>
            break;
 800507e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	699a      	ldr	r2, [r3, #24]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800508e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2204      	movs	r2, #4
 8005096:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	2b00      	cmp	r3, #0
 800509c:	d008      	beq.n	80050b0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a4:	431a      	orrs	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f868 	bl	8005180 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80050b0:	bf00      	nop
 80050b2:	3728      	adds	r7, #40	; 0x28
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f003 0307 	and.w	r3, r3, #7
 80051a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051a4:	4b0c      	ldr	r3, [pc, #48]	; (80051d8 <__NVIC_SetPriorityGrouping+0x44>)
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80051b0:	4013      	ands	r3, r2
 80051b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80051bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80051c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80051c6:	4a04      	ldr	r2, [pc, #16]	; (80051d8 <__NVIC_SetPriorityGrouping+0x44>)
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	60d3      	str	r3, [r2, #12]
}
 80051cc:	bf00      	nop
 80051ce:	3714      	adds	r7, #20
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr
 80051d8:	e000ed00 	.word	0xe000ed00

080051dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80051dc:	b480      	push	{r7}
 80051de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051e0:	4b04      	ldr	r3, [pc, #16]	; (80051f4 <__NVIC_GetPriorityGrouping+0x18>)
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	0a1b      	lsrs	r3, r3, #8
 80051e6:	f003 0307 	and.w	r3, r3, #7
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr
 80051f4:	e000ed00 	.word	0xe000ed00

080051f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	4603      	mov	r3, r0
 8005200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005206:	2b00      	cmp	r3, #0
 8005208:	db0b      	blt.n	8005222 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800520a:	79fb      	ldrb	r3, [r7, #7]
 800520c:	f003 021f 	and.w	r2, r3, #31
 8005210:	4907      	ldr	r1, [pc, #28]	; (8005230 <__NVIC_EnableIRQ+0x38>)
 8005212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005216:	095b      	lsrs	r3, r3, #5
 8005218:	2001      	movs	r0, #1
 800521a:	fa00 f202 	lsl.w	r2, r0, r2
 800521e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	e000e100 	.word	0xe000e100

08005234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	4603      	mov	r3, r0
 800523c:	6039      	str	r1, [r7, #0]
 800523e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005244:	2b00      	cmp	r3, #0
 8005246:	db0a      	blt.n	800525e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	b2da      	uxtb	r2, r3
 800524c:	490c      	ldr	r1, [pc, #48]	; (8005280 <__NVIC_SetPriority+0x4c>)
 800524e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005252:	0112      	lsls	r2, r2, #4
 8005254:	b2d2      	uxtb	r2, r2
 8005256:	440b      	add	r3, r1
 8005258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800525c:	e00a      	b.n	8005274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	b2da      	uxtb	r2, r3
 8005262:	4908      	ldr	r1, [pc, #32]	; (8005284 <__NVIC_SetPriority+0x50>)
 8005264:	79fb      	ldrb	r3, [r7, #7]
 8005266:	f003 030f 	and.w	r3, r3, #15
 800526a:	3b04      	subs	r3, #4
 800526c:	0112      	lsls	r2, r2, #4
 800526e:	b2d2      	uxtb	r2, r2
 8005270:	440b      	add	r3, r1
 8005272:	761a      	strb	r2, [r3, #24]
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	e000e100 	.word	0xe000e100
 8005284:	e000ed00 	.word	0xe000ed00

08005288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005288:	b480      	push	{r7}
 800528a:	b089      	sub	sp, #36	; 0x24
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f003 0307 	and.w	r3, r3, #7
 800529a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	f1c3 0307 	rsb	r3, r3, #7
 80052a2:	2b04      	cmp	r3, #4
 80052a4:	bf28      	it	cs
 80052a6:	2304      	movcs	r3, #4
 80052a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	3304      	adds	r3, #4
 80052ae:	2b06      	cmp	r3, #6
 80052b0:	d902      	bls.n	80052b8 <NVIC_EncodePriority+0x30>
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	3b03      	subs	r3, #3
 80052b6:	e000      	b.n	80052ba <NVIC_EncodePriority+0x32>
 80052b8:	2300      	movs	r3, #0
 80052ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052bc:	f04f 32ff 	mov.w	r2, #4294967295
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	fa02 f303 	lsl.w	r3, r2, r3
 80052c6:	43da      	mvns	r2, r3
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	401a      	ands	r2, r3
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052d0:	f04f 31ff 	mov.w	r1, #4294967295
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	fa01 f303 	lsl.w	r3, r1, r3
 80052da:	43d9      	mvns	r1, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052e0:	4313      	orrs	r3, r2
         );
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3724      	adds	r7, #36	; 0x24
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
	...

080052f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3b01      	subs	r3, #1
 80052fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005300:	d301      	bcc.n	8005306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005302:	2301      	movs	r3, #1
 8005304:	e00f      	b.n	8005326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005306:	4a0a      	ldr	r2, [pc, #40]	; (8005330 <SysTick_Config+0x40>)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	3b01      	subs	r3, #1
 800530c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800530e:	210f      	movs	r1, #15
 8005310:	f04f 30ff 	mov.w	r0, #4294967295
 8005314:	f7ff ff8e 	bl	8005234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005318:	4b05      	ldr	r3, [pc, #20]	; (8005330 <SysTick_Config+0x40>)
 800531a:	2200      	movs	r2, #0
 800531c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800531e:	4b04      	ldr	r3, [pc, #16]	; (8005330 <SysTick_Config+0x40>)
 8005320:	2207      	movs	r2, #7
 8005322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	e000e010 	.word	0xe000e010

08005334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f7ff ff29 	bl	8005194 <__NVIC_SetPriorityGrouping>
}
 8005342:	bf00      	nop
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800534a:	b580      	push	{r7, lr}
 800534c:	b086      	sub	sp, #24
 800534e:	af00      	add	r7, sp, #0
 8005350:	4603      	mov	r3, r0
 8005352:	60b9      	str	r1, [r7, #8]
 8005354:	607a      	str	r2, [r7, #4]
 8005356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005358:	2300      	movs	r3, #0
 800535a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800535c:	f7ff ff3e 	bl	80051dc <__NVIC_GetPriorityGrouping>
 8005360:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	68b9      	ldr	r1, [r7, #8]
 8005366:	6978      	ldr	r0, [r7, #20]
 8005368:	f7ff ff8e 	bl	8005288 <NVIC_EncodePriority>
 800536c:	4602      	mov	r2, r0
 800536e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005372:	4611      	mov	r1, r2
 8005374:	4618      	mov	r0, r3
 8005376:	f7ff ff5d 	bl	8005234 <__NVIC_SetPriority>
}
 800537a:	bf00      	nop
 800537c:	3718      	adds	r7, #24
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b082      	sub	sp, #8
 8005386:	af00      	add	r7, sp, #0
 8005388:	4603      	mov	r3, r0
 800538a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800538c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005390:	4618      	mov	r0, r3
 8005392:	f7ff ff31 	bl	80051f8 <__NVIC_EnableIRQ>
}
 8005396:	bf00      	nop
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b082      	sub	sp, #8
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f7ff ffa2 	bl	80052f0 <SysTick_Config>
 80053ac:	4603      	mov	r3, r0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b083      	sub	sp, #12
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d004      	beq.n	80053d4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2280      	movs	r2, #128	; 0x80
 80053ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e00c      	b.n	80053ee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2205      	movs	r2, #5
 80053d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f022 0201 	bic.w	r2, r2, #1
 80053ea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b083      	sub	sp, #12
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005408:	b2db      	uxtb	r3, r3
}
 800540a:	4618      	mov	r0, r3
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
	...

08005418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005418:	b480      	push	{r7}
 800541a:	b089      	sub	sp, #36	; 0x24
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005422:	2300      	movs	r3, #0
 8005424:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005426:	2300      	movs	r3, #0
 8005428:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800542a:	2300      	movs	r3, #0
 800542c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800542e:	2300      	movs	r3, #0
 8005430:	61fb      	str	r3, [r7, #28]
 8005432:	e165      	b.n	8005700 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005434:	2201      	movs	r2, #1
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	fa02 f303 	lsl.w	r3, r2, r3
 800543c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	4013      	ands	r3, r2
 8005446:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	429a      	cmp	r2, r3
 800544e:	f040 8154 	bne.w	80056fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f003 0303 	and.w	r3, r3, #3
 800545a:	2b01      	cmp	r3, #1
 800545c:	d005      	beq.n	800546a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005466:	2b02      	cmp	r3, #2
 8005468:	d130      	bne.n	80054cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	005b      	lsls	r3, r3, #1
 8005474:	2203      	movs	r2, #3
 8005476:	fa02 f303 	lsl.w	r3, r2, r3
 800547a:	43db      	mvns	r3, r3
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	4013      	ands	r3, r2
 8005480:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	68da      	ldr	r2, [r3, #12]
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	fa02 f303 	lsl.w	r3, r2, r3
 800548e:	69ba      	ldr	r2, [r7, #24]
 8005490:	4313      	orrs	r3, r2
 8005492:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	69ba      	ldr	r2, [r7, #24]
 8005498:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054a0:	2201      	movs	r2, #1
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	fa02 f303 	lsl.w	r3, r2, r3
 80054a8:	43db      	mvns	r3, r3
 80054aa:	69ba      	ldr	r2, [r7, #24]
 80054ac:	4013      	ands	r3, r2
 80054ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	091b      	lsrs	r3, r3, #4
 80054b6:	f003 0201 	and.w	r2, r3, #1
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	fa02 f303 	lsl.w	r3, r2, r3
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	69ba      	ldr	r2, [r7, #24]
 80054ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f003 0303 	and.w	r3, r3, #3
 80054d4:	2b03      	cmp	r3, #3
 80054d6:	d017      	beq.n	8005508 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	005b      	lsls	r3, r3, #1
 80054e2:	2203      	movs	r2, #3
 80054e4:	fa02 f303 	lsl.w	r3, r2, r3
 80054e8:	43db      	mvns	r3, r3
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	4013      	ands	r3, r2
 80054ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	005b      	lsls	r3, r3, #1
 80054f8:	fa02 f303 	lsl.w	r3, r2, r3
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	4313      	orrs	r3, r2
 8005500:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f003 0303 	and.w	r3, r3, #3
 8005510:	2b02      	cmp	r3, #2
 8005512:	d123      	bne.n	800555c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	08da      	lsrs	r2, r3, #3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	3208      	adds	r2, #8
 800551c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005520:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	f003 0307 	and.w	r3, r3, #7
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	220f      	movs	r2, #15
 800552c:	fa02 f303 	lsl.w	r3, r2, r3
 8005530:	43db      	mvns	r3, r3
 8005532:	69ba      	ldr	r2, [r7, #24]
 8005534:	4013      	ands	r3, r2
 8005536:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	691a      	ldr	r2, [r3, #16]
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	f003 0307 	and.w	r3, r3, #7
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	fa02 f303 	lsl.w	r3, r2, r3
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	4313      	orrs	r3, r2
 800554c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	08da      	lsrs	r2, r3, #3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	3208      	adds	r2, #8
 8005556:	69b9      	ldr	r1, [r7, #24]
 8005558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	005b      	lsls	r3, r3, #1
 8005566:	2203      	movs	r2, #3
 8005568:	fa02 f303 	lsl.w	r3, r2, r3
 800556c:	43db      	mvns	r3, r3
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	4013      	ands	r3, r2
 8005572:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f003 0203 	and.w	r2, r3, #3
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	fa02 f303 	lsl.w	r3, r2, r3
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	4313      	orrs	r3, r2
 8005588:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005598:	2b00      	cmp	r3, #0
 800559a:	f000 80ae 	beq.w	80056fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800559e:	2300      	movs	r3, #0
 80055a0:	60fb      	str	r3, [r7, #12]
 80055a2:	4b5d      	ldr	r3, [pc, #372]	; (8005718 <HAL_GPIO_Init+0x300>)
 80055a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a6:	4a5c      	ldr	r2, [pc, #368]	; (8005718 <HAL_GPIO_Init+0x300>)
 80055a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055ac:	6453      	str	r3, [r2, #68]	; 0x44
 80055ae:	4b5a      	ldr	r3, [pc, #360]	; (8005718 <HAL_GPIO_Init+0x300>)
 80055b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055b6:	60fb      	str	r3, [r7, #12]
 80055b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055ba:	4a58      	ldr	r2, [pc, #352]	; (800571c <HAL_GPIO_Init+0x304>)
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	089b      	lsrs	r3, r3, #2
 80055c0:	3302      	adds	r3, #2
 80055c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	f003 0303 	and.w	r3, r3, #3
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	220f      	movs	r2, #15
 80055d2:	fa02 f303 	lsl.w	r3, r2, r3
 80055d6:	43db      	mvns	r3, r3
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	4013      	ands	r3, r2
 80055dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a4f      	ldr	r2, [pc, #316]	; (8005720 <HAL_GPIO_Init+0x308>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d025      	beq.n	8005632 <HAL_GPIO_Init+0x21a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a4e      	ldr	r2, [pc, #312]	; (8005724 <HAL_GPIO_Init+0x30c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d01f      	beq.n	800562e <HAL_GPIO_Init+0x216>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a4d      	ldr	r2, [pc, #308]	; (8005728 <HAL_GPIO_Init+0x310>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d019      	beq.n	800562a <HAL_GPIO_Init+0x212>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a4c      	ldr	r2, [pc, #304]	; (800572c <HAL_GPIO_Init+0x314>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d013      	beq.n	8005626 <HAL_GPIO_Init+0x20e>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a4b      	ldr	r2, [pc, #300]	; (8005730 <HAL_GPIO_Init+0x318>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d00d      	beq.n	8005622 <HAL_GPIO_Init+0x20a>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a4a      	ldr	r2, [pc, #296]	; (8005734 <HAL_GPIO_Init+0x31c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d007      	beq.n	800561e <HAL_GPIO_Init+0x206>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a49      	ldr	r2, [pc, #292]	; (8005738 <HAL_GPIO_Init+0x320>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d101      	bne.n	800561a <HAL_GPIO_Init+0x202>
 8005616:	2306      	movs	r3, #6
 8005618:	e00c      	b.n	8005634 <HAL_GPIO_Init+0x21c>
 800561a:	2307      	movs	r3, #7
 800561c:	e00a      	b.n	8005634 <HAL_GPIO_Init+0x21c>
 800561e:	2305      	movs	r3, #5
 8005620:	e008      	b.n	8005634 <HAL_GPIO_Init+0x21c>
 8005622:	2304      	movs	r3, #4
 8005624:	e006      	b.n	8005634 <HAL_GPIO_Init+0x21c>
 8005626:	2303      	movs	r3, #3
 8005628:	e004      	b.n	8005634 <HAL_GPIO_Init+0x21c>
 800562a:	2302      	movs	r3, #2
 800562c:	e002      	b.n	8005634 <HAL_GPIO_Init+0x21c>
 800562e:	2301      	movs	r3, #1
 8005630:	e000      	b.n	8005634 <HAL_GPIO_Init+0x21c>
 8005632:	2300      	movs	r3, #0
 8005634:	69fa      	ldr	r2, [r7, #28]
 8005636:	f002 0203 	and.w	r2, r2, #3
 800563a:	0092      	lsls	r2, r2, #2
 800563c:	4093      	lsls	r3, r2
 800563e:	69ba      	ldr	r2, [r7, #24]
 8005640:	4313      	orrs	r3, r2
 8005642:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005644:	4935      	ldr	r1, [pc, #212]	; (800571c <HAL_GPIO_Init+0x304>)
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	089b      	lsrs	r3, r3, #2
 800564a:	3302      	adds	r3, #2
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005652:	4b3a      	ldr	r3, [pc, #232]	; (800573c <HAL_GPIO_Init+0x324>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	43db      	mvns	r3, r3
 800565c:	69ba      	ldr	r2, [r7, #24]
 800565e:	4013      	ands	r3, r2
 8005660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	4313      	orrs	r3, r2
 8005674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005676:	4a31      	ldr	r2, [pc, #196]	; (800573c <HAL_GPIO_Init+0x324>)
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800567c:	4b2f      	ldr	r3, [pc, #188]	; (800573c <HAL_GPIO_Init+0x324>)
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	43db      	mvns	r3, r3
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	4013      	ands	r3, r2
 800568a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d003      	beq.n	80056a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	4313      	orrs	r3, r2
 800569e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80056a0:	4a26      	ldr	r2, [pc, #152]	; (800573c <HAL_GPIO_Init+0x324>)
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80056a6:	4b25      	ldr	r3, [pc, #148]	; (800573c <HAL_GPIO_Init+0x324>)
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	43db      	mvns	r3, r3
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	4013      	ands	r3, r2
 80056b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80056ca:	4a1c      	ldr	r2, [pc, #112]	; (800573c <HAL_GPIO_Init+0x324>)
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80056d0:	4b1a      	ldr	r3, [pc, #104]	; (800573c <HAL_GPIO_Init+0x324>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	43db      	mvns	r3, r3
 80056da:	69ba      	ldr	r2, [r7, #24]
 80056dc:	4013      	ands	r3, r2
 80056de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d003      	beq.n	80056f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80056f4:	4a11      	ldr	r2, [pc, #68]	; (800573c <HAL_GPIO_Init+0x324>)
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	3301      	adds	r3, #1
 80056fe:	61fb      	str	r3, [r7, #28]
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	2b0f      	cmp	r3, #15
 8005704:	f67f ae96 	bls.w	8005434 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005708:	bf00      	nop
 800570a:	bf00      	nop
 800570c:	3724      	adds	r7, #36	; 0x24
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	40023800 	.word	0x40023800
 800571c:	40013800 	.word	0x40013800
 8005720:	40020000 	.word	0x40020000
 8005724:	40020400 	.word	0x40020400
 8005728:	40020800 	.word	0x40020800
 800572c:	40020c00 	.word	0x40020c00
 8005730:	40021000 	.word	0x40021000
 8005734:	40021400 	.word	0x40021400
 8005738:	40021800 	.word	0x40021800
 800573c:	40013c00 	.word	0x40013c00

08005740 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	460b      	mov	r3, r1
 800574a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	691a      	ldr	r2, [r3, #16]
 8005750:	887b      	ldrh	r3, [r7, #2]
 8005752:	4013      	ands	r3, r2
 8005754:	2b00      	cmp	r3, #0
 8005756:	d002      	beq.n	800575e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005758:	2301      	movs	r3, #1
 800575a:	73fb      	strb	r3, [r7, #15]
 800575c:	e001      	b.n	8005762 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800575e:	2300      	movs	r3, #0
 8005760:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005762:	7bfb      	ldrb	r3, [r7, #15]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	460b      	mov	r3, r1
 800577a:	807b      	strh	r3, [r7, #2]
 800577c:	4613      	mov	r3, r2
 800577e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005780:	787b      	ldrb	r3, [r7, #1]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005786:	887a      	ldrh	r2, [r7, #2]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800578c:	e003      	b.n	8005796 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800578e:	887b      	ldrh	r3, [r7, #2]
 8005790:	041a      	lsls	r2, r3, #16
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	619a      	str	r2, [r3, #24]
}
 8005796:	bf00      	nop
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b085      	sub	sp, #20
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
 80057aa:	460b      	mov	r3, r1
 80057ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80057b4:	887a      	ldrh	r2, [r7, #2]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	4013      	ands	r3, r2
 80057ba:	041a      	lsls	r2, r3, #16
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	43d9      	mvns	r1, r3
 80057c0:	887b      	ldrh	r3, [r7, #2]
 80057c2:	400b      	ands	r3, r1
 80057c4:	431a      	orrs	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	619a      	str	r2, [r3, #24]
}
 80057ca:	bf00      	nop
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
	...

080057d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e12b      	b.n	8005a42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d106      	bne.n	8005804 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f7fe fad4 	bl	8003dac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2224      	movs	r2, #36	; 0x24
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f022 0201 	bic.w	r2, r2, #1
 800581a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800582a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800583a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800583c:	f002 fc6a 	bl	8008114 <HAL_RCC_GetPCLK1Freq>
 8005840:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	4a81      	ldr	r2, [pc, #516]	; (8005a4c <HAL_I2C_Init+0x274>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d807      	bhi.n	800585c <HAL_I2C_Init+0x84>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4a80      	ldr	r2, [pc, #512]	; (8005a50 <HAL_I2C_Init+0x278>)
 8005850:	4293      	cmp	r3, r2
 8005852:	bf94      	ite	ls
 8005854:	2301      	movls	r3, #1
 8005856:	2300      	movhi	r3, #0
 8005858:	b2db      	uxtb	r3, r3
 800585a:	e006      	b.n	800586a <HAL_I2C_Init+0x92>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	4a7d      	ldr	r2, [pc, #500]	; (8005a54 <HAL_I2C_Init+0x27c>)
 8005860:	4293      	cmp	r3, r2
 8005862:	bf94      	ite	ls
 8005864:	2301      	movls	r3, #1
 8005866:	2300      	movhi	r3, #0
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e0e7      	b.n	8005a42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	4a78      	ldr	r2, [pc, #480]	; (8005a58 <HAL_I2C_Init+0x280>)
 8005876:	fba2 2303 	umull	r2, r3, r2, r3
 800587a:	0c9b      	lsrs	r3, r3, #18
 800587c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	430a      	orrs	r2, r1
 8005890:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	4a6a      	ldr	r2, [pc, #424]	; (8005a4c <HAL_I2C_Init+0x274>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d802      	bhi.n	80058ac <HAL_I2C_Init+0xd4>
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	3301      	adds	r3, #1
 80058aa:	e009      	b.n	80058c0 <HAL_I2C_Init+0xe8>
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80058b2:	fb02 f303 	mul.w	r3, r2, r3
 80058b6:	4a69      	ldr	r2, [pc, #420]	; (8005a5c <HAL_I2C_Init+0x284>)
 80058b8:	fba2 2303 	umull	r2, r3, r2, r3
 80058bc:	099b      	lsrs	r3, r3, #6
 80058be:	3301      	adds	r3, #1
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	6812      	ldr	r2, [r2, #0]
 80058c4:	430b      	orrs	r3, r1
 80058c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80058d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	495c      	ldr	r1, [pc, #368]	; (8005a4c <HAL_I2C_Init+0x274>)
 80058dc:	428b      	cmp	r3, r1
 80058de:	d819      	bhi.n	8005914 <HAL_I2C_Init+0x13c>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	1e59      	subs	r1, r3, #1
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	005b      	lsls	r3, r3, #1
 80058ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80058ee:	1c59      	adds	r1, r3, #1
 80058f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80058f4:	400b      	ands	r3, r1
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00a      	beq.n	8005910 <HAL_I2C_Init+0x138>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	1e59      	subs	r1, r3, #1
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	fbb1 f3f3 	udiv	r3, r1, r3
 8005908:	3301      	adds	r3, #1
 800590a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800590e:	e051      	b.n	80059b4 <HAL_I2C_Init+0x1dc>
 8005910:	2304      	movs	r3, #4
 8005912:	e04f      	b.n	80059b4 <HAL_I2C_Init+0x1dc>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d111      	bne.n	8005940 <HAL_I2C_Init+0x168>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	1e58      	subs	r0, r3, #1
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6859      	ldr	r1, [r3, #4]
 8005924:	460b      	mov	r3, r1
 8005926:	005b      	lsls	r3, r3, #1
 8005928:	440b      	add	r3, r1
 800592a:	fbb0 f3f3 	udiv	r3, r0, r3
 800592e:	3301      	adds	r3, #1
 8005930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005934:	2b00      	cmp	r3, #0
 8005936:	bf0c      	ite	eq
 8005938:	2301      	moveq	r3, #1
 800593a:	2300      	movne	r3, #0
 800593c:	b2db      	uxtb	r3, r3
 800593e:	e012      	b.n	8005966 <HAL_I2C_Init+0x18e>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	1e58      	subs	r0, r3, #1
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6859      	ldr	r1, [r3, #4]
 8005948:	460b      	mov	r3, r1
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	440b      	add	r3, r1
 800594e:	0099      	lsls	r1, r3, #2
 8005950:	440b      	add	r3, r1
 8005952:	fbb0 f3f3 	udiv	r3, r0, r3
 8005956:	3301      	adds	r3, #1
 8005958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800595c:	2b00      	cmp	r3, #0
 800595e:	bf0c      	ite	eq
 8005960:	2301      	moveq	r3, #1
 8005962:	2300      	movne	r3, #0
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <HAL_I2C_Init+0x196>
 800596a:	2301      	movs	r3, #1
 800596c:	e022      	b.n	80059b4 <HAL_I2C_Init+0x1dc>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10e      	bne.n	8005994 <HAL_I2C_Init+0x1bc>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	1e58      	subs	r0, r3, #1
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6859      	ldr	r1, [r3, #4]
 800597e:	460b      	mov	r3, r1
 8005980:	005b      	lsls	r3, r3, #1
 8005982:	440b      	add	r3, r1
 8005984:	fbb0 f3f3 	udiv	r3, r0, r3
 8005988:	3301      	adds	r3, #1
 800598a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800598e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005992:	e00f      	b.n	80059b4 <HAL_I2C_Init+0x1dc>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	1e58      	subs	r0, r3, #1
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6859      	ldr	r1, [r3, #4]
 800599c:	460b      	mov	r3, r1
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	440b      	add	r3, r1
 80059a2:	0099      	lsls	r1, r3, #2
 80059a4:	440b      	add	r3, r1
 80059a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80059aa:	3301      	adds	r3, #1
 80059ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059b4:	6879      	ldr	r1, [r7, #4]
 80059b6:	6809      	ldr	r1, [r1, #0]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	69da      	ldr	r2, [r3, #28]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	431a      	orrs	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	430a      	orrs	r2, r1
 80059d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80059e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	6911      	ldr	r1, [r2, #16]
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	68d2      	ldr	r2, [r2, #12]
 80059ee:	4311      	orrs	r1, r2
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	6812      	ldr	r2, [r2, #0]
 80059f4:	430b      	orrs	r3, r1
 80059f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	695a      	ldr	r2, [r3, #20]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	430a      	orrs	r2, r1
 8005a12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f042 0201 	orr.w	r2, r2, #1
 8005a22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	000186a0 	.word	0x000186a0
 8005a50:	001e847f 	.word	0x001e847f
 8005a54:	003d08ff 	.word	0x003d08ff
 8005a58:	431bde83 	.word	0x431bde83
 8005a5c:	10624dd3 	.word	0x10624dd3

08005a60 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b088      	sub	sp, #32
 8005a64:	af02      	add	r7, sp, #8
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	607a      	str	r2, [r7, #4]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	817b      	strh	r3, [r7, #10]
 8005a70:	4613      	mov	r3, r2
 8005a72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a74:	f7fe fd06 	bl	8004484 <HAL_GetTick>
 8005a78:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b20      	cmp	r3, #32
 8005a84:	f040 80e0 	bne.w	8005c48 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	2319      	movs	r3, #25
 8005a8e:	2201      	movs	r2, #1
 8005a90:	4970      	ldr	r1, [pc, #448]	; (8005c54 <HAL_I2C_Master_Transmit+0x1f4>)
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f001 ffd0 	bl	8007a38 <I2C_WaitOnFlagUntilTimeout>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	e0d3      	b.n	8005c4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d101      	bne.n	8005ab0 <HAL_I2C_Master_Transmit+0x50>
 8005aac:	2302      	movs	r3, #2
 8005aae:	e0cc      	b.n	8005c4a <HAL_I2C_Master_Transmit+0x1ea>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d007      	beq.n	8005ad6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f042 0201 	orr.w	r2, r2, #1
 8005ad4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ae4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2221      	movs	r2, #33	; 0x21
 8005aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2210      	movs	r2, #16
 8005af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	893a      	ldrh	r2, [r7, #8]
 8005b06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	4a50      	ldr	r2, [pc, #320]	; (8005c58 <HAL_I2C_Master_Transmit+0x1f8>)
 8005b16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005b18:	8979      	ldrh	r1, [r7, #10]
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	6a3a      	ldr	r2, [r7, #32]
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f001 fd92 	bl	8007648 <I2C_MasterRequestWrite>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e08d      	b.n	8005c4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b2e:	2300      	movs	r3, #0
 8005b30:	613b      	str	r3, [r7, #16]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	613b      	str	r3, [r7, #16]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	699b      	ldr	r3, [r3, #24]
 8005b40:	613b      	str	r3, [r7, #16]
 8005b42:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005b44:	e066      	b.n	8005c14 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	6a39      	ldr	r1, [r7, #32]
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f002 f84a 	bl	8007be4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00d      	beq.n	8005b72 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5a:	2b04      	cmp	r3, #4
 8005b5c:	d107      	bne.n	8005b6e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e06b      	b.n	8005c4a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b76:	781a      	ldrb	r2, [r3, #0]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b82:	1c5a      	adds	r2, r3, #1
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	2b04      	cmp	r3, #4
 8005bae:	d11b      	bne.n	8005be8 <HAL_I2C_Master_Transmit+0x188>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d017      	beq.n	8005be8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbc:	781a      	ldrb	r2, [r3, #0]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc8:	1c5a      	adds	r2, r3, #1
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be0:	3b01      	subs	r3, #1
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	6a39      	ldr	r1, [r7, #32]
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f002 f83a 	bl	8007c66 <I2C_WaitOnBTFFlagUntilTimeout>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00d      	beq.n	8005c14 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfc:	2b04      	cmp	r3, #4
 8005bfe:	d107      	bne.n	8005c10 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c0e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e01a      	b.n	8005c4a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d194      	bne.n	8005b46 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c44:	2300      	movs	r3, #0
 8005c46:	e000      	b.n	8005c4a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005c48:	2302      	movs	r3, #2
  }
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3718      	adds	r7, #24
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	00100002 	.word	0x00100002
 8005c58:	ffff0000 	.word	0xffff0000

08005c5c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b08c      	sub	sp, #48	; 0x30
 8005c60:	af02      	add	r7, sp, #8
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	607a      	str	r2, [r7, #4]
 8005c66:	461a      	mov	r2, r3
 8005c68:	460b      	mov	r3, r1
 8005c6a:	817b      	strh	r3, [r7, #10]
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c70:	f7fe fc08 	bl	8004484 <HAL_GetTick>
 8005c74:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b20      	cmp	r3, #32
 8005c80:	f040 820b 	bne.w	800609a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c86:	9300      	str	r3, [sp, #0]
 8005c88:	2319      	movs	r3, #25
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	497c      	ldr	r1, [pc, #496]	; (8005e80 <HAL_I2C_Master_Receive+0x224>)
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f001 fed2 	bl	8007a38 <I2C_WaitOnFlagUntilTimeout>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	e1fe      	b.n	800609c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d101      	bne.n	8005cac <HAL_I2C_Master_Receive+0x50>
 8005ca8:	2302      	movs	r3, #2
 8005caa:	e1f7      	b.n	800609c <HAL_I2C_Master_Receive+0x440>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d007      	beq.n	8005cd2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f042 0201 	orr.w	r2, r2, #1
 8005cd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ce0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2222      	movs	r2, #34	; 0x22
 8005ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2210      	movs	r2, #16
 8005cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	893a      	ldrh	r2, [r7, #8]
 8005d02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	4a5c      	ldr	r2, [pc, #368]	; (8005e84 <HAL_I2C_Master_Receive+0x228>)
 8005d12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005d14:	8979      	ldrh	r1, [r7, #10]
 8005d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f001 fd16 	bl	800774c <I2C_MasterRequestRead>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d001      	beq.n	8005d2a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e1b8      	b.n	800609c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d113      	bne.n	8005d5a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d32:	2300      	movs	r3, #0
 8005d34:	623b      	str	r3, [r7, #32]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	695b      	ldr	r3, [r3, #20]
 8005d3c:	623b      	str	r3, [r7, #32]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	623b      	str	r3, [r7, #32]
 8005d46:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d56:	601a      	str	r2, [r3, #0]
 8005d58:	e18c      	b.n	8006074 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d11b      	bne.n	8005d9a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d72:	2300      	movs	r3, #0
 8005d74:	61fb      	str	r3, [r7, #28]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	61fb      	str	r3, [r7, #28]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	61fb      	str	r3, [r7, #28]
 8005d86:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d96:	601a      	str	r2, [r3, #0]
 8005d98:	e16c      	b.n	8006074 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d11b      	bne.n	8005dda <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005db0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	61bb      	str	r3, [r7, #24]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	695b      	ldr	r3, [r3, #20]
 8005dcc:	61bb      	str	r3, [r7, #24]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	61bb      	str	r3, [r7, #24]
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	e14c      	b.n	8006074 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005de8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dea:	2300      	movs	r3, #0
 8005dec:	617b      	str	r3, [r7, #20]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	617b      	str	r3, [r7, #20]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	617b      	str	r3, [r7, #20]
 8005dfe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005e00:	e138      	b.n	8006074 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e06:	2b03      	cmp	r3, #3
 8005e08:	f200 80f1 	bhi.w	8005fee <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d123      	bne.n	8005e5c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f001 ff97 	bl	8007d4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d001      	beq.n	8005e28 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e139      	b.n	800609c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	691a      	ldr	r2, [r3, #16]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e32:	b2d2      	uxtb	r2, r2
 8005e34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3a:	1c5a      	adds	r2, r3, #1
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e44:	3b01      	subs	r3, #1
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	3b01      	subs	r3, #1
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e5a:	e10b      	b.n	8006074 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d14e      	bne.n	8005f02 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	4906      	ldr	r1, [pc, #24]	; (8005e88 <HAL_I2C_Master_Receive+0x22c>)
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f001 fde2 	bl	8007a38 <I2C_WaitOnFlagUntilTimeout>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d008      	beq.n	8005e8c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e10e      	b.n	800609c <HAL_I2C_Master_Receive+0x440>
 8005e7e:	bf00      	nop
 8005e80:	00100002 	.word	0x00100002
 8005e84:	ffff0000 	.word	0xffff0000
 8005e88:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	691a      	ldr	r2, [r3, #16]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea6:	b2d2      	uxtb	r2, r2
 8005ea8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eae:	1c5a      	adds	r2, r3, #1
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	691a      	ldr	r2, [r3, #16]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed8:	b2d2      	uxtb	r2, r2
 8005eda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee0:	1c5a      	adds	r2, r3, #1
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eea:	3b01      	subs	r3, #1
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f00:	e0b8      	b.n	8006074 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f04:	9300      	str	r3, [sp, #0]
 8005f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f08:	2200      	movs	r2, #0
 8005f0a:	4966      	ldr	r1, [pc, #408]	; (80060a4 <HAL_I2C_Master_Receive+0x448>)
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f001 fd93 	bl	8007a38 <I2C_WaitOnFlagUntilTimeout>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d001      	beq.n	8005f1c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e0bf      	b.n	800609c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	691a      	ldr	r2, [r3, #16]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f36:	b2d2      	uxtb	r2, r2
 8005f38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3e:	1c5a      	adds	r2, r3, #1
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	3b01      	subs	r3, #1
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f64:	2200      	movs	r2, #0
 8005f66:	494f      	ldr	r1, [pc, #316]	; (80060a4 <HAL_I2C_Master_Receive+0x448>)
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f001 fd65 	bl	8007a38 <I2C_WaitOnFlagUntilTimeout>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d001      	beq.n	8005f78 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e091      	b.n	800609c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	691a      	ldr	r2, [r3, #16]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f92:	b2d2      	uxtb	r2, r2
 8005f94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	1c5a      	adds	r2, r3, #1
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	691a      	ldr	r2, [r3, #16]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc4:	b2d2      	uxtb	r2, r2
 8005fc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fcc:	1c5a      	adds	r2, r3, #1
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005fec:	e042      	b.n	8006074 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ff0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f001 feaa 	bl	8007d4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e04c      	b.n	800609c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	691a      	ldr	r2, [r3, #16]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600c:	b2d2      	uxtb	r2, r2
 800600e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006014:	1c5a      	adds	r2, r3, #1
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800601e:	3b01      	subs	r3, #1
 8006020:	b29a      	uxth	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800602a:	b29b      	uxth	r3, r3
 800602c:	3b01      	subs	r3, #1
 800602e:	b29a      	uxth	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	f003 0304 	and.w	r3, r3, #4
 800603e:	2b04      	cmp	r3, #4
 8006040:	d118      	bne.n	8006074 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	691a      	ldr	r2, [r3, #16]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604c:	b2d2      	uxtb	r2, r2
 800604e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006054:	1c5a      	adds	r2, r3, #1
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800605e:	3b01      	subs	r3, #1
 8006060:	b29a      	uxth	r2, r3
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800606a:	b29b      	uxth	r3, r3
 800606c:	3b01      	subs	r3, #1
 800606e:	b29a      	uxth	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006078:	2b00      	cmp	r3, #0
 800607a:	f47f aec2 	bne.w	8005e02 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2220      	movs	r2, #32
 8006082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006096:	2300      	movs	r3, #0
 8006098:	e000      	b.n	800609c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800609a:	2302      	movs	r3, #2
  }
}
 800609c:	4618      	mov	r0, r3
 800609e:	3728      	adds	r7, #40	; 0x28
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	00010004 	.word	0x00010004

080060a8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b088      	sub	sp, #32
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80060b0:	2300      	movs	r3, #0
 80060b2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060c8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060d0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80060d2:	7bfb      	ldrb	r3, [r7, #15]
 80060d4:	2b10      	cmp	r3, #16
 80060d6:	d003      	beq.n	80060e0 <HAL_I2C_EV_IRQHandler+0x38>
 80060d8:	7bfb      	ldrb	r3, [r7, #15]
 80060da:	2b40      	cmp	r3, #64	; 0x40
 80060dc:	f040 80c1 	bne.w	8006262 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10d      	bne.n	8006116 <HAL_I2C_EV_IRQHandler+0x6e>
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006100:	d003      	beq.n	800610a <HAL_I2C_EV_IRQHandler+0x62>
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006108:	d101      	bne.n	800610e <HAL_I2C_EV_IRQHandler+0x66>
 800610a:	2301      	movs	r3, #1
 800610c:	e000      	b.n	8006110 <HAL_I2C_EV_IRQHandler+0x68>
 800610e:	2300      	movs	r3, #0
 8006110:	2b01      	cmp	r3, #1
 8006112:	f000 8132 	beq.w	800637a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00c      	beq.n	800613a <HAL_I2C_EV_IRQHandler+0x92>
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	0a5b      	lsrs	r3, r3, #9
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	2b00      	cmp	r3, #0
 800612a:	d006      	beq.n	800613a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f001 fe92 	bl	8007e56 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 fcdc 	bl	8006af0 <I2C_Master_SB>
 8006138:	e092      	b.n	8006260 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	08db      	lsrs	r3, r3, #3
 800613e:	f003 0301 	and.w	r3, r3, #1
 8006142:	2b00      	cmp	r3, #0
 8006144:	d009      	beq.n	800615a <HAL_I2C_EV_IRQHandler+0xb2>
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	0a5b      	lsrs	r3, r3, #9
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	d003      	beq.n	800615a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 fd52 	bl	8006bfc <I2C_Master_ADD10>
 8006158:	e082      	b.n	8006260 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	085b      	lsrs	r3, r3, #1
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d009      	beq.n	800617a <HAL_I2C_EV_IRQHandler+0xd2>
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	0a5b      	lsrs	r3, r3, #9
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	d003      	beq.n	800617a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 fd6c 	bl	8006c50 <I2C_Master_ADDR>
 8006178:	e072      	b.n	8006260 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	089b      	lsrs	r3, r3, #2
 800617e:	f003 0301 	and.w	r3, r3, #1
 8006182:	2b00      	cmp	r3, #0
 8006184:	d03b      	beq.n	80061fe <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006190:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006194:	f000 80f3 	beq.w	800637e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	09db      	lsrs	r3, r3, #7
 800619c:	f003 0301 	and.w	r3, r3, #1
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00f      	beq.n	80061c4 <HAL_I2C_EV_IRQHandler+0x11c>
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	0a9b      	lsrs	r3, r3, #10
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d009      	beq.n	80061c4 <HAL_I2C_EV_IRQHandler+0x11c>
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	089b      	lsrs	r3, r3, #2
 80061b4:	f003 0301 	and.w	r3, r3, #1
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d103      	bne.n	80061c4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f94c 	bl	800645a <I2C_MasterTransmit_TXE>
 80061c2:	e04d      	b.n	8006260 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	089b      	lsrs	r3, r3, #2
 80061c8:	f003 0301 	and.w	r3, r3, #1
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f000 80d6 	beq.w	800637e <HAL_I2C_EV_IRQHandler+0x2d6>
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	0a5b      	lsrs	r3, r3, #9
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 80cf 	beq.w	800637e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80061e0:	7bbb      	ldrb	r3, [r7, #14]
 80061e2:	2b21      	cmp	r3, #33	; 0x21
 80061e4:	d103      	bne.n	80061ee <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f9d3 	bl	8006592 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061ec:	e0c7      	b.n	800637e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80061ee:	7bfb      	ldrb	r3, [r7, #15]
 80061f0:	2b40      	cmp	r3, #64	; 0x40
 80061f2:	f040 80c4 	bne.w	800637e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 fa41 	bl	800667e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061fc:	e0bf      	b.n	800637e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006208:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800620c:	f000 80b7 	beq.w	800637e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	099b      	lsrs	r3, r3, #6
 8006214:	f003 0301 	and.w	r3, r3, #1
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00f      	beq.n	800623c <HAL_I2C_EV_IRQHandler+0x194>
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	0a9b      	lsrs	r3, r3, #10
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	2b00      	cmp	r3, #0
 8006226:	d009      	beq.n	800623c <HAL_I2C_EV_IRQHandler+0x194>
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	089b      	lsrs	r3, r3, #2
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	2b00      	cmp	r3, #0
 8006232:	d103      	bne.n	800623c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 fab6 	bl	80067a6 <I2C_MasterReceive_RXNE>
 800623a:	e011      	b.n	8006260 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	089b      	lsrs	r3, r3, #2
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 809a 	beq.w	800637e <HAL_I2C_EV_IRQHandler+0x2d6>
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	0a5b      	lsrs	r3, r3, #9
 800624e:	f003 0301 	and.w	r3, r3, #1
 8006252:	2b00      	cmp	r3, #0
 8006254:	f000 8093 	beq.w	800637e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 fb5f 	bl	800691c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800625e:	e08e      	b.n	800637e <HAL_I2C_EV_IRQHandler+0x2d6>
 8006260:	e08d      	b.n	800637e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006266:	2b00      	cmp	r3, #0
 8006268:	d004      	beq.n	8006274 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	61fb      	str	r3, [r7, #28]
 8006272:	e007      	b.n	8006284 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	085b      	lsrs	r3, r3, #1
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	2b00      	cmp	r3, #0
 800628e:	d012      	beq.n	80062b6 <HAL_I2C_EV_IRQHandler+0x20e>
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	0a5b      	lsrs	r3, r3, #9
 8006294:	f003 0301 	and.w	r3, r3, #1
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00c      	beq.n	80062b6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d003      	beq.n	80062ac <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80062ac:	69b9      	ldr	r1, [r7, #24]
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 ff1d 	bl	80070ee <I2C_Slave_ADDR>
 80062b4:	e066      	b.n	8006384 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	091b      	lsrs	r3, r3, #4
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d009      	beq.n	80062d6 <HAL_I2C_EV_IRQHandler+0x22e>
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	0a5b      	lsrs	r3, r3, #9
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d003      	beq.n	80062d6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 ff58 	bl	8007184 <I2C_Slave_STOPF>
 80062d4:	e056      	b.n	8006384 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80062d6:	7bbb      	ldrb	r3, [r7, #14]
 80062d8:	2b21      	cmp	r3, #33	; 0x21
 80062da:	d002      	beq.n	80062e2 <HAL_I2C_EV_IRQHandler+0x23a>
 80062dc:	7bbb      	ldrb	r3, [r7, #14]
 80062de:	2b29      	cmp	r3, #41	; 0x29
 80062e0:	d125      	bne.n	800632e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	09db      	lsrs	r3, r3, #7
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00f      	beq.n	800630e <HAL_I2C_EV_IRQHandler+0x266>
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	0a9b      	lsrs	r3, r3, #10
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d009      	beq.n	800630e <HAL_I2C_EV_IRQHandler+0x266>
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	089b      	lsrs	r3, r3, #2
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	2b00      	cmp	r3, #0
 8006304:	d103      	bne.n	800630e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fe33 	bl	8006f72 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800630c:	e039      	b.n	8006382 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	089b      	lsrs	r3, r3, #2
 8006312:	f003 0301 	and.w	r3, r3, #1
 8006316:	2b00      	cmp	r3, #0
 8006318:	d033      	beq.n	8006382 <HAL_I2C_EV_IRQHandler+0x2da>
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	0a5b      	lsrs	r3, r3, #9
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b00      	cmp	r3, #0
 8006324:	d02d      	beq.n	8006382 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fe60 	bl	8006fec <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800632c:	e029      	b.n	8006382 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	099b      	lsrs	r3, r3, #6
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00f      	beq.n	800635a <HAL_I2C_EV_IRQHandler+0x2b2>
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	0a9b      	lsrs	r3, r3, #10
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	2b00      	cmp	r3, #0
 8006344:	d009      	beq.n	800635a <HAL_I2C_EV_IRQHandler+0x2b2>
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	089b      	lsrs	r3, r3, #2
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d103      	bne.n	800635a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 fe6b 	bl	800702e <I2C_SlaveReceive_RXNE>
 8006358:	e014      	b.n	8006384 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	089b      	lsrs	r3, r3, #2
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00e      	beq.n	8006384 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	0a5b      	lsrs	r3, r3, #9
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	2b00      	cmp	r3, #0
 8006370:	d008      	beq.n	8006384 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fe99 	bl	80070aa <I2C_SlaveReceive_BTF>
 8006378:	e004      	b.n	8006384 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800637a:	bf00      	nop
 800637c:	e002      	b.n	8006384 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800637e:	bf00      	nop
 8006380:	e000      	b.n	8006384 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006382:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006384:	3720      	adds	r7, #32
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800638a:	b480      	push	{r7}
 800638c:	b083      	sub	sp, #12
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006392:	bf00      	nop
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800639e:	b480      	push	{r7}
 80063a0:	b083      	sub	sp, #12
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80063a6:	bf00      	nop
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b083      	sub	sp, #12
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80063ba:	bf00      	nop
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b083      	sub	sp, #12
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80063ce:	bf00      	nop
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80063da:	b480      	push	{r7}
 80063dc:	b083      	sub	sp, #12
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
 80063e2:	460b      	mov	r3, r1
 80063e4:	70fb      	strb	r3, [r7, #3]
 80063e6:	4613      	mov	r3, r2
 80063e8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80063ea:	bf00      	nop
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b083      	sub	sp, #12
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80063fe:	bf00      	nop
 8006400:	370c      	adds	r7, #12
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800640a:	b480      	push	{r7}
 800640c:	b083      	sub	sp, #12
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006412:	bf00      	nop
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800641e:	b480      	push	{r7}
 8006420:	b083      	sub	sp, #12
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006432:	b480      	push	{r7}
 8006434:	b083      	sub	sp, #12
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800643a:	bf00      	nop
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006446:	b480      	push	{r7}
 8006448:	b083      	sub	sp, #12
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800644e:	bf00      	nop
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b084      	sub	sp, #16
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006468:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006470:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006476:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800647c:	2b00      	cmp	r3, #0
 800647e:	d150      	bne.n	8006522 <I2C_MasterTransmit_TXE+0xc8>
 8006480:	7bfb      	ldrb	r3, [r7, #15]
 8006482:	2b21      	cmp	r3, #33	; 0x21
 8006484:	d14d      	bne.n	8006522 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	2b08      	cmp	r3, #8
 800648a:	d01d      	beq.n	80064c8 <I2C_MasterTransmit_TXE+0x6e>
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	2b20      	cmp	r3, #32
 8006490:	d01a      	beq.n	80064c8 <I2C_MasterTransmit_TXE+0x6e>
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006498:	d016      	beq.n	80064c8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	685a      	ldr	r2, [r3, #4]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80064a8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2211      	movs	r2, #17
 80064ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2220      	movs	r2, #32
 80064bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f7ff ff62 	bl	800638a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80064c6:	e060      	b.n	800658a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	685a      	ldr	r2, [r3, #4]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80064d6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064e6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2220      	movs	r2, #32
 80064f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	2b40      	cmp	r3, #64	; 0x40
 8006500:	d107      	bne.n	8006512 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f7ff ff7d 	bl	800640a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006510:	e03b      	b.n	800658a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7ff ff35 	bl	800638a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006520:	e033      	b.n	800658a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006522:	7bfb      	ldrb	r3, [r7, #15]
 8006524:	2b21      	cmp	r3, #33	; 0x21
 8006526:	d005      	beq.n	8006534 <I2C_MasterTransmit_TXE+0xda>
 8006528:	7bbb      	ldrb	r3, [r7, #14]
 800652a:	2b40      	cmp	r3, #64	; 0x40
 800652c:	d12d      	bne.n	800658a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800652e:	7bfb      	ldrb	r3, [r7, #15]
 8006530:	2b22      	cmp	r3, #34	; 0x22
 8006532:	d12a      	bne.n	800658a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006538:	b29b      	uxth	r3, r3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d108      	bne.n	8006550 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	685a      	ldr	r2, [r3, #4]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800654c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800654e:	e01c      	b.n	800658a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2b40      	cmp	r3, #64	; 0x40
 800655a:	d103      	bne.n	8006564 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f88e 	bl	800667e <I2C_MemoryTransmit_TXE_BTF>
}
 8006562:	e012      	b.n	800658a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006568:	781a      	ldrb	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006574:	1c5a      	adds	r2, r3, #1
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800657e:	b29b      	uxth	r3, r3
 8006580:	3b01      	subs	r3, #1
 8006582:	b29a      	uxth	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006588:	e7ff      	b.n	800658a <I2C_MasterTransmit_TXE+0x130>
 800658a:	bf00      	nop
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006592:	b580      	push	{r7, lr}
 8006594:	b084      	sub	sp, #16
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b21      	cmp	r3, #33	; 0x21
 80065aa:	d164      	bne.n	8006676 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d012      	beq.n	80065dc <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ba:	781a      	ldrb	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c6:	1c5a      	adds	r2, r3, #1
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	3b01      	subs	r3, #1
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80065da:	e04c      	b.n	8006676 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2b08      	cmp	r3, #8
 80065e0:	d01d      	beq.n	800661e <I2C_MasterTransmit_BTF+0x8c>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2b20      	cmp	r3, #32
 80065e6:	d01a      	beq.n	800661e <I2C_MasterTransmit_BTF+0x8c>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80065ee:	d016      	beq.n	800661e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685a      	ldr	r2, [r3, #4]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80065fe:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2211      	movs	r2, #17
 8006604:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2220      	movs	r2, #32
 8006612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7ff feb7 	bl	800638a <HAL_I2C_MasterTxCpltCallback>
}
 800661c:	e02b      	b.n	8006676 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	685a      	ldr	r2, [r3, #4]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800662c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800663c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2220      	movs	r2, #32
 8006648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006652:	b2db      	uxtb	r3, r3
 8006654:	2b40      	cmp	r3, #64	; 0x40
 8006656:	d107      	bne.n	8006668 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7ff fed2 	bl	800640a <HAL_I2C_MemTxCpltCallback>
}
 8006666:	e006      	b.n	8006676 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f7ff fe8a 	bl	800638a <HAL_I2C_MasterTxCpltCallback>
}
 8006676:	bf00      	nop
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b084      	sub	sp, #16
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800668c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006692:	2b00      	cmp	r3, #0
 8006694:	d11d      	bne.n	80066d2 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800669a:	2b01      	cmp	r3, #1
 800669c:	d10b      	bne.n	80066b6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ae:	1c9a      	adds	r2, r3, #2
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80066b4:	e073      	b.n	800679e <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	121b      	asrs	r3, r3, #8
 80066be:	b2da      	uxtb	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ca:	1c5a      	adds	r2, r3, #1
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	651a      	str	r2, [r3, #80]	; 0x50
}
 80066d0:	e065      	b.n	800679e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d10b      	bne.n	80066f2 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066de:	b2da      	uxtb	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ea:	1c5a      	adds	r2, r3, #1
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	651a      	str	r2, [r3, #80]	; 0x50
}
 80066f0:	e055      	b.n	800679e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d151      	bne.n	800679e <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80066fa:	7bfb      	ldrb	r3, [r7, #15]
 80066fc:	2b22      	cmp	r3, #34	; 0x22
 80066fe:	d10d      	bne.n	800671c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800670e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006714:	1c5a      	adds	r2, r3, #1
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	651a      	str	r2, [r3, #80]	; 0x50
}
 800671a:	e040      	b.n	800679e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006720:	b29b      	uxth	r3, r3
 8006722:	2b00      	cmp	r3, #0
 8006724:	d015      	beq.n	8006752 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006726:	7bfb      	ldrb	r3, [r7, #15]
 8006728:	2b21      	cmp	r3, #33	; 0x21
 800672a:	d112      	bne.n	8006752 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006730:	781a      	ldrb	r2, [r3, #0]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673c:	1c5a      	adds	r2, r3, #1
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006746:	b29b      	uxth	r3, r3
 8006748:	3b01      	subs	r3, #1
 800674a:	b29a      	uxth	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006750:	e025      	b.n	800679e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006756:	b29b      	uxth	r3, r3
 8006758:	2b00      	cmp	r3, #0
 800675a:	d120      	bne.n	800679e <I2C_MemoryTransmit_TXE_BTF+0x120>
 800675c:	7bfb      	ldrb	r3, [r7, #15]
 800675e:	2b21      	cmp	r3, #33	; 0x21
 8006760:	d11d      	bne.n	800679e <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	685a      	ldr	r2, [r3, #4]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006770:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006780:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2220      	movs	r2, #32
 800678c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f7ff fe36 	bl	800640a <HAL_I2C_MemTxCpltCallback>
}
 800679e:	bf00      	nop
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b084      	sub	sp, #16
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b22      	cmp	r3, #34	; 0x22
 80067b8:	f040 80ac 	bne.w	8006914 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2b03      	cmp	r3, #3
 80067c8:	d921      	bls.n	800680e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	691a      	ldr	r2, [r3, #16]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d4:	b2d2      	uxtb	r2, r2
 80067d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	3b01      	subs	r3, #1
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	2b03      	cmp	r3, #3
 80067f8:	f040 808c 	bne.w	8006914 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	685a      	ldr	r2, [r3, #4]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800680a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800680c:	e082      	b.n	8006914 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006812:	2b02      	cmp	r3, #2
 8006814:	d075      	beq.n	8006902 <I2C_MasterReceive_RXNE+0x15c>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2b01      	cmp	r3, #1
 800681a:	d002      	beq.n	8006822 <I2C_MasterReceive_RXNE+0x7c>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d16f      	bne.n	8006902 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f001 fa60 	bl	8007ce8 <I2C_WaitOnSTOPRequestThroughIT>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d142      	bne.n	80068b4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800683c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800684c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	691a      	ldr	r2, [r3, #16]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	b2d2      	uxtb	r2, r2
 800685a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006860:	1c5a      	adds	r2, r3, #1
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800686a:	b29b      	uxth	r3, r3
 800686c:	3b01      	subs	r3, #1
 800686e:	b29a      	uxth	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2220      	movs	r2, #32
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006882:	b2db      	uxtb	r3, r3
 8006884:	2b40      	cmp	r3, #64	; 0x40
 8006886:	d10a      	bne.n	800689e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f7ff fdc1 	bl	800641e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800689c:	e03a      	b.n	8006914 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2212      	movs	r2, #18
 80068aa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f7ff fd76 	bl	800639e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80068b2:	e02f      	b.n	8006914 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	685a      	ldr	r2, [r3, #4]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80068c2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	691a      	ldr	r2, [r3, #16]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ce:	b2d2      	uxtb	r2, r2
 80068d0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d6:	1c5a      	adds	r2, r3, #1
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	3b01      	subs	r3, #1
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2220      	movs	r2, #32
 80068ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7ff fd99 	bl	8006432 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006900:	e008      	b.n	8006914 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	685a      	ldr	r2, [r3, #4]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006910:	605a      	str	r2, [r3, #4]
}
 8006912:	e7ff      	b.n	8006914 <I2C_MasterReceive_RXNE+0x16e>
 8006914:	bf00      	nop
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006928:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800692e:	b29b      	uxth	r3, r3
 8006930:	2b04      	cmp	r3, #4
 8006932:	d11b      	bne.n	800696c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	685a      	ldr	r2, [r3, #4]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006942:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	691a      	ldr	r2, [r3, #16]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694e:	b2d2      	uxtb	r2, r2
 8006950:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006956:	1c5a      	adds	r2, r3, #1
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006960:	b29b      	uxth	r3, r3
 8006962:	3b01      	subs	r3, #1
 8006964:	b29a      	uxth	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800696a:	e0bd      	b.n	8006ae8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006970:	b29b      	uxth	r3, r3
 8006972:	2b03      	cmp	r3, #3
 8006974:	d129      	bne.n	80069ca <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006984:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2b04      	cmp	r3, #4
 800698a:	d00a      	beq.n	80069a2 <I2C_MasterReceive_BTF+0x86>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2b02      	cmp	r3, #2
 8006990:	d007      	beq.n	80069a2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069a0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	691a      	ldr	r2, [r3, #16]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ac:	b2d2      	uxtb	r2, r2
 80069ae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b4:	1c5a      	adds	r2, r3, #1
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069be:	b29b      	uxth	r3, r3
 80069c0:	3b01      	subs	r3, #1
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80069c8:	e08e      	b.n	8006ae8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d176      	bne.n	8006ac2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d002      	beq.n	80069e0 <I2C_MasterReceive_BTF+0xc4>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2b10      	cmp	r3, #16
 80069de:	d108      	bne.n	80069f2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069ee:	601a      	str	r2, [r3, #0]
 80069f0:	e019      	b.n	8006a26 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2b04      	cmp	r3, #4
 80069f6:	d002      	beq.n	80069fe <I2C_MasterReceive_BTF+0xe2>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d108      	bne.n	8006a10 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a0c:	601a      	str	r2, [r3, #0]
 8006a0e:	e00a      	b.n	8006a26 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2b10      	cmp	r3, #16
 8006a14:	d007      	beq.n	8006a26 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a24:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	691a      	ldr	r2, [r3, #16]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a30:	b2d2      	uxtb	r2, r2
 8006a32:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a38:	1c5a      	adds	r2, r3, #1
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	3b01      	subs	r3, #1
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	691a      	ldr	r2, [r3, #16]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a56:	b2d2      	uxtb	r2, r2
 8006a58:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5e:	1c5a      	adds	r2, r3, #1
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	685a      	ldr	r2, [r3, #4]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006a80:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2220      	movs	r2, #32
 8006a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b40      	cmp	r3, #64	; 0x40
 8006a94:	d10a      	bne.n	8006aac <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f7ff fcba 	bl	800641e <HAL_I2C_MemRxCpltCallback>
}
 8006aaa:	e01d      	b.n	8006ae8 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2212      	movs	r2, #18
 8006ab8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7ff fc6f 	bl	800639e <HAL_I2C_MasterRxCpltCallback>
}
 8006ac0:	e012      	b.n	8006ae8 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	691a      	ldr	r2, [r3, #16]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006acc:	b2d2      	uxtb	r2, r2
 8006ace:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad4:	1c5a      	adds	r2, r3, #1
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006ae8:	bf00      	nop
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	2b40      	cmp	r3, #64	; 0x40
 8006b02:	d117      	bne.n	8006b34 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d109      	bne.n	8006b20 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	461a      	mov	r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b1c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006b1e:	e067      	b.n	8006bf0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	f043 0301 	orr.w	r3, r3, #1
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	611a      	str	r2, [r3, #16]
}
 8006b32:	e05d      	b.n	8006bf0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b3c:	d133      	bne.n	8006ba6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b21      	cmp	r3, #33	; 0x21
 8006b48:	d109      	bne.n	8006b5e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	461a      	mov	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b5a:	611a      	str	r2, [r3, #16]
 8006b5c:	e008      	b.n	8006b70 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	f043 0301 	orr.w	r3, r3, #1
 8006b68:	b2da      	uxtb	r2, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d004      	beq.n	8006b82 <I2C_Master_SB+0x92>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d108      	bne.n	8006b94 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d032      	beq.n	8006bf0 <I2C_Master_SB+0x100>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d02d      	beq.n	8006bf0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	685a      	ldr	r2, [r3, #4]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ba2:	605a      	str	r2, [r3, #4]
}
 8006ba4:	e024      	b.n	8006bf0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10e      	bne.n	8006bcc <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	11db      	asrs	r3, r3, #7
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	f003 0306 	and.w	r3, r3, #6
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	f063 030f 	orn	r3, r3, #15
 8006bc2:	b2da      	uxtb	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	611a      	str	r2, [r3, #16]
}
 8006bca:	e011      	b.n	8006bf0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d10d      	bne.n	8006bf0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	11db      	asrs	r3, r3, #7
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	f003 0306 	and.w	r3, r3, #6
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	f063 030e 	orn	r3, r3, #14
 8006be8:	b2da      	uxtb	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	611a      	str	r2, [r3, #16]
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c08:	b2da      	uxtb	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d004      	beq.n	8006c22 <I2C_Master_ADD10+0x26>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d108      	bne.n	8006c34 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00c      	beq.n	8006c44 <I2C_Master_ADD10+0x48>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d007      	beq.n	8006c44 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	685a      	ldr	r2, [r3, #4]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c42:	605a      	str	r2, [r3, #4]
  }
}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b091      	sub	sp, #68	; 0x44
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c66:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	2b22      	cmp	r3, #34	; 0x22
 8006c78:	f040 8169 	bne.w	8006f4e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10f      	bne.n	8006ca4 <I2C_Master_ADDR+0x54>
 8006c84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006c88:	2b40      	cmp	r3, #64	; 0x40
 8006c8a:	d10b      	bne.n	8006ca4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	633b      	str	r3, [r7, #48]	; 0x30
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	695b      	ldr	r3, [r3, #20]
 8006c96:	633b      	str	r3, [r7, #48]	; 0x30
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	633b      	str	r3, [r7, #48]	; 0x30
 8006ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca2:	e160      	b.n	8006f66 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d11d      	bne.n	8006ce8 <I2C_Master_ADDR+0x98>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006cb4:	d118      	bne.n	8006ce8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	695b      	ldr	r3, [r3, #20]
 8006cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cda:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ce0:	1c5a      	adds	r2, r3, #1
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	651a      	str	r2, [r3, #80]	; 0x50
 8006ce6:	e13e      	b.n	8006f66 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d113      	bne.n	8006d1a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d06:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d16:	601a      	str	r2, [r3, #0]
 8006d18:	e115      	b.n	8006f46 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	f040 808a 	bne.w	8006e3a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d2c:	d137      	bne.n	8006d9e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d3c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d4c:	d113      	bne.n	8006d76 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d5c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d5e:	2300      	movs	r3, #0
 8006d60:	627b      	str	r3, [r7, #36]	; 0x24
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	695b      	ldr	r3, [r3, #20]
 8006d68:	627b      	str	r3, [r7, #36]	; 0x24
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	627b      	str	r3, [r7, #36]	; 0x24
 8006d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d74:	e0e7      	b.n	8006f46 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d76:	2300      	movs	r3, #0
 8006d78:	623b      	str	r3, [r7, #32]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	695b      	ldr	r3, [r3, #20]
 8006d80:	623b      	str	r3, [r7, #32]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	623b      	str	r3, [r7, #32]
 8006d8a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d9a:	601a      	str	r2, [r3, #0]
 8006d9c:	e0d3      	b.n	8006f46 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da0:	2b08      	cmp	r3, #8
 8006da2:	d02e      	beq.n	8006e02 <I2C_Master_ADDR+0x1b2>
 8006da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da6:	2b20      	cmp	r3, #32
 8006da8:	d02b      	beq.n	8006e02 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dac:	2b12      	cmp	r3, #18
 8006dae:	d102      	bne.n	8006db6 <I2C_Master_ADDR+0x166>
 8006db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d125      	bne.n	8006e02 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db8:	2b04      	cmp	r3, #4
 8006dba:	d00e      	beq.n	8006dda <I2C_Master_ADDR+0x18a>
 8006dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	d00b      	beq.n	8006dda <I2C_Master_ADDR+0x18a>
 8006dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc4:	2b10      	cmp	r3, #16
 8006dc6:	d008      	beq.n	8006dda <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dd6:	601a      	str	r2, [r3, #0]
 8006dd8:	e007      	b.n	8006dea <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006de8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dea:	2300      	movs	r3, #0
 8006dec:	61fb      	str	r3, [r7, #28]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	695b      	ldr	r3, [r3, #20]
 8006df4:	61fb      	str	r3, [r7, #28]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	61fb      	str	r3, [r7, #28]
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	e0a1      	b.n	8006f46 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e10:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e12:	2300      	movs	r3, #0
 8006e14:	61bb      	str	r3, [r7, #24]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	695b      	ldr	r3, [r3, #20]
 8006e1c:	61bb      	str	r3, [r7, #24]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	61bb      	str	r3, [r7, #24]
 8006e26:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e36:	601a      	str	r2, [r3, #0]
 8006e38:	e085      	b.n	8006f46 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	d14d      	bne.n	8006ee0 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e46:	2b04      	cmp	r3, #4
 8006e48:	d016      	beq.n	8006e78 <I2C_Master_ADDR+0x228>
 8006e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d013      	beq.n	8006e78 <I2C_Master_ADDR+0x228>
 8006e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e52:	2b10      	cmp	r3, #16
 8006e54:	d010      	beq.n	8006e78 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e64:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e74:	601a      	str	r2, [r3, #0]
 8006e76:	e007      	b.n	8006e88 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e86:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e96:	d117      	bne.n	8006ec8 <I2C_Master_ADDR+0x278>
 8006e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e9e:	d00b      	beq.n	8006eb8 <I2C_Master_ADDR+0x268>
 8006ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d008      	beq.n	8006eb8 <I2C_Master_ADDR+0x268>
 8006ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea8:	2b08      	cmp	r3, #8
 8006eaa:	d005      	beq.n	8006eb8 <I2C_Master_ADDR+0x268>
 8006eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eae:	2b10      	cmp	r3, #16
 8006eb0:	d002      	beq.n	8006eb8 <I2C_Master_ADDR+0x268>
 8006eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb4:	2b20      	cmp	r3, #32
 8006eb6:	d107      	bne.n	8006ec8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	685a      	ldr	r2, [r3, #4]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ec6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ec8:	2300      	movs	r3, #0
 8006eca:	617b      	str	r3, [r7, #20]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	617b      	str	r3, [r7, #20]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	617b      	str	r3, [r7, #20]
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	e032      	b.n	8006f46 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006eee:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006efa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006efe:	d117      	bne.n	8006f30 <I2C_Master_ADDR+0x2e0>
 8006f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f02:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f06:	d00b      	beq.n	8006f20 <I2C_Master_ADDR+0x2d0>
 8006f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d008      	beq.n	8006f20 <I2C_Master_ADDR+0x2d0>
 8006f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f10:	2b08      	cmp	r3, #8
 8006f12:	d005      	beq.n	8006f20 <I2C_Master_ADDR+0x2d0>
 8006f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f16:	2b10      	cmp	r3, #16
 8006f18:	d002      	beq.n	8006f20 <I2C_Master_ADDR+0x2d0>
 8006f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1c:	2b20      	cmp	r3, #32
 8006f1e:	d107      	bne.n	8006f30 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	685a      	ldr	r2, [r3, #4]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f2e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f30:	2300      	movs	r3, #0
 8006f32:	613b      	str	r3, [r7, #16]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	613b      	str	r3, [r7, #16]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	613b      	str	r3, [r7, #16]
 8006f44:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006f4c:	e00b      	b.n	8006f66 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f4e:	2300      	movs	r3, #0
 8006f50:	60fb      	str	r3, [r7, #12]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	695b      	ldr	r3, [r3, #20]
 8006f58:	60fb      	str	r3, [r7, #12]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	699b      	ldr	r3, [r3, #24]
 8006f60:	60fb      	str	r3, [r7, #12]
 8006f62:	68fb      	ldr	r3, [r7, #12]
}
 8006f64:	e7ff      	b.n	8006f66 <I2C_Master_ADDR+0x316>
 8006f66:	bf00      	nop
 8006f68:	3744      	adds	r7, #68	; 0x44
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b084      	sub	sp, #16
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f80:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d02b      	beq.n	8006fe4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f90:	781a      	ldrb	r2, [r3, #0]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9c:	1c5a      	adds	r2, r3, #1
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d114      	bne.n	8006fe4 <I2C_SlaveTransmit_TXE+0x72>
 8006fba:	7bfb      	ldrb	r3, [r7, #15]
 8006fbc:	2b29      	cmp	r3, #41	; 0x29
 8006fbe:	d111      	bne.n	8006fe4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	685a      	ldr	r2, [r3, #4]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fce:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2221      	movs	r2, #33	; 0x21
 8006fd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2228      	movs	r2, #40	; 0x28
 8006fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7ff f9e7 	bl	80063b2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006fe4:	bf00      	nop
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d011      	beq.n	8007022 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007002:	781a      	ldrb	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700e:	1c5a      	adds	r2, r3, #1
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007018:	b29b      	uxth	r3, r3
 800701a:	3b01      	subs	r3, #1
 800701c:	b29a      	uxth	r2, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007022:	bf00      	nop
 8007024:	370c      	adds	r7, #12
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr

0800702e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b084      	sub	sp, #16
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800703c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007042:	b29b      	uxth	r3, r3
 8007044:	2b00      	cmp	r3, #0
 8007046:	d02c      	beq.n	80070a2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	691a      	ldr	r2, [r3, #16]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007052:	b2d2      	uxtb	r2, r2
 8007054:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705a:	1c5a      	adds	r2, r3, #1
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007064:	b29b      	uxth	r3, r3
 8007066:	3b01      	subs	r3, #1
 8007068:	b29a      	uxth	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007072:	b29b      	uxth	r3, r3
 8007074:	2b00      	cmp	r3, #0
 8007076:	d114      	bne.n	80070a2 <I2C_SlaveReceive_RXNE+0x74>
 8007078:	7bfb      	ldrb	r3, [r7, #15]
 800707a:	2b2a      	cmp	r3, #42	; 0x2a
 800707c:	d111      	bne.n	80070a2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	685a      	ldr	r2, [r3, #4]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800708c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2222      	movs	r2, #34	; 0x22
 8007092:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2228      	movs	r2, #40	; 0x28
 8007098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f7ff f992 	bl	80063c6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80070a2:	bf00      	nop
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80070aa:	b480      	push	{r7}
 80070ac:	b083      	sub	sp, #12
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d012      	beq.n	80070e2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	691a      	ldr	r2, [r3, #16]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c6:	b2d2      	uxtb	r2, r2
 80070c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ce:	1c5a      	adds	r2, r3, #1
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070d8:	b29b      	uxth	r3, r3
 80070da:	3b01      	subs	r3, #1
 80070dc:	b29a      	uxth	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80070e2:	bf00      	nop
 80070e4:	370c      	adds	r7, #12
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr

080070ee <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b084      	sub	sp, #16
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80070f8:	2300      	movs	r3, #0
 80070fa:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007102:	b2db      	uxtb	r3, r3
 8007104:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007108:	2b28      	cmp	r3, #40	; 0x28
 800710a:	d127      	bne.n	800715c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685a      	ldr	r2, [r3, #4]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800711a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	089b      	lsrs	r3, r3, #2
 8007120:	f003 0301 	and.w	r3, r3, #1
 8007124:	2b00      	cmp	r3, #0
 8007126:	d101      	bne.n	800712c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007128:	2301      	movs	r3, #1
 800712a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	09db      	lsrs	r3, r3, #7
 8007130:	f003 0301 	and.w	r3, r3, #1
 8007134:	2b00      	cmp	r3, #0
 8007136:	d103      	bne.n	8007140 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	81bb      	strh	r3, [r7, #12]
 800713e:	e002      	b.n	8007146 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	699b      	ldr	r3, [r3, #24]
 8007144:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800714e:	89ba      	ldrh	r2, [r7, #12]
 8007150:	7bfb      	ldrb	r3, [r7, #15]
 8007152:	4619      	mov	r1, r3
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f7ff f940 	bl	80063da <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800715a:	e00e      	b.n	800717a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800715c:	2300      	movs	r3, #0
 800715e:	60bb      	str	r3, [r7, #8]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	60bb      	str	r3, [r7, #8]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	60bb      	str	r3, [r7, #8]
 8007170:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800717a:	bf00      	nop
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
	...

08007184 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007192:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	685a      	ldr	r2, [r3, #4]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80071a2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80071a4:	2300      	movs	r3, #0
 80071a6:	60bb      	str	r3, [r7, #8]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	60bb      	str	r3, [r7, #8]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f042 0201 	orr.w	r2, r2, #1
 80071be:	601a      	str	r2, [r3, #0]
 80071c0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071d0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071e0:	d172      	bne.n	80072c8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80071e2:	7bfb      	ldrb	r3, [r7, #15]
 80071e4:	2b22      	cmp	r3, #34	; 0x22
 80071e6:	d002      	beq.n	80071ee <I2C_Slave_STOPF+0x6a>
 80071e8:	7bfb      	ldrb	r3, [r7, #15]
 80071ea:	2b2a      	cmp	r3, #42	; 0x2a
 80071ec:	d135      	bne.n	800725a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007200:	b29b      	uxth	r3, r3
 8007202:	2b00      	cmp	r3, #0
 8007204:	d005      	beq.n	8007212 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720a:	f043 0204 	orr.w	r2, r3, #4
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	685a      	ldr	r2, [r3, #4]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007220:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007226:	4618      	mov	r0, r3
 8007228:	f7fe f8e7 	bl	80053fa <HAL_DMA_GetState>
 800722c:	4603      	mov	r3, r0
 800722e:	2b01      	cmp	r3, #1
 8007230:	d049      	beq.n	80072c6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007236:	4a69      	ldr	r2, [pc, #420]	; (80073dc <I2C_Slave_STOPF+0x258>)
 8007238:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723e:	4618      	mov	r0, r3
 8007240:	f7fe f8b9 	bl	80053b6 <HAL_DMA_Abort_IT>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d03d      	beq.n	80072c6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007254:	4610      	mov	r0, r2
 8007256:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007258:	e035      	b.n	80072c6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	b29a      	uxth	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800726c:	b29b      	uxth	r3, r3
 800726e:	2b00      	cmp	r3, #0
 8007270:	d005      	beq.n	800727e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007276:	f043 0204 	orr.w	r2, r3, #4
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800728c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007292:	4618      	mov	r0, r3
 8007294:	f7fe f8b1 	bl	80053fa <HAL_DMA_GetState>
 8007298:	4603      	mov	r3, r0
 800729a:	2b01      	cmp	r3, #1
 800729c:	d014      	beq.n	80072c8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072a2:	4a4e      	ldr	r2, [pc, #312]	; (80073dc <I2C_Slave_STOPF+0x258>)
 80072a4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7fe f883 	bl	80053b6 <HAL_DMA_Abort_IT>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d008      	beq.n	80072c8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80072c0:	4610      	mov	r0, r2
 80072c2:	4798      	blx	r3
 80072c4:	e000      	b.n	80072c8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80072c6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d03e      	beq.n	8007350 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	695b      	ldr	r3, [r3, #20]
 80072d8:	f003 0304 	and.w	r3, r3, #4
 80072dc:	2b04      	cmp	r3, #4
 80072de:	d112      	bne.n	8007306 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	691a      	ldr	r2, [r3, #16]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ea:	b2d2      	uxtb	r2, r2
 80072ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f2:	1c5a      	adds	r2, r3, #1
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	3b01      	subs	r3, #1
 8007300:	b29a      	uxth	r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	695b      	ldr	r3, [r3, #20]
 800730c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007310:	2b40      	cmp	r3, #64	; 0x40
 8007312:	d112      	bne.n	800733a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	691a      	ldr	r2, [r3, #16]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731e:	b2d2      	uxtb	r2, r2
 8007320:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007326:	1c5a      	adds	r2, r3, #1
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007330:	b29b      	uxth	r3, r3
 8007332:	3b01      	subs	r3, #1
 8007334:	b29a      	uxth	r2, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800733e:	b29b      	uxth	r3, r3
 8007340:	2b00      	cmp	r3, #0
 8007342:	d005      	beq.n	8007350 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007348:	f043 0204 	orr.w	r2, r3, #4
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007354:	2b00      	cmp	r3, #0
 8007356:	d003      	beq.n	8007360 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 f843 	bl	80073e4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800735e:	e039      	b.n	80073d4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007360:	7bfb      	ldrb	r3, [r7, #15]
 8007362:	2b2a      	cmp	r3, #42	; 0x2a
 8007364:	d109      	bne.n	800737a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2228      	movs	r2, #40	; 0x28
 8007370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f7ff f826 	bl	80063c6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007380:	b2db      	uxtb	r3, r3
 8007382:	2b28      	cmp	r3, #40	; 0x28
 8007384:	d111      	bne.n	80073aa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a15      	ldr	r2, [pc, #84]	; (80073e0 <I2C_Slave_STOPF+0x25c>)
 800738a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2220      	movs	r2, #32
 8007396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f7ff f827 	bl	80063f6 <HAL_I2C_ListenCpltCallback>
}
 80073a8:	e014      	b.n	80073d4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ae:	2b22      	cmp	r3, #34	; 0x22
 80073b0:	d002      	beq.n	80073b8 <I2C_Slave_STOPF+0x234>
 80073b2:	7bfb      	ldrb	r3, [r7, #15]
 80073b4:	2b22      	cmp	r3, #34	; 0x22
 80073b6:	d10d      	bne.n	80073d4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2220      	movs	r2, #32
 80073c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f7fe fff9 	bl	80063c6 <HAL_I2C_SlaveRxCpltCallback>
}
 80073d4:	bf00      	nop
 80073d6:	3710      	adds	r7, #16
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	080078e9 	.word	0x080078e9
 80073e0:	ffff0000 	.word	0xffff0000

080073e4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073f2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073fa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80073fc:	7bbb      	ldrb	r3, [r7, #14]
 80073fe:	2b10      	cmp	r3, #16
 8007400:	d002      	beq.n	8007408 <I2C_ITError+0x24>
 8007402:	7bbb      	ldrb	r3, [r7, #14]
 8007404:	2b40      	cmp	r3, #64	; 0x40
 8007406:	d10a      	bne.n	800741e <I2C_ITError+0x3a>
 8007408:	7bfb      	ldrb	r3, [r7, #15]
 800740a:	2b22      	cmp	r3, #34	; 0x22
 800740c:	d107      	bne.n	800741e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800741c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800741e:	7bfb      	ldrb	r3, [r7, #15]
 8007420:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007424:	2b28      	cmp	r3, #40	; 0x28
 8007426:	d107      	bne.n	8007438 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2228      	movs	r2, #40	; 0x28
 8007432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007436:	e015      	b.n	8007464 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007442:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007446:	d00a      	beq.n	800745e <I2C_ITError+0x7a>
 8007448:	7bfb      	ldrb	r3, [r7, #15]
 800744a:	2b60      	cmp	r3, #96	; 0x60
 800744c:	d007      	beq.n	800745e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2220      	movs	r2, #32
 8007452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800746e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007472:	d162      	bne.n	800753a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	685a      	ldr	r2, [r3, #4]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007482:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007488:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b01      	cmp	r3, #1
 8007490:	d020      	beq.n	80074d4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007496:	4a6a      	ldr	r2, [pc, #424]	; (8007640 <I2C_ITError+0x25c>)
 8007498:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800749e:	4618      	mov	r0, r3
 80074a0:	f7fd ff89 	bl	80053b6 <HAL_DMA_Abort_IT>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f000 8089 	beq.w	80075be <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f022 0201 	bic.w	r2, r2, #1
 80074ba:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2220      	movs	r2, #32
 80074c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80074ce:	4610      	mov	r0, r2
 80074d0:	4798      	blx	r3
 80074d2:	e074      	b.n	80075be <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d8:	4a59      	ldr	r2, [pc, #356]	; (8007640 <I2C_ITError+0x25c>)
 80074da:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7fd ff68 	bl	80053b6 <HAL_DMA_Abort_IT>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d068      	beq.n	80075be <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	695b      	ldr	r3, [r3, #20]
 80074f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f6:	2b40      	cmp	r3, #64	; 0x40
 80074f8:	d10b      	bne.n	8007512 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	691a      	ldr	r2, [r3, #16]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007504:	b2d2      	uxtb	r2, r2
 8007506:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750c:	1c5a      	adds	r2, r3, #1
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f022 0201 	bic.w	r2, r2, #1
 8007520:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2220      	movs	r2, #32
 8007526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007534:	4610      	mov	r0, r2
 8007536:	4798      	blx	r3
 8007538:	e041      	b.n	80075be <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007540:	b2db      	uxtb	r3, r3
 8007542:	2b60      	cmp	r3, #96	; 0x60
 8007544:	d125      	bne.n	8007592 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2220      	movs	r2, #32
 800754a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	695b      	ldr	r3, [r3, #20]
 800755a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800755e:	2b40      	cmp	r3, #64	; 0x40
 8007560:	d10b      	bne.n	800757a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	691a      	ldr	r2, [r3, #16]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756c:	b2d2      	uxtb	r2, r2
 800756e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007574:	1c5a      	adds	r2, r3, #1
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f022 0201 	bic.w	r2, r2, #1
 8007588:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f7fe ff5b 	bl	8006446 <HAL_I2C_AbortCpltCallback>
 8007590:	e015      	b.n	80075be <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	695b      	ldr	r3, [r3, #20]
 8007598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800759c:	2b40      	cmp	r3, #64	; 0x40
 800759e:	d10b      	bne.n	80075b8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	691a      	ldr	r2, [r3, #16]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075aa:	b2d2      	uxtb	r2, r2
 80075ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b2:	1c5a      	adds	r2, r3, #1
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f7fe ff3a 	bl	8006432 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	f003 0301 	and.w	r3, r3, #1
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d10e      	bne.n	80075ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d109      	bne.n	80075ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d104      	bne.n	80075ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d007      	beq.n	80075fc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	685a      	ldr	r2, [r3, #4]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80075fa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007602:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007608:	f003 0304 	and.w	r3, r3, #4
 800760c:	2b04      	cmp	r3, #4
 800760e:	d113      	bne.n	8007638 <I2C_ITError+0x254>
 8007610:	7bfb      	ldrb	r3, [r7, #15]
 8007612:	2b28      	cmp	r3, #40	; 0x28
 8007614:	d110      	bne.n	8007638 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a0a      	ldr	r2, [pc, #40]	; (8007644 <I2C_ITError+0x260>)
 800761a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2220      	movs	r2, #32
 8007626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7fe fedf 	bl	80063f6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007638:	bf00      	nop
 800763a:	3710      	adds	r7, #16
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	080078e9 	.word	0x080078e9
 8007644:	ffff0000 	.word	0xffff0000

08007648 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b088      	sub	sp, #32
 800764c:	af02      	add	r7, sp, #8
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	607a      	str	r2, [r7, #4]
 8007652:	603b      	str	r3, [r7, #0]
 8007654:	460b      	mov	r3, r1
 8007656:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	2b08      	cmp	r3, #8
 8007662:	d006      	beq.n	8007672 <I2C_MasterRequestWrite+0x2a>
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	2b01      	cmp	r3, #1
 8007668:	d003      	beq.n	8007672 <I2C_MasterRequestWrite+0x2a>
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007670:	d108      	bne.n	8007684 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007680:	601a      	str	r2, [r3, #0]
 8007682:	e00b      	b.n	800769c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007688:	2b12      	cmp	r3, #18
 800768a:	d107      	bne.n	800769c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800769a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	9300      	str	r3, [sp, #0]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f000 f9c5 	bl	8007a38 <I2C_WaitOnFlagUntilTimeout>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00d      	beq.n	80076d0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076c2:	d103      	bne.n	80076cc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e035      	b.n	800773c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076d8:	d108      	bne.n	80076ec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80076da:	897b      	ldrh	r3, [r7, #10]
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	461a      	mov	r2, r3
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80076e8:	611a      	str	r2, [r3, #16]
 80076ea:	e01b      	b.n	8007724 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80076ec:	897b      	ldrh	r3, [r7, #10]
 80076ee:	11db      	asrs	r3, r3, #7
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	f003 0306 	and.w	r3, r3, #6
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	f063 030f 	orn	r3, r3, #15
 80076fc:	b2da      	uxtb	r2, r3
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	490e      	ldr	r1, [pc, #56]	; (8007744 <I2C_MasterRequestWrite+0xfc>)
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	f000 f9eb 	bl	8007ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d001      	beq.n	800771a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e010      	b.n	800773c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800771a:	897b      	ldrh	r3, [r7, #10]
 800771c:	b2da      	uxtb	r2, r3
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	4907      	ldr	r1, [pc, #28]	; (8007748 <I2C_MasterRequestWrite+0x100>)
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f000 f9db 	bl	8007ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007730:	4603      	mov	r3, r0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d001      	beq.n	800773a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	e000      	b.n	800773c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3718      	adds	r7, #24
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	00010008 	.word	0x00010008
 8007748:	00010002 	.word	0x00010002

0800774c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b088      	sub	sp, #32
 8007750:	af02      	add	r7, sp, #8
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	607a      	str	r2, [r7, #4]
 8007756:	603b      	str	r3, [r7, #0]
 8007758:	460b      	mov	r3, r1
 800775a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007760:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007770:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	2b08      	cmp	r3, #8
 8007776:	d006      	beq.n	8007786 <I2C_MasterRequestRead+0x3a>
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d003      	beq.n	8007786 <I2C_MasterRequestRead+0x3a>
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007784:	d108      	bne.n	8007798 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007794:	601a      	str	r2, [r3, #0]
 8007796:	e00b      	b.n	80077b0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779c:	2b11      	cmp	r3, #17
 800779e:	d107      	bne.n	80077b0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	9300      	str	r3, [sp, #0]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f000 f93b 	bl	8007a38 <I2C_WaitOnFlagUntilTimeout>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00d      	beq.n	80077e4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077d6:	d103      	bne.n	80077e0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80077e0:	2303      	movs	r3, #3
 80077e2:	e079      	b.n	80078d8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077ec:	d108      	bne.n	8007800 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80077ee:	897b      	ldrh	r3, [r7, #10]
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	f043 0301 	orr.w	r3, r3, #1
 80077f6:	b2da      	uxtb	r2, r3
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	611a      	str	r2, [r3, #16]
 80077fe:	e05f      	b.n	80078c0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007800:	897b      	ldrh	r3, [r7, #10]
 8007802:	11db      	asrs	r3, r3, #7
 8007804:	b2db      	uxtb	r3, r3
 8007806:	f003 0306 	and.w	r3, r3, #6
 800780a:	b2db      	uxtb	r3, r3
 800780c:	f063 030f 	orn	r3, r3, #15
 8007810:	b2da      	uxtb	r2, r3
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	4930      	ldr	r1, [pc, #192]	; (80078e0 <I2C_MasterRequestRead+0x194>)
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f000 f961 	bl	8007ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d001      	beq.n	800782e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e054      	b.n	80078d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800782e:	897b      	ldrh	r3, [r7, #10]
 8007830:	b2da      	uxtb	r2, r3
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	4929      	ldr	r1, [pc, #164]	; (80078e4 <I2C_MasterRequestRead+0x198>)
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f000 f951 	bl	8007ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d001      	beq.n	800784e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e044      	b.n	80078d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800784e:	2300      	movs	r3, #0
 8007850:	613b      	str	r3, [r7, #16]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	695b      	ldr	r3, [r3, #20]
 8007858:	613b      	str	r3, [r7, #16]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	613b      	str	r3, [r7, #16]
 8007862:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007872:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	9300      	str	r3, [sp, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f000 f8d9 	bl	8007a38 <I2C_WaitOnFlagUntilTimeout>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00d      	beq.n	80078a8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800789a:	d103      	bne.n	80078a4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078a2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80078a4:	2303      	movs	r3, #3
 80078a6:	e017      	b.n	80078d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80078a8:	897b      	ldrh	r3, [r7, #10]
 80078aa:	11db      	asrs	r3, r3, #7
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	f003 0306 	and.w	r3, r3, #6
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	f063 030e 	orn	r3, r3, #14
 80078b8:	b2da      	uxtb	r2, r3
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	4907      	ldr	r1, [pc, #28]	; (80078e4 <I2C_MasterRequestRead+0x198>)
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f000 f90d 	bl	8007ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d001      	beq.n	80078d6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e000      	b.n	80078d8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3718      	adds	r7, #24
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	00010008 	.word	0x00010008
 80078e4:	00010002 	.word	0x00010002

080078e8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b086      	sub	sp, #24
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80078f0:	2300      	movs	r3, #0
 80078f2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007900:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007902:	4b4b      	ldr	r3, [pc, #300]	; (8007a30 <I2C_DMAAbort+0x148>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	08db      	lsrs	r3, r3, #3
 8007908:	4a4a      	ldr	r2, [pc, #296]	; (8007a34 <I2C_DMAAbort+0x14c>)
 800790a:	fba2 2303 	umull	r2, r3, r2, r3
 800790e:	0a1a      	lsrs	r2, r3, #8
 8007910:	4613      	mov	r3, r2
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	4413      	add	r3, r2
 8007916:	00da      	lsls	r2, r3, #3
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d106      	bne.n	8007930 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007926:	f043 0220 	orr.w	r2, r3, #32
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800792e:	e00a      	b.n	8007946 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	3b01      	subs	r3, #1
 8007934:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007944:	d0ea      	beq.n	800791c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800794a:	2b00      	cmp	r3, #0
 800794c:	d003      	beq.n	8007956 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007952:	2200      	movs	r2, #0
 8007954:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795a:	2b00      	cmp	r3, #0
 800795c:	d003      	beq.n	8007966 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007962:	2200      	movs	r2, #0
 8007964:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007974:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	2200      	movs	r2, #0
 800797a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007980:	2b00      	cmp	r3, #0
 8007982:	d003      	beq.n	800798c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007988:	2200      	movs	r2, #0
 800798a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007990:	2b00      	cmp	r3, #0
 8007992:	d003      	beq.n	800799c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007998:	2200      	movs	r2, #0
 800799a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f022 0201 	bic.w	r2, r2, #1
 80079aa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	2b60      	cmp	r3, #96	; 0x60
 80079b6:	d10e      	bne.n	80079d6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	2220      	movs	r2, #32
 80079bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	2200      	movs	r2, #0
 80079cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80079ce:	6978      	ldr	r0, [r7, #20]
 80079d0:	f7fe fd39 	bl	8006446 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80079d4:	e027      	b.n	8007a26 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80079d6:	7cfb      	ldrb	r3, [r7, #19]
 80079d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80079dc:	2b28      	cmp	r3, #40	; 0x28
 80079de:	d117      	bne.n	8007a10 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f042 0201 	orr.w	r2, r2, #1
 80079ee:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80079fe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	2200      	movs	r2, #0
 8007a04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	2228      	movs	r2, #40	; 0x28
 8007a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007a0e:	e007      	b.n	8007a20 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	2220      	movs	r2, #32
 8007a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007a20:	6978      	ldr	r0, [r7, #20]
 8007a22:	f7fe fd06 	bl	8006432 <HAL_I2C_ErrorCallback>
}
 8007a26:	bf00      	nop
 8007a28:	3718      	adds	r7, #24
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	20000144 	.word	0x20000144
 8007a34:	14f8b589 	.word	0x14f8b589

08007a38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	603b      	str	r3, [r7, #0]
 8007a44:	4613      	mov	r3, r2
 8007a46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a48:	e025      	b.n	8007a96 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a50:	d021      	beq.n	8007a96 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a52:	f7fc fd17 	bl	8004484 <HAL_GetTick>
 8007a56:	4602      	mov	r2, r0
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	1ad3      	subs	r3, r2, r3
 8007a5c:	683a      	ldr	r2, [r7, #0]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d302      	bcc.n	8007a68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d116      	bne.n	8007a96 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2220      	movs	r2, #32
 8007a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a82:	f043 0220 	orr.w	r2, r3, #32
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e023      	b.n	8007ade <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	0c1b      	lsrs	r3, r3, #16
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d10d      	bne.n	8007abc <I2C_WaitOnFlagUntilTimeout+0x84>
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	43da      	mvns	r2, r3
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	4013      	ands	r3, r2
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	bf0c      	ite	eq
 8007ab2:	2301      	moveq	r3, #1
 8007ab4:	2300      	movne	r3, #0
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	461a      	mov	r2, r3
 8007aba:	e00c      	b.n	8007ad6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	699b      	ldr	r3, [r3, #24]
 8007ac2:	43da      	mvns	r2, r3
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	4013      	ands	r3, r2
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	bf0c      	ite	eq
 8007ace:	2301      	moveq	r3, #1
 8007ad0:	2300      	movne	r3, #0
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	79fb      	ldrb	r3, [r7, #7]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d0b6      	beq.n	8007a4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b084      	sub	sp, #16
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	60f8      	str	r0, [r7, #12]
 8007aee:	60b9      	str	r1, [r7, #8]
 8007af0:	607a      	str	r2, [r7, #4]
 8007af2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007af4:	e051      	b.n	8007b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	695b      	ldr	r3, [r3, #20]
 8007afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b04:	d123      	bne.n	8007b4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b14:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007b1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2220      	movs	r2, #32
 8007b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3a:	f043 0204 	orr.w	r2, r3, #4
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e046      	b.n	8007bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b54:	d021      	beq.n	8007b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b56:	f7fc fc95 	bl	8004484 <HAL_GetTick>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	1ad3      	subs	r3, r2, r3
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d302      	bcc.n	8007b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d116      	bne.n	8007b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2220      	movs	r2, #32
 8007b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b86:	f043 0220 	orr.w	r2, r3, #32
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e020      	b.n	8007bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	0c1b      	lsrs	r3, r3, #16
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d10c      	bne.n	8007bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	695b      	ldr	r3, [r3, #20]
 8007baa:	43da      	mvns	r2, r3
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	4013      	ands	r3, r2
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	bf14      	ite	ne
 8007bb6:	2301      	movne	r3, #1
 8007bb8:	2300      	moveq	r3, #0
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	e00b      	b.n	8007bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	699b      	ldr	r3, [r3, #24]
 8007bc4:	43da      	mvns	r2, r3
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	4013      	ands	r3, r2
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	bf14      	ite	ne
 8007bd0:	2301      	movne	r3, #1
 8007bd2:	2300      	moveq	r3, #0
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d18d      	bne.n	8007af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3710      	adds	r7, #16
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007bf0:	e02d      	b.n	8007c4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f000 f900 	bl	8007df8 <I2C_IsAcknowledgeFailed>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d001      	beq.n	8007c02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e02d      	b.n	8007c5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c08:	d021      	beq.n	8007c4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c0a:	f7fc fc3b 	bl	8004484 <HAL_GetTick>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	68ba      	ldr	r2, [r7, #8]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d302      	bcc.n	8007c20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d116      	bne.n	8007c4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2220      	movs	r2, #32
 8007c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c3a:	f043 0220 	orr.w	r2, r3, #32
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e007      	b.n	8007c5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	695b      	ldr	r3, [r3, #20]
 8007c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c58:	2b80      	cmp	r3, #128	; 0x80
 8007c5a:	d1ca      	bne.n	8007bf2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b084      	sub	sp, #16
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	60f8      	str	r0, [r7, #12]
 8007c6e:	60b9      	str	r1, [r7, #8]
 8007c70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007c72:	e02d      	b.n	8007cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f000 f8bf 	bl	8007df8 <I2C_IsAcknowledgeFailed>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d001      	beq.n	8007c84 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	e02d      	b.n	8007ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c8a:	d021      	beq.n	8007cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c8c:	f7fc fbfa 	bl	8004484 <HAL_GetTick>
 8007c90:	4602      	mov	r2, r0
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	1ad3      	subs	r3, r2, r3
 8007c96:	68ba      	ldr	r2, [r7, #8]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d302      	bcc.n	8007ca2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d116      	bne.n	8007cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2220      	movs	r2, #32
 8007cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbc:	f043 0220 	orr.w	r2, r3, #32
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e007      	b.n	8007ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	695b      	ldr	r3, [r3, #20]
 8007cd6:	f003 0304 	and.w	r3, r3, #4
 8007cda:	2b04      	cmp	r3, #4
 8007cdc:	d1ca      	bne.n	8007c74 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007cf4:	4b13      	ldr	r3, [pc, #76]	; (8007d44 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	08db      	lsrs	r3, r3, #3
 8007cfa:	4a13      	ldr	r2, [pc, #76]	; (8007d48 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8007d00:	0a1a      	lsrs	r2, r3, #8
 8007d02:	4613      	mov	r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	4413      	add	r3, r2
 8007d08:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d107      	bne.n	8007d26 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1a:	f043 0220 	orr.w	r2, r3, #32
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e008      	b.n	8007d38 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d34:	d0e9      	beq.n	8007d0a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3714      	adds	r7, #20
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr
 8007d44:	20000144 	.word	0x20000144
 8007d48:	14f8b589 	.word	0x14f8b589

08007d4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007d58:	e042      	b.n	8007de0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	695b      	ldr	r3, [r3, #20]
 8007d60:	f003 0310 	and.w	r3, r3, #16
 8007d64:	2b10      	cmp	r3, #16
 8007d66:	d119      	bne.n	8007d9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f06f 0210 	mvn.w	r2, #16
 8007d70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2200      	movs	r2, #0
 8007d76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2220      	movs	r2, #32
 8007d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e029      	b.n	8007df0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d9c:	f7fc fb72 	bl	8004484 <HAL_GetTick>
 8007da0:	4602      	mov	r2, r0
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	1ad3      	subs	r3, r2, r3
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d302      	bcc.n	8007db2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d116      	bne.n	8007de0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2200      	movs	r2, #0
 8007db6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2220      	movs	r2, #32
 8007dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dcc:	f043 0220 	orr.w	r2, r3, #32
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e007      	b.n	8007df0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	695b      	ldr	r3, [r3, #20]
 8007de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dea:	2b40      	cmp	r3, #64	; 0x40
 8007dec:	d1b5      	bne.n	8007d5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	695b      	ldr	r3, [r3, #20]
 8007e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e0e:	d11b      	bne.n	8007e48 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e18:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2220      	movs	r2, #32
 8007e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e34:	f043 0204 	orr.w	r2, r3, #4
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007e44:	2301      	movs	r3, #1
 8007e46:	e000      	b.n	8007e4a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	370c      	adds	r7, #12
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr

08007e56 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007e56:	b480      	push	{r7}
 8007e58:	b083      	sub	sp, #12
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e62:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007e66:	d103      	bne.n	8007e70 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007e6e:	e007      	b.n	8007e80 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e74:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007e78:	d102      	bne.n	8007e80 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2208      	movs	r2, #8
 8007e7e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d101      	bne.n	8007e9e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e034      	b.n	8007f08 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8007ea6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f245 5255 	movw	r2, #21845	; 0x5555
 8007eb0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	6852      	ldr	r2, [r2, #4]
 8007eba:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	6892      	ldr	r2, [r2, #8]
 8007ec4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8007ec6:	f7fc fadd 	bl	8004484 <HAL_GetTick>
 8007eca:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007ecc:	e00f      	b.n	8007eee <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8007ece:	f7fc fad9 	bl	8004484 <HAL_GetTick>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	1ad3      	subs	r3, r2, r3
 8007ed8:	2b31      	cmp	r3, #49	; 0x31
 8007eda:	d908      	bls.n	8007eee <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	f003 0303 	and.w	r3, r3, #3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d001      	beq.n	8007eee <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8007eea:	2303      	movs	r3, #3
 8007eec:	e00c      	b.n	8007f08 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	f003 0303 	and.w	r3, r3, #3
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d1e8      	bne.n	8007ece <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8007f04:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8007f20:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d101      	bne.n	8007f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	e0cc      	b.n	80080de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007f44:	4b68      	ldr	r3, [pc, #416]	; (80080e8 <HAL_RCC_ClockConfig+0x1b8>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 030f 	and.w	r3, r3, #15
 8007f4c:	683a      	ldr	r2, [r7, #0]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d90c      	bls.n	8007f6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f52:	4b65      	ldr	r3, [pc, #404]	; (80080e8 <HAL_RCC_ClockConfig+0x1b8>)
 8007f54:	683a      	ldr	r2, [r7, #0]
 8007f56:	b2d2      	uxtb	r2, r2
 8007f58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f5a:	4b63      	ldr	r3, [pc, #396]	; (80080e8 <HAL_RCC_ClockConfig+0x1b8>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f003 030f 	and.w	r3, r3, #15
 8007f62:	683a      	ldr	r2, [r7, #0]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d001      	beq.n	8007f6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e0b8      	b.n	80080de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f003 0302 	and.w	r3, r3, #2
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d020      	beq.n	8007fba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 0304 	and.w	r3, r3, #4
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d005      	beq.n	8007f90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f84:	4b59      	ldr	r3, [pc, #356]	; (80080ec <HAL_RCC_ClockConfig+0x1bc>)
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	4a58      	ldr	r2, [pc, #352]	; (80080ec <HAL_RCC_ClockConfig+0x1bc>)
 8007f8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007f8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f003 0308 	and.w	r3, r3, #8
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d005      	beq.n	8007fa8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f9c:	4b53      	ldr	r3, [pc, #332]	; (80080ec <HAL_RCC_ClockConfig+0x1bc>)
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	4a52      	ldr	r2, [pc, #328]	; (80080ec <HAL_RCC_ClockConfig+0x1bc>)
 8007fa2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007fa6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fa8:	4b50      	ldr	r3, [pc, #320]	; (80080ec <HAL_RCC_ClockConfig+0x1bc>)
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	494d      	ldr	r1, [pc, #308]	; (80080ec <HAL_RCC_ClockConfig+0x1bc>)
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f003 0301 	and.w	r3, r3, #1
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d044      	beq.n	8008050 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d107      	bne.n	8007fde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fce:	4b47      	ldr	r3, [pc, #284]	; (80080ec <HAL_RCC_ClockConfig+0x1bc>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d119      	bne.n	800800e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e07f      	b.n	80080de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	2b02      	cmp	r3, #2
 8007fe4:	d003      	beq.n	8007fee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007fea:	2b03      	cmp	r3, #3
 8007fec:	d107      	bne.n	8007ffe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fee:	4b3f      	ldr	r3, [pc, #252]	; (80080ec <HAL_RCC_ClockConfig+0x1bc>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d109      	bne.n	800800e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e06f      	b.n	80080de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ffe:	4b3b      	ldr	r3, [pc, #236]	; (80080ec <HAL_RCC_ClockConfig+0x1bc>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 0302 	and.w	r3, r3, #2
 8008006:	2b00      	cmp	r3, #0
 8008008:	d101      	bne.n	800800e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	e067      	b.n	80080de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800800e:	4b37      	ldr	r3, [pc, #220]	; (80080ec <HAL_RCC_ClockConfig+0x1bc>)
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f023 0203 	bic.w	r2, r3, #3
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	4934      	ldr	r1, [pc, #208]	; (80080ec <HAL_RCC_ClockConfig+0x1bc>)
 800801c:	4313      	orrs	r3, r2
 800801e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008020:	f7fc fa30 	bl	8004484 <HAL_GetTick>
 8008024:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008026:	e00a      	b.n	800803e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008028:	f7fc fa2c 	bl	8004484 <HAL_GetTick>
 800802c:	4602      	mov	r2, r0
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	1ad3      	subs	r3, r2, r3
 8008032:	f241 3288 	movw	r2, #5000	; 0x1388
 8008036:	4293      	cmp	r3, r2
 8008038:	d901      	bls.n	800803e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800803a:	2303      	movs	r3, #3
 800803c:	e04f      	b.n	80080de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800803e:	4b2b      	ldr	r3, [pc, #172]	; (80080ec <HAL_RCC_ClockConfig+0x1bc>)
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	f003 020c 	and.w	r2, r3, #12
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	429a      	cmp	r2, r3
 800804e:	d1eb      	bne.n	8008028 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008050:	4b25      	ldr	r3, [pc, #148]	; (80080e8 <HAL_RCC_ClockConfig+0x1b8>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f003 030f 	and.w	r3, r3, #15
 8008058:	683a      	ldr	r2, [r7, #0]
 800805a:	429a      	cmp	r2, r3
 800805c:	d20c      	bcs.n	8008078 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800805e:	4b22      	ldr	r3, [pc, #136]	; (80080e8 <HAL_RCC_ClockConfig+0x1b8>)
 8008060:	683a      	ldr	r2, [r7, #0]
 8008062:	b2d2      	uxtb	r2, r2
 8008064:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008066:	4b20      	ldr	r3, [pc, #128]	; (80080e8 <HAL_RCC_ClockConfig+0x1b8>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 030f 	and.w	r3, r3, #15
 800806e:	683a      	ldr	r2, [r7, #0]
 8008070:	429a      	cmp	r2, r3
 8008072:	d001      	beq.n	8008078 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	e032      	b.n	80080de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 0304 	and.w	r3, r3, #4
 8008080:	2b00      	cmp	r3, #0
 8008082:	d008      	beq.n	8008096 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008084:	4b19      	ldr	r3, [pc, #100]	; (80080ec <HAL_RCC_ClockConfig+0x1bc>)
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	4916      	ldr	r1, [pc, #88]	; (80080ec <HAL_RCC_ClockConfig+0x1bc>)
 8008092:	4313      	orrs	r3, r2
 8008094:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 0308 	and.w	r3, r3, #8
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d009      	beq.n	80080b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80080a2:	4b12      	ldr	r3, [pc, #72]	; (80080ec <HAL_RCC_ClockConfig+0x1bc>)
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	00db      	lsls	r3, r3, #3
 80080b0:	490e      	ldr	r1, [pc, #56]	; (80080ec <HAL_RCC_ClockConfig+0x1bc>)
 80080b2:	4313      	orrs	r3, r2
 80080b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80080b6:	f000 fb7f 	bl	80087b8 <HAL_RCC_GetSysClockFreq>
 80080ba:	4602      	mov	r2, r0
 80080bc:	4b0b      	ldr	r3, [pc, #44]	; (80080ec <HAL_RCC_ClockConfig+0x1bc>)
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	091b      	lsrs	r3, r3, #4
 80080c2:	f003 030f 	and.w	r3, r3, #15
 80080c6:	490a      	ldr	r1, [pc, #40]	; (80080f0 <HAL_RCC_ClockConfig+0x1c0>)
 80080c8:	5ccb      	ldrb	r3, [r1, r3]
 80080ca:	fa22 f303 	lsr.w	r3, r2, r3
 80080ce:	4a09      	ldr	r2, [pc, #36]	; (80080f4 <HAL_RCC_ClockConfig+0x1c4>)
 80080d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80080d2:	4b09      	ldr	r3, [pc, #36]	; (80080f8 <HAL_RCC_ClockConfig+0x1c8>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7fc f990 	bl	80043fc <HAL_InitTick>

  return HAL_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	40023c00 	.word	0x40023c00
 80080ec:	40023800 	.word	0x40023800
 80080f0:	0800d1b4 	.word	0x0800d1b4
 80080f4:	20000144 	.word	0x20000144
 80080f8:	20000148 	.word	0x20000148

080080fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80080fc:	b480      	push	{r7}
 80080fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008100:	4b03      	ldr	r3, [pc, #12]	; (8008110 <HAL_RCC_GetHCLKFreq+0x14>)
 8008102:	681b      	ldr	r3, [r3, #0]
}
 8008104:	4618      	mov	r0, r3
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	20000144 	.word	0x20000144

08008114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008118:	f7ff fff0 	bl	80080fc <HAL_RCC_GetHCLKFreq>
 800811c:	4602      	mov	r2, r0
 800811e:	4b05      	ldr	r3, [pc, #20]	; (8008134 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	0a9b      	lsrs	r3, r3, #10
 8008124:	f003 0307 	and.w	r3, r3, #7
 8008128:	4903      	ldr	r1, [pc, #12]	; (8008138 <HAL_RCC_GetPCLK1Freq+0x24>)
 800812a:	5ccb      	ldrb	r3, [r1, r3]
 800812c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008130:	4618      	mov	r0, r3
 8008132:	bd80      	pop	{r7, pc}
 8008134:	40023800 	.word	0x40023800
 8008138:	0800d1c4 	.word	0x0800d1c4

0800813c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008140:	f7ff ffdc 	bl	80080fc <HAL_RCC_GetHCLKFreq>
 8008144:	4602      	mov	r2, r0
 8008146:	4b05      	ldr	r3, [pc, #20]	; (800815c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	0b5b      	lsrs	r3, r3, #13
 800814c:	f003 0307 	and.w	r3, r3, #7
 8008150:	4903      	ldr	r1, [pc, #12]	; (8008160 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008152:	5ccb      	ldrb	r3, [r1, r3]
 8008154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008158:	4618      	mov	r0, r3
 800815a:	bd80      	pop	{r7, pc}
 800815c:	40023800 	.word	0x40023800
 8008160:	0800d1c4 	.word	0x0800d1c4

08008164 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b08c      	sub	sp, #48	; 0x30
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800816c:	2300      	movs	r3, #0
 800816e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8008170:	2300      	movs	r3, #0
 8008172:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8008174:	2300      	movs	r3, #0
 8008176:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8008178:	2300      	movs	r3, #0
 800817a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800817c:	2300      	movs	r3, #0
 800817e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8008180:	2300      	movs	r3, #0
 8008182:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8008184:	2300      	movs	r3, #0
 8008186:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8008188:	2300      	movs	r3, #0
 800818a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800818c:	2300      	movs	r3, #0
 800818e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 0301 	and.w	r3, r3, #1
 8008198:	2b00      	cmp	r3, #0
 800819a:	d010      	beq.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800819c:	4b6f      	ldr	r3, [pc, #444]	; (800835c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800819e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081a2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081aa:	496c      	ldr	r1, [pc, #432]	; (800835c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80081ac:	4313      	orrs	r3, r2
 80081ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d101      	bne.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80081ba:	2301      	movs	r3, #1
 80081bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 0302 	and.w	r3, r3, #2
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d010      	beq.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80081ca:	4b64      	ldr	r3, [pc, #400]	; (800835c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80081cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081d0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081d8:	4960      	ldr	r1, [pc, #384]	; (800835c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80081da:	4313      	orrs	r3, r2
 80081dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d101      	bne.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80081e8:	2301      	movs	r3, #1
 80081ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f003 0304 	and.w	r3, r3, #4
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d017      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80081f8:	4b58      	ldr	r3, [pc, #352]	; (800835c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80081fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008206:	4955      	ldr	r1, [pc, #340]	; (800835c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008208:	4313      	orrs	r3, r2
 800820a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008212:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008216:	d101      	bne.n	800821c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8008218:	2301      	movs	r3, #1
 800821a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008220:	2b00      	cmp	r3, #0
 8008222:	d101      	bne.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8008224:	2301      	movs	r3, #1
 8008226:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 0308 	and.w	r3, r3, #8
 8008230:	2b00      	cmp	r3, #0
 8008232:	d017      	beq.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008234:	4b49      	ldr	r3, [pc, #292]	; (800835c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008236:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800823a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008242:	4946      	ldr	r1, [pc, #280]	; (800835c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008244:	4313      	orrs	r3, r2
 8008246:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800824e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008252:	d101      	bne.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8008254:	2301      	movs	r3, #1
 8008256:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800825c:	2b00      	cmp	r3, #0
 800825e:	d101      	bne.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8008260:	2301      	movs	r3, #1
 8008262:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 0320 	and.w	r3, r3, #32
 800826c:	2b00      	cmp	r3, #0
 800826e:	f000 808a 	beq.w	8008386 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008272:	2300      	movs	r3, #0
 8008274:	60bb      	str	r3, [r7, #8]
 8008276:	4b39      	ldr	r3, [pc, #228]	; (800835c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827a:	4a38      	ldr	r2, [pc, #224]	; (800835c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800827c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008280:	6413      	str	r3, [r2, #64]	; 0x40
 8008282:	4b36      	ldr	r3, [pc, #216]	; (800835c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800828a:	60bb      	str	r3, [r7, #8]
 800828c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800828e:	4b34      	ldr	r3, [pc, #208]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a33      	ldr	r2, [pc, #204]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008298:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800829a:	f7fc f8f3 	bl	8004484 <HAL_GetTick>
 800829e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80082a0:	e008      	b.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80082a2:	f7fc f8ef 	bl	8004484 <HAL_GetTick>
 80082a6:	4602      	mov	r2, r0
 80082a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082aa:	1ad3      	subs	r3, r2, r3
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d901      	bls.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80082b0:	2303      	movs	r3, #3
 80082b2:	e278      	b.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80082b4:	4b2a      	ldr	r3, [pc, #168]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d0f0      	beq.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80082c0:	4b26      	ldr	r3, [pc, #152]	; (800835c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80082c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082c8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80082ca:	6a3b      	ldr	r3, [r7, #32]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d02f      	beq.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082d8:	6a3a      	ldr	r2, [r7, #32]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d028      	beq.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80082de:	4b1f      	ldr	r3, [pc, #124]	; (800835c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80082e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082e6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80082e8:	4b1e      	ldr	r3, [pc, #120]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80082ea:	2201      	movs	r2, #1
 80082ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80082ee:	4b1d      	ldr	r3, [pc, #116]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80082f0:	2200      	movs	r2, #0
 80082f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80082f4:	4a19      	ldr	r2, [pc, #100]	; (800835c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80082f6:	6a3b      	ldr	r3, [r7, #32]
 80082f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80082fa:	4b18      	ldr	r3, [pc, #96]	; (800835c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80082fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082fe:	f003 0301 	and.w	r3, r3, #1
 8008302:	2b01      	cmp	r3, #1
 8008304:	d114      	bne.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008306:	f7fc f8bd 	bl	8004484 <HAL_GetTick>
 800830a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800830c:	e00a      	b.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800830e:	f7fc f8b9 	bl	8004484 <HAL_GetTick>
 8008312:	4602      	mov	r2, r0
 8008314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008316:	1ad3      	subs	r3, r2, r3
 8008318:	f241 3288 	movw	r2, #5000	; 0x1388
 800831c:	4293      	cmp	r3, r2
 800831e:	d901      	bls.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8008320:	2303      	movs	r3, #3
 8008322:	e240      	b.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008324:	4b0d      	ldr	r3, [pc, #52]	; (800835c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008328:	f003 0302 	and.w	r3, r3, #2
 800832c:	2b00      	cmp	r3, #0
 800832e:	d0ee      	beq.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008334:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008338:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800833c:	d114      	bne.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800833e:	4b07      	ldr	r3, [pc, #28]	; (800835c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800834a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800834e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008352:	4902      	ldr	r1, [pc, #8]	; (800835c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008354:	4313      	orrs	r3, r2
 8008356:	608b      	str	r3, [r1, #8]
 8008358:	e00c      	b.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800835a:	bf00      	nop
 800835c:	40023800 	.word	0x40023800
 8008360:	40007000 	.word	0x40007000
 8008364:	42470e40 	.word	0x42470e40
 8008368:	4b4a      	ldr	r3, [pc, #296]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	4a49      	ldr	r2, [pc, #292]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800836e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008372:	6093      	str	r3, [r2, #8]
 8008374:	4b47      	ldr	r3, [pc, #284]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008376:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008380:	4944      	ldr	r1, [pc, #272]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008382:	4313      	orrs	r3, r2
 8008384:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f003 0310 	and.w	r3, r3, #16
 800838e:	2b00      	cmp	r3, #0
 8008390:	d004      	beq.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8008398:	4b3f      	ldr	r3, [pc, #252]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800839a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d00a      	beq.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80083a8:	4b3a      	ldr	r3, [pc, #232]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80083aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083b6:	4937      	ldr	r1, [pc, #220]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80083b8:	4313      	orrs	r3, r2
 80083ba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00a      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80083ca:	4b32      	ldr	r3, [pc, #200]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80083cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083d0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083d8:	492e      	ldr	r1, [pc, #184]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80083da:	4313      	orrs	r3, r2
 80083dc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d011      	beq.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80083ec:	4b29      	ldr	r3, [pc, #164]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80083ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083f2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083fa:	4926      	ldr	r1, [pc, #152]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80083fc:	4313      	orrs	r3, r2
 80083fe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008406:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800840a:	d101      	bne.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800840c:	2301      	movs	r3, #1
 800840e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00a      	beq.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800841c:	4b1d      	ldr	r3, [pc, #116]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800841e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008422:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800842a:	491a      	ldr	r1, [pc, #104]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800842c:	4313      	orrs	r3, r2
 800842e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800843a:	2b00      	cmp	r3, #0
 800843c:	d011      	beq.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800843e:	4b15      	ldr	r3, [pc, #84]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008444:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800844c:	4911      	ldr	r1, [pc, #68]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800844e:	4313      	orrs	r3, r2
 8008450:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800845c:	d101      	bne.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800845e:	2301      	movs	r3, #1
 8008460:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8008462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008464:	2b01      	cmp	r3, #1
 8008466:	d005      	beq.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008470:	f040 80ff 	bne.w	8008672 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008474:	4b09      	ldr	r3, [pc, #36]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008476:	2200      	movs	r2, #0
 8008478:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800847a:	f7fc f803 	bl	8004484 <HAL_GetTick>
 800847e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008480:	e00e      	b.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008482:	f7fb ffff 	bl	8004484 <HAL_GetTick>
 8008486:	4602      	mov	r2, r0
 8008488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848a:	1ad3      	subs	r3, r2, r3
 800848c:	2b02      	cmp	r3, #2
 800848e:	d907      	bls.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008490:	2303      	movs	r3, #3
 8008492:	e188      	b.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8008494:	40023800 	.word	0x40023800
 8008498:	424711e0 	.word	0x424711e0
 800849c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80084a0:	4b7e      	ldr	r3, [pc, #504]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d1ea      	bne.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f003 0301 	and.w	r3, r3, #1
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d003      	beq.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d009      	beq.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d028      	beq.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d124      	bne.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80084d4:	4b71      	ldr	r3, [pc, #452]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80084d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084da:	0c1b      	lsrs	r3, r3, #16
 80084dc:	f003 0303 	and.w	r3, r3, #3
 80084e0:	3301      	adds	r3, #1
 80084e2:	005b      	lsls	r3, r3, #1
 80084e4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80084e6:	4b6d      	ldr	r3, [pc, #436]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80084e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084ec:	0e1b      	lsrs	r3, r3, #24
 80084ee:	f003 030f 	and.w	r3, r3, #15
 80084f2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	685a      	ldr	r2, [r3, #4]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	019b      	lsls	r3, r3, #6
 80084fe:	431a      	orrs	r2, r3
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	085b      	lsrs	r3, r3, #1
 8008504:	3b01      	subs	r3, #1
 8008506:	041b      	lsls	r3, r3, #16
 8008508:	431a      	orrs	r2, r3
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	061b      	lsls	r3, r3, #24
 800850e:	431a      	orrs	r2, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	695b      	ldr	r3, [r3, #20]
 8008514:	071b      	lsls	r3, r3, #28
 8008516:	4961      	ldr	r1, [pc, #388]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008518:	4313      	orrs	r3, r2
 800851a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f003 0304 	and.w	r3, r3, #4
 8008526:	2b00      	cmp	r3, #0
 8008528:	d004      	beq.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008532:	d00a      	beq.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800853c:	2b00      	cmp	r3, #0
 800853e:	d035      	beq.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008544:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008548:	d130      	bne.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800854a:	4b54      	ldr	r3, [pc, #336]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800854c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008550:	0c1b      	lsrs	r3, r3, #16
 8008552:	f003 0303 	and.w	r3, r3, #3
 8008556:	3301      	adds	r3, #1
 8008558:	005b      	lsls	r3, r3, #1
 800855a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800855c:	4b4f      	ldr	r3, [pc, #316]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800855e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008562:	0f1b      	lsrs	r3, r3, #28
 8008564:	f003 0307 	and.w	r3, r3, #7
 8008568:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	685a      	ldr	r2, [r3, #4]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	019b      	lsls	r3, r3, #6
 8008574:	431a      	orrs	r2, r3
 8008576:	69fb      	ldr	r3, [r7, #28]
 8008578:	085b      	lsrs	r3, r3, #1
 800857a:	3b01      	subs	r3, #1
 800857c:	041b      	lsls	r3, r3, #16
 800857e:	431a      	orrs	r2, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	691b      	ldr	r3, [r3, #16]
 8008584:	061b      	lsls	r3, r3, #24
 8008586:	431a      	orrs	r2, r3
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	071b      	lsls	r3, r3, #28
 800858c:	4943      	ldr	r1, [pc, #268]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800858e:	4313      	orrs	r3, r2
 8008590:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008594:	4b41      	ldr	r3, [pc, #260]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008596:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800859a:	f023 021f 	bic.w	r2, r3, #31
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a2:	3b01      	subs	r3, #1
 80085a4:	493d      	ldr	r1, [pc, #244]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80085a6:	4313      	orrs	r3, r2
 80085a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d029      	beq.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085c0:	d124      	bne.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80085c2:	4b36      	ldr	r3, [pc, #216]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80085c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085c8:	0c1b      	lsrs	r3, r3, #16
 80085ca:	f003 0303 	and.w	r3, r3, #3
 80085ce:	3301      	adds	r3, #1
 80085d0:	005b      	lsls	r3, r3, #1
 80085d2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80085d4:	4b31      	ldr	r3, [pc, #196]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80085d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085da:	0f1b      	lsrs	r3, r3, #28
 80085dc:	f003 0307 	and.w	r3, r3, #7
 80085e0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	685a      	ldr	r2, [r3, #4]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	019b      	lsls	r3, r3, #6
 80085ec:	431a      	orrs	r2, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	68db      	ldr	r3, [r3, #12]
 80085f2:	085b      	lsrs	r3, r3, #1
 80085f4:	3b01      	subs	r3, #1
 80085f6:	041b      	lsls	r3, r3, #16
 80085f8:	431a      	orrs	r2, r3
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	061b      	lsls	r3, r3, #24
 80085fe:	431a      	orrs	r2, r3
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	071b      	lsls	r3, r3, #28
 8008604:	4925      	ldr	r1, [pc, #148]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008606:	4313      	orrs	r3, r2
 8008608:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008614:	2b00      	cmp	r3, #0
 8008616:	d016      	beq.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	685a      	ldr	r2, [r3, #4]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	019b      	lsls	r3, r3, #6
 8008622:	431a      	orrs	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	085b      	lsrs	r3, r3, #1
 800862a:	3b01      	subs	r3, #1
 800862c:	041b      	lsls	r3, r3, #16
 800862e:	431a      	orrs	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	061b      	lsls	r3, r3, #24
 8008636:	431a      	orrs	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	695b      	ldr	r3, [r3, #20]
 800863c:	071b      	lsls	r3, r3, #28
 800863e:	4917      	ldr	r1, [pc, #92]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008640:	4313      	orrs	r3, r2
 8008642:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008646:	4b16      	ldr	r3, [pc, #88]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8008648:	2201      	movs	r2, #1
 800864a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800864c:	f7fb ff1a 	bl	8004484 <HAL_GetTick>
 8008650:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008652:	e008      	b.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008654:	f7fb ff16 	bl	8004484 <HAL_GetTick>
 8008658:	4602      	mov	r2, r0
 800865a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	2b02      	cmp	r3, #2
 8008660:	d901      	bls.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008662:	2303      	movs	r3, #3
 8008664:	e09f      	b.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008666:	4b0d      	ldr	r3, [pc, #52]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800866e:	2b00      	cmp	r3, #0
 8008670:	d0f0      	beq.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8008672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008674:	2b01      	cmp	r3, #1
 8008676:	f040 8095 	bne.w	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800867a:	4b0a      	ldr	r3, [pc, #40]	; (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800867c:	2200      	movs	r2, #0
 800867e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008680:	f7fb ff00 	bl	8004484 <HAL_GetTick>
 8008684:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008686:	e00f      	b.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008688:	f7fb fefc 	bl	8004484 <HAL_GetTick>
 800868c:	4602      	mov	r2, r0
 800868e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008690:	1ad3      	subs	r3, r2, r3
 8008692:	2b02      	cmp	r3, #2
 8008694:	d908      	bls.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008696:	2303      	movs	r3, #3
 8008698:	e085      	b.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800869a:	bf00      	nop
 800869c:	40023800 	.word	0x40023800
 80086a0:	42470068 	.word	0x42470068
 80086a4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80086a8:	4b41      	ldr	r3, [pc, #260]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086b4:	d0e8      	beq.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f003 0304 	and.w	r3, r3, #4
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d003      	beq.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x566>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d009      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d02b      	beq.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d127      	bne.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80086de:	4b34      	ldr	r3, [pc, #208]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80086e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086e4:	0c1b      	lsrs	r3, r3, #16
 80086e6:	f003 0303 	and.w	r3, r3, #3
 80086ea:	3301      	adds	r3, #1
 80086ec:	005b      	lsls	r3, r3, #1
 80086ee:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	699a      	ldr	r2, [r3, #24]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	69db      	ldr	r3, [r3, #28]
 80086f8:	019b      	lsls	r3, r3, #6
 80086fa:	431a      	orrs	r2, r3
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	085b      	lsrs	r3, r3, #1
 8008700:	3b01      	subs	r3, #1
 8008702:	041b      	lsls	r3, r3, #16
 8008704:	431a      	orrs	r2, r3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870a:	061b      	lsls	r3, r3, #24
 800870c:	4928      	ldr	r1, [pc, #160]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800870e:	4313      	orrs	r3, r2
 8008710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008714:	4b26      	ldr	r3, [pc, #152]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008716:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800871a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008722:	3b01      	subs	r3, #1
 8008724:	021b      	lsls	r3, r3, #8
 8008726:	4922      	ldr	r1, [pc, #136]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008728:	4313      	orrs	r3, r2
 800872a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008736:	2b00      	cmp	r3, #0
 8008738:	d01d      	beq.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800873e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008742:	d118      	bne.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008744:	4b1a      	ldr	r3, [pc, #104]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800874a:	0e1b      	lsrs	r3, r3, #24
 800874c:	f003 030f 	and.w	r3, r3, #15
 8008750:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	699a      	ldr	r2, [r3, #24]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	69db      	ldr	r3, [r3, #28]
 800875a:	019b      	lsls	r3, r3, #6
 800875c:	431a      	orrs	r2, r3
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a1b      	ldr	r3, [r3, #32]
 8008762:	085b      	lsrs	r3, r3, #1
 8008764:	3b01      	subs	r3, #1
 8008766:	041b      	lsls	r3, r3, #16
 8008768:	431a      	orrs	r2, r3
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	061b      	lsls	r3, r3, #24
 800876e:	4910      	ldr	r1, [pc, #64]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008770:	4313      	orrs	r3, r2
 8008772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008776:	4b0f      	ldr	r3, [pc, #60]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8008778:	2201      	movs	r2, #1
 800877a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800877c:	f7fb fe82 	bl	8004484 <HAL_GetTick>
 8008780:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008782:	e008      	b.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008784:	f7fb fe7e 	bl	8004484 <HAL_GetTick>
 8008788:	4602      	mov	r2, r0
 800878a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	2b02      	cmp	r3, #2
 8008790:	d901      	bls.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008792:	2303      	movs	r3, #3
 8008794:	e007      	b.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008796:	4b06      	ldr	r3, [pc, #24]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800879e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087a2:	d1ef      	bne.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80087a4:	2300      	movs	r3, #0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3730      	adds	r7, #48	; 0x30
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	40023800 	.word	0x40023800
 80087b4:	42470070 	.word	0x42470070

080087b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80087b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087bc:	b0ae      	sub	sp, #184	; 0xb8
 80087be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80087c0:	2300      	movs	r3, #0
 80087c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80087c6:	2300      	movs	r3, #0
 80087c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80087cc:	2300      	movs	r3, #0
 80087ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80087d2:	2300      	movs	r3, #0
 80087d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80087d8:	2300      	movs	r3, #0
 80087da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80087de:	4bcb      	ldr	r3, [pc, #812]	; (8008b0c <HAL_RCC_GetSysClockFreq+0x354>)
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	f003 030c 	and.w	r3, r3, #12
 80087e6:	2b0c      	cmp	r3, #12
 80087e8:	f200 8206 	bhi.w	8008bf8 <HAL_RCC_GetSysClockFreq+0x440>
 80087ec:	a201      	add	r2, pc, #4	; (adr r2, 80087f4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80087ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f2:	bf00      	nop
 80087f4:	08008829 	.word	0x08008829
 80087f8:	08008bf9 	.word	0x08008bf9
 80087fc:	08008bf9 	.word	0x08008bf9
 8008800:	08008bf9 	.word	0x08008bf9
 8008804:	08008831 	.word	0x08008831
 8008808:	08008bf9 	.word	0x08008bf9
 800880c:	08008bf9 	.word	0x08008bf9
 8008810:	08008bf9 	.word	0x08008bf9
 8008814:	08008839 	.word	0x08008839
 8008818:	08008bf9 	.word	0x08008bf9
 800881c:	08008bf9 	.word	0x08008bf9
 8008820:	08008bf9 	.word	0x08008bf9
 8008824:	08008a29 	.word	0x08008a29
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008828:	4bb9      	ldr	r3, [pc, #740]	; (8008b10 <HAL_RCC_GetSysClockFreq+0x358>)
 800882a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800882e:	e1e7      	b.n	8008c00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008830:	4bb8      	ldr	r3, [pc, #736]	; (8008b14 <HAL_RCC_GetSysClockFreq+0x35c>)
 8008832:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008836:	e1e3      	b.n	8008c00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008838:	4bb4      	ldr	r3, [pc, #720]	; (8008b0c <HAL_RCC_GetSysClockFreq+0x354>)
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008840:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008844:	4bb1      	ldr	r3, [pc, #708]	; (8008b0c <HAL_RCC_GetSysClockFreq+0x354>)
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800884c:	2b00      	cmp	r3, #0
 800884e:	d071      	beq.n	8008934 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008850:	4bae      	ldr	r3, [pc, #696]	; (8008b0c <HAL_RCC_GetSysClockFreq+0x354>)
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	099b      	lsrs	r3, r3, #6
 8008856:	2200      	movs	r2, #0
 8008858:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800885c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8008860:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008868:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800886c:	2300      	movs	r3, #0
 800886e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008872:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008876:	4622      	mov	r2, r4
 8008878:	462b      	mov	r3, r5
 800887a:	f04f 0000 	mov.w	r0, #0
 800887e:	f04f 0100 	mov.w	r1, #0
 8008882:	0159      	lsls	r1, r3, #5
 8008884:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008888:	0150      	lsls	r0, r2, #5
 800888a:	4602      	mov	r2, r0
 800888c:	460b      	mov	r3, r1
 800888e:	4621      	mov	r1, r4
 8008890:	1a51      	subs	r1, r2, r1
 8008892:	6439      	str	r1, [r7, #64]	; 0x40
 8008894:	4629      	mov	r1, r5
 8008896:	eb63 0301 	sbc.w	r3, r3, r1
 800889a:	647b      	str	r3, [r7, #68]	; 0x44
 800889c:	f04f 0200 	mov.w	r2, #0
 80088a0:	f04f 0300 	mov.w	r3, #0
 80088a4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80088a8:	4649      	mov	r1, r9
 80088aa:	018b      	lsls	r3, r1, #6
 80088ac:	4641      	mov	r1, r8
 80088ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80088b2:	4641      	mov	r1, r8
 80088b4:	018a      	lsls	r2, r1, #6
 80088b6:	4641      	mov	r1, r8
 80088b8:	1a51      	subs	r1, r2, r1
 80088ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80088bc:	4649      	mov	r1, r9
 80088be:	eb63 0301 	sbc.w	r3, r3, r1
 80088c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088c4:	f04f 0200 	mov.w	r2, #0
 80088c8:	f04f 0300 	mov.w	r3, #0
 80088cc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80088d0:	4649      	mov	r1, r9
 80088d2:	00cb      	lsls	r3, r1, #3
 80088d4:	4641      	mov	r1, r8
 80088d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088da:	4641      	mov	r1, r8
 80088dc:	00ca      	lsls	r2, r1, #3
 80088de:	4610      	mov	r0, r2
 80088e0:	4619      	mov	r1, r3
 80088e2:	4603      	mov	r3, r0
 80088e4:	4622      	mov	r2, r4
 80088e6:	189b      	adds	r3, r3, r2
 80088e8:	633b      	str	r3, [r7, #48]	; 0x30
 80088ea:	462b      	mov	r3, r5
 80088ec:	460a      	mov	r2, r1
 80088ee:	eb42 0303 	adc.w	r3, r2, r3
 80088f2:	637b      	str	r3, [r7, #52]	; 0x34
 80088f4:	f04f 0200 	mov.w	r2, #0
 80088f8:	f04f 0300 	mov.w	r3, #0
 80088fc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008900:	4629      	mov	r1, r5
 8008902:	024b      	lsls	r3, r1, #9
 8008904:	4621      	mov	r1, r4
 8008906:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800890a:	4621      	mov	r1, r4
 800890c:	024a      	lsls	r2, r1, #9
 800890e:	4610      	mov	r0, r2
 8008910:	4619      	mov	r1, r3
 8008912:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008916:	2200      	movs	r2, #0
 8008918:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800891c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008920:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008924:	f7f7 fd2c 	bl	8000380 <__aeabi_uldivmod>
 8008928:	4602      	mov	r2, r0
 800892a:	460b      	mov	r3, r1
 800892c:	4613      	mov	r3, r2
 800892e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008932:	e067      	b.n	8008a04 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008934:	4b75      	ldr	r3, [pc, #468]	; (8008b0c <HAL_RCC_GetSysClockFreq+0x354>)
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	099b      	lsrs	r3, r3, #6
 800893a:	2200      	movs	r2, #0
 800893c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008940:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8008944:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800894c:	67bb      	str	r3, [r7, #120]	; 0x78
 800894e:	2300      	movs	r3, #0
 8008950:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008952:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8008956:	4622      	mov	r2, r4
 8008958:	462b      	mov	r3, r5
 800895a:	f04f 0000 	mov.w	r0, #0
 800895e:	f04f 0100 	mov.w	r1, #0
 8008962:	0159      	lsls	r1, r3, #5
 8008964:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008968:	0150      	lsls	r0, r2, #5
 800896a:	4602      	mov	r2, r0
 800896c:	460b      	mov	r3, r1
 800896e:	4621      	mov	r1, r4
 8008970:	1a51      	subs	r1, r2, r1
 8008972:	62b9      	str	r1, [r7, #40]	; 0x28
 8008974:	4629      	mov	r1, r5
 8008976:	eb63 0301 	sbc.w	r3, r3, r1
 800897a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800897c:	f04f 0200 	mov.w	r2, #0
 8008980:	f04f 0300 	mov.w	r3, #0
 8008984:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8008988:	4649      	mov	r1, r9
 800898a:	018b      	lsls	r3, r1, #6
 800898c:	4641      	mov	r1, r8
 800898e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008992:	4641      	mov	r1, r8
 8008994:	018a      	lsls	r2, r1, #6
 8008996:	4641      	mov	r1, r8
 8008998:	ebb2 0a01 	subs.w	sl, r2, r1
 800899c:	4649      	mov	r1, r9
 800899e:	eb63 0b01 	sbc.w	fp, r3, r1
 80089a2:	f04f 0200 	mov.w	r2, #0
 80089a6:	f04f 0300 	mov.w	r3, #0
 80089aa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80089ae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80089b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80089b6:	4692      	mov	sl, r2
 80089b8:	469b      	mov	fp, r3
 80089ba:	4623      	mov	r3, r4
 80089bc:	eb1a 0303 	adds.w	r3, sl, r3
 80089c0:	623b      	str	r3, [r7, #32]
 80089c2:	462b      	mov	r3, r5
 80089c4:	eb4b 0303 	adc.w	r3, fp, r3
 80089c8:	627b      	str	r3, [r7, #36]	; 0x24
 80089ca:	f04f 0200 	mov.w	r2, #0
 80089ce:	f04f 0300 	mov.w	r3, #0
 80089d2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80089d6:	4629      	mov	r1, r5
 80089d8:	028b      	lsls	r3, r1, #10
 80089da:	4621      	mov	r1, r4
 80089dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80089e0:	4621      	mov	r1, r4
 80089e2:	028a      	lsls	r2, r1, #10
 80089e4:	4610      	mov	r0, r2
 80089e6:	4619      	mov	r1, r3
 80089e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80089ec:	2200      	movs	r2, #0
 80089ee:	673b      	str	r3, [r7, #112]	; 0x70
 80089f0:	677a      	str	r2, [r7, #116]	; 0x74
 80089f2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80089f6:	f7f7 fcc3 	bl	8000380 <__aeabi_uldivmod>
 80089fa:	4602      	mov	r2, r0
 80089fc:	460b      	mov	r3, r1
 80089fe:	4613      	mov	r3, r2
 8008a00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008a04:	4b41      	ldr	r3, [pc, #260]	; (8008b0c <HAL_RCC_GetSysClockFreq+0x354>)
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	0c1b      	lsrs	r3, r3, #16
 8008a0a:	f003 0303 	and.w	r3, r3, #3
 8008a0e:	3301      	adds	r3, #1
 8008a10:	005b      	lsls	r3, r3, #1
 8008a12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8008a16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008a1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008a26:	e0eb      	b.n	8008c00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008a28:	4b38      	ldr	r3, [pc, #224]	; (8008b0c <HAL_RCC_GetSysClockFreq+0x354>)
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008a34:	4b35      	ldr	r3, [pc, #212]	; (8008b0c <HAL_RCC_GetSysClockFreq+0x354>)
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d06b      	beq.n	8008b18 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a40:	4b32      	ldr	r3, [pc, #200]	; (8008b0c <HAL_RCC_GetSysClockFreq+0x354>)
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	099b      	lsrs	r3, r3, #6
 8008a46:	2200      	movs	r2, #0
 8008a48:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008a4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a52:	663b      	str	r3, [r7, #96]	; 0x60
 8008a54:	2300      	movs	r3, #0
 8008a56:	667b      	str	r3, [r7, #100]	; 0x64
 8008a58:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8008a5c:	4622      	mov	r2, r4
 8008a5e:	462b      	mov	r3, r5
 8008a60:	f04f 0000 	mov.w	r0, #0
 8008a64:	f04f 0100 	mov.w	r1, #0
 8008a68:	0159      	lsls	r1, r3, #5
 8008a6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008a6e:	0150      	lsls	r0, r2, #5
 8008a70:	4602      	mov	r2, r0
 8008a72:	460b      	mov	r3, r1
 8008a74:	4621      	mov	r1, r4
 8008a76:	1a51      	subs	r1, r2, r1
 8008a78:	61b9      	str	r1, [r7, #24]
 8008a7a:	4629      	mov	r1, r5
 8008a7c:	eb63 0301 	sbc.w	r3, r3, r1
 8008a80:	61fb      	str	r3, [r7, #28]
 8008a82:	f04f 0200 	mov.w	r2, #0
 8008a86:	f04f 0300 	mov.w	r3, #0
 8008a8a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8008a8e:	4659      	mov	r1, fp
 8008a90:	018b      	lsls	r3, r1, #6
 8008a92:	4651      	mov	r1, sl
 8008a94:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008a98:	4651      	mov	r1, sl
 8008a9a:	018a      	lsls	r2, r1, #6
 8008a9c:	4651      	mov	r1, sl
 8008a9e:	ebb2 0801 	subs.w	r8, r2, r1
 8008aa2:	4659      	mov	r1, fp
 8008aa4:	eb63 0901 	sbc.w	r9, r3, r1
 8008aa8:	f04f 0200 	mov.w	r2, #0
 8008aac:	f04f 0300 	mov.w	r3, #0
 8008ab0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008ab4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008ab8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008abc:	4690      	mov	r8, r2
 8008abe:	4699      	mov	r9, r3
 8008ac0:	4623      	mov	r3, r4
 8008ac2:	eb18 0303 	adds.w	r3, r8, r3
 8008ac6:	613b      	str	r3, [r7, #16]
 8008ac8:	462b      	mov	r3, r5
 8008aca:	eb49 0303 	adc.w	r3, r9, r3
 8008ace:	617b      	str	r3, [r7, #20]
 8008ad0:	f04f 0200 	mov.w	r2, #0
 8008ad4:	f04f 0300 	mov.w	r3, #0
 8008ad8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008adc:	4629      	mov	r1, r5
 8008ade:	024b      	lsls	r3, r1, #9
 8008ae0:	4621      	mov	r1, r4
 8008ae2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008ae6:	4621      	mov	r1, r4
 8008ae8:	024a      	lsls	r2, r1, #9
 8008aea:	4610      	mov	r0, r2
 8008aec:	4619      	mov	r1, r3
 8008aee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008af2:	2200      	movs	r2, #0
 8008af4:	65bb      	str	r3, [r7, #88]	; 0x58
 8008af6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008af8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008afc:	f7f7 fc40 	bl	8000380 <__aeabi_uldivmod>
 8008b00:	4602      	mov	r2, r0
 8008b02:	460b      	mov	r3, r1
 8008b04:	4613      	mov	r3, r2
 8008b06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008b0a:	e065      	b.n	8008bd8 <HAL_RCC_GetSysClockFreq+0x420>
 8008b0c:	40023800 	.word	0x40023800
 8008b10:	00f42400 	.word	0x00f42400
 8008b14:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b18:	4b3d      	ldr	r3, [pc, #244]	; (8008c10 <HAL_RCC_GetSysClockFreq+0x458>)
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	099b      	lsrs	r3, r3, #6
 8008b1e:	2200      	movs	r2, #0
 8008b20:	4618      	mov	r0, r3
 8008b22:	4611      	mov	r1, r2
 8008b24:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008b28:	653b      	str	r3, [r7, #80]	; 0x50
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	657b      	str	r3, [r7, #84]	; 0x54
 8008b2e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8008b32:	4642      	mov	r2, r8
 8008b34:	464b      	mov	r3, r9
 8008b36:	f04f 0000 	mov.w	r0, #0
 8008b3a:	f04f 0100 	mov.w	r1, #0
 8008b3e:	0159      	lsls	r1, r3, #5
 8008b40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008b44:	0150      	lsls	r0, r2, #5
 8008b46:	4602      	mov	r2, r0
 8008b48:	460b      	mov	r3, r1
 8008b4a:	4641      	mov	r1, r8
 8008b4c:	1a51      	subs	r1, r2, r1
 8008b4e:	60b9      	str	r1, [r7, #8]
 8008b50:	4649      	mov	r1, r9
 8008b52:	eb63 0301 	sbc.w	r3, r3, r1
 8008b56:	60fb      	str	r3, [r7, #12]
 8008b58:	f04f 0200 	mov.w	r2, #0
 8008b5c:	f04f 0300 	mov.w	r3, #0
 8008b60:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008b64:	4659      	mov	r1, fp
 8008b66:	018b      	lsls	r3, r1, #6
 8008b68:	4651      	mov	r1, sl
 8008b6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008b6e:	4651      	mov	r1, sl
 8008b70:	018a      	lsls	r2, r1, #6
 8008b72:	4651      	mov	r1, sl
 8008b74:	1a54      	subs	r4, r2, r1
 8008b76:	4659      	mov	r1, fp
 8008b78:	eb63 0501 	sbc.w	r5, r3, r1
 8008b7c:	f04f 0200 	mov.w	r2, #0
 8008b80:	f04f 0300 	mov.w	r3, #0
 8008b84:	00eb      	lsls	r3, r5, #3
 8008b86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008b8a:	00e2      	lsls	r2, r4, #3
 8008b8c:	4614      	mov	r4, r2
 8008b8e:	461d      	mov	r5, r3
 8008b90:	4643      	mov	r3, r8
 8008b92:	18e3      	adds	r3, r4, r3
 8008b94:	603b      	str	r3, [r7, #0]
 8008b96:	464b      	mov	r3, r9
 8008b98:	eb45 0303 	adc.w	r3, r5, r3
 8008b9c:	607b      	str	r3, [r7, #4]
 8008b9e:	f04f 0200 	mov.w	r2, #0
 8008ba2:	f04f 0300 	mov.w	r3, #0
 8008ba6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008baa:	4629      	mov	r1, r5
 8008bac:	028b      	lsls	r3, r1, #10
 8008bae:	4621      	mov	r1, r4
 8008bb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008bb4:	4621      	mov	r1, r4
 8008bb6:	028a      	lsls	r2, r1, #10
 8008bb8:	4610      	mov	r0, r2
 8008bba:	4619      	mov	r1, r3
 8008bbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bc4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008bc6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008bca:	f7f7 fbd9 	bl	8000380 <__aeabi_uldivmod>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008bd8:	4b0d      	ldr	r3, [pc, #52]	; (8008c10 <HAL_RCC_GetSysClockFreq+0x458>)
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	0f1b      	lsrs	r3, r3, #28
 8008bde:	f003 0307 	and.w	r3, r3, #7
 8008be2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8008be6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008bea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bf2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008bf6:	e003      	b.n	8008c00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008bf8:	4b06      	ldr	r3, [pc, #24]	; (8008c14 <HAL_RCC_GetSysClockFreq+0x45c>)
 8008bfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008bfe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008c00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	37b8      	adds	r7, #184	; 0xb8
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c0e:	bf00      	nop
 8008c10:	40023800 	.word	0x40023800
 8008c14:	00f42400 	.word	0x00f42400

08008c18 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b086      	sub	sp, #24
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d101      	bne.n	8008c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	e28d      	b.n	8009146 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f003 0301 	and.w	r3, r3, #1
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	f000 8083 	beq.w	8008d3e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008c38:	4b94      	ldr	r3, [pc, #592]	; (8008e8c <HAL_RCC_OscConfig+0x274>)
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	f003 030c 	and.w	r3, r3, #12
 8008c40:	2b04      	cmp	r3, #4
 8008c42:	d019      	beq.n	8008c78 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008c44:	4b91      	ldr	r3, [pc, #580]	; (8008e8c <HAL_RCC_OscConfig+0x274>)
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008c4c:	2b08      	cmp	r3, #8
 8008c4e:	d106      	bne.n	8008c5e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008c50:	4b8e      	ldr	r3, [pc, #568]	; (8008e8c <HAL_RCC_OscConfig+0x274>)
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c5c:	d00c      	beq.n	8008c78 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c5e:	4b8b      	ldr	r3, [pc, #556]	; (8008e8c <HAL_RCC_OscConfig+0x274>)
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008c66:	2b0c      	cmp	r3, #12
 8008c68:	d112      	bne.n	8008c90 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c6a:	4b88      	ldr	r3, [pc, #544]	; (8008e8c <HAL_RCC_OscConfig+0x274>)
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c76:	d10b      	bne.n	8008c90 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c78:	4b84      	ldr	r3, [pc, #528]	; (8008e8c <HAL_RCC_OscConfig+0x274>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d05b      	beq.n	8008d3c <HAL_RCC_OscConfig+0x124>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d157      	bne.n	8008d3c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e25a      	b.n	8009146 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c98:	d106      	bne.n	8008ca8 <HAL_RCC_OscConfig+0x90>
 8008c9a:	4b7c      	ldr	r3, [pc, #496]	; (8008e8c <HAL_RCC_OscConfig+0x274>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a7b      	ldr	r2, [pc, #492]	; (8008e8c <HAL_RCC_OscConfig+0x274>)
 8008ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ca4:	6013      	str	r3, [r2, #0]
 8008ca6:	e01d      	b.n	8008ce4 <HAL_RCC_OscConfig+0xcc>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008cb0:	d10c      	bne.n	8008ccc <HAL_RCC_OscConfig+0xb4>
 8008cb2:	4b76      	ldr	r3, [pc, #472]	; (8008e8c <HAL_RCC_OscConfig+0x274>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a75      	ldr	r2, [pc, #468]	; (8008e8c <HAL_RCC_OscConfig+0x274>)
 8008cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008cbc:	6013      	str	r3, [r2, #0]
 8008cbe:	4b73      	ldr	r3, [pc, #460]	; (8008e8c <HAL_RCC_OscConfig+0x274>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a72      	ldr	r2, [pc, #456]	; (8008e8c <HAL_RCC_OscConfig+0x274>)
 8008cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cc8:	6013      	str	r3, [r2, #0]
 8008cca:	e00b      	b.n	8008ce4 <HAL_RCC_OscConfig+0xcc>
 8008ccc:	4b6f      	ldr	r3, [pc, #444]	; (8008e8c <HAL_RCC_OscConfig+0x274>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a6e      	ldr	r2, [pc, #440]	; (8008e8c <HAL_RCC_OscConfig+0x274>)
 8008cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cd6:	6013      	str	r3, [r2, #0]
 8008cd8:	4b6c      	ldr	r3, [pc, #432]	; (8008e8c <HAL_RCC_OscConfig+0x274>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a6b      	ldr	r2, [pc, #428]	; (8008e8c <HAL_RCC_OscConfig+0x274>)
 8008cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ce2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d013      	beq.n	8008d14 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cec:	f7fb fbca 	bl	8004484 <HAL_GetTick>
 8008cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cf2:	e008      	b.n	8008d06 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008cf4:	f7fb fbc6 	bl	8004484 <HAL_GetTick>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	1ad3      	subs	r3, r2, r3
 8008cfe:	2b64      	cmp	r3, #100	; 0x64
 8008d00:	d901      	bls.n	8008d06 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008d02:	2303      	movs	r3, #3
 8008d04:	e21f      	b.n	8009146 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d06:	4b61      	ldr	r3, [pc, #388]	; (8008e8c <HAL_RCC_OscConfig+0x274>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d0f0      	beq.n	8008cf4 <HAL_RCC_OscConfig+0xdc>
 8008d12:	e014      	b.n	8008d3e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d14:	f7fb fbb6 	bl	8004484 <HAL_GetTick>
 8008d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d1a:	e008      	b.n	8008d2e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d1c:	f7fb fbb2 	bl	8004484 <HAL_GetTick>
 8008d20:	4602      	mov	r2, r0
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	1ad3      	subs	r3, r2, r3
 8008d26:	2b64      	cmp	r3, #100	; 0x64
 8008d28:	d901      	bls.n	8008d2e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008d2a:	2303      	movs	r3, #3
 8008d2c:	e20b      	b.n	8009146 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d2e:	4b57      	ldr	r3, [pc, #348]	; (8008e8c <HAL_RCC_OscConfig+0x274>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d1f0      	bne.n	8008d1c <HAL_RCC_OscConfig+0x104>
 8008d3a:	e000      	b.n	8008d3e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f003 0302 	and.w	r3, r3, #2
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d06f      	beq.n	8008e2a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008d4a:	4b50      	ldr	r3, [pc, #320]	; (8008e8c <HAL_RCC_OscConfig+0x274>)
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	f003 030c 	and.w	r3, r3, #12
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d017      	beq.n	8008d86 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008d56:	4b4d      	ldr	r3, [pc, #308]	; (8008e8c <HAL_RCC_OscConfig+0x274>)
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008d5e:	2b08      	cmp	r3, #8
 8008d60:	d105      	bne.n	8008d6e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008d62:	4b4a      	ldr	r3, [pc, #296]	; (8008e8c <HAL_RCC_OscConfig+0x274>)
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00b      	beq.n	8008d86 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d6e:	4b47      	ldr	r3, [pc, #284]	; (8008e8c <HAL_RCC_OscConfig+0x274>)
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008d76:	2b0c      	cmp	r3, #12
 8008d78:	d11c      	bne.n	8008db4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d7a:	4b44      	ldr	r3, [pc, #272]	; (8008e8c <HAL_RCC_OscConfig+0x274>)
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d116      	bne.n	8008db4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d86:	4b41      	ldr	r3, [pc, #260]	; (8008e8c <HAL_RCC_OscConfig+0x274>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f003 0302 	and.w	r3, r3, #2
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d005      	beq.n	8008d9e <HAL_RCC_OscConfig+0x186>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	68db      	ldr	r3, [r3, #12]
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d001      	beq.n	8008d9e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e1d3      	b.n	8009146 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d9e:	4b3b      	ldr	r3, [pc, #236]	; (8008e8c <HAL_RCC_OscConfig+0x274>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	691b      	ldr	r3, [r3, #16]
 8008daa:	00db      	lsls	r3, r3, #3
 8008dac:	4937      	ldr	r1, [pc, #220]	; (8008e8c <HAL_RCC_OscConfig+0x274>)
 8008dae:	4313      	orrs	r3, r2
 8008db0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008db2:	e03a      	b.n	8008e2a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d020      	beq.n	8008dfe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008dbc:	4b34      	ldr	r3, [pc, #208]	; (8008e90 <HAL_RCC_OscConfig+0x278>)
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dc2:	f7fb fb5f 	bl	8004484 <HAL_GetTick>
 8008dc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008dc8:	e008      	b.n	8008ddc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008dca:	f7fb fb5b 	bl	8004484 <HAL_GetTick>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	1ad3      	subs	r3, r2, r3
 8008dd4:	2b02      	cmp	r3, #2
 8008dd6:	d901      	bls.n	8008ddc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008dd8:	2303      	movs	r3, #3
 8008dda:	e1b4      	b.n	8009146 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ddc:	4b2b      	ldr	r3, [pc, #172]	; (8008e8c <HAL_RCC_OscConfig+0x274>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 0302 	and.w	r3, r3, #2
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d0f0      	beq.n	8008dca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008de8:	4b28      	ldr	r3, [pc, #160]	; (8008e8c <HAL_RCC_OscConfig+0x274>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	691b      	ldr	r3, [r3, #16]
 8008df4:	00db      	lsls	r3, r3, #3
 8008df6:	4925      	ldr	r1, [pc, #148]	; (8008e8c <HAL_RCC_OscConfig+0x274>)
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	600b      	str	r3, [r1, #0]
 8008dfc:	e015      	b.n	8008e2a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008dfe:	4b24      	ldr	r3, [pc, #144]	; (8008e90 <HAL_RCC_OscConfig+0x278>)
 8008e00:	2200      	movs	r2, #0
 8008e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e04:	f7fb fb3e 	bl	8004484 <HAL_GetTick>
 8008e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e0a:	e008      	b.n	8008e1e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e0c:	f7fb fb3a 	bl	8004484 <HAL_GetTick>
 8008e10:	4602      	mov	r2, r0
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	1ad3      	subs	r3, r2, r3
 8008e16:	2b02      	cmp	r3, #2
 8008e18:	d901      	bls.n	8008e1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008e1a:	2303      	movs	r3, #3
 8008e1c:	e193      	b.n	8009146 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e1e:	4b1b      	ldr	r3, [pc, #108]	; (8008e8c <HAL_RCC_OscConfig+0x274>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 0302 	and.w	r3, r3, #2
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d1f0      	bne.n	8008e0c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f003 0308 	and.w	r3, r3, #8
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d036      	beq.n	8008ea4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	695b      	ldr	r3, [r3, #20]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d016      	beq.n	8008e6c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008e3e:	4b15      	ldr	r3, [pc, #84]	; (8008e94 <HAL_RCC_OscConfig+0x27c>)
 8008e40:	2201      	movs	r2, #1
 8008e42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e44:	f7fb fb1e 	bl	8004484 <HAL_GetTick>
 8008e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e4a:	e008      	b.n	8008e5e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e4c:	f7fb fb1a 	bl	8004484 <HAL_GetTick>
 8008e50:	4602      	mov	r2, r0
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	1ad3      	subs	r3, r2, r3
 8008e56:	2b02      	cmp	r3, #2
 8008e58:	d901      	bls.n	8008e5e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8008e5a:	2303      	movs	r3, #3
 8008e5c:	e173      	b.n	8009146 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e5e:	4b0b      	ldr	r3, [pc, #44]	; (8008e8c <HAL_RCC_OscConfig+0x274>)
 8008e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e62:	f003 0302 	and.w	r3, r3, #2
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d0f0      	beq.n	8008e4c <HAL_RCC_OscConfig+0x234>
 8008e6a:	e01b      	b.n	8008ea4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e6c:	4b09      	ldr	r3, [pc, #36]	; (8008e94 <HAL_RCC_OscConfig+0x27c>)
 8008e6e:	2200      	movs	r2, #0
 8008e70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e72:	f7fb fb07 	bl	8004484 <HAL_GetTick>
 8008e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e78:	e00e      	b.n	8008e98 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e7a:	f7fb fb03 	bl	8004484 <HAL_GetTick>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	1ad3      	subs	r3, r2, r3
 8008e84:	2b02      	cmp	r3, #2
 8008e86:	d907      	bls.n	8008e98 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	e15c      	b.n	8009146 <HAL_RCC_OscConfig+0x52e>
 8008e8c:	40023800 	.word	0x40023800
 8008e90:	42470000 	.word	0x42470000
 8008e94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e98:	4b8a      	ldr	r3, [pc, #552]	; (80090c4 <HAL_RCC_OscConfig+0x4ac>)
 8008e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e9c:	f003 0302 	and.w	r3, r3, #2
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d1ea      	bne.n	8008e7a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f003 0304 	and.w	r3, r3, #4
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	f000 8097 	beq.w	8008fe0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008eb6:	4b83      	ldr	r3, [pc, #524]	; (80090c4 <HAL_RCC_OscConfig+0x4ac>)
 8008eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d10f      	bne.n	8008ee2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	60bb      	str	r3, [r7, #8]
 8008ec6:	4b7f      	ldr	r3, [pc, #508]	; (80090c4 <HAL_RCC_OscConfig+0x4ac>)
 8008ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eca:	4a7e      	ldr	r2, [pc, #504]	; (80090c4 <HAL_RCC_OscConfig+0x4ac>)
 8008ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8008ed2:	4b7c      	ldr	r3, [pc, #496]	; (80090c4 <HAL_RCC_OscConfig+0x4ac>)
 8008ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008eda:	60bb      	str	r3, [r7, #8]
 8008edc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ee2:	4b79      	ldr	r3, [pc, #484]	; (80090c8 <HAL_RCC_OscConfig+0x4b0>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d118      	bne.n	8008f20 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008eee:	4b76      	ldr	r3, [pc, #472]	; (80090c8 <HAL_RCC_OscConfig+0x4b0>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a75      	ldr	r2, [pc, #468]	; (80090c8 <HAL_RCC_OscConfig+0x4b0>)
 8008ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ef8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008efa:	f7fb fac3 	bl	8004484 <HAL_GetTick>
 8008efe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f00:	e008      	b.n	8008f14 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f02:	f7fb fabf 	bl	8004484 <HAL_GetTick>
 8008f06:	4602      	mov	r2, r0
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	1ad3      	subs	r3, r2, r3
 8008f0c:	2b02      	cmp	r3, #2
 8008f0e:	d901      	bls.n	8008f14 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008f10:	2303      	movs	r3, #3
 8008f12:	e118      	b.n	8009146 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f14:	4b6c      	ldr	r3, [pc, #432]	; (80090c8 <HAL_RCC_OscConfig+0x4b0>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d0f0      	beq.n	8008f02 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d106      	bne.n	8008f36 <HAL_RCC_OscConfig+0x31e>
 8008f28:	4b66      	ldr	r3, [pc, #408]	; (80090c4 <HAL_RCC_OscConfig+0x4ac>)
 8008f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f2c:	4a65      	ldr	r2, [pc, #404]	; (80090c4 <HAL_RCC_OscConfig+0x4ac>)
 8008f2e:	f043 0301 	orr.w	r3, r3, #1
 8008f32:	6713      	str	r3, [r2, #112]	; 0x70
 8008f34:	e01c      	b.n	8008f70 <HAL_RCC_OscConfig+0x358>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	2b05      	cmp	r3, #5
 8008f3c:	d10c      	bne.n	8008f58 <HAL_RCC_OscConfig+0x340>
 8008f3e:	4b61      	ldr	r3, [pc, #388]	; (80090c4 <HAL_RCC_OscConfig+0x4ac>)
 8008f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f42:	4a60      	ldr	r2, [pc, #384]	; (80090c4 <HAL_RCC_OscConfig+0x4ac>)
 8008f44:	f043 0304 	orr.w	r3, r3, #4
 8008f48:	6713      	str	r3, [r2, #112]	; 0x70
 8008f4a:	4b5e      	ldr	r3, [pc, #376]	; (80090c4 <HAL_RCC_OscConfig+0x4ac>)
 8008f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f4e:	4a5d      	ldr	r2, [pc, #372]	; (80090c4 <HAL_RCC_OscConfig+0x4ac>)
 8008f50:	f043 0301 	orr.w	r3, r3, #1
 8008f54:	6713      	str	r3, [r2, #112]	; 0x70
 8008f56:	e00b      	b.n	8008f70 <HAL_RCC_OscConfig+0x358>
 8008f58:	4b5a      	ldr	r3, [pc, #360]	; (80090c4 <HAL_RCC_OscConfig+0x4ac>)
 8008f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f5c:	4a59      	ldr	r2, [pc, #356]	; (80090c4 <HAL_RCC_OscConfig+0x4ac>)
 8008f5e:	f023 0301 	bic.w	r3, r3, #1
 8008f62:	6713      	str	r3, [r2, #112]	; 0x70
 8008f64:	4b57      	ldr	r3, [pc, #348]	; (80090c4 <HAL_RCC_OscConfig+0x4ac>)
 8008f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f68:	4a56      	ldr	r2, [pc, #344]	; (80090c4 <HAL_RCC_OscConfig+0x4ac>)
 8008f6a:	f023 0304 	bic.w	r3, r3, #4
 8008f6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d015      	beq.n	8008fa4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f78:	f7fb fa84 	bl	8004484 <HAL_GetTick>
 8008f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f7e:	e00a      	b.n	8008f96 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f80:	f7fb fa80 	bl	8004484 <HAL_GetTick>
 8008f84:	4602      	mov	r2, r0
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	1ad3      	subs	r3, r2, r3
 8008f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d901      	bls.n	8008f96 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008f92:	2303      	movs	r3, #3
 8008f94:	e0d7      	b.n	8009146 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f96:	4b4b      	ldr	r3, [pc, #300]	; (80090c4 <HAL_RCC_OscConfig+0x4ac>)
 8008f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f9a:	f003 0302 	and.w	r3, r3, #2
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d0ee      	beq.n	8008f80 <HAL_RCC_OscConfig+0x368>
 8008fa2:	e014      	b.n	8008fce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fa4:	f7fb fa6e 	bl	8004484 <HAL_GetTick>
 8008fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008faa:	e00a      	b.n	8008fc2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008fac:	f7fb fa6a 	bl	8004484 <HAL_GetTick>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	1ad3      	subs	r3, r2, r3
 8008fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d901      	bls.n	8008fc2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008fbe:	2303      	movs	r3, #3
 8008fc0:	e0c1      	b.n	8009146 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008fc2:	4b40      	ldr	r3, [pc, #256]	; (80090c4 <HAL_RCC_OscConfig+0x4ac>)
 8008fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fc6:	f003 0302 	and.w	r3, r3, #2
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d1ee      	bne.n	8008fac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008fce:	7dfb      	ldrb	r3, [r7, #23]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d105      	bne.n	8008fe0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008fd4:	4b3b      	ldr	r3, [pc, #236]	; (80090c4 <HAL_RCC_OscConfig+0x4ac>)
 8008fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd8:	4a3a      	ldr	r2, [pc, #232]	; (80090c4 <HAL_RCC_OscConfig+0x4ac>)
 8008fda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fde:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	699b      	ldr	r3, [r3, #24]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	f000 80ad 	beq.w	8009144 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008fea:	4b36      	ldr	r3, [pc, #216]	; (80090c4 <HAL_RCC_OscConfig+0x4ac>)
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	f003 030c 	and.w	r3, r3, #12
 8008ff2:	2b08      	cmp	r3, #8
 8008ff4:	d060      	beq.n	80090b8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	699b      	ldr	r3, [r3, #24]
 8008ffa:	2b02      	cmp	r3, #2
 8008ffc:	d145      	bne.n	800908a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ffe:	4b33      	ldr	r3, [pc, #204]	; (80090cc <HAL_RCC_OscConfig+0x4b4>)
 8009000:	2200      	movs	r2, #0
 8009002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009004:	f7fb fa3e 	bl	8004484 <HAL_GetTick>
 8009008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800900a:	e008      	b.n	800901e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800900c:	f7fb fa3a 	bl	8004484 <HAL_GetTick>
 8009010:	4602      	mov	r2, r0
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	1ad3      	subs	r3, r2, r3
 8009016:	2b02      	cmp	r3, #2
 8009018:	d901      	bls.n	800901e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800901a:	2303      	movs	r3, #3
 800901c:	e093      	b.n	8009146 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800901e:	4b29      	ldr	r3, [pc, #164]	; (80090c4 <HAL_RCC_OscConfig+0x4ac>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009026:	2b00      	cmp	r3, #0
 8009028:	d1f0      	bne.n	800900c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	69da      	ldr	r2, [r3, #28]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6a1b      	ldr	r3, [r3, #32]
 8009032:	431a      	orrs	r2, r3
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009038:	019b      	lsls	r3, r3, #6
 800903a:	431a      	orrs	r2, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009040:	085b      	lsrs	r3, r3, #1
 8009042:	3b01      	subs	r3, #1
 8009044:	041b      	lsls	r3, r3, #16
 8009046:	431a      	orrs	r2, r3
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800904c:	061b      	lsls	r3, r3, #24
 800904e:	431a      	orrs	r2, r3
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009054:	071b      	lsls	r3, r3, #28
 8009056:	491b      	ldr	r1, [pc, #108]	; (80090c4 <HAL_RCC_OscConfig+0x4ac>)
 8009058:	4313      	orrs	r3, r2
 800905a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800905c:	4b1b      	ldr	r3, [pc, #108]	; (80090cc <HAL_RCC_OscConfig+0x4b4>)
 800905e:	2201      	movs	r2, #1
 8009060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009062:	f7fb fa0f 	bl	8004484 <HAL_GetTick>
 8009066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009068:	e008      	b.n	800907c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800906a:	f7fb fa0b 	bl	8004484 <HAL_GetTick>
 800906e:	4602      	mov	r2, r0
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	1ad3      	subs	r3, r2, r3
 8009074:	2b02      	cmp	r3, #2
 8009076:	d901      	bls.n	800907c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8009078:	2303      	movs	r3, #3
 800907a:	e064      	b.n	8009146 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800907c:	4b11      	ldr	r3, [pc, #68]	; (80090c4 <HAL_RCC_OscConfig+0x4ac>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009084:	2b00      	cmp	r3, #0
 8009086:	d0f0      	beq.n	800906a <HAL_RCC_OscConfig+0x452>
 8009088:	e05c      	b.n	8009144 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800908a:	4b10      	ldr	r3, [pc, #64]	; (80090cc <HAL_RCC_OscConfig+0x4b4>)
 800908c:	2200      	movs	r2, #0
 800908e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009090:	f7fb f9f8 	bl	8004484 <HAL_GetTick>
 8009094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009096:	e008      	b.n	80090aa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009098:	f7fb f9f4 	bl	8004484 <HAL_GetTick>
 800909c:	4602      	mov	r2, r0
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	1ad3      	subs	r3, r2, r3
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d901      	bls.n	80090aa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80090a6:	2303      	movs	r3, #3
 80090a8:	e04d      	b.n	8009146 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80090aa:	4b06      	ldr	r3, [pc, #24]	; (80090c4 <HAL_RCC_OscConfig+0x4ac>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1f0      	bne.n	8009098 <HAL_RCC_OscConfig+0x480>
 80090b6:	e045      	b.n	8009144 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	699b      	ldr	r3, [r3, #24]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d107      	bne.n	80090d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	e040      	b.n	8009146 <HAL_RCC_OscConfig+0x52e>
 80090c4:	40023800 	.word	0x40023800
 80090c8:	40007000 	.word	0x40007000
 80090cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80090d0:	4b1f      	ldr	r3, [pc, #124]	; (8009150 <HAL_RCC_OscConfig+0x538>)
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	699b      	ldr	r3, [r3, #24]
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d030      	beq.n	8009140 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d129      	bne.n	8009140 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d122      	bne.n	8009140 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009100:	4013      	ands	r3, r2
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009106:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009108:	4293      	cmp	r3, r2
 800910a:	d119      	bne.n	8009140 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009116:	085b      	lsrs	r3, r3, #1
 8009118:	3b01      	subs	r3, #1
 800911a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800911c:	429a      	cmp	r2, r3
 800911e:	d10f      	bne.n	8009140 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800912a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800912c:	429a      	cmp	r2, r3
 800912e:	d107      	bne.n	8009140 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800913a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800913c:	429a      	cmp	r2, r3
 800913e:	d001      	beq.n	8009144 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8009140:	2301      	movs	r3, #1
 8009142:	e000      	b.n	8009146 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	3718      	adds	r7, #24
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	40023800 	.word	0x40023800

08009154 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800915c:	2301      	movs	r3, #1
 800915e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d101      	bne.n	800916a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	e066      	b.n	8009238 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	7f5b      	ldrb	r3, [r3, #29]
 800916e:	b2db      	uxtb	r3, r3
 8009170:	2b00      	cmp	r3, #0
 8009172:	d105      	bne.n	8009180 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f7fa fec4 	bl	8003f08 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2202      	movs	r2, #2
 8009184:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	22ca      	movs	r2, #202	; 0xca
 800918c:	625a      	str	r2, [r3, #36]	; 0x24
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2253      	movs	r2, #83	; 0x53
 8009194:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 fa45 	bl	8009626 <RTC_EnterInitMode>
 800919c:	4603      	mov	r3, r0
 800919e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80091a0:	7bfb      	ldrb	r3, [r7, #15]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d12c      	bne.n	8009200 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	6812      	ldr	r2, [r2, #0]
 80091b0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80091b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091b8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	6899      	ldr	r1, [r3, #8]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	685a      	ldr	r2, [r3, #4]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	691b      	ldr	r3, [r3, #16]
 80091c8:	431a      	orrs	r2, r3
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	695b      	ldr	r3, [r3, #20]
 80091ce:	431a      	orrs	r2, r3
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	430a      	orrs	r2, r1
 80091d6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	68d2      	ldr	r2, [r2, #12]
 80091e0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	6919      	ldr	r1, [r3, #16]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	041a      	lsls	r2, r3, #16
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	430a      	orrs	r2, r1
 80091f4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 fa4c 	bl	8009694 <RTC_ExitInitMode>
 80091fc:	4603      	mov	r3, r0
 80091fe:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009200:	7bfb      	ldrb	r3, [r7, #15]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d113      	bne.n	800922e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009214:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	699a      	ldr	r2, [r3, #24]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	430a      	orrs	r2, r1
 8009226:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	22ff      	movs	r2, #255	; 0xff
 8009234:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8009236:	7bfb      	ldrb	r3, [r7, #15]
}
 8009238:	4618      	mov	r0, r3
 800923a:	3710      	adds	r7, #16
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009240:	b590      	push	{r4, r7, lr}
 8009242:	b087      	sub	sp, #28
 8009244:	af00      	add	r7, sp, #0
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	60b9      	str	r1, [r7, #8]
 800924a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800924c:	2300      	movs	r3, #0
 800924e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	7f1b      	ldrb	r3, [r3, #28]
 8009254:	2b01      	cmp	r3, #1
 8009256:	d101      	bne.n	800925c <HAL_RTC_SetTime+0x1c>
 8009258:	2302      	movs	r3, #2
 800925a:	e087      	b.n	800936c <HAL_RTC_SetTime+0x12c>
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2201      	movs	r2, #1
 8009260:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2202      	movs	r2, #2
 8009266:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d126      	bne.n	80092bc <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009278:	2b00      	cmp	r3, #0
 800927a:	d102      	bne.n	8009282 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	2200      	movs	r2, #0
 8009280:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	4618      	mov	r0, r3
 8009288:	f000 fa29 	bl	80096de <RTC_ByteToBcd2>
 800928c:	4603      	mov	r3, r0
 800928e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	785b      	ldrb	r3, [r3, #1]
 8009294:	4618      	mov	r0, r3
 8009296:	f000 fa22 	bl	80096de <RTC_ByteToBcd2>
 800929a:	4603      	mov	r3, r0
 800929c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800929e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	789b      	ldrb	r3, [r3, #2]
 80092a4:	4618      	mov	r0, r3
 80092a6:	f000 fa1a 	bl	80096de <RTC_ByteToBcd2>
 80092aa:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80092ac:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	78db      	ldrb	r3, [r3, #3]
 80092b4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80092b6:	4313      	orrs	r3, r2
 80092b8:	617b      	str	r3, [r7, #20]
 80092ba:	e018      	b.n	80092ee <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d102      	bne.n	80092d0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	2200      	movs	r2, #0
 80092ce:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	785b      	ldrb	r3, [r3, #1]
 80092da:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80092dc:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80092de:	68ba      	ldr	r2, [r7, #8]
 80092e0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80092e2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	78db      	ldrb	r3, [r3, #3]
 80092e8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80092ea:	4313      	orrs	r3, r2
 80092ec:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	22ca      	movs	r2, #202	; 0xca
 80092f4:	625a      	str	r2, [r3, #36]	; 0x24
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2253      	movs	r2, #83	; 0x53
 80092fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80092fe:	68f8      	ldr	r0, [r7, #12]
 8009300:	f000 f991 	bl	8009626 <RTC_EnterInitMode>
 8009304:	4603      	mov	r3, r0
 8009306:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009308:	7cfb      	ldrb	r3, [r7, #19]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d120      	bne.n	8009350 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009318:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800931c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	689a      	ldr	r2, [r3, #8]
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800932c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	6899      	ldr	r1, [r3, #8]
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	68da      	ldr	r2, [r3, #12]
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	691b      	ldr	r3, [r3, #16]
 800933c:	431a      	orrs	r2, r3
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	430a      	orrs	r2, r1
 8009344:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f000 f9a4 	bl	8009694 <RTC_ExitInitMode>
 800934c:	4603      	mov	r3, r0
 800934e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009350:	7cfb      	ldrb	r3, [r7, #19]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d102      	bne.n	800935c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2201      	movs	r2, #1
 800935a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	22ff      	movs	r2, #255	; 0xff
 8009362:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2200      	movs	r2, #0
 8009368:	771a      	strb	r2, [r3, #28]

  return status;
 800936a:	7cfb      	ldrb	r3, [r7, #19]
}
 800936c:	4618      	mov	r0, r3
 800936e:	371c      	adds	r7, #28
 8009370:	46bd      	mov	sp, r7
 8009372:	bd90      	pop	{r4, r7, pc}

08009374 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b086      	sub	sp, #24
 8009378:	af00      	add	r7, sp, #0
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009380:	2300      	movs	r3, #0
 8009382:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	691b      	ldr	r3, [r3, #16]
 8009394:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80093a6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80093aa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	0c1b      	lsrs	r3, r3, #16
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093b6:	b2da      	uxtb	r2, r3
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	0a1b      	lsrs	r3, r3, #8
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093c6:	b2da      	uxtb	r2, r3
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093d4:	b2da      	uxtb	r2, r3
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	0d9b      	lsrs	r3, r3, #22
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	f003 0301 	and.w	r3, r3, #1
 80093e4:	b2da      	uxtb	r2, r3
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d11a      	bne.n	8009426 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	4618      	mov	r0, r3
 80093f6:	f000 f98f 	bl	8009718 <RTC_Bcd2ToByte>
 80093fa:	4603      	mov	r3, r0
 80093fc:	461a      	mov	r2, r3
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	785b      	ldrb	r3, [r3, #1]
 8009406:	4618      	mov	r0, r3
 8009408:	f000 f986 	bl	8009718 <RTC_Bcd2ToByte>
 800940c:	4603      	mov	r3, r0
 800940e:	461a      	mov	r2, r3
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	789b      	ldrb	r3, [r3, #2]
 8009418:	4618      	mov	r0, r3
 800941a:	f000 f97d 	bl	8009718 <RTC_Bcd2ToByte>
 800941e:	4603      	mov	r3, r0
 8009420:	461a      	mov	r2, r3
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009426:	2300      	movs	r3, #0
}
 8009428:	4618      	mov	r0, r3
 800942a:	3718      	adds	r7, #24
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009430:	b590      	push	{r4, r7, lr}
 8009432:	b087      	sub	sp, #28
 8009434:	af00      	add	r7, sp, #0
 8009436:	60f8      	str	r0, [r7, #12]
 8009438:	60b9      	str	r1, [r7, #8]
 800943a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800943c:	2300      	movs	r3, #0
 800943e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	7f1b      	ldrb	r3, [r3, #28]
 8009444:	2b01      	cmp	r3, #1
 8009446:	d101      	bne.n	800944c <HAL_RTC_SetDate+0x1c>
 8009448:	2302      	movs	r3, #2
 800944a:	e071      	b.n	8009530 <HAL_RTC_SetDate+0x100>
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2201      	movs	r2, #1
 8009450:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2202      	movs	r2, #2
 8009456:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d10e      	bne.n	800947c <HAL_RTC_SetDate+0x4c>
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	785b      	ldrb	r3, [r3, #1]
 8009462:	f003 0310 	and.w	r3, r3, #16
 8009466:	2b00      	cmp	r3, #0
 8009468:	d008      	beq.n	800947c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	785b      	ldrb	r3, [r3, #1]
 800946e:	f023 0310 	bic.w	r3, r3, #16
 8009472:	b2db      	uxtb	r3, r3
 8009474:	330a      	adds	r3, #10
 8009476:	b2da      	uxtb	r2, r3
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d11c      	bne.n	80094bc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	78db      	ldrb	r3, [r3, #3]
 8009486:	4618      	mov	r0, r3
 8009488:	f000 f929 	bl	80096de <RTC_ByteToBcd2>
 800948c:	4603      	mov	r3, r0
 800948e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	785b      	ldrb	r3, [r3, #1]
 8009494:	4618      	mov	r0, r3
 8009496:	f000 f922 	bl	80096de <RTC_ByteToBcd2>
 800949a:	4603      	mov	r3, r0
 800949c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800949e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	789b      	ldrb	r3, [r3, #2]
 80094a4:	4618      	mov	r0, r3
 80094a6:	f000 f91a 	bl	80096de <RTC_ByteToBcd2>
 80094aa:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80094ac:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80094b6:	4313      	orrs	r3, r2
 80094b8:	617b      	str	r3, [r7, #20]
 80094ba:	e00e      	b.n	80094da <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	78db      	ldrb	r3, [r3, #3]
 80094c0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	785b      	ldrb	r3, [r3, #1]
 80094c6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80094c8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80094ca:	68ba      	ldr	r2, [r7, #8]
 80094cc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80094ce:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80094d6:	4313      	orrs	r3, r2
 80094d8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	22ca      	movs	r2, #202	; 0xca
 80094e0:	625a      	str	r2, [r3, #36]	; 0x24
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	2253      	movs	r2, #83	; 0x53
 80094e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80094ea:	68f8      	ldr	r0, [r7, #12]
 80094ec:	f000 f89b 	bl	8009626 <RTC_EnterInitMode>
 80094f0:	4603      	mov	r3, r0
 80094f2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80094f4:	7cfb      	ldrb	r3, [r7, #19]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d10c      	bne.n	8009514 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009504:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009508:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f000 f8c2 	bl	8009694 <RTC_ExitInitMode>
 8009510:	4603      	mov	r3, r0
 8009512:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009514:	7cfb      	ldrb	r3, [r7, #19]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d102      	bne.n	8009520 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2201      	movs	r2, #1
 800951e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	22ff      	movs	r2, #255	; 0xff
 8009526:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2200      	movs	r2, #0
 800952c:	771a      	strb	r2, [r3, #28]

  return status;
 800952e:	7cfb      	ldrb	r3, [r7, #19]
}
 8009530:	4618      	mov	r0, r3
 8009532:	371c      	adds	r7, #28
 8009534:	46bd      	mov	sp, r7
 8009536:	bd90      	pop	{r4, r7, pc}

08009538 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b086      	sub	sp, #24
 800953c:	af00      	add	r7, sp, #0
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	60b9      	str	r1, [r7, #8]
 8009542:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009544:	2300      	movs	r3, #0
 8009546:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009552:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009556:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	0c1b      	lsrs	r3, r3, #16
 800955c:	b2da      	uxtb	r2, r3
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	0a1b      	lsrs	r3, r3, #8
 8009566:	b2db      	uxtb	r3, r3
 8009568:	f003 031f 	and.w	r3, r3, #31
 800956c:	b2da      	uxtb	r2, r3
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	b2db      	uxtb	r3, r3
 8009576:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800957a:	b2da      	uxtb	r2, r3
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	0b5b      	lsrs	r3, r3, #13
 8009584:	b2db      	uxtb	r3, r3
 8009586:	f003 0307 	and.w	r3, r3, #7
 800958a:	b2da      	uxtb	r2, r3
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d11a      	bne.n	80095cc <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	78db      	ldrb	r3, [r3, #3]
 800959a:	4618      	mov	r0, r3
 800959c:	f000 f8bc 	bl	8009718 <RTC_Bcd2ToByte>
 80095a0:	4603      	mov	r3, r0
 80095a2:	461a      	mov	r2, r3
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	785b      	ldrb	r3, [r3, #1]
 80095ac:	4618      	mov	r0, r3
 80095ae:	f000 f8b3 	bl	8009718 <RTC_Bcd2ToByte>
 80095b2:	4603      	mov	r3, r0
 80095b4:	461a      	mov	r2, r3
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	789b      	ldrb	r3, [r3, #2]
 80095be:	4618      	mov	r0, r3
 80095c0:	f000 f8aa 	bl	8009718 <RTC_Bcd2ToByte>
 80095c4:	4603      	mov	r3, r0
 80095c6:	461a      	mov	r2, r3
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80095cc:	2300      	movs	r3, #0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3718      	adds	r7, #24
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b084      	sub	sp, #16
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80095de:	2300      	movs	r3, #0
 80095e0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	68da      	ldr	r2, [r3, #12]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80095f0:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80095f2:	f7fa ff47 	bl	8004484 <HAL_GetTick>
 80095f6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80095f8:	e009      	b.n	800960e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80095fa:	f7fa ff43 	bl	8004484 <HAL_GetTick>
 80095fe:	4602      	mov	r2, r0
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	1ad3      	subs	r3, r2, r3
 8009604:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009608:	d901      	bls.n	800960e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800960a:	2303      	movs	r3, #3
 800960c:	e007      	b.n	800961e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	68db      	ldr	r3, [r3, #12]
 8009614:	f003 0320 	and.w	r3, r3, #32
 8009618:	2b00      	cmp	r3, #0
 800961a:	d0ee      	beq.n	80095fa <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800961c:	2300      	movs	r3, #0
}
 800961e:	4618      	mov	r0, r3
 8009620:	3710      	adds	r7, #16
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}

08009626 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009626:	b580      	push	{r7, lr}
 8009628:	b084      	sub	sp, #16
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800962e:	2300      	movs	r3, #0
 8009630:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009632:	2300      	movs	r3, #0
 8009634:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009640:	2b00      	cmp	r3, #0
 8009642:	d122      	bne.n	800968a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	68da      	ldr	r2, [r3, #12]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009652:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009654:	f7fa ff16 	bl	8004484 <HAL_GetTick>
 8009658:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800965a:	e00c      	b.n	8009676 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800965c:	f7fa ff12 	bl	8004484 <HAL_GetTick>
 8009660:	4602      	mov	r2, r0
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	1ad3      	subs	r3, r2, r3
 8009666:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800966a:	d904      	bls.n	8009676 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2204      	movs	r2, #4
 8009670:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009672:	2301      	movs	r3, #1
 8009674:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009680:	2b00      	cmp	r3, #0
 8009682:	d102      	bne.n	800968a <RTC_EnterInitMode+0x64>
 8009684:	7bfb      	ldrb	r3, [r7, #15]
 8009686:	2b01      	cmp	r3, #1
 8009688:	d1e8      	bne.n	800965c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800968a:	7bfb      	ldrb	r3, [r7, #15]
}
 800968c:	4618      	mov	r0, r3
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800969c:	2300      	movs	r3, #0
 800969e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	68da      	ldr	r2, [r3, #12]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80096ae:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	f003 0320 	and.w	r3, r3, #32
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d10a      	bne.n	80096d4 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f7ff ff89 	bl	80095d6 <HAL_RTC_WaitForSynchro>
 80096c4:	4603      	mov	r3, r0
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d004      	beq.n	80096d4 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2204      	movs	r2, #4
 80096ce:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80096d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3710      	adds	r7, #16
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80096de:	b480      	push	{r7}
 80096e0:	b085      	sub	sp, #20
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	4603      	mov	r3, r0
 80096e6:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80096e8:	2300      	movs	r3, #0
 80096ea:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80096ec:	e005      	b.n	80096fa <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80096ee:	7bfb      	ldrb	r3, [r7, #15]
 80096f0:	3301      	adds	r3, #1
 80096f2:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80096f4:	79fb      	ldrb	r3, [r7, #7]
 80096f6:	3b0a      	subs	r3, #10
 80096f8:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80096fa:	79fb      	ldrb	r3, [r7, #7]
 80096fc:	2b09      	cmp	r3, #9
 80096fe:	d8f6      	bhi.n	80096ee <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8009700:	7bfb      	ldrb	r3, [r7, #15]
 8009702:	011b      	lsls	r3, r3, #4
 8009704:	b2da      	uxtb	r2, r3
 8009706:	79fb      	ldrb	r3, [r7, #7]
 8009708:	4313      	orrs	r3, r2
 800970a:	b2db      	uxtb	r3, r3
}
 800970c:	4618      	mov	r0, r3
 800970e:	3714      	adds	r7, #20
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8009718:	b480      	push	{r7}
 800971a:	b085      	sub	sp, #20
 800971c:	af00      	add	r7, sp, #0
 800971e:	4603      	mov	r3, r0
 8009720:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8009722:	2300      	movs	r3, #0
 8009724:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8009726:	79fb      	ldrb	r3, [r7, #7]
 8009728:	091b      	lsrs	r3, r3, #4
 800972a:	b2db      	uxtb	r3, r3
 800972c:	461a      	mov	r2, r3
 800972e:	0092      	lsls	r2, r2, #2
 8009730:	4413      	add	r3, r2
 8009732:	005b      	lsls	r3, r3, #1
 8009734:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8009736:	79fb      	ldrb	r3, [r7, #7]
 8009738:	f003 030f 	and.w	r3, r3, #15
 800973c:	b2da      	uxtb	r2, r3
 800973e:	7bfb      	ldrb	r3, [r7, #15]
 8009740:	4413      	add	r3, r2
 8009742:	b2db      	uxtb	r3, r3
}
 8009744:	4618      	mov	r0, r3
 8009746:	3714      	adds	r7, #20
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8009750:	b480      	push	{r7}
 8009752:	b087      	sub	sp, #28
 8009754:	af00      	add	r7, sp, #0
 8009756:	60f8      	str	r0, [r7, #12]
 8009758:	60b9      	str	r1, [r7, #8]
 800975a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800975c:	2300      	movs	r3, #0
 800975e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	3350      	adds	r3, #80	; 0x50
 8009766:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	697a      	ldr	r2, [r7, #20]
 800976e:	4413      	add	r3, r2
 8009770:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	601a      	str	r2, [r3, #0]
}
 8009778:	bf00      	nop
 800977a:	371c      	adds	r7, #28
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d101      	bne.n	8009796 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	e041      	b.n	800981a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800979c:	b2db      	uxtb	r3, r3
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d106      	bne.n	80097b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2200      	movs	r2, #0
 80097a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f7fa fbd8 	bl	8003f60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2202      	movs	r2, #2
 80097b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	3304      	adds	r3, #4
 80097c0:	4619      	mov	r1, r3
 80097c2:	4610      	mov	r0, r2
 80097c4:	f000 fc82 	bl	800a0cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2201      	movs	r2, #1
 80097dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2201      	movs	r2, #1
 8009804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2201      	movs	r2, #1
 800980c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3708      	adds	r7, #8
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009822:	b580      	push	{r7, lr}
 8009824:	b082      	sub	sp, #8
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d101      	bne.n	8009834 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	e041      	b.n	80098b8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800983a:	b2db      	uxtb	r3, r3
 800983c:	2b00      	cmp	r3, #0
 800983e:	d106      	bne.n	800984e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 f839 	bl	80098c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2202      	movs	r2, #2
 8009852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	3304      	adds	r3, #4
 800985e:	4619      	mov	r1, r3
 8009860:	4610      	mov	r0, r2
 8009862:	f000 fc33 	bl	800a0cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2201      	movs	r2, #1
 800986a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2201      	movs	r2, #1
 8009872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2201      	movs	r2, #1
 800987a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2201      	movs	r2, #1
 8009882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2201      	movs	r2, #1
 800988a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2201      	movs	r2, #1
 8009892:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2201      	movs	r2, #1
 800989a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2201      	movs	r2, #1
 80098a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2201      	movs	r2, #1
 80098aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2201      	movs	r2, #1
 80098b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80098b6:	2300      	movs	r3, #0
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3708      	adds	r7, #8
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80098c8:	bf00      	nop
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d109      	bne.n	80098f8 <HAL_TIM_PWM_Start+0x24>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	bf14      	ite	ne
 80098f0:	2301      	movne	r3, #1
 80098f2:	2300      	moveq	r3, #0
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	e022      	b.n	800993e <HAL_TIM_PWM_Start+0x6a>
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	2b04      	cmp	r3, #4
 80098fc:	d109      	bne.n	8009912 <HAL_TIM_PWM_Start+0x3e>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009904:	b2db      	uxtb	r3, r3
 8009906:	2b01      	cmp	r3, #1
 8009908:	bf14      	ite	ne
 800990a:	2301      	movne	r3, #1
 800990c:	2300      	moveq	r3, #0
 800990e:	b2db      	uxtb	r3, r3
 8009910:	e015      	b.n	800993e <HAL_TIM_PWM_Start+0x6a>
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	2b08      	cmp	r3, #8
 8009916:	d109      	bne.n	800992c <HAL_TIM_PWM_Start+0x58>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800991e:	b2db      	uxtb	r3, r3
 8009920:	2b01      	cmp	r3, #1
 8009922:	bf14      	ite	ne
 8009924:	2301      	movne	r3, #1
 8009926:	2300      	moveq	r3, #0
 8009928:	b2db      	uxtb	r3, r3
 800992a:	e008      	b.n	800993e <HAL_TIM_PWM_Start+0x6a>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009932:	b2db      	uxtb	r3, r3
 8009934:	2b01      	cmp	r3, #1
 8009936:	bf14      	ite	ne
 8009938:	2301      	movne	r3, #1
 800993a:	2300      	moveq	r3, #0
 800993c:	b2db      	uxtb	r3, r3
 800993e:	2b00      	cmp	r3, #0
 8009940:	d001      	beq.n	8009946 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	e07c      	b.n	8009a40 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d104      	bne.n	8009956 <HAL_TIM_PWM_Start+0x82>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2202      	movs	r2, #2
 8009950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009954:	e013      	b.n	800997e <HAL_TIM_PWM_Start+0xaa>
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	2b04      	cmp	r3, #4
 800995a:	d104      	bne.n	8009966 <HAL_TIM_PWM_Start+0x92>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2202      	movs	r2, #2
 8009960:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009964:	e00b      	b.n	800997e <HAL_TIM_PWM_Start+0xaa>
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	2b08      	cmp	r3, #8
 800996a:	d104      	bne.n	8009976 <HAL_TIM_PWM_Start+0xa2>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2202      	movs	r2, #2
 8009970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009974:	e003      	b.n	800997e <HAL_TIM_PWM_Start+0xaa>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2202      	movs	r2, #2
 800997a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	2201      	movs	r2, #1
 8009984:	6839      	ldr	r1, [r7, #0]
 8009986:	4618      	mov	r0, r3
 8009988:	f000 fe8a 	bl	800a6a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a2d      	ldr	r2, [pc, #180]	; (8009a48 <HAL_TIM_PWM_Start+0x174>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d004      	beq.n	80099a0 <HAL_TIM_PWM_Start+0xcc>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a2c      	ldr	r2, [pc, #176]	; (8009a4c <HAL_TIM_PWM_Start+0x178>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d101      	bne.n	80099a4 <HAL_TIM_PWM_Start+0xd0>
 80099a0:	2301      	movs	r3, #1
 80099a2:	e000      	b.n	80099a6 <HAL_TIM_PWM_Start+0xd2>
 80099a4:	2300      	movs	r3, #0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d007      	beq.n	80099ba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80099b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a22      	ldr	r2, [pc, #136]	; (8009a48 <HAL_TIM_PWM_Start+0x174>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d022      	beq.n	8009a0a <HAL_TIM_PWM_Start+0x136>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099cc:	d01d      	beq.n	8009a0a <HAL_TIM_PWM_Start+0x136>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a1f      	ldr	r2, [pc, #124]	; (8009a50 <HAL_TIM_PWM_Start+0x17c>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d018      	beq.n	8009a0a <HAL_TIM_PWM_Start+0x136>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a1d      	ldr	r2, [pc, #116]	; (8009a54 <HAL_TIM_PWM_Start+0x180>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d013      	beq.n	8009a0a <HAL_TIM_PWM_Start+0x136>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a1c      	ldr	r2, [pc, #112]	; (8009a58 <HAL_TIM_PWM_Start+0x184>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d00e      	beq.n	8009a0a <HAL_TIM_PWM_Start+0x136>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a16      	ldr	r2, [pc, #88]	; (8009a4c <HAL_TIM_PWM_Start+0x178>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d009      	beq.n	8009a0a <HAL_TIM_PWM_Start+0x136>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a18      	ldr	r2, [pc, #96]	; (8009a5c <HAL_TIM_PWM_Start+0x188>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d004      	beq.n	8009a0a <HAL_TIM_PWM_Start+0x136>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a16      	ldr	r2, [pc, #88]	; (8009a60 <HAL_TIM_PWM_Start+0x18c>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d111      	bne.n	8009a2e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	f003 0307 	and.w	r3, r3, #7
 8009a14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2b06      	cmp	r3, #6
 8009a1a:	d010      	beq.n	8009a3e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f042 0201 	orr.w	r2, r2, #1
 8009a2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a2c:	e007      	b.n	8009a3e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f042 0201 	orr.w	r2, r2, #1
 8009a3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009a3e:	2300      	movs	r3, #0
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3710      	adds	r7, #16
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}
 8009a48:	40010000 	.word	0x40010000
 8009a4c:	40010400 	.word	0x40010400
 8009a50:	40000400 	.word	0x40000400
 8009a54:	40000800 	.word	0x40000800
 8009a58:	40000c00 	.word	0x40000c00
 8009a5c:	40014000 	.word	0x40014000
 8009a60:	40001800 	.word	0x40001800

08009a64 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	2200      	movs	r2, #0
 8009a74:	6839      	ldr	r1, [r7, #0]
 8009a76:	4618      	mov	r0, r3
 8009a78:	f000 fe12 	bl	800a6a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a2e      	ldr	r2, [pc, #184]	; (8009b3c <HAL_TIM_PWM_Stop+0xd8>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d004      	beq.n	8009a90 <HAL_TIM_PWM_Stop+0x2c>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a2d      	ldr	r2, [pc, #180]	; (8009b40 <HAL_TIM_PWM_Stop+0xdc>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d101      	bne.n	8009a94 <HAL_TIM_PWM_Stop+0x30>
 8009a90:	2301      	movs	r3, #1
 8009a92:	e000      	b.n	8009a96 <HAL_TIM_PWM_Stop+0x32>
 8009a94:	2300      	movs	r3, #0
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d017      	beq.n	8009aca <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	6a1a      	ldr	r2, [r3, #32]
 8009aa0:	f241 1311 	movw	r3, #4369	; 0x1111
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d10f      	bne.n	8009aca <HAL_TIM_PWM_Stop+0x66>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	6a1a      	ldr	r2, [r3, #32]
 8009ab0:	f240 4344 	movw	r3, #1092	; 0x444
 8009ab4:	4013      	ands	r3, r2
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d107      	bne.n	8009aca <HAL_TIM_PWM_Stop+0x66>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009ac8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	6a1a      	ldr	r2, [r3, #32]
 8009ad0:	f241 1311 	movw	r3, #4369	; 0x1111
 8009ad4:	4013      	ands	r3, r2
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d10f      	bne.n	8009afa <HAL_TIM_PWM_Stop+0x96>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	6a1a      	ldr	r2, [r3, #32]
 8009ae0:	f240 4344 	movw	r3, #1092	; 0x444
 8009ae4:	4013      	ands	r3, r2
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d107      	bne.n	8009afa <HAL_TIM_PWM_Stop+0x96>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f022 0201 	bic.w	r2, r2, #1
 8009af8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d104      	bne.n	8009b0a <HAL_TIM_PWM_Stop+0xa6>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b08:	e013      	b.n	8009b32 <HAL_TIM_PWM_Stop+0xce>
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	2b04      	cmp	r3, #4
 8009b0e:	d104      	bne.n	8009b1a <HAL_TIM_PWM_Stop+0xb6>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b18:	e00b      	b.n	8009b32 <HAL_TIM_PWM_Stop+0xce>
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	2b08      	cmp	r3, #8
 8009b1e:	d104      	bne.n	8009b2a <HAL_TIM_PWM_Stop+0xc6>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b28:	e003      	b.n	8009b32 <HAL_TIM_PWM_Stop+0xce>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8009b32:	2300      	movs	r3, #0
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3708      	adds	r7, #8
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	40010000 	.word	0x40010000
 8009b40:	40010400 	.word	0x40010400

08009b44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b082      	sub	sp, #8
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	f003 0302 	and.w	r3, r3, #2
 8009b56:	2b02      	cmp	r3, #2
 8009b58:	d122      	bne.n	8009ba0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	f003 0302 	and.w	r3, r3, #2
 8009b64:	2b02      	cmp	r3, #2
 8009b66:	d11b      	bne.n	8009ba0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f06f 0202 	mvn.w	r2, #2
 8009b70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2201      	movs	r2, #1
 8009b76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	699b      	ldr	r3, [r3, #24]
 8009b7e:	f003 0303 	and.w	r3, r3, #3
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d003      	beq.n	8009b8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 fa81 	bl	800a08e <HAL_TIM_IC_CaptureCallback>
 8009b8c:	e005      	b.n	8009b9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 fa73 	bl	800a07a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 fa84 	bl	800a0a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	691b      	ldr	r3, [r3, #16]
 8009ba6:	f003 0304 	and.w	r3, r3, #4
 8009baa:	2b04      	cmp	r3, #4
 8009bac:	d122      	bne.n	8009bf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	f003 0304 	and.w	r3, r3, #4
 8009bb8:	2b04      	cmp	r3, #4
 8009bba:	d11b      	bne.n	8009bf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f06f 0204 	mvn.w	r2, #4
 8009bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2202      	movs	r2, #2
 8009bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	699b      	ldr	r3, [r3, #24]
 8009bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d003      	beq.n	8009be2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 fa57 	bl	800a08e <HAL_TIM_IC_CaptureCallback>
 8009be0:	e005      	b.n	8009bee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 fa49 	bl	800a07a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 fa5a 	bl	800a0a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	691b      	ldr	r3, [r3, #16]
 8009bfa:	f003 0308 	and.w	r3, r3, #8
 8009bfe:	2b08      	cmp	r3, #8
 8009c00:	d122      	bne.n	8009c48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	f003 0308 	and.w	r3, r3, #8
 8009c0c:	2b08      	cmp	r3, #8
 8009c0e:	d11b      	bne.n	8009c48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f06f 0208 	mvn.w	r2, #8
 8009c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2204      	movs	r2, #4
 8009c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	69db      	ldr	r3, [r3, #28]
 8009c26:	f003 0303 	and.w	r3, r3, #3
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d003      	beq.n	8009c36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 fa2d 	bl	800a08e <HAL_TIM_IC_CaptureCallback>
 8009c34:	e005      	b.n	8009c42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 fa1f 	bl	800a07a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 fa30 	bl	800a0a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	691b      	ldr	r3, [r3, #16]
 8009c4e:	f003 0310 	and.w	r3, r3, #16
 8009c52:	2b10      	cmp	r3, #16
 8009c54:	d122      	bne.n	8009c9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	f003 0310 	and.w	r3, r3, #16
 8009c60:	2b10      	cmp	r3, #16
 8009c62:	d11b      	bne.n	8009c9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f06f 0210 	mvn.w	r2, #16
 8009c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2208      	movs	r2, #8
 8009c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	69db      	ldr	r3, [r3, #28]
 8009c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d003      	beq.n	8009c8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 fa03 	bl	800a08e <HAL_TIM_IC_CaptureCallback>
 8009c88:	e005      	b.n	8009c96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 f9f5 	bl	800a07a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f000 fa06 	bl	800a0a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	691b      	ldr	r3, [r3, #16]
 8009ca2:	f003 0301 	and.w	r3, r3, #1
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d10e      	bne.n	8009cc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	f003 0301 	and.w	r3, r3, #1
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d107      	bne.n	8009cc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f06f 0201 	mvn.w	r2, #1
 8009cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 f9cf 	bl	800a066 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	691b      	ldr	r3, [r3, #16]
 8009cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cd2:	2b80      	cmp	r3, #128	; 0x80
 8009cd4:	d10e      	bne.n	8009cf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	68db      	ldr	r3, [r3, #12]
 8009cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ce0:	2b80      	cmp	r3, #128	; 0x80
 8009ce2:	d107      	bne.n	8009cf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 fdd4 	bl	800a89c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	691b      	ldr	r3, [r3, #16]
 8009cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cfe:	2b40      	cmp	r3, #64	; 0x40
 8009d00:	d10e      	bne.n	8009d20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d0c:	2b40      	cmp	r3, #64	; 0x40
 8009d0e:	d107      	bne.n	8009d20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 f9cb 	bl	800a0b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	691b      	ldr	r3, [r3, #16]
 8009d26:	f003 0320 	and.w	r3, r3, #32
 8009d2a:	2b20      	cmp	r3, #32
 8009d2c:	d10e      	bne.n	8009d4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	68db      	ldr	r3, [r3, #12]
 8009d34:	f003 0320 	and.w	r3, r3, #32
 8009d38:	2b20      	cmp	r3, #32
 8009d3a:	d107      	bne.n	8009d4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f06f 0220 	mvn.w	r2, #32
 8009d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 fd9e 	bl	800a888 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d4c:	bf00      	nop
 8009d4e:	3708      	adds	r7, #8
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b086      	sub	sp, #24
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	60f8      	str	r0, [r7, #12]
 8009d5c:	60b9      	str	r1, [r7, #8]
 8009d5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d60:	2300      	movs	r3, #0
 8009d62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d101      	bne.n	8009d72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009d6e:	2302      	movs	r3, #2
 8009d70:	e0ae      	b.n	8009ed0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2201      	movs	r2, #1
 8009d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2b0c      	cmp	r3, #12
 8009d7e:	f200 809f 	bhi.w	8009ec0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009d82:	a201      	add	r2, pc, #4	; (adr r2, 8009d88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d88:	08009dbd 	.word	0x08009dbd
 8009d8c:	08009ec1 	.word	0x08009ec1
 8009d90:	08009ec1 	.word	0x08009ec1
 8009d94:	08009ec1 	.word	0x08009ec1
 8009d98:	08009dfd 	.word	0x08009dfd
 8009d9c:	08009ec1 	.word	0x08009ec1
 8009da0:	08009ec1 	.word	0x08009ec1
 8009da4:	08009ec1 	.word	0x08009ec1
 8009da8:	08009e3f 	.word	0x08009e3f
 8009dac:	08009ec1 	.word	0x08009ec1
 8009db0:	08009ec1 	.word	0x08009ec1
 8009db4:	08009ec1 	.word	0x08009ec1
 8009db8:	08009e7f 	.word	0x08009e7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	68b9      	ldr	r1, [r7, #8]
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f000 fa22 	bl	800a20c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	699a      	ldr	r2, [r3, #24]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f042 0208 	orr.w	r2, r2, #8
 8009dd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	699a      	ldr	r2, [r3, #24]
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f022 0204 	bic.w	r2, r2, #4
 8009de6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	6999      	ldr	r1, [r3, #24]
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	691a      	ldr	r2, [r3, #16]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	430a      	orrs	r2, r1
 8009df8:	619a      	str	r2, [r3, #24]
      break;
 8009dfa:	e064      	b.n	8009ec6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	68b9      	ldr	r1, [r7, #8]
 8009e02:	4618      	mov	r0, r3
 8009e04:	f000 fa72 	bl	800a2ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	699a      	ldr	r2, [r3, #24]
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	699a      	ldr	r2, [r3, #24]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	6999      	ldr	r1, [r3, #24]
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	691b      	ldr	r3, [r3, #16]
 8009e32:	021a      	lsls	r2, r3, #8
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	430a      	orrs	r2, r1
 8009e3a:	619a      	str	r2, [r3, #24]
      break;
 8009e3c:	e043      	b.n	8009ec6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	68b9      	ldr	r1, [r7, #8]
 8009e44:	4618      	mov	r0, r3
 8009e46:	f000 fac7 	bl	800a3d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	69da      	ldr	r2, [r3, #28]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f042 0208 	orr.w	r2, r2, #8
 8009e58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	69da      	ldr	r2, [r3, #28]
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f022 0204 	bic.w	r2, r2, #4
 8009e68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	69d9      	ldr	r1, [r3, #28]
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	691a      	ldr	r2, [r3, #16]
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	430a      	orrs	r2, r1
 8009e7a:	61da      	str	r2, [r3, #28]
      break;
 8009e7c:	e023      	b.n	8009ec6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	68b9      	ldr	r1, [r7, #8]
 8009e84:	4618      	mov	r0, r3
 8009e86:	f000 fb1b 	bl	800a4c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	69da      	ldr	r2, [r3, #28]
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	69da      	ldr	r2, [r3, #28]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ea8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	69d9      	ldr	r1, [r3, #28]
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	691b      	ldr	r3, [r3, #16]
 8009eb4:	021a      	lsls	r2, r3, #8
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	430a      	orrs	r2, r1
 8009ebc:	61da      	str	r2, [r3, #28]
      break;
 8009ebe:	e002      	b.n	8009ec6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ec4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3718      	adds	r7, #24
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d101      	bne.n	8009ef4 <HAL_TIM_ConfigClockSource+0x1c>
 8009ef0:	2302      	movs	r3, #2
 8009ef2:	e0b4      	b.n	800a05e <HAL_TIM_ConfigClockSource+0x186>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2202      	movs	r2, #2
 8009f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009f12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	68ba      	ldr	r2, [r7, #8]
 8009f22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f2c:	d03e      	beq.n	8009fac <HAL_TIM_ConfigClockSource+0xd4>
 8009f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f32:	f200 8087 	bhi.w	800a044 <HAL_TIM_ConfigClockSource+0x16c>
 8009f36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f3a:	f000 8086 	beq.w	800a04a <HAL_TIM_ConfigClockSource+0x172>
 8009f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f42:	d87f      	bhi.n	800a044 <HAL_TIM_ConfigClockSource+0x16c>
 8009f44:	2b70      	cmp	r3, #112	; 0x70
 8009f46:	d01a      	beq.n	8009f7e <HAL_TIM_ConfigClockSource+0xa6>
 8009f48:	2b70      	cmp	r3, #112	; 0x70
 8009f4a:	d87b      	bhi.n	800a044 <HAL_TIM_ConfigClockSource+0x16c>
 8009f4c:	2b60      	cmp	r3, #96	; 0x60
 8009f4e:	d050      	beq.n	8009ff2 <HAL_TIM_ConfigClockSource+0x11a>
 8009f50:	2b60      	cmp	r3, #96	; 0x60
 8009f52:	d877      	bhi.n	800a044 <HAL_TIM_ConfigClockSource+0x16c>
 8009f54:	2b50      	cmp	r3, #80	; 0x50
 8009f56:	d03c      	beq.n	8009fd2 <HAL_TIM_ConfigClockSource+0xfa>
 8009f58:	2b50      	cmp	r3, #80	; 0x50
 8009f5a:	d873      	bhi.n	800a044 <HAL_TIM_ConfigClockSource+0x16c>
 8009f5c:	2b40      	cmp	r3, #64	; 0x40
 8009f5e:	d058      	beq.n	800a012 <HAL_TIM_ConfigClockSource+0x13a>
 8009f60:	2b40      	cmp	r3, #64	; 0x40
 8009f62:	d86f      	bhi.n	800a044 <HAL_TIM_ConfigClockSource+0x16c>
 8009f64:	2b30      	cmp	r3, #48	; 0x30
 8009f66:	d064      	beq.n	800a032 <HAL_TIM_ConfigClockSource+0x15a>
 8009f68:	2b30      	cmp	r3, #48	; 0x30
 8009f6a:	d86b      	bhi.n	800a044 <HAL_TIM_ConfigClockSource+0x16c>
 8009f6c:	2b20      	cmp	r3, #32
 8009f6e:	d060      	beq.n	800a032 <HAL_TIM_ConfigClockSource+0x15a>
 8009f70:	2b20      	cmp	r3, #32
 8009f72:	d867      	bhi.n	800a044 <HAL_TIM_ConfigClockSource+0x16c>
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d05c      	beq.n	800a032 <HAL_TIM_ConfigClockSource+0x15a>
 8009f78:	2b10      	cmp	r3, #16
 8009f7a:	d05a      	beq.n	800a032 <HAL_TIM_ConfigClockSource+0x15a>
 8009f7c:	e062      	b.n	800a044 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6818      	ldr	r0, [r3, #0]
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	6899      	ldr	r1, [r3, #8]
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	685a      	ldr	r2, [r3, #4]
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	f000 fb67 	bl	800a660 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009fa0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	68ba      	ldr	r2, [r7, #8]
 8009fa8:	609a      	str	r2, [r3, #8]
      break;
 8009faa:	e04f      	b.n	800a04c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6818      	ldr	r0, [r3, #0]
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	6899      	ldr	r1, [r3, #8]
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	685a      	ldr	r2, [r3, #4]
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	68db      	ldr	r3, [r3, #12]
 8009fbc:	f000 fb50 	bl	800a660 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	689a      	ldr	r2, [r3, #8]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009fce:	609a      	str	r2, [r3, #8]
      break;
 8009fd0:	e03c      	b.n	800a04c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6818      	ldr	r0, [r3, #0]
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	6859      	ldr	r1, [r3, #4]
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	68db      	ldr	r3, [r3, #12]
 8009fde:	461a      	mov	r2, r3
 8009fe0:	f000 fac4 	bl	800a56c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2150      	movs	r1, #80	; 0x50
 8009fea:	4618      	mov	r0, r3
 8009fec:	f000 fb1d 	bl	800a62a <TIM_ITRx_SetConfig>
      break;
 8009ff0:	e02c      	b.n	800a04c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6818      	ldr	r0, [r3, #0]
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	6859      	ldr	r1, [r3, #4]
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	461a      	mov	r2, r3
 800a000:	f000 fae3 	bl	800a5ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	2160      	movs	r1, #96	; 0x60
 800a00a:	4618      	mov	r0, r3
 800a00c:	f000 fb0d 	bl	800a62a <TIM_ITRx_SetConfig>
      break;
 800a010:	e01c      	b.n	800a04c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6818      	ldr	r0, [r3, #0]
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	6859      	ldr	r1, [r3, #4]
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	68db      	ldr	r3, [r3, #12]
 800a01e:	461a      	mov	r2, r3
 800a020:	f000 faa4 	bl	800a56c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	2140      	movs	r1, #64	; 0x40
 800a02a:	4618      	mov	r0, r3
 800a02c:	f000 fafd 	bl	800a62a <TIM_ITRx_SetConfig>
      break;
 800a030:	e00c      	b.n	800a04c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4619      	mov	r1, r3
 800a03c:	4610      	mov	r0, r2
 800a03e:	f000 faf4 	bl	800a62a <TIM_ITRx_SetConfig>
      break;
 800a042:	e003      	b.n	800a04c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a044:	2301      	movs	r3, #1
 800a046:	73fb      	strb	r3, [r7, #15]
      break;
 800a048:	e000      	b.n	800a04c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a04a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2201      	movs	r2, #1
 800a050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2200      	movs	r2, #0
 800a058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a05c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3710      	adds	r7, #16
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}

0800a066 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a066:	b480      	push	{r7}
 800a068:	b083      	sub	sp, #12
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a06e:	bf00      	nop
 800a070:	370c      	adds	r7, #12
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr

0800a07a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a07a:	b480      	push	{r7}
 800a07c:	b083      	sub	sp, #12
 800a07e:	af00      	add	r7, sp, #0
 800a080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a082:	bf00      	nop
 800a084:	370c      	adds	r7, #12
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr

0800a08e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a08e:	b480      	push	{r7}
 800a090:	b083      	sub	sp, #12
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a096:	bf00      	nop
 800a098:	370c      	adds	r7, #12
 800a09a:	46bd      	mov	sp, r7
 800a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a0:	4770      	bx	lr

0800a0a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a0a2:	b480      	push	{r7}
 800a0a4:	b083      	sub	sp, #12
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a0aa:	bf00      	nop
 800a0ac:	370c      	adds	r7, #12
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr

0800a0b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a0b6:	b480      	push	{r7}
 800a0b8:	b083      	sub	sp, #12
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a0be:	bf00      	nop
 800a0c0:	370c      	adds	r7, #12
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr
	...

0800a0cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b085      	sub	sp, #20
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	4a40      	ldr	r2, [pc, #256]	; (800a1e0 <TIM_Base_SetConfig+0x114>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d013      	beq.n	800a10c <TIM_Base_SetConfig+0x40>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0ea:	d00f      	beq.n	800a10c <TIM_Base_SetConfig+0x40>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	4a3d      	ldr	r2, [pc, #244]	; (800a1e4 <TIM_Base_SetConfig+0x118>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d00b      	beq.n	800a10c <TIM_Base_SetConfig+0x40>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	4a3c      	ldr	r2, [pc, #240]	; (800a1e8 <TIM_Base_SetConfig+0x11c>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d007      	beq.n	800a10c <TIM_Base_SetConfig+0x40>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	4a3b      	ldr	r2, [pc, #236]	; (800a1ec <TIM_Base_SetConfig+0x120>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d003      	beq.n	800a10c <TIM_Base_SetConfig+0x40>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	4a3a      	ldr	r2, [pc, #232]	; (800a1f0 <TIM_Base_SetConfig+0x124>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d108      	bne.n	800a11e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a112:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	68fa      	ldr	r2, [r7, #12]
 800a11a:	4313      	orrs	r3, r2
 800a11c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	4a2f      	ldr	r2, [pc, #188]	; (800a1e0 <TIM_Base_SetConfig+0x114>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d02b      	beq.n	800a17e <TIM_Base_SetConfig+0xb2>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a12c:	d027      	beq.n	800a17e <TIM_Base_SetConfig+0xb2>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4a2c      	ldr	r2, [pc, #176]	; (800a1e4 <TIM_Base_SetConfig+0x118>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d023      	beq.n	800a17e <TIM_Base_SetConfig+0xb2>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	4a2b      	ldr	r2, [pc, #172]	; (800a1e8 <TIM_Base_SetConfig+0x11c>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d01f      	beq.n	800a17e <TIM_Base_SetConfig+0xb2>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4a2a      	ldr	r2, [pc, #168]	; (800a1ec <TIM_Base_SetConfig+0x120>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d01b      	beq.n	800a17e <TIM_Base_SetConfig+0xb2>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	4a29      	ldr	r2, [pc, #164]	; (800a1f0 <TIM_Base_SetConfig+0x124>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d017      	beq.n	800a17e <TIM_Base_SetConfig+0xb2>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4a28      	ldr	r2, [pc, #160]	; (800a1f4 <TIM_Base_SetConfig+0x128>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d013      	beq.n	800a17e <TIM_Base_SetConfig+0xb2>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	4a27      	ldr	r2, [pc, #156]	; (800a1f8 <TIM_Base_SetConfig+0x12c>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d00f      	beq.n	800a17e <TIM_Base_SetConfig+0xb2>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	4a26      	ldr	r2, [pc, #152]	; (800a1fc <TIM_Base_SetConfig+0x130>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d00b      	beq.n	800a17e <TIM_Base_SetConfig+0xb2>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	4a25      	ldr	r2, [pc, #148]	; (800a200 <TIM_Base_SetConfig+0x134>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d007      	beq.n	800a17e <TIM_Base_SetConfig+0xb2>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	4a24      	ldr	r2, [pc, #144]	; (800a204 <TIM_Base_SetConfig+0x138>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d003      	beq.n	800a17e <TIM_Base_SetConfig+0xb2>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	4a23      	ldr	r2, [pc, #140]	; (800a208 <TIM_Base_SetConfig+0x13c>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d108      	bne.n	800a190 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	68fa      	ldr	r2, [r7, #12]
 800a18c:	4313      	orrs	r3, r2
 800a18e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	695b      	ldr	r3, [r3, #20]
 800a19a:	4313      	orrs	r3, r2
 800a19c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	68fa      	ldr	r2, [r7, #12]
 800a1a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	689a      	ldr	r2, [r3, #8]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	4a0a      	ldr	r2, [pc, #40]	; (800a1e0 <TIM_Base_SetConfig+0x114>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d003      	beq.n	800a1c4 <TIM_Base_SetConfig+0xf8>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4a0c      	ldr	r2, [pc, #48]	; (800a1f0 <TIM_Base_SetConfig+0x124>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d103      	bne.n	800a1cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	691a      	ldr	r2, [r3, #16]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	615a      	str	r2, [r3, #20]
}
 800a1d2:	bf00      	nop
 800a1d4:	3714      	adds	r7, #20
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr
 800a1de:	bf00      	nop
 800a1e0:	40010000 	.word	0x40010000
 800a1e4:	40000400 	.word	0x40000400
 800a1e8:	40000800 	.word	0x40000800
 800a1ec:	40000c00 	.word	0x40000c00
 800a1f0:	40010400 	.word	0x40010400
 800a1f4:	40014000 	.word	0x40014000
 800a1f8:	40014400 	.word	0x40014400
 800a1fc:	40014800 	.word	0x40014800
 800a200:	40001800 	.word	0x40001800
 800a204:	40001c00 	.word	0x40001c00
 800a208:	40002000 	.word	0x40002000

0800a20c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b087      	sub	sp, #28
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6a1b      	ldr	r3, [r3, #32]
 800a21a:	f023 0201 	bic.w	r2, r3, #1
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6a1b      	ldr	r3, [r3, #32]
 800a226:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	699b      	ldr	r3, [r3, #24]
 800a232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a23a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f023 0303 	bic.w	r3, r3, #3
 800a242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	68fa      	ldr	r2, [r7, #12]
 800a24a:	4313      	orrs	r3, r2
 800a24c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	f023 0302 	bic.w	r3, r3, #2
 800a254:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	697a      	ldr	r2, [r7, #20]
 800a25c:	4313      	orrs	r3, r2
 800a25e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	4a20      	ldr	r2, [pc, #128]	; (800a2e4 <TIM_OC1_SetConfig+0xd8>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d003      	beq.n	800a270 <TIM_OC1_SetConfig+0x64>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	4a1f      	ldr	r2, [pc, #124]	; (800a2e8 <TIM_OC1_SetConfig+0xdc>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d10c      	bne.n	800a28a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	f023 0308 	bic.w	r3, r3, #8
 800a276:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	68db      	ldr	r3, [r3, #12]
 800a27c:	697a      	ldr	r2, [r7, #20]
 800a27e:	4313      	orrs	r3, r2
 800a280:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	f023 0304 	bic.w	r3, r3, #4
 800a288:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	4a15      	ldr	r2, [pc, #84]	; (800a2e4 <TIM_OC1_SetConfig+0xd8>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d003      	beq.n	800a29a <TIM_OC1_SetConfig+0x8e>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	4a14      	ldr	r2, [pc, #80]	; (800a2e8 <TIM_OC1_SetConfig+0xdc>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d111      	bne.n	800a2be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a2a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	695b      	ldr	r3, [r3, #20]
 800a2ae:	693a      	ldr	r2, [r7, #16]
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	699b      	ldr	r3, [r3, #24]
 800a2b8:	693a      	ldr	r2, [r7, #16]
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	693a      	ldr	r2, [r7, #16]
 800a2c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	68fa      	ldr	r2, [r7, #12]
 800a2c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	685a      	ldr	r2, [r3, #4]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	697a      	ldr	r2, [r7, #20]
 800a2d6:	621a      	str	r2, [r3, #32]
}
 800a2d8:	bf00      	nop
 800a2da:	371c      	adds	r7, #28
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr
 800a2e4:	40010000 	.word	0x40010000
 800a2e8:	40010400 	.word	0x40010400

0800a2ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b087      	sub	sp, #28
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6a1b      	ldr	r3, [r3, #32]
 800a2fa:	f023 0210 	bic.w	r2, r3, #16
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a1b      	ldr	r3, [r3, #32]
 800a306:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	699b      	ldr	r3, [r3, #24]
 800a312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a31a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a322:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	021b      	lsls	r3, r3, #8
 800a32a:	68fa      	ldr	r2, [r7, #12]
 800a32c:	4313      	orrs	r3, r2
 800a32e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	f023 0320 	bic.w	r3, r3, #32
 800a336:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	011b      	lsls	r3, r3, #4
 800a33e:	697a      	ldr	r2, [r7, #20]
 800a340:	4313      	orrs	r3, r2
 800a342:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	4a22      	ldr	r2, [pc, #136]	; (800a3d0 <TIM_OC2_SetConfig+0xe4>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d003      	beq.n	800a354 <TIM_OC2_SetConfig+0x68>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	4a21      	ldr	r2, [pc, #132]	; (800a3d4 <TIM_OC2_SetConfig+0xe8>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d10d      	bne.n	800a370 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a35a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	011b      	lsls	r3, r3, #4
 800a362:	697a      	ldr	r2, [r7, #20]
 800a364:	4313      	orrs	r3, r2
 800a366:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a36e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	4a17      	ldr	r2, [pc, #92]	; (800a3d0 <TIM_OC2_SetConfig+0xe4>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d003      	beq.n	800a380 <TIM_OC2_SetConfig+0x94>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	4a16      	ldr	r2, [pc, #88]	; (800a3d4 <TIM_OC2_SetConfig+0xe8>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d113      	bne.n	800a3a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a386:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a38e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	695b      	ldr	r3, [r3, #20]
 800a394:	009b      	lsls	r3, r3, #2
 800a396:	693a      	ldr	r2, [r7, #16]
 800a398:	4313      	orrs	r3, r2
 800a39a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	699b      	ldr	r3, [r3, #24]
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	693a      	ldr	r2, [r7, #16]
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	693a      	ldr	r2, [r7, #16]
 800a3ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	685a      	ldr	r2, [r3, #4]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	697a      	ldr	r2, [r7, #20]
 800a3c0:	621a      	str	r2, [r3, #32]
}
 800a3c2:	bf00      	nop
 800a3c4:	371c      	adds	r7, #28
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr
 800a3ce:	bf00      	nop
 800a3d0:	40010000 	.word	0x40010000
 800a3d4:	40010400 	.word	0x40010400

0800a3d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b087      	sub	sp, #28
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6a1b      	ldr	r3, [r3, #32]
 800a3e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6a1b      	ldr	r3, [r3, #32]
 800a3f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	69db      	ldr	r3, [r3, #28]
 800a3fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f023 0303 	bic.w	r3, r3, #3
 800a40e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	68fa      	ldr	r2, [r7, #12]
 800a416:	4313      	orrs	r3, r2
 800a418:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a420:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	689b      	ldr	r3, [r3, #8]
 800a426:	021b      	lsls	r3, r3, #8
 800a428:	697a      	ldr	r2, [r7, #20]
 800a42a:	4313      	orrs	r3, r2
 800a42c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a21      	ldr	r2, [pc, #132]	; (800a4b8 <TIM_OC3_SetConfig+0xe0>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d003      	beq.n	800a43e <TIM_OC3_SetConfig+0x66>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4a20      	ldr	r2, [pc, #128]	; (800a4bc <TIM_OC3_SetConfig+0xe4>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d10d      	bne.n	800a45a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a444:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	68db      	ldr	r3, [r3, #12]
 800a44a:	021b      	lsls	r3, r3, #8
 800a44c:	697a      	ldr	r2, [r7, #20]
 800a44e:	4313      	orrs	r3, r2
 800a450:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a458:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	4a16      	ldr	r2, [pc, #88]	; (800a4b8 <TIM_OC3_SetConfig+0xe0>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d003      	beq.n	800a46a <TIM_OC3_SetConfig+0x92>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	4a15      	ldr	r2, [pc, #84]	; (800a4bc <TIM_OC3_SetConfig+0xe4>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d113      	bne.n	800a492 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a470:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a478:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	695b      	ldr	r3, [r3, #20]
 800a47e:	011b      	lsls	r3, r3, #4
 800a480:	693a      	ldr	r2, [r7, #16]
 800a482:	4313      	orrs	r3, r2
 800a484:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	699b      	ldr	r3, [r3, #24]
 800a48a:	011b      	lsls	r3, r3, #4
 800a48c:	693a      	ldr	r2, [r7, #16]
 800a48e:	4313      	orrs	r3, r2
 800a490:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	693a      	ldr	r2, [r7, #16]
 800a496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	68fa      	ldr	r2, [r7, #12]
 800a49c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	685a      	ldr	r2, [r3, #4]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	697a      	ldr	r2, [r7, #20]
 800a4aa:	621a      	str	r2, [r3, #32]
}
 800a4ac:	bf00      	nop
 800a4ae:	371c      	adds	r7, #28
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr
 800a4b8:	40010000 	.word	0x40010000
 800a4bc:	40010400 	.word	0x40010400

0800a4c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b087      	sub	sp, #28
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a1b      	ldr	r3, [r3, #32]
 800a4ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6a1b      	ldr	r3, [r3, #32]
 800a4da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	69db      	ldr	r3, [r3, #28]
 800a4e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	021b      	lsls	r3, r3, #8
 800a4fe:	68fa      	ldr	r2, [r7, #12]
 800a500:	4313      	orrs	r3, r2
 800a502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a50a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	031b      	lsls	r3, r3, #12
 800a512:	693a      	ldr	r2, [r7, #16]
 800a514:	4313      	orrs	r3, r2
 800a516:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	4a12      	ldr	r2, [pc, #72]	; (800a564 <TIM_OC4_SetConfig+0xa4>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d003      	beq.n	800a528 <TIM_OC4_SetConfig+0x68>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	4a11      	ldr	r2, [pc, #68]	; (800a568 <TIM_OC4_SetConfig+0xa8>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d109      	bne.n	800a53c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a52e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	695b      	ldr	r3, [r3, #20]
 800a534:	019b      	lsls	r3, r3, #6
 800a536:	697a      	ldr	r2, [r7, #20]
 800a538:	4313      	orrs	r3, r2
 800a53a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	697a      	ldr	r2, [r7, #20]
 800a540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	68fa      	ldr	r2, [r7, #12]
 800a546:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	685a      	ldr	r2, [r3, #4]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	693a      	ldr	r2, [r7, #16]
 800a554:	621a      	str	r2, [r3, #32]
}
 800a556:	bf00      	nop
 800a558:	371c      	adds	r7, #28
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr
 800a562:	bf00      	nop
 800a564:	40010000 	.word	0x40010000
 800a568:	40010400 	.word	0x40010400

0800a56c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b087      	sub	sp, #28
 800a570:	af00      	add	r7, sp, #0
 800a572:	60f8      	str	r0, [r7, #12]
 800a574:	60b9      	str	r1, [r7, #8]
 800a576:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	6a1b      	ldr	r3, [r3, #32]
 800a57c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	6a1b      	ldr	r3, [r3, #32]
 800a582:	f023 0201 	bic.w	r2, r3, #1
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	699b      	ldr	r3, [r3, #24]
 800a58e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a596:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	011b      	lsls	r3, r3, #4
 800a59c:	693a      	ldr	r2, [r7, #16]
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	f023 030a 	bic.w	r3, r3, #10
 800a5a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a5aa:	697a      	ldr	r2, [r7, #20]
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	693a      	ldr	r2, [r7, #16]
 800a5b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	697a      	ldr	r2, [r7, #20]
 800a5bc:	621a      	str	r2, [r3, #32]
}
 800a5be:	bf00      	nop
 800a5c0:	371c      	adds	r7, #28
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr

0800a5ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5ca:	b480      	push	{r7}
 800a5cc:	b087      	sub	sp, #28
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	60f8      	str	r0, [r7, #12]
 800a5d2:	60b9      	str	r1, [r7, #8]
 800a5d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	6a1b      	ldr	r3, [r3, #32]
 800a5da:	f023 0210 	bic.w	r2, r3, #16
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	699b      	ldr	r3, [r3, #24]
 800a5e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	6a1b      	ldr	r3, [r3, #32]
 800a5ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a5f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	031b      	lsls	r3, r3, #12
 800a5fa:	697a      	ldr	r2, [r7, #20]
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a606:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	011b      	lsls	r3, r3, #4
 800a60c:	693a      	ldr	r2, [r7, #16]
 800a60e:	4313      	orrs	r3, r2
 800a610:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	697a      	ldr	r2, [r7, #20]
 800a616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	693a      	ldr	r2, [r7, #16]
 800a61c:	621a      	str	r2, [r3, #32]
}
 800a61e:	bf00      	nop
 800a620:	371c      	adds	r7, #28
 800a622:	46bd      	mov	sp, r7
 800a624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a628:	4770      	bx	lr

0800a62a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a62a:	b480      	push	{r7}
 800a62c:	b085      	sub	sp, #20
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
 800a632:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	689b      	ldr	r3, [r3, #8]
 800a638:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a640:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a642:	683a      	ldr	r2, [r7, #0]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	4313      	orrs	r3, r2
 800a648:	f043 0307 	orr.w	r3, r3, #7
 800a64c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	68fa      	ldr	r2, [r7, #12]
 800a652:	609a      	str	r2, [r3, #8]
}
 800a654:	bf00      	nop
 800a656:	3714      	adds	r7, #20
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr

0800a660 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a660:	b480      	push	{r7}
 800a662:	b087      	sub	sp, #28
 800a664:	af00      	add	r7, sp, #0
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	607a      	str	r2, [r7, #4]
 800a66c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	689b      	ldr	r3, [r3, #8]
 800a672:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a67a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	021a      	lsls	r2, r3, #8
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	431a      	orrs	r2, r3
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	4313      	orrs	r3, r2
 800a688:	697a      	ldr	r2, [r7, #20]
 800a68a:	4313      	orrs	r3, r2
 800a68c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	697a      	ldr	r2, [r7, #20]
 800a692:	609a      	str	r2, [r3, #8]
}
 800a694:	bf00      	nop
 800a696:	371c      	adds	r7, #28
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr

0800a6a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b087      	sub	sp, #28
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	f003 031f 	and.w	r3, r3, #31
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a6b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	6a1a      	ldr	r2, [r3, #32]
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	43db      	mvns	r3, r3
 800a6c2:	401a      	ands	r2, r3
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6a1a      	ldr	r2, [r3, #32]
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	f003 031f 	and.w	r3, r3, #31
 800a6d2:	6879      	ldr	r1, [r7, #4]
 800a6d4:	fa01 f303 	lsl.w	r3, r1, r3
 800a6d8:	431a      	orrs	r2, r3
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	621a      	str	r2, [r3, #32]
}
 800a6de:	bf00      	nop
 800a6e0:	371c      	adds	r7, #28
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr
	...

0800a6ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b085      	sub	sp, #20
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d101      	bne.n	800a704 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a700:	2302      	movs	r3, #2
 800a702:	e05a      	b.n	800a7ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2201      	movs	r2, #1
 800a708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2202      	movs	r2, #2
 800a710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	689b      	ldr	r3, [r3, #8]
 800a722:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a72a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	68fa      	ldr	r2, [r7, #12]
 800a732:	4313      	orrs	r3, r2
 800a734:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	68fa      	ldr	r2, [r7, #12]
 800a73c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	4a21      	ldr	r2, [pc, #132]	; (800a7c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d022      	beq.n	800a78e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a750:	d01d      	beq.n	800a78e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4a1d      	ldr	r2, [pc, #116]	; (800a7cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d018      	beq.n	800a78e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a1b      	ldr	r2, [pc, #108]	; (800a7d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d013      	beq.n	800a78e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4a1a      	ldr	r2, [pc, #104]	; (800a7d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d00e      	beq.n	800a78e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a18      	ldr	r2, [pc, #96]	; (800a7d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d009      	beq.n	800a78e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4a17      	ldr	r2, [pc, #92]	; (800a7dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d004      	beq.n	800a78e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a15      	ldr	r2, [pc, #84]	; (800a7e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d10c      	bne.n	800a7a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a794:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	68ba      	ldr	r2, [r7, #8]
 800a79c:	4313      	orrs	r3, r2
 800a79e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	68ba      	ldr	r2, [r7, #8]
 800a7a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a7b8:	2300      	movs	r3, #0
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3714      	adds	r7, #20
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr
 800a7c6:	bf00      	nop
 800a7c8:	40010000 	.word	0x40010000
 800a7cc:	40000400 	.word	0x40000400
 800a7d0:	40000800 	.word	0x40000800
 800a7d4:	40000c00 	.word	0x40000c00
 800a7d8:	40010400 	.word	0x40010400
 800a7dc:	40014000 	.word	0x40014000
 800a7e0:	40001800 	.word	0x40001800

0800a7e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b085      	sub	sp, #20
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d101      	bne.n	800a800 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a7fc:	2302      	movs	r3, #2
 800a7fe:	e03d      	b.n	800a87c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2201      	movs	r2, #1
 800a804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	68db      	ldr	r3, [r3, #12]
 800a812:	4313      	orrs	r3, r2
 800a814:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	689b      	ldr	r3, [r3, #8]
 800a820:	4313      	orrs	r3, r2
 800a822:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	4313      	orrs	r3, r2
 800a830:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4313      	orrs	r3, r2
 800a83e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	691b      	ldr	r3, [r3, #16]
 800a84a:	4313      	orrs	r3, r2
 800a84c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	695b      	ldr	r3, [r3, #20]
 800a858:	4313      	orrs	r3, r2
 800a85a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	69db      	ldr	r3, [r3, #28]
 800a866:	4313      	orrs	r3, r2
 800a868:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	68fa      	ldr	r2, [r7, #12]
 800a870:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2200      	movs	r2, #0
 800a876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a87a:	2300      	movs	r3, #0
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3714      	adds	r7, #20
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr

0800a888 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a888:	b480      	push	{r7}
 800a88a:	b083      	sub	sp, #12
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a890:	bf00      	nop
 800a892:	370c      	adds	r7, #12
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr

0800a89c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a8a4:	bf00      	nop
 800a8a6:	370c      	adds	r7, #12
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr

0800a8b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d101      	bne.n	800a8c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e03f      	b.n	800a942 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d106      	bne.n	800a8dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f7f9 fbba 	bl	8004050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2224      	movs	r2, #36	; 0x24
 800a8e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	68da      	ldr	r2, [r3, #12]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a8f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f000 f829 	bl	800a94c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	691a      	ldr	r2, [r3, #16]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a908:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	695a      	ldr	r2, [r3, #20]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a918:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	68da      	ldr	r2, [r3, #12]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a928:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2200      	movs	r2, #0
 800a92e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2220      	movs	r2, #32
 800a934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2220      	movs	r2, #32
 800a93c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a940:	2300      	movs	r3, #0
}
 800a942:	4618      	mov	r0, r3
 800a944:	3708      	adds	r7, #8
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}
	...

0800a94c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a94c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a950:	b0c0      	sub	sp, #256	; 0x100
 800a952:	af00      	add	r7, sp, #0
 800a954:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	691b      	ldr	r3, [r3, #16]
 800a960:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a968:	68d9      	ldr	r1, [r3, #12]
 800a96a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	ea40 0301 	orr.w	r3, r0, r1
 800a974:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a97a:	689a      	ldr	r2, [r3, #8]
 800a97c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a980:	691b      	ldr	r3, [r3, #16]
 800a982:	431a      	orrs	r2, r3
 800a984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a988:	695b      	ldr	r3, [r3, #20]
 800a98a:	431a      	orrs	r2, r3
 800a98c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a990:	69db      	ldr	r3, [r3, #28]
 800a992:	4313      	orrs	r3, r2
 800a994:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	68db      	ldr	r3, [r3, #12]
 800a9a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a9a4:	f021 010c 	bic.w	r1, r1, #12
 800a9a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9ac:	681a      	ldr	r2, [r3, #0]
 800a9ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a9b2:	430b      	orrs	r3, r1
 800a9b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a9b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	695b      	ldr	r3, [r3, #20]
 800a9be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a9c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9c6:	6999      	ldr	r1, [r3, #24]
 800a9c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9cc:	681a      	ldr	r2, [r3, #0]
 800a9ce:	ea40 0301 	orr.w	r3, r0, r1
 800a9d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a9d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9d8:	681a      	ldr	r2, [r3, #0]
 800a9da:	4b8f      	ldr	r3, [pc, #572]	; (800ac18 <UART_SetConfig+0x2cc>)
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d005      	beq.n	800a9ec <UART_SetConfig+0xa0>
 800a9e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9e4:	681a      	ldr	r2, [r3, #0]
 800a9e6:	4b8d      	ldr	r3, [pc, #564]	; (800ac1c <UART_SetConfig+0x2d0>)
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d104      	bne.n	800a9f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a9ec:	f7fd fba6 	bl	800813c <HAL_RCC_GetPCLK2Freq>
 800a9f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a9f4:	e003      	b.n	800a9fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a9f6:	f7fd fb8d 	bl	8008114 <HAL_RCC_GetPCLK1Freq>
 800a9fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a9fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa02:	69db      	ldr	r3, [r3, #28]
 800aa04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa08:	f040 810c 	bne.w	800ac24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800aa0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa10:	2200      	movs	r2, #0
 800aa12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aa16:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800aa1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800aa1e:	4622      	mov	r2, r4
 800aa20:	462b      	mov	r3, r5
 800aa22:	1891      	adds	r1, r2, r2
 800aa24:	65b9      	str	r1, [r7, #88]	; 0x58
 800aa26:	415b      	adcs	r3, r3
 800aa28:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800aa2e:	4621      	mov	r1, r4
 800aa30:	eb12 0801 	adds.w	r8, r2, r1
 800aa34:	4629      	mov	r1, r5
 800aa36:	eb43 0901 	adc.w	r9, r3, r1
 800aa3a:	f04f 0200 	mov.w	r2, #0
 800aa3e:	f04f 0300 	mov.w	r3, #0
 800aa42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800aa46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800aa4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800aa4e:	4690      	mov	r8, r2
 800aa50:	4699      	mov	r9, r3
 800aa52:	4623      	mov	r3, r4
 800aa54:	eb18 0303 	adds.w	r3, r8, r3
 800aa58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aa5c:	462b      	mov	r3, r5
 800aa5e:	eb49 0303 	adc.w	r3, r9, r3
 800aa62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aa66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aa72:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800aa76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800aa7a:	460b      	mov	r3, r1
 800aa7c:	18db      	adds	r3, r3, r3
 800aa7e:	653b      	str	r3, [r7, #80]	; 0x50
 800aa80:	4613      	mov	r3, r2
 800aa82:	eb42 0303 	adc.w	r3, r2, r3
 800aa86:	657b      	str	r3, [r7, #84]	; 0x54
 800aa88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800aa8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800aa90:	f7f5 fc76 	bl	8000380 <__aeabi_uldivmod>
 800aa94:	4602      	mov	r2, r0
 800aa96:	460b      	mov	r3, r1
 800aa98:	4b61      	ldr	r3, [pc, #388]	; (800ac20 <UART_SetConfig+0x2d4>)
 800aa9a:	fba3 2302 	umull	r2, r3, r3, r2
 800aa9e:	095b      	lsrs	r3, r3, #5
 800aaa0:	011c      	lsls	r4, r3, #4
 800aaa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aaac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800aab0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800aab4:	4642      	mov	r2, r8
 800aab6:	464b      	mov	r3, r9
 800aab8:	1891      	adds	r1, r2, r2
 800aaba:	64b9      	str	r1, [r7, #72]	; 0x48
 800aabc:	415b      	adcs	r3, r3
 800aabe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aac0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800aac4:	4641      	mov	r1, r8
 800aac6:	eb12 0a01 	adds.w	sl, r2, r1
 800aaca:	4649      	mov	r1, r9
 800aacc:	eb43 0b01 	adc.w	fp, r3, r1
 800aad0:	f04f 0200 	mov.w	r2, #0
 800aad4:	f04f 0300 	mov.w	r3, #0
 800aad8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800aadc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800aae0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aae4:	4692      	mov	sl, r2
 800aae6:	469b      	mov	fp, r3
 800aae8:	4643      	mov	r3, r8
 800aaea:	eb1a 0303 	adds.w	r3, sl, r3
 800aaee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aaf2:	464b      	mov	r3, r9
 800aaf4:	eb4b 0303 	adc.w	r3, fp, r3
 800aaf8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aafc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	2200      	movs	r2, #0
 800ab04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ab08:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ab0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ab10:	460b      	mov	r3, r1
 800ab12:	18db      	adds	r3, r3, r3
 800ab14:	643b      	str	r3, [r7, #64]	; 0x40
 800ab16:	4613      	mov	r3, r2
 800ab18:	eb42 0303 	adc.w	r3, r2, r3
 800ab1c:	647b      	str	r3, [r7, #68]	; 0x44
 800ab1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ab22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ab26:	f7f5 fc2b 	bl	8000380 <__aeabi_uldivmod>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	4611      	mov	r1, r2
 800ab30:	4b3b      	ldr	r3, [pc, #236]	; (800ac20 <UART_SetConfig+0x2d4>)
 800ab32:	fba3 2301 	umull	r2, r3, r3, r1
 800ab36:	095b      	lsrs	r3, r3, #5
 800ab38:	2264      	movs	r2, #100	; 0x64
 800ab3a:	fb02 f303 	mul.w	r3, r2, r3
 800ab3e:	1acb      	subs	r3, r1, r3
 800ab40:	00db      	lsls	r3, r3, #3
 800ab42:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ab46:	4b36      	ldr	r3, [pc, #216]	; (800ac20 <UART_SetConfig+0x2d4>)
 800ab48:	fba3 2302 	umull	r2, r3, r3, r2
 800ab4c:	095b      	lsrs	r3, r3, #5
 800ab4e:	005b      	lsls	r3, r3, #1
 800ab50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ab54:	441c      	add	r4, r3
 800ab56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ab60:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ab64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ab68:	4642      	mov	r2, r8
 800ab6a:	464b      	mov	r3, r9
 800ab6c:	1891      	adds	r1, r2, r2
 800ab6e:	63b9      	str	r1, [r7, #56]	; 0x38
 800ab70:	415b      	adcs	r3, r3
 800ab72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ab78:	4641      	mov	r1, r8
 800ab7a:	1851      	adds	r1, r2, r1
 800ab7c:	6339      	str	r1, [r7, #48]	; 0x30
 800ab7e:	4649      	mov	r1, r9
 800ab80:	414b      	adcs	r3, r1
 800ab82:	637b      	str	r3, [r7, #52]	; 0x34
 800ab84:	f04f 0200 	mov.w	r2, #0
 800ab88:	f04f 0300 	mov.w	r3, #0
 800ab8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ab90:	4659      	mov	r1, fp
 800ab92:	00cb      	lsls	r3, r1, #3
 800ab94:	4651      	mov	r1, sl
 800ab96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ab9a:	4651      	mov	r1, sl
 800ab9c:	00ca      	lsls	r2, r1, #3
 800ab9e:	4610      	mov	r0, r2
 800aba0:	4619      	mov	r1, r3
 800aba2:	4603      	mov	r3, r0
 800aba4:	4642      	mov	r2, r8
 800aba6:	189b      	adds	r3, r3, r2
 800aba8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800abac:	464b      	mov	r3, r9
 800abae:	460a      	mov	r2, r1
 800abb0:	eb42 0303 	adc.w	r3, r2, r3
 800abb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800abb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	2200      	movs	r2, #0
 800abc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800abc4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800abc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800abcc:	460b      	mov	r3, r1
 800abce:	18db      	adds	r3, r3, r3
 800abd0:	62bb      	str	r3, [r7, #40]	; 0x28
 800abd2:	4613      	mov	r3, r2
 800abd4:	eb42 0303 	adc.w	r3, r2, r3
 800abd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800abda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800abde:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800abe2:	f7f5 fbcd 	bl	8000380 <__aeabi_uldivmod>
 800abe6:	4602      	mov	r2, r0
 800abe8:	460b      	mov	r3, r1
 800abea:	4b0d      	ldr	r3, [pc, #52]	; (800ac20 <UART_SetConfig+0x2d4>)
 800abec:	fba3 1302 	umull	r1, r3, r3, r2
 800abf0:	095b      	lsrs	r3, r3, #5
 800abf2:	2164      	movs	r1, #100	; 0x64
 800abf4:	fb01 f303 	mul.w	r3, r1, r3
 800abf8:	1ad3      	subs	r3, r2, r3
 800abfa:	00db      	lsls	r3, r3, #3
 800abfc:	3332      	adds	r3, #50	; 0x32
 800abfe:	4a08      	ldr	r2, [pc, #32]	; (800ac20 <UART_SetConfig+0x2d4>)
 800ac00:	fba2 2303 	umull	r2, r3, r2, r3
 800ac04:	095b      	lsrs	r3, r3, #5
 800ac06:	f003 0207 	and.w	r2, r3, #7
 800ac0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4422      	add	r2, r4
 800ac12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ac14:	e105      	b.n	800ae22 <UART_SetConfig+0x4d6>
 800ac16:	bf00      	nop
 800ac18:	40011000 	.word	0x40011000
 800ac1c:	40011400 	.word	0x40011400
 800ac20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ac24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ac2e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ac32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ac36:	4642      	mov	r2, r8
 800ac38:	464b      	mov	r3, r9
 800ac3a:	1891      	adds	r1, r2, r2
 800ac3c:	6239      	str	r1, [r7, #32]
 800ac3e:	415b      	adcs	r3, r3
 800ac40:	627b      	str	r3, [r7, #36]	; 0x24
 800ac42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ac46:	4641      	mov	r1, r8
 800ac48:	1854      	adds	r4, r2, r1
 800ac4a:	4649      	mov	r1, r9
 800ac4c:	eb43 0501 	adc.w	r5, r3, r1
 800ac50:	f04f 0200 	mov.w	r2, #0
 800ac54:	f04f 0300 	mov.w	r3, #0
 800ac58:	00eb      	lsls	r3, r5, #3
 800ac5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ac5e:	00e2      	lsls	r2, r4, #3
 800ac60:	4614      	mov	r4, r2
 800ac62:	461d      	mov	r5, r3
 800ac64:	4643      	mov	r3, r8
 800ac66:	18e3      	adds	r3, r4, r3
 800ac68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ac6c:	464b      	mov	r3, r9
 800ac6e:	eb45 0303 	adc.w	r3, r5, r3
 800ac72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ac76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ac82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ac86:	f04f 0200 	mov.w	r2, #0
 800ac8a:	f04f 0300 	mov.w	r3, #0
 800ac8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ac92:	4629      	mov	r1, r5
 800ac94:	008b      	lsls	r3, r1, #2
 800ac96:	4621      	mov	r1, r4
 800ac98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ac9c:	4621      	mov	r1, r4
 800ac9e:	008a      	lsls	r2, r1, #2
 800aca0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800aca4:	f7f5 fb6c 	bl	8000380 <__aeabi_uldivmod>
 800aca8:	4602      	mov	r2, r0
 800acaa:	460b      	mov	r3, r1
 800acac:	4b60      	ldr	r3, [pc, #384]	; (800ae30 <UART_SetConfig+0x4e4>)
 800acae:	fba3 2302 	umull	r2, r3, r3, r2
 800acb2:	095b      	lsrs	r3, r3, #5
 800acb4:	011c      	lsls	r4, r3, #4
 800acb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800acba:	2200      	movs	r2, #0
 800acbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800acc0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800acc4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800acc8:	4642      	mov	r2, r8
 800acca:	464b      	mov	r3, r9
 800accc:	1891      	adds	r1, r2, r2
 800acce:	61b9      	str	r1, [r7, #24]
 800acd0:	415b      	adcs	r3, r3
 800acd2:	61fb      	str	r3, [r7, #28]
 800acd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800acd8:	4641      	mov	r1, r8
 800acda:	1851      	adds	r1, r2, r1
 800acdc:	6139      	str	r1, [r7, #16]
 800acde:	4649      	mov	r1, r9
 800ace0:	414b      	adcs	r3, r1
 800ace2:	617b      	str	r3, [r7, #20]
 800ace4:	f04f 0200 	mov.w	r2, #0
 800ace8:	f04f 0300 	mov.w	r3, #0
 800acec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800acf0:	4659      	mov	r1, fp
 800acf2:	00cb      	lsls	r3, r1, #3
 800acf4:	4651      	mov	r1, sl
 800acf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800acfa:	4651      	mov	r1, sl
 800acfc:	00ca      	lsls	r2, r1, #3
 800acfe:	4610      	mov	r0, r2
 800ad00:	4619      	mov	r1, r3
 800ad02:	4603      	mov	r3, r0
 800ad04:	4642      	mov	r2, r8
 800ad06:	189b      	adds	r3, r3, r2
 800ad08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ad0c:	464b      	mov	r3, r9
 800ad0e:	460a      	mov	r2, r1
 800ad10:	eb42 0303 	adc.w	r3, r2, r3
 800ad14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ad18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	67bb      	str	r3, [r7, #120]	; 0x78
 800ad22:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ad24:	f04f 0200 	mov.w	r2, #0
 800ad28:	f04f 0300 	mov.w	r3, #0
 800ad2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ad30:	4649      	mov	r1, r9
 800ad32:	008b      	lsls	r3, r1, #2
 800ad34:	4641      	mov	r1, r8
 800ad36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ad3a:	4641      	mov	r1, r8
 800ad3c:	008a      	lsls	r2, r1, #2
 800ad3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ad42:	f7f5 fb1d 	bl	8000380 <__aeabi_uldivmod>
 800ad46:	4602      	mov	r2, r0
 800ad48:	460b      	mov	r3, r1
 800ad4a:	4b39      	ldr	r3, [pc, #228]	; (800ae30 <UART_SetConfig+0x4e4>)
 800ad4c:	fba3 1302 	umull	r1, r3, r3, r2
 800ad50:	095b      	lsrs	r3, r3, #5
 800ad52:	2164      	movs	r1, #100	; 0x64
 800ad54:	fb01 f303 	mul.w	r3, r1, r3
 800ad58:	1ad3      	subs	r3, r2, r3
 800ad5a:	011b      	lsls	r3, r3, #4
 800ad5c:	3332      	adds	r3, #50	; 0x32
 800ad5e:	4a34      	ldr	r2, [pc, #208]	; (800ae30 <UART_SetConfig+0x4e4>)
 800ad60:	fba2 2303 	umull	r2, r3, r2, r3
 800ad64:	095b      	lsrs	r3, r3, #5
 800ad66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad6a:	441c      	add	r4, r3
 800ad6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad70:	2200      	movs	r2, #0
 800ad72:	673b      	str	r3, [r7, #112]	; 0x70
 800ad74:	677a      	str	r2, [r7, #116]	; 0x74
 800ad76:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ad7a:	4642      	mov	r2, r8
 800ad7c:	464b      	mov	r3, r9
 800ad7e:	1891      	adds	r1, r2, r2
 800ad80:	60b9      	str	r1, [r7, #8]
 800ad82:	415b      	adcs	r3, r3
 800ad84:	60fb      	str	r3, [r7, #12]
 800ad86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ad8a:	4641      	mov	r1, r8
 800ad8c:	1851      	adds	r1, r2, r1
 800ad8e:	6039      	str	r1, [r7, #0]
 800ad90:	4649      	mov	r1, r9
 800ad92:	414b      	adcs	r3, r1
 800ad94:	607b      	str	r3, [r7, #4]
 800ad96:	f04f 0200 	mov.w	r2, #0
 800ad9a:	f04f 0300 	mov.w	r3, #0
 800ad9e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ada2:	4659      	mov	r1, fp
 800ada4:	00cb      	lsls	r3, r1, #3
 800ada6:	4651      	mov	r1, sl
 800ada8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800adac:	4651      	mov	r1, sl
 800adae:	00ca      	lsls	r2, r1, #3
 800adb0:	4610      	mov	r0, r2
 800adb2:	4619      	mov	r1, r3
 800adb4:	4603      	mov	r3, r0
 800adb6:	4642      	mov	r2, r8
 800adb8:	189b      	adds	r3, r3, r2
 800adba:	66bb      	str	r3, [r7, #104]	; 0x68
 800adbc:	464b      	mov	r3, r9
 800adbe:	460a      	mov	r2, r1
 800adc0:	eb42 0303 	adc.w	r3, r2, r3
 800adc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800adc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	2200      	movs	r2, #0
 800adce:	663b      	str	r3, [r7, #96]	; 0x60
 800add0:	667a      	str	r2, [r7, #100]	; 0x64
 800add2:	f04f 0200 	mov.w	r2, #0
 800add6:	f04f 0300 	mov.w	r3, #0
 800adda:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800adde:	4649      	mov	r1, r9
 800ade0:	008b      	lsls	r3, r1, #2
 800ade2:	4641      	mov	r1, r8
 800ade4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ade8:	4641      	mov	r1, r8
 800adea:	008a      	lsls	r2, r1, #2
 800adec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800adf0:	f7f5 fac6 	bl	8000380 <__aeabi_uldivmod>
 800adf4:	4602      	mov	r2, r0
 800adf6:	460b      	mov	r3, r1
 800adf8:	4b0d      	ldr	r3, [pc, #52]	; (800ae30 <UART_SetConfig+0x4e4>)
 800adfa:	fba3 1302 	umull	r1, r3, r3, r2
 800adfe:	095b      	lsrs	r3, r3, #5
 800ae00:	2164      	movs	r1, #100	; 0x64
 800ae02:	fb01 f303 	mul.w	r3, r1, r3
 800ae06:	1ad3      	subs	r3, r2, r3
 800ae08:	011b      	lsls	r3, r3, #4
 800ae0a:	3332      	adds	r3, #50	; 0x32
 800ae0c:	4a08      	ldr	r2, [pc, #32]	; (800ae30 <UART_SetConfig+0x4e4>)
 800ae0e:	fba2 2303 	umull	r2, r3, r2, r3
 800ae12:	095b      	lsrs	r3, r3, #5
 800ae14:	f003 020f 	and.w	r2, r3, #15
 800ae18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4422      	add	r2, r4
 800ae20:	609a      	str	r2, [r3, #8]
}
 800ae22:	bf00      	nop
 800ae24:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ae2e:	bf00      	nop
 800ae30:	51eb851f 	.word	0x51eb851f

0800ae34 <__errno>:
 800ae34:	4b01      	ldr	r3, [pc, #4]	; (800ae3c <__errno+0x8>)
 800ae36:	6818      	ldr	r0, [r3, #0]
 800ae38:	4770      	bx	lr
 800ae3a:	bf00      	nop
 800ae3c:	20000150 	.word	0x20000150

0800ae40 <__libc_init_array>:
 800ae40:	b570      	push	{r4, r5, r6, lr}
 800ae42:	4d0d      	ldr	r5, [pc, #52]	; (800ae78 <__libc_init_array+0x38>)
 800ae44:	4c0d      	ldr	r4, [pc, #52]	; (800ae7c <__libc_init_array+0x3c>)
 800ae46:	1b64      	subs	r4, r4, r5
 800ae48:	10a4      	asrs	r4, r4, #2
 800ae4a:	2600      	movs	r6, #0
 800ae4c:	42a6      	cmp	r6, r4
 800ae4e:	d109      	bne.n	800ae64 <__libc_init_array+0x24>
 800ae50:	4d0b      	ldr	r5, [pc, #44]	; (800ae80 <__libc_init_array+0x40>)
 800ae52:	4c0c      	ldr	r4, [pc, #48]	; (800ae84 <__libc_init_array+0x44>)
 800ae54:	f002 f99c 	bl	800d190 <_init>
 800ae58:	1b64      	subs	r4, r4, r5
 800ae5a:	10a4      	asrs	r4, r4, #2
 800ae5c:	2600      	movs	r6, #0
 800ae5e:	42a6      	cmp	r6, r4
 800ae60:	d105      	bne.n	800ae6e <__libc_init_array+0x2e>
 800ae62:	bd70      	pop	{r4, r5, r6, pc}
 800ae64:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae68:	4798      	blx	r3
 800ae6a:	3601      	adds	r6, #1
 800ae6c:	e7ee      	b.n	800ae4c <__libc_init_array+0xc>
 800ae6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae72:	4798      	blx	r3
 800ae74:	3601      	adds	r6, #1
 800ae76:	e7f2      	b.n	800ae5e <__libc_init_array+0x1e>
 800ae78:	0800d4d4 	.word	0x0800d4d4
 800ae7c:	0800d4d4 	.word	0x0800d4d4
 800ae80:	0800d4d4 	.word	0x0800d4d4
 800ae84:	0800d4d8 	.word	0x0800d4d8

0800ae88 <localtime>:
 800ae88:	b538      	push	{r3, r4, r5, lr}
 800ae8a:	4b0b      	ldr	r3, [pc, #44]	; (800aeb8 <localtime+0x30>)
 800ae8c:	681d      	ldr	r5, [r3, #0]
 800ae8e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800ae90:	4604      	mov	r4, r0
 800ae92:	b953      	cbnz	r3, 800aeaa <localtime+0x22>
 800ae94:	2024      	movs	r0, #36	; 0x24
 800ae96:	f000 f909 	bl	800b0ac <malloc>
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	63e8      	str	r0, [r5, #60]	; 0x3c
 800ae9e:	b920      	cbnz	r0, 800aeaa <localtime+0x22>
 800aea0:	4b06      	ldr	r3, [pc, #24]	; (800aebc <localtime+0x34>)
 800aea2:	4807      	ldr	r0, [pc, #28]	; (800aec0 <localtime+0x38>)
 800aea4:	2132      	movs	r1, #50	; 0x32
 800aea6:	f000 fc53 	bl	800b750 <__assert_func>
 800aeaa:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800aeac:	4620      	mov	r0, r4
 800aeae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aeb2:	f000 b807 	b.w	800aec4 <localtime_r>
 800aeb6:	bf00      	nop
 800aeb8:	20000150 	.word	0x20000150
 800aebc:	0800d1d0 	.word	0x0800d1d0
 800aec0:	0800d1e7 	.word	0x0800d1e7

0800aec4 <localtime_r>:
 800aec4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800aec8:	4680      	mov	r8, r0
 800aeca:	9101      	str	r1, [sp, #4]
 800aecc:	f000 fcb4 	bl	800b838 <__gettzinfo>
 800aed0:	9901      	ldr	r1, [sp, #4]
 800aed2:	4605      	mov	r5, r0
 800aed4:	4640      	mov	r0, r8
 800aed6:	f000 fcb3 	bl	800b840 <gmtime_r>
 800aeda:	6943      	ldr	r3, [r0, #20]
 800aedc:	0799      	lsls	r1, r3, #30
 800aede:	4604      	mov	r4, r0
 800aee0:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 800aee4:	d105      	bne.n	800aef2 <localtime_r+0x2e>
 800aee6:	2264      	movs	r2, #100	; 0x64
 800aee8:	fb97 f3f2 	sdiv	r3, r7, r2
 800aeec:	fb02 7313 	mls	r3, r2, r3, r7
 800aef0:	bb73      	cbnz	r3, 800af50 <localtime_r+0x8c>
 800aef2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800aef6:	fb97 f6f3 	sdiv	r6, r7, r3
 800aefa:	fb03 7616 	mls	r6, r3, r6, r7
 800aefe:	fab6 f386 	clz	r3, r6
 800af02:	095b      	lsrs	r3, r3, #5
 800af04:	4e67      	ldr	r6, [pc, #412]	; (800b0a4 <localtime_r+0x1e0>)
 800af06:	2230      	movs	r2, #48	; 0x30
 800af08:	fb02 6603 	mla	r6, r2, r3, r6
 800af0c:	f000 fa8e 	bl	800b42c <__tz_lock>
 800af10:	f000 fa98 	bl	800b444 <_tzset_unlocked>
 800af14:	4b64      	ldr	r3, [pc, #400]	; (800b0a8 <localtime_r+0x1e4>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	b34b      	cbz	r3, 800af6e <localtime_r+0xaa>
 800af1a:	686b      	ldr	r3, [r5, #4]
 800af1c:	42bb      	cmp	r3, r7
 800af1e:	d119      	bne.n	800af54 <localtime_r+0x90>
 800af20:	682f      	ldr	r7, [r5, #0]
 800af22:	e9d8 2300 	ldrd	r2, r3, [r8]
 800af26:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 800af2a:	b9df      	cbnz	r7, 800af64 <localtime_r+0xa0>
 800af2c:	4282      	cmp	r2, r0
 800af2e:	eb73 0101 	sbcs.w	r1, r3, r1
 800af32:	da23      	bge.n	800af7c <localtime_r+0xb8>
 800af34:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 800af38:	4282      	cmp	r2, r0
 800af3a:	eb73 0701 	sbcs.w	r7, r3, r1
 800af3e:	bfb4      	ite	lt
 800af40:	2701      	movlt	r7, #1
 800af42:	2700      	movge	r7, #0
 800af44:	4282      	cmp	r2, r0
 800af46:	418b      	sbcs	r3, r1
 800af48:	6227      	str	r7, [r4, #32]
 800af4a:	db19      	blt.n	800af80 <localtime_r+0xbc>
 800af4c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800af4e:	e018      	b.n	800af82 <localtime_r+0xbe>
 800af50:	2301      	movs	r3, #1
 800af52:	e7d7      	b.n	800af04 <localtime_r+0x40>
 800af54:	4638      	mov	r0, r7
 800af56:	f000 f9bf 	bl	800b2d8 <__tzcalc_limits>
 800af5a:	2800      	cmp	r0, #0
 800af5c:	d1e0      	bne.n	800af20 <localtime_r+0x5c>
 800af5e:	f04f 33ff 	mov.w	r3, #4294967295
 800af62:	e004      	b.n	800af6e <localtime_r+0xaa>
 800af64:	4282      	cmp	r2, r0
 800af66:	eb73 0101 	sbcs.w	r1, r3, r1
 800af6a:	da02      	bge.n	800af72 <localtime_r+0xae>
 800af6c:	2300      	movs	r3, #0
 800af6e:	6223      	str	r3, [r4, #32]
 800af70:	e7ec      	b.n	800af4c <localtime_r+0x88>
 800af72:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 800af76:	4282      	cmp	r2, r0
 800af78:	418b      	sbcs	r3, r1
 800af7a:	daf7      	bge.n	800af6c <localtime_r+0xa8>
 800af7c:	2301      	movs	r3, #1
 800af7e:	6223      	str	r3, [r4, #32]
 800af80:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800af82:	6861      	ldr	r1, [r4, #4]
 800af84:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800af88:	203c      	movs	r0, #60	; 0x3c
 800af8a:	fb93 f5f2 	sdiv	r5, r3, r2
 800af8e:	fb02 3315 	mls	r3, r2, r5, r3
 800af92:	fb93 f2f0 	sdiv	r2, r3, r0
 800af96:	fb00 3012 	mls	r0, r0, r2, r3
 800af9a:	6823      	ldr	r3, [r4, #0]
 800af9c:	1a89      	subs	r1, r1, r2
 800af9e:	68a2      	ldr	r2, [r4, #8]
 800afa0:	6061      	str	r1, [r4, #4]
 800afa2:	1a1b      	subs	r3, r3, r0
 800afa4:	1b52      	subs	r2, r2, r5
 800afa6:	2b3b      	cmp	r3, #59	; 0x3b
 800afa8:	6023      	str	r3, [r4, #0]
 800afaa:	60a2      	str	r2, [r4, #8]
 800afac:	dd35      	ble.n	800b01a <localtime_r+0x156>
 800afae:	3101      	adds	r1, #1
 800afb0:	6061      	str	r1, [r4, #4]
 800afb2:	3b3c      	subs	r3, #60	; 0x3c
 800afb4:	6023      	str	r3, [r4, #0]
 800afb6:	6863      	ldr	r3, [r4, #4]
 800afb8:	2b3b      	cmp	r3, #59	; 0x3b
 800afba:	dd34      	ble.n	800b026 <localtime_r+0x162>
 800afbc:	3201      	adds	r2, #1
 800afbe:	60a2      	str	r2, [r4, #8]
 800afc0:	3b3c      	subs	r3, #60	; 0x3c
 800afc2:	6063      	str	r3, [r4, #4]
 800afc4:	68a3      	ldr	r3, [r4, #8]
 800afc6:	2b17      	cmp	r3, #23
 800afc8:	dd33      	ble.n	800b032 <localtime_r+0x16e>
 800afca:	69e2      	ldr	r2, [r4, #28]
 800afcc:	3201      	adds	r2, #1
 800afce:	61e2      	str	r2, [r4, #28]
 800afd0:	69a2      	ldr	r2, [r4, #24]
 800afd2:	3201      	adds	r2, #1
 800afd4:	2a06      	cmp	r2, #6
 800afd6:	bfc8      	it	gt
 800afd8:	2200      	movgt	r2, #0
 800afda:	61a2      	str	r2, [r4, #24]
 800afdc:	68e2      	ldr	r2, [r4, #12]
 800afde:	3b18      	subs	r3, #24
 800afe0:	3201      	adds	r2, #1
 800afe2:	60a3      	str	r3, [r4, #8]
 800afe4:	6923      	ldr	r3, [r4, #16]
 800afe6:	60e2      	str	r2, [r4, #12]
 800afe8:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800afec:	428a      	cmp	r2, r1
 800afee:	dd0e      	ble.n	800b00e <localtime_r+0x14a>
 800aff0:	2b0b      	cmp	r3, #11
 800aff2:	eba2 0201 	sub.w	r2, r2, r1
 800aff6:	60e2      	str	r2, [r4, #12]
 800aff8:	f103 0201 	add.w	r2, r3, #1
 800affc:	bf09      	itett	eq
 800affe:	6963      	ldreq	r3, [r4, #20]
 800b000:	6122      	strne	r2, [r4, #16]
 800b002:	2200      	moveq	r2, #0
 800b004:	3301      	addeq	r3, #1
 800b006:	bf02      	ittt	eq
 800b008:	6122      	streq	r2, [r4, #16]
 800b00a:	6163      	streq	r3, [r4, #20]
 800b00c:	61e2      	streq	r2, [r4, #28]
 800b00e:	f000 fa13 	bl	800b438 <__tz_unlock>
 800b012:	4620      	mov	r0, r4
 800b014:	b002      	add	sp, #8
 800b016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	dacb      	bge.n	800afb6 <localtime_r+0xf2>
 800b01e:	3901      	subs	r1, #1
 800b020:	6061      	str	r1, [r4, #4]
 800b022:	333c      	adds	r3, #60	; 0x3c
 800b024:	e7c6      	b.n	800afb4 <localtime_r+0xf0>
 800b026:	2b00      	cmp	r3, #0
 800b028:	dacc      	bge.n	800afc4 <localtime_r+0x100>
 800b02a:	3a01      	subs	r2, #1
 800b02c:	60a2      	str	r2, [r4, #8]
 800b02e:	333c      	adds	r3, #60	; 0x3c
 800b030:	e7c7      	b.n	800afc2 <localtime_r+0xfe>
 800b032:	2b00      	cmp	r3, #0
 800b034:	daeb      	bge.n	800b00e <localtime_r+0x14a>
 800b036:	69e2      	ldr	r2, [r4, #28]
 800b038:	3a01      	subs	r2, #1
 800b03a:	61e2      	str	r2, [r4, #28]
 800b03c:	69a2      	ldr	r2, [r4, #24]
 800b03e:	3a01      	subs	r2, #1
 800b040:	bf48      	it	mi
 800b042:	2206      	movmi	r2, #6
 800b044:	61a2      	str	r2, [r4, #24]
 800b046:	68e2      	ldr	r2, [r4, #12]
 800b048:	3318      	adds	r3, #24
 800b04a:	3a01      	subs	r2, #1
 800b04c:	60e2      	str	r2, [r4, #12]
 800b04e:	60a3      	str	r3, [r4, #8]
 800b050:	2a00      	cmp	r2, #0
 800b052:	d1dc      	bne.n	800b00e <localtime_r+0x14a>
 800b054:	6923      	ldr	r3, [r4, #16]
 800b056:	3b01      	subs	r3, #1
 800b058:	d405      	bmi.n	800b066 <localtime_r+0x1a2>
 800b05a:	6123      	str	r3, [r4, #16]
 800b05c:	6923      	ldr	r3, [r4, #16]
 800b05e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800b062:	60e3      	str	r3, [r4, #12]
 800b064:	e7d3      	b.n	800b00e <localtime_r+0x14a>
 800b066:	230b      	movs	r3, #11
 800b068:	6123      	str	r3, [r4, #16]
 800b06a:	6963      	ldr	r3, [r4, #20]
 800b06c:	1e5a      	subs	r2, r3, #1
 800b06e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800b072:	6162      	str	r2, [r4, #20]
 800b074:	079a      	lsls	r2, r3, #30
 800b076:	d105      	bne.n	800b084 <localtime_r+0x1c0>
 800b078:	2164      	movs	r1, #100	; 0x64
 800b07a:	fb93 f2f1 	sdiv	r2, r3, r1
 800b07e:	fb01 3212 	mls	r2, r1, r2, r3
 800b082:	b962      	cbnz	r2, 800b09e <localtime_r+0x1da>
 800b084:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b088:	fb93 f1f2 	sdiv	r1, r3, r2
 800b08c:	fb02 3311 	mls	r3, r2, r1, r3
 800b090:	fab3 f383 	clz	r3, r3
 800b094:	095b      	lsrs	r3, r3, #5
 800b096:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800b09a:	61e3      	str	r3, [r4, #28]
 800b09c:	e7de      	b.n	800b05c <localtime_r+0x198>
 800b09e:	2301      	movs	r3, #1
 800b0a0:	e7f9      	b.n	800b096 <localtime_r+0x1d2>
 800b0a2:	bf00      	nop
 800b0a4:	0800d244 	.word	0x0800d244
 800b0a8:	20000fac 	.word	0x20000fac

0800b0ac <malloc>:
 800b0ac:	4b02      	ldr	r3, [pc, #8]	; (800b0b8 <malloc+0xc>)
 800b0ae:	4601      	mov	r1, r0
 800b0b0:	6818      	ldr	r0, [r3, #0]
 800b0b2:	f000 b88d 	b.w	800b1d0 <_malloc_r>
 800b0b6:	bf00      	nop
 800b0b8:	20000150 	.word	0x20000150

0800b0bc <free>:
 800b0bc:	4b02      	ldr	r3, [pc, #8]	; (800b0c8 <free+0xc>)
 800b0be:	4601      	mov	r1, r0
 800b0c0:	6818      	ldr	r0, [r3, #0]
 800b0c2:	f000 b819 	b.w	800b0f8 <_free_r>
 800b0c6:	bf00      	nop
 800b0c8:	20000150 	.word	0x20000150

0800b0cc <memcpy>:
 800b0cc:	440a      	add	r2, r1
 800b0ce:	4291      	cmp	r1, r2
 800b0d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b0d4:	d100      	bne.n	800b0d8 <memcpy+0xc>
 800b0d6:	4770      	bx	lr
 800b0d8:	b510      	push	{r4, lr}
 800b0da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0e2:	4291      	cmp	r1, r2
 800b0e4:	d1f9      	bne.n	800b0da <memcpy+0xe>
 800b0e6:	bd10      	pop	{r4, pc}

0800b0e8 <memset>:
 800b0e8:	4402      	add	r2, r0
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d100      	bne.n	800b0f2 <memset+0xa>
 800b0f0:	4770      	bx	lr
 800b0f2:	f803 1b01 	strb.w	r1, [r3], #1
 800b0f6:	e7f9      	b.n	800b0ec <memset+0x4>

0800b0f8 <_free_r>:
 800b0f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b0fa:	2900      	cmp	r1, #0
 800b0fc:	d044      	beq.n	800b188 <_free_r+0x90>
 800b0fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b102:	9001      	str	r0, [sp, #4]
 800b104:	2b00      	cmp	r3, #0
 800b106:	f1a1 0404 	sub.w	r4, r1, #4
 800b10a:	bfb8      	it	lt
 800b10c:	18e4      	addlt	r4, r4, r3
 800b10e:	f000 fc49 	bl	800b9a4 <__malloc_lock>
 800b112:	4a1e      	ldr	r2, [pc, #120]	; (800b18c <_free_r+0x94>)
 800b114:	9801      	ldr	r0, [sp, #4]
 800b116:	6813      	ldr	r3, [r2, #0]
 800b118:	b933      	cbnz	r3, 800b128 <_free_r+0x30>
 800b11a:	6063      	str	r3, [r4, #4]
 800b11c:	6014      	str	r4, [r2, #0]
 800b11e:	b003      	add	sp, #12
 800b120:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b124:	f000 bc44 	b.w	800b9b0 <__malloc_unlock>
 800b128:	42a3      	cmp	r3, r4
 800b12a:	d908      	bls.n	800b13e <_free_r+0x46>
 800b12c:	6825      	ldr	r5, [r4, #0]
 800b12e:	1961      	adds	r1, r4, r5
 800b130:	428b      	cmp	r3, r1
 800b132:	bf01      	itttt	eq
 800b134:	6819      	ldreq	r1, [r3, #0]
 800b136:	685b      	ldreq	r3, [r3, #4]
 800b138:	1949      	addeq	r1, r1, r5
 800b13a:	6021      	streq	r1, [r4, #0]
 800b13c:	e7ed      	b.n	800b11a <_free_r+0x22>
 800b13e:	461a      	mov	r2, r3
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	b10b      	cbz	r3, 800b148 <_free_r+0x50>
 800b144:	42a3      	cmp	r3, r4
 800b146:	d9fa      	bls.n	800b13e <_free_r+0x46>
 800b148:	6811      	ldr	r1, [r2, #0]
 800b14a:	1855      	adds	r5, r2, r1
 800b14c:	42a5      	cmp	r5, r4
 800b14e:	d10b      	bne.n	800b168 <_free_r+0x70>
 800b150:	6824      	ldr	r4, [r4, #0]
 800b152:	4421      	add	r1, r4
 800b154:	1854      	adds	r4, r2, r1
 800b156:	42a3      	cmp	r3, r4
 800b158:	6011      	str	r1, [r2, #0]
 800b15a:	d1e0      	bne.n	800b11e <_free_r+0x26>
 800b15c:	681c      	ldr	r4, [r3, #0]
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	6053      	str	r3, [r2, #4]
 800b162:	4421      	add	r1, r4
 800b164:	6011      	str	r1, [r2, #0]
 800b166:	e7da      	b.n	800b11e <_free_r+0x26>
 800b168:	d902      	bls.n	800b170 <_free_r+0x78>
 800b16a:	230c      	movs	r3, #12
 800b16c:	6003      	str	r3, [r0, #0]
 800b16e:	e7d6      	b.n	800b11e <_free_r+0x26>
 800b170:	6825      	ldr	r5, [r4, #0]
 800b172:	1961      	adds	r1, r4, r5
 800b174:	428b      	cmp	r3, r1
 800b176:	bf04      	itt	eq
 800b178:	6819      	ldreq	r1, [r3, #0]
 800b17a:	685b      	ldreq	r3, [r3, #4]
 800b17c:	6063      	str	r3, [r4, #4]
 800b17e:	bf04      	itt	eq
 800b180:	1949      	addeq	r1, r1, r5
 800b182:	6021      	streq	r1, [r4, #0]
 800b184:	6054      	str	r4, [r2, #4]
 800b186:	e7ca      	b.n	800b11e <_free_r+0x26>
 800b188:	b003      	add	sp, #12
 800b18a:	bd30      	pop	{r4, r5, pc}
 800b18c:	20000f88 	.word	0x20000f88

0800b190 <sbrk_aligned>:
 800b190:	b570      	push	{r4, r5, r6, lr}
 800b192:	4e0e      	ldr	r6, [pc, #56]	; (800b1cc <sbrk_aligned+0x3c>)
 800b194:	460c      	mov	r4, r1
 800b196:	6831      	ldr	r1, [r6, #0]
 800b198:	4605      	mov	r5, r0
 800b19a:	b911      	cbnz	r1, 800b1a2 <sbrk_aligned+0x12>
 800b19c:	f000 f88c 	bl	800b2b8 <_sbrk_r>
 800b1a0:	6030      	str	r0, [r6, #0]
 800b1a2:	4621      	mov	r1, r4
 800b1a4:	4628      	mov	r0, r5
 800b1a6:	f000 f887 	bl	800b2b8 <_sbrk_r>
 800b1aa:	1c43      	adds	r3, r0, #1
 800b1ac:	d00a      	beq.n	800b1c4 <sbrk_aligned+0x34>
 800b1ae:	1cc4      	adds	r4, r0, #3
 800b1b0:	f024 0403 	bic.w	r4, r4, #3
 800b1b4:	42a0      	cmp	r0, r4
 800b1b6:	d007      	beq.n	800b1c8 <sbrk_aligned+0x38>
 800b1b8:	1a21      	subs	r1, r4, r0
 800b1ba:	4628      	mov	r0, r5
 800b1bc:	f000 f87c 	bl	800b2b8 <_sbrk_r>
 800b1c0:	3001      	adds	r0, #1
 800b1c2:	d101      	bne.n	800b1c8 <sbrk_aligned+0x38>
 800b1c4:	f04f 34ff 	mov.w	r4, #4294967295
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	bd70      	pop	{r4, r5, r6, pc}
 800b1cc:	20000f8c 	.word	0x20000f8c

0800b1d0 <_malloc_r>:
 800b1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1d4:	1ccd      	adds	r5, r1, #3
 800b1d6:	f025 0503 	bic.w	r5, r5, #3
 800b1da:	3508      	adds	r5, #8
 800b1dc:	2d0c      	cmp	r5, #12
 800b1de:	bf38      	it	cc
 800b1e0:	250c      	movcc	r5, #12
 800b1e2:	2d00      	cmp	r5, #0
 800b1e4:	4607      	mov	r7, r0
 800b1e6:	db01      	blt.n	800b1ec <_malloc_r+0x1c>
 800b1e8:	42a9      	cmp	r1, r5
 800b1ea:	d905      	bls.n	800b1f8 <_malloc_r+0x28>
 800b1ec:	230c      	movs	r3, #12
 800b1ee:	603b      	str	r3, [r7, #0]
 800b1f0:	2600      	movs	r6, #0
 800b1f2:	4630      	mov	r0, r6
 800b1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1f8:	4e2e      	ldr	r6, [pc, #184]	; (800b2b4 <_malloc_r+0xe4>)
 800b1fa:	f000 fbd3 	bl	800b9a4 <__malloc_lock>
 800b1fe:	6833      	ldr	r3, [r6, #0]
 800b200:	461c      	mov	r4, r3
 800b202:	bb34      	cbnz	r4, 800b252 <_malloc_r+0x82>
 800b204:	4629      	mov	r1, r5
 800b206:	4638      	mov	r0, r7
 800b208:	f7ff ffc2 	bl	800b190 <sbrk_aligned>
 800b20c:	1c43      	adds	r3, r0, #1
 800b20e:	4604      	mov	r4, r0
 800b210:	d14d      	bne.n	800b2ae <_malloc_r+0xde>
 800b212:	6834      	ldr	r4, [r6, #0]
 800b214:	4626      	mov	r6, r4
 800b216:	2e00      	cmp	r6, #0
 800b218:	d140      	bne.n	800b29c <_malloc_r+0xcc>
 800b21a:	6823      	ldr	r3, [r4, #0]
 800b21c:	4631      	mov	r1, r6
 800b21e:	4638      	mov	r0, r7
 800b220:	eb04 0803 	add.w	r8, r4, r3
 800b224:	f000 f848 	bl	800b2b8 <_sbrk_r>
 800b228:	4580      	cmp	r8, r0
 800b22a:	d13a      	bne.n	800b2a2 <_malloc_r+0xd2>
 800b22c:	6821      	ldr	r1, [r4, #0]
 800b22e:	3503      	adds	r5, #3
 800b230:	1a6d      	subs	r5, r5, r1
 800b232:	f025 0503 	bic.w	r5, r5, #3
 800b236:	3508      	adds	r5, #8
 800b238:	2d0c      	cmp	r5, #12
 800b23a:	bf38      	it	cc
 800b23c:	250c      	movcc	r5, #12
 800b23e:	4629      	mov	r1, r5
 800b240:	4638      	mov	r0, r7
 800b242:	f7ff ffa5 	bl	800b190 <sbrk_aligned>
 800b246:	3001      	adds	r0, #1
 800b248:	d02b      	beq.n	800b2a2 <_malloc_r+0xd2>
 800b24a:	6823      	ldr	r3, [r4, #0]
 800b24c:	442b      	add	r3, r5
 800b24e:	6023      	str	r3, [r4, #0]
 800b250:	e00e      	b.n	800b270 <_malloc_r+0xa0>
 800b252:	6822      	ldr	r2, [r4, #0]
 800b254:	1b52      	subs	r2, r2, r5
 800b256:	d41e      	bmi.n	800b296 <_malloc_r+0xc6>
 800b258:	2a0b      	cmp	r2, #11
 800b25a:	d916      	bls.n	800b28a <_malloc_r+0xba>
 800b25c:	1961      	adds	r1, r4, r5
 800b25e:	42a3      	cmp	r3, r4
 800b260:	6025      	str	r5, [r4, #0]
 800b262:	bf18      	it	ne
 800b264:	6059      	strne	r1, [r3, #4]
 800b266:	6863      	ldr	r3, [r4, #4]
 800b268:	bf08      	it	eq
 800b26a:	6031      	streq	r1, [r6, #0]
 800b26c:	5162      	str	r2, [r4, r5]
 800b26e:	604b      	str	r3, [r1, #4]
 800b270:	4638      	mov	r0, r7
 800b272:	f104 060b 	add.w	r6, r4, #11
 800b276:	f000 fb9b 	bl	800b9b0 <__malloc_unlock>
 800b27a:	f026 0607 	bic.w	r6, r6, #7
 800b27e:	1d23      	adds	r3, r4, #4
 800b280:	1af2      	subs	r2, r6, r3
 800b282:	d0b6      	beq.n	800b1f2 <_malloc_r+0x22>
 800b284:	1b9b      	subs	r3, r3, r6
 800b286:	50a3      	str	r3, [r4, r2]
 800b288:	e7b3      	b.n	800b1f2 <_malloc_r+0x22>
 800b28a:	6862      	ldr	r2, [r4, #4]
 800b28c:	42a3      	cmp	r3, r4
 800b28e:	bf0c      	ite	eq
 800b290:	6032      	streq	r2, [r6, #0]
 800b292:	605a      	strne	r2, [r3, #4]
 800b294:	e7ec      	b.n	800b270 <_malloc_r+0xa0>
 800b296:	4623      	mov	r3, r4
 800b298:	6864      	ldr	r4, [r4, #4]
 800b29a:	e7b2      	b.n	800b202 <_malloc_r+0x32>
 800b29c:	4634      	mov	r4, r6
 800b29e:	6876      	ldr	r6, [r6, #4]
 800b2a0:	e7b9      	b.n	800b216 <_malloc_r+0x46>
 800b2a2:	230c      	movs	r3, #12
 800b2a4:	603b      	str	r3, [r7, #0]
 800b2a6:	4638      	mov	r0, r7
 800b2a8:	f000 fb82 	bl	800b9b0 <__malloc_unlock>
 800b2ac:	e7a1      	b.n	800b1f2 <_malloc_r+0x22>
 800b2ae:	6025      	str	r5, [r4, #0]
 800b2b0:	e7de      	b.n	800b270 <_malloc_r+0xa0>
 800b2b2:	bf00      	nop
 800b2b4:	20000f88 	.word	0x20000f88

0800b2b8 <_sbrk_r>:
 800b2b8:	b538      	push	{r3, r4, r5, lr}
 800b2ba:	4d06      	ldr	r5, [pc, #24]	; (800b2d4 <_sbrk_r+0x1c>)
 800b2bc:	2300      	movs	r3, #0
 800b2be:	4604      	mov	r4, r0
 800b2c0:	4608      	mov	r0, r1
 800b2c2:	602b      	str	r3, [r5, #0]
 800b2c4:	f7f9 f806 	bl	80042d4 <_sbrk>
 800b2c8:	1c43      	adds	r3, r0, #1
 800b2ca:	d102      	bne.n	800b2d2 <_sbrk_r+0x1a>
 800b2cc:	682b      	ldr	r3, [r5, #0]
 800b2ce:	b103      	cbz	r3, 800b2d2 <_sbrk_r+0x1a>
 800b2d0:	6023      	str	r3, [r4, #0]
 800b2d2:	bd38      	pop	{r3, r4, r5, pc}
 800b2d4:	20000fbc 	.word	0x20000fbc

0800b2d8 <__tzcalc_limits>:
 800b2d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2dc:	4605      	mov	r5, r0
 800b2de:	f000 faab 	bl	800b838 <__gettzinfo>
 800b2e2:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800b2e6:	429d      	cmp	r5, r3
 800b2e8:	f340 8099 	ble.w	800b41e <__tzcalc_limits+0x146>
 800b2ec:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800b2f0:	18ac      	adds	r4, r5, r2
 800b2f2:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800b2f6:	f240 126d 	movw	r2, #365	; 0x16d
 800b2fa:	10a4      	asrs	r4, r4, #2
 800b2fc:	fb02 4403 	mla	r4, r2, r3, r4
 800b300:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800b304:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800b308:	fb93 f3f2 	sdiv	r3, r3, r2
 800b30c:	441c      	add	r4, r3
 800b30e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800b312:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800b316:	fb95 fcf3 	sdiv	ip, r5, r3
 800b31a:	fb03 5c1c 	mls	ip, r3, ip, r5
 800b31e:	186a      	adds	r2, r5, r1
 800b320:	fabc f68c 	clz	r6, ip
 800b324:	fbb2 f2f3 	udiv	r2, r2, r3
 800b328:	f005 0303 	and.w	r3, r5, #3
 800b32c:	4414      	add	r4, r2
 800b32e:	2264      	movs	r2, #100	; 0x64
 800b330:	6045      	str	r5, [r0, #4]
 800b332:	fb95 f7f2 	sdiv	r7, r5, r2
 800b336:	0976      	lsrs	r6, r6, #5
 800b338:	fb02 5717 	mls	r7, r2, r7, r5
 800b33c:	4601      	mov	r1, r0
 800b33e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800b342:	9300      	str	r3, [sp, #0]
 800b344:	f04f 0a07 	mov.w	sl, #7
 800b348:	7a0d      	ldrb	r5, [r1, #8]
 800b34a:	694b      	ldr	r3, [r1, #20]
 800b34c:	2d4a      	cmp	r5, #74	; 0x4a
 800b34e:	d12d      	bne.n	800b3ac <__tzcalc_limits+0xd4>
 800b350:	9a00      	ldr	r2, [sp, #0]
 800b352:	eb04 0e03 	add.w	lr, r4, r3
 800b356:	b902      	cbnz	r2, 800b35a <__tzcalc_limits+0x82>
 800b358:	b917      	cbnz	r7, 800b360 <__tzcalc_limits+0x88>
 800b35a:	f1bc 0f00 	cmp.w	ip, #0
 800b35e:	d123      	bne.n	800b3a8 <__tzcalc_limits+0xd0>
 800b360:	2b3b      	cmp	r3, #59	; 0x3b
 800b362:	bfd4      	ite	le
 800b364:	2300      	movle	r3, #0
 800b366:	2301      	movgt	r3, #1
 800b368:	4473      	add	r3, lr
 800b36a:	3b01      	subs	r3, #1
 800b36c:	698d      	ldr	r5, [r1, #24]
 800b36e:	4a2d      	ldr	r2, [pc, #180]	; (800b424 <__tzcalc_limits+0x14c>)
 800b370:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800b374:	fbc3 5e02 	smlal	r5, lr, r3, r2
 800b378:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800b37a:	18ed      	adds	r5, r5, r3
 800b37c:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800b380:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800b384:	3128      	adds	r1, #40	; 0x28
 800b386:	458b      	cmp	fp, r1
 800b388:	d1de      	bne.n	800b348 <__tzcalc_limits+0x70>
 800b38a:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800b38e:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800b392:	428c      	cmp	r4, r1
 800b394:	eb72 0303 	sbcs.w	r3, r2, r3
 800b398:	bfb4      	ite	lt
 800b39a:	2301      	movlt	r3, #1
 800b39c:	2300      	movge	r3, #0
 800b39e:	6003      	str	r3, [r0, #0]
 800b3a0:	2001      	movs	r0, #1
 800b3a2:	b003      	add	sp, #12
 800b3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	e7dd      	b.n	800b368 <__tzcalc_limits+0x90>
 800b3ac:	2d44      	cmp	r5, #68	; 0x44
 800b3ae:	d101      	bne.n	800b3b4 <__tzcalc_limits+0xdc>
 800b3b0:	4423      	add	r3, r4
 800b3b2:	e7db      	b.n	800b36c <__tzcalc_limits+0x94>
 800b3b4:	9a00      	ldr	r2, [sp, #0]
 800b3b6:	bb62      	cbnz	r2, 800b412 <__tzcalc_limits+0x13a>
 800b3b8:	2f00      	cmp	r7, #0
 800b3ba:	bf0c      	ite	eq
 800b3bc:	4635      	moveq	r5, r6
 800b3be:	2501      	movne	r5, #1
 800b3c0:	68ca      	ldr	r2, [r1, #12]
 800b3c2:	9201      	str	r2, [sp, #4]
 800b3c4:	4a18      	ldr	r2, [pc, #96]	; (800b428 <__tzcalc_limits+0x150>)
 800b3c6:	f04f 0930 	mov.w	r9, #48	; 0x30
 800b3ca:	fb09 2505 	mla	r5, r9, r5, r2
 800b3ce:	46a6      	mov	lr, r4
 800b3d0:	f04f 0800 	mov.w	r8, #0
 800b3d4:	3d04      	subs	r5, #4
 800b3d6:	9a01      	ldr	r2, [sp, #4]
 800b3d8:	f108 0801 	add.w	r8, r8, #1
 800b3dc:	4542      	cmp	r2, r8
 800b3de:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800b3e2:	dc18      	bgt.n	800b416 <__tzcalc_limits+0x13e>
 800b3e4:	f10e 0504 	add.w	r5, lr, #4
 800b3e8:	fb95 f8fa 	sdiv	r8, r5, sl
 800b3ec:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800b3f0:	eba5 0808 	sub.w	r8, r5, r8
 800b3f4:	ebb3 0808 	subs.w	r8, r3, r8
 800b3f8:	690b      	ldr	r3, [r1, #16]
 800b3fa:	f103 33ff 	add.w	r3, r3, #4294967295
 800b3fe:	bf48      	it	mi
 800b400:	f108 0807 	addmi.w	r8, r8, #7
 800b404:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b408:	4443      	add	r3, r8
 800b40a:	454b      	cmp	r3, r9
 800b40c:	da05      	bge.n	800b41a <__tzcalc_limits+0x142>
 800b40e:	4473      	add	r3, lr
 800b410:	e7ac      	b.n	800b36c <__tzcalc_limits+0x94>
 800b412:	4635      	mov	r5, r6
 800b414:	e7d4      	b.n	800b3c0 <__tzcalc_limits+0xe8>
 800b416:	44ce      	add	lr, r9
 800b418:	e7dd      	b.n	800b3d6 <__tzcalc_limits+0xfe>
 800b41a:	3b07      	subs	r3, #7
 800b41c:	e7f5      	b.n	800b40a <__tzcalc_limits+0x132>
 800b41e:	2000      	movs	r0, #0
 800b420:	e7bf      	b.n	800b3a2 <__tzcalc_limits+0xca>
 800b422:	bf00      	nop
 800b424:	00015180 	.word	0x00015180
 800b428:	0800d244 	.word	0x0800d244

0800b42c <__tz_lock>:
 800b42c:	4801      	ldr	r0, [pc, #4]	; (800b434 <__tz_lock+0x8>)
 800b42e:	f000 bab4 	b.w	800b99a <__retarget_lock_acquire>
 800b432:	bf00      	nop
 800b434:	20000fb8 	.word	0x20000fb8

0800b438 <__tz_unlock>:
 800b438:	4801      	ldr	r0, [pc, #4]	; (800b440 <__tz_unlock+0x8>)
 800b43a:	f000 bab0 	b.w	800b99e <__retarget_lock_release>
 800b43e:	bf00      	nop
 800b440:	20000fb8 	.word	0x20000fb8

0800b444 <_tzset_unlocked>:
 800b444:	4b01      	ldr	r3, [pc, #4]	; (800b44c <_tzset_unlocked+0x8>)
 800b446:	6818      	ldr	r0, [r3, #0]
 800b448:	f000 b802 	b.w	800b450 <_tzset_unlocked_r>
 800b44c:	20000150 	.word	0x20000150

0800b450 <_tzset_unlocked_r>:
 800b450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b454:	b08d      	sub	sp, #52	; 0x34
 800b456:	4607      	mov	r7, r0
 800b458:	f000 f9ee 	bl	800b838 <__gettzinfo>
 800b45c:	49b0      	ldr	r1, [pc, #704]	; (800b720 <_tzset_unlocked_r+0x2d0>)
 800b45e:	4eb1      	ldr	r6, [pc, #708]	; (800b724 <_tzset_unlocked_r+0x2d4>)
 800b460:	4605      	mov	r5, r0
 800b462:	4638      	mov	r0, r7
 800b464:	f000 f9e0 	bl	800b828 <_getenv_r>
 800b468:	4604      	mov	r4, r0
 800b46a:	b970      	cbnz	r0, 800b48a <_tzset_unlocked_r+0x3a>
 800b46c:	4bae      	ldr	r3, [pc, #696]	; (800b728 <_tzset_unlocked_r+0x2d8>)
 800b46e:	4aaf      	ldr	r2, [pc, #700]	; (800b72c <_tzset_unlocked_r+0x2dc>)
 800b470:	6018      	str	r0, [r3, #0]
 800b472:	4baf      	ldr	r3, [pc, #700]	; (800b730 <_tzset_unlocked_r+0x2e0>)
 800b474:	6018      	str	r0, [r3, #0]
 800b476:	4baf      	ldr	r3, [pc, #700]	; (800b734 <_tzset_unlocked_r+0x2e4>)
 800b478:	6830      	ldr	r0, [r6, #0]
 800b47a:	e9c3 2200 	strd	r2, r2, [r3]
 800b47e:	f7ff fe1d 	bl	800b0bc <free>
 800b482:	6034      	str	r4, [r6, #0]
 800b484:	b00d      	add	sp, #52	; 0x34
 800b486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b48a:	6831      	ldr	r1, [r6, #0]
 800b48c:	2900      	cmp	r1, #0
 800b48e:	d162      	bne.n	800b556 <_tzset_unlocked_r+0x106>
 800b490:	6830      	ldr	r0, [r6, #0]
 800b492:	f7ff fe13 	bl	800b0bc <free>
 800b496:	4620      	mov	r0, r4
 800b498:	f7f4 fec4 	bl	8000224 <strlen>
 800b49c:	1c41      	adds	r1, r0, #1
 800b49e:	4638      	mov	r0, r7
 800b4a0:	f7ff fe96 	bl	800b1d0 <_malloc_r>
 800b4a4:	6030      	str	r0, [r6, #0]
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	d15a      	bne.n	800b560 <_tzset_unlocked_r+0x110>
 800b4aa:	7823      	ldrb	r3, [r4, #0]
 800b4ac:	4aa2      	ldr	r2, [pc, #648]	; (800b738 <_tzset_unlocked_r+0x2e8>)
 800b4ae:	49a3      	ldr	r1, [pc, #652]	; (800b73c <_tzset_unlocked_r+0x2ec>)
 800b4b0:	2b3a      	cmp	r3, #58	; 0x3a
 800b4b2:	bf08      	it	eq
 800b4b4:	3401      	addeq	r4, #1
 800b4b6:	ae0a      	add	r6, sp, #40	; 0x28
 800b4b8:	4633      	mov	r3, r6
 800b4ba:	4620      	mov	r0, r4
 800b4bc:	f000 fd6c 	bl	800bf98 <siscanf>
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	dddf      	ble.n	800b484 <_tzset_unlocked_r+0x34>
 800b4c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4c6:	18e7      	adds	r7, r4, r3
 800b4c8:	5ce3      	ldrb	r3, [r4, r3]
 800b4ca:	2b2d      	cmp	r3, #45	; 0x2d
 800b4cc:	d14c      	bne.n	800b568 <_tzset_unlocked_r+0x118>
 800b4ce:	3701      	adds	r7, #1
 800b4d0:	f04f 38ff 	mov.w	r8, #4294967295
 800b4d4:	f10d 0a20 	add.w	sl, sp, #32
 800b4d8:	f10d 0b1e 	add.w	fp, sp, #30
 800b4dc:	2400      	movs	r4, #0
 800b4de:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800b4e2:	4997      	ldr	r1, [pc, #604]	; (800b740 <_tzset_unlocked_r+0x2f0>)
 800b4e4:	9603      	str	r6, [sp, #12]
 800b4e6:	f8cd b000 	str.w	fp, [sp]
 800b4ea:	4633      	mov	r3, r6
 800b4ec:	aa07      	add	r2, sp, #28
 800b4ee:	4638      	mov	r0, r7
 800b4f0:	f8ad 401e 	strh.w	r4, [sp, #30]
 800b4f4:	f8ad 4020 	strh.w	r4, [sp, #32]
 800b4f8:	f000 fd4e 	bl	800bf98 <siscanf>
 800b4fc:	42a0      	cmp	r0, r4
 800b4fe:	ddc1      	ble.n	800b484 <_tzset_unlocked_r+0x34>
 800b500:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800b504:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800b508:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800b74c <_tzset_unlocked_r+0x2fc>
 800b50c:	213c      	movs	r1, #60	; 0x3c
 800b50e:	fb01 3302 	mla	r3, r1, r2, r3
 800b512:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800b516:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800b51a:	fb01 3302 	mla	r3, r1, r2, r3
 800b51e:	fb08 f303 	mul.w	r3, r8, r3
 800b522:	f8df 8210 	ldr.w	r8, [pc, #528]	; 800b734 <_tzset_unlocked_r+0x2e4>
 800b526:	62ab      	str	r3, [r5, #40]	; 0x28
 800b528:	4b83      	ldr	r3, [pc, #524]	; (800b738 <_tzset_unlocked_r+0x2e8>)
 800b52a:	f8c8 3000 	str.w	r3, [r8]
 800b52e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b530:	4982      	ldr	r1, [pc, #520]	; (800b73c <_tzset_unlocked_r+0x2ec>)
 800b532:	441f      	add	r7, r3
 800b534:	464a      	mov	r2, r9
 800b536:	4633      	mov	r3, r6
 800b538:	4638      	mov	r0, r7
 800b53a:	f000 fd2d 	bl	800bf98 <siscanf>
 800b53e:	42a0      	cmp	r0, r4
 800b540:	dc18      	bgt.n	800b574 <_tzset_unlocked_r+0x124>
 800b542:	f8d8 3000 	ldr.w	r3, [r8]
 800b546:	f8c8 3004 	str.w	r3, [r8, #4]
 800b54a:	4b77      	ldr	r3, [pc, #476]	; (800b728 <_tzset_unlocked_r+0x2d8>)
 800b54c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800b54e:	601a      	str	r2, [r3, #0]
 800b550:	4b77      	ldr	r3, [pc, #476]	; (800b730 <_tzset_unlocked_r+0x2e0>)
 800b552:	601c      	str	r4, [r3, #0]
 800b554:	e796      	b.n	800b484 <_tzset_unlocked_r+0x34>
 800b556:	f7f4 fe5b 	bl	8000210 <strcmp>
 800b55a:	2800      	cmp	r0, #0
 800b55c:	d198      	bne.n	800b490 <_tzset_unlocked_r+0x40>
 800b55e:	e791      	b.n	800b484 <_tzset_unlocked_r+0x34>
 800b560:	4621      	mov	r1, r4
 800b562:	f000 fd8a 	bl	800c07a <strcpy>
 800b566:	e7a0      	b.n	800b4aa <_tzset_unlocked_r+0x5a>
 800b568:	2b2b      	cmp	r3, #43	; 0x2b
 800b56a:	bf08      	it	eq
 800b56c:	3701      	addeq	r7, #1
 800b56e:	f04f 0801 	mov.w	r8, #1
 800b572:	e7af      	b.n	800b4d4 <_tzset_unlocked_r+0x84>
 800b574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b576:	f8c8 9004 	str.w	r9, [r8, #4]
 800b57a:	18fc      	adds	r4, r7, r3
 800b57c:	5cfb      	ldrb	r3, [r7, r3]
 800b57e:	2b2d      	cmp	r3, #45	; 0x2d
 800b580:	f040 808b 	bne.w	800b69a <_tzset_unlocked_r+0x24a>
 800b584:	3401      	adds	r4, #1
 800b586:	f04f 37ff 	mov.w	r7, #4294967295
 800b58a:	2300      	movs	r3, #0
 800b58c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b590:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b594:	f8ad 3020 	strh.w	r3, [sp, #32]
 800b598:	930a      	str	r3, [sp, #40]	; 0x28
 800b59a:	e9cd a602 	strd	sl, r6, [sp, #8]
 800b59e:	e9cd b600 	strd	fp, r6, [sp]
 800b5a2:	4967      	ldr	r1, [pc, #412]	; (800b740 <_tzset_unlocked_r+0x2f0>)
 800b5a4:	4633      	mov	r3, r6
 800b5a6:	aa07      	add	r2, sp, #28
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	f000 fcf5 	bl	800bf98 <siscanf>
 800b5ae:	2800      	cmp	r0, #0
 800b5b0:	dc78      	bgt.n	800b6a4 <_tzset_unlocked_r+0x254>
 800b5b2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800b5b4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800b5b8:	652b      	str	r3, [r5, #80]	; 0x50
 800b5ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5bc:	462f      	mov	r7, r5
 800b5be:	441c      	add	r4, r3
 800b5c0:	f04f 0900 	mov.w	r9, #0
 800b5c4:	7823      	ldrb	r3, [r4, #0]
 800b5c6:	2b2c      	cmp	r3, #44	; 0x2c
 800b5c8:	bf08      	it	eq
 800b5ca:	3401      	addeq	r4, #1
 800b5cc:	f894 8000 	ldrb.w	r8, [r4]
 800b5d0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800b5d4:	d178      	bne.n	800b6c8 <_tzset_unlocked_r+0x278>
 800b5d6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800b5da:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800b5de:	ab09      	add	r3, sp, #36	; 0x24
 800b5e0:	9300      	str	r3, [sp, #0]
 800b5e2:	4958      	ldr	r1, [pc, #352]	; (800b744 <_tzset_unlocked_r+0x2f4>)
 800b5e4:	9603      	str	r6, [sp, #12]
 800b5e6:	4633      	mov	r3, r6
 800b5e8:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	f000 fcd3 	bl	800bf98 <siscanf>
 800b5f2:	2803      	cmp	r0, #3
 800b5f4:	f47f af46 	bne.w	800b484 <_tzset_unlocked_r+0x34>
 800b5f8:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800b5fc:	1e4b      	subs	r3, r1, #1
 800b5fe:	2b0b      	cmp	r3, #11
 800b600:	f63f af40 	bhi.w	800b484 <_tzset_unlocked_r+0x34>
 800b604:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800b608:	1e53      	subs	r3, r2, #1
 800b60a:	2b04      	cmp	r3, #4
 800b60c:	f63f af3a 	bhi.w	800b484 <_tzset_unlocked_r+0x34>
 800b610:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800b614:	2b06      	cmp	r3, #6
 800b616:	f63f af35 	bhi.w	800b484 <_tzset_unlocked_r+0x34>
 800b61a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800b61e:	f887 8008 	strb.w	r8, [r7, #8]
 800b622:	617b      	str	r3, [r7, #20]
 800b624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b626:	eb04 0803 	add.w	r8, r4, r3
 800b62a:	2302      	movs	r3, #2
 800b62c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b630:	2300      	movs	r3, #0
 800b632:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b636:	f8ad 3020 	strh.w	r3, [sp, #32]
 800b63a:	930a      	str	r3, [sp, #40]	; 0x28
 800b63c:	f898 3000 	ldrb.w	r3, [r8]
 800b640:	2b2f      	cmp	r3, #47	; 0x2f
 800b642:	d109      	bne.n	800b658 <_tzset_unlocked_r+0x208>
 800b644:	e9cd a602 	strd	sl, r6, [sp, #8]
 800b648:	e9cd b600 	strd	fp, r6, [sp]
 800b64c:	493e      	ldr	r1, [pc, #248]	; (800b748 <_tzset_unlocked_r+0x2f8>)
 800b64e:	4633      	mov	r3, r6
 800b650:	aa07      	add	r2, sp, #28
 800b652:	4640      	mov	r0, r8
 800b654:	f000 fca0 	bl	800bf98 <siscanf>
 800b658:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800b65c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800b660:	213c      	movs	r1, #60	; 0x3c
 800b662:	fb01 3302 	mla	r3, r1, r2, r3
 800b666:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800b66a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800b66e:	fb01 3302 	mla	r3, r1, r2, r3
 800b672:	61bb      	str	r3, [r7, #24]
 800b674:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b676:	3728      	adds	r7, #40	; 0x28
 800b678:	4444      	add	r4, r8
 800b67a:	f1b9 0f00 	cmp.w	r9, #0
 800b67e:	d020      	beq.n	800b6c2 <_tzset_unlocked_r+0x272>
 800b680:	6868      	ldr	r0, [r5, #4]
 800b682:	f7ff fe29 	bl	800b2d8 <__tzcalc_limits>
 800b686:	4b28      	ldr	r3, [pc, #160]	; (800b728 <_tzset_unlocked_r+0x2d8>)
 800b688:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800b68a:	601a      	str	r2, [r3, #0]
 800b68c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800b68e:	1a9b      	subs	r3, r3, r2
 800b690:	4a27      	ldr	r2, [pc, #156]	; (800b730 <_tzset_unlocked_r+0x2e0>)
 800b692:	bf18      	it	ne
 800b694:	2301      	movne	r3, #1
 800b696:	6013      	str	r3, [r2, #0]
 800b698:	e6f4      	b.n	800b484 <_tzset_unlocked_r+0x34>
 800b69a:	2b2b      	cmp	r3, #43	; 0x2b
 800b69c:	bf08      	it	eq
 800b69e:	3401      	addeq	r4, #1
 800b6a0:	2701      	movs	r7, #1
 800b6a2:	e772      	b.n	800b58a <_tzset_unlocked_r+0x13a>
 800b6a4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800b6a8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800b6ac:	213c      	movs	r1, #60	; 0x3c
 800b6ae:	fb01 3302 	mla	r3, r1, r2, r3
 800b6b2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800b6b6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800b6ba:	fb01 3302 	mla	r3, r1, r2, r3
 800b6be:	437b      	muls	r3, r7
 800b6c0:	e77a      	b.n	800b5b8 <_tzset_unlocked_r+0x168>
 800b6c2:	f04f 0901 	mov.w	r9, #1
 800b6c6:	e77d      	b.n	800b5c4 <_tzset_unlocked_r+0x174>
 800b6c8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800b6cc:	bf06      	itte	eq
 800b6ce:	3401      	addeq	r4, #1
 800b6d0:	4643      	moveq	r3, r8
 800b6d2:	2344      	movne	r3, #68	; 0x44
 800b6d4:	220a      	movs	r2, #10
 800b6d6:	a90b      	add	r1, sp, #44	; 0x2c
 800b6d8:	4620      	mov	r0, r4
 800b6da:	9305      	str	r3, [sp, #20]
 800b6dc:	f000 fd5e 	bl	800c19c <strtoul>
 800b6e0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800b6e4:	9b05      	ldr	r3, [sp, #20]
 800b6e6:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800b6ea:	45a0      	cmp	r8, r4
 800b6ec:	d114      	bne.n	800b718 <_tzset_unlocked_r+0x2c8>
 800b6ee:	234d      	movs	r3, #77	; 0x4d
 800b6f0:	f1b9 0f00 	cmp.w	r9, #0
 800b6f4:	d107      	bne.n	800b706 <_tzset_unlocked_r+0x2b6>
 800b6f6:	722b      	strb	r3, [r5, #8]
 800b6f8:	2103      	movs	r1, #3
 800b6fa:	2302      	movs	r3, #2
 800b6fc:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800b700:	f8c5 9014 	str.w	r9, [r5, #20]
 800b704:	e791      	b.n	800b62a <_tzset_unlocked_r+0x1da>
 800b706:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800b70a:	220b      	movs	r2, #11
 800b70c:	2301      	movs	r3, #1
 800b70e:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800b712:	2300      	movs	r3, #0
 800b714:	63eb      	str	r3, [r5, #60]	; 0x3c
 800b716:	e788      	b.n	800b62a <_tzset_unlocked_r+0x1da>
 800b718:	b280      	uxth	r0, r0
 800b71a:	723b      	strb	r3, [r7, #8]
 800b71c:	6178      	str	r0, [r7, #20]
 800b71e:	e784      	b.n	800b62a <_tzset_unlocked_r+0x1da>
 800b720:	0800d2a4 	.word	0x0800d2a4
 800b724:	20000fa8 	.word	0x20000fa8
 800b728:	20000fb0 	.word	0x20000fb0
 800b72c:	0800d2a7 	.word	0x0800d2a7
 800b730:	20000fac 	.word	0x20000fac
 800b734:	200001b4 	.word	0x200001b4
 800b738:	20000f9b 	.word	0x20000f9b
 800b73c:	0800d2ab 	.word	0x0800d2ab
 800b740:	0800d2ce 	.word	0x0800d2ce
 800b744:	0800d2ba 	.word	0x0800d2ba
 800b748:	0800d2cd 	.word	0x0800d2cd
 800b74c:	20000f90 	.word	0x20000f90

0800b750 <__assert_func>:
 800b750:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b752:	4614      	mov	r4, r2
 800b754:	461a      	mov	r2, r3
 800b756:	4b09      	ldr	r3, [pc, #36]	; (800b77c <__assert_func+0x2c>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	4605      	mov	r5, r0
 800b75c:	68d8      	ldr	r0, [r3, #12]
 800b75e:	b14c      	cbz	r4, 800b774 <__assert_func+0x24>
 800b760:	4b07      	ldr	r3, [pc, #28]	; (800b780 <__assert_func+0x30>)
 800b762:	9100      	str	r1, [sp, #0]
 800b764:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b768:	4906      	ldr	r1, [pc, #24]	; (800b784 <__assert_func+0x34>)
 800b76a:	462b      	mov	r3, r5
 800b76c:	f000 f80e 	bl	800b78c <fiprintf>
 800b770:	f000 fdf0 	bl	800c354 <abort>
 800b774:	4b04      	ldr	r3, [pc, #16]	; (800b788 <__assert_func+0x38>)
 800b776:	461c      	mov	r4, r3
 800b778:	e7f3      	b.n	800b762 <__assert_func+0x12>
 800b77a:	bf00      	nop
 800b77c:	20000150 	.word	0x20000150
 800b780:	0800d2e0 	.word	0x0800d2e0
 800b784:	0800d2ed 	.word	0x0800d2ed
 800b788:	0800d31b 	.word	0x0800d31b

0800b78c <fiprintf>:
 800b78c:	b40e      	push	{r1, r2, r3}
 800b78e:	b503      	push	{r0, r1, lr}
 800b790:	4601      	mov	r1, r0
 800b792:	ab03      	add	r3, sp, #12
 800b794:	4805      	ldr	r0, [pc, #20]	; (800b7ac <fiprintf+0x20>)
 800b796:	f853 2b04 	ldr.w	r2, [r3], #4
 800b79a:	6800      	ldr	r0, [r0, #0]
 800b79c:	9301      	str	r3, [sp, #4]
 800b79e:	f000 f937 	bl	800ba10 <_vfiprintf_r>
 800b7a2:	b002      	add	sp, #8
 800b7a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7a8:	b003      	add	sp, #12
 800b7aa:	4770      	bx	lr
 800b7ac:	20000150 	.word	0x20000150

0800b7b0 <_findenv_r>:
 800b7b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b4:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800b824 <_findenv_r+0x74>
 800b7b8:	4607      	mov	r7, r0
 800b7ba:	4689      	mov	r9, r1
 800b7bc:	4616      	mov	r6, r2
 800b7be:	f000 fde1 	bl	800c384 <__env_lock>
 800b7c2:	f8da 4000 	ldr.w	r4, [sl]
 800b7c6:	b134      	cbz	r4, 800b7d6 <_findenv_r+0x26>
 800b7c8:	464b      	mov	r3, r9
 800b7ca:	4698      	mov	r8, r3
 800b7cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7d0:	b13a      	cbz	r2, 800b7e2 <_findenv_r+0x32>
 800b7d2:	2a3d      	cmp	r2, #61	; 0x3d
 800b7d4:	d1f9      	bne.n	800b7ca <_findenv_r+0x1a>
 800b7d6:	4638      	mov	r0, r7
 800b7d8:	f000 fdda 	bl	800c390 <__env_unlock>
 800b7dc:	2000      	movs	r0, #0
 800b7de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7e2:	eba8 0809 	sub.w	r8, r8, r9
 800b7e6:	46a3      	mov	fp, r4
 800b7e8:	f854 0b04 	ldr.w	r0, [r4], #4
 800b7ec:	2800      	cmp	r0, #0
 800b7ee:	d0f2      	beq.n	800b7d6 <_findenv_r+0x26>
 800b7f0:	4642      	mov	r2, r8
 800b7f2:	4649      	mov	r1, r9
 800b7f4:	f000 fc49 	bl	800c08a <strncmp>
 800b7f8:	2800      	cmp	r0, #0
 800b7fa:	d1f4      	bne.n	800b7e6 <_findenv_r+0x36>
 800b7fc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b800:	eb03 0508 	add.w	r5, r3, r8
 800b804:	f813 3008 	ldrb.w	r3, [r3, r8]
 800b808:	2b3d      	cmp	r3, #61	; 0x3d
 800b80a:	d1ec      	bne.n	800b7e6 <_findenv_r+0x36>
 800b80c:	f8da 3000 	ldr.w	r3, [sl]
 800b810:	ebab 0303 	sub.w	r3, fp, r3
 800b814:	109b      	asrs	r3, r3, #2
 800b816:	4638      	mov	r0, r7
 800b818:	6033      	str	r3, [r6, #0]
 800b81a:	f000 fdb9 	bl	800c390 <__env_unlock>
 800b81e:	1c68      	adds	r0, r5, #1
 800b820:	e7dd      	b.n	800b7de <_findenv_r+0x2e>
 800b822:	bf00      	nop
 800b824:	20000140 	.word	0x20000140

0800b828 <_getenv_r>:
 800b828:	b507      	push	{r0, r1, r2, lr}
 800b82a:	aa01      	add	r2, sp, #4
 800b82c:	f7ff ffc0 	bl	800b7b0 <_findenv_r>
 800b830:	b003      	add	sp, #12
 800b832:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800b838 <__gettzinfo>:
 800b838:	4800      	ldr	r0, [pc, #0]	; (800b83c <__gettzinfo+0x4>)
 800b83a:	4770      	bx	lr
 800b83c:	200001c0 	.word	0x200001c0

0800b840 <gmtime_r>:
 800b840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b844:	e9d0 6700 	ldrd	r6, r7, [r0]
 800b848:	460c      	mov	r4, r1
 800b84a:	4a4f      	ldr	r2, [pc, #316]	; (800b988 <gmtime_r+0x148>)
 800b84c:	2300      	movs	r3, #0
 800b84e:	4630      	mov	r0, r6
 800b850:	4639      	mov	r1, r7
 800b852:	f7f4 fd45 	bl	80002e0 <__aeabi_ldivmod>
 800b856:	4639      	mov	r1, r7
 800b858:	4605      	mov	r5, r0
 800b85a:	4a4b      	ldr	r2, [pc, #300]	; (800b988 <gmtime_r+0x148>)
 800b85c:	4630      	mov	r0, r6
 800b85e:	2300      	movs	r3, #0
 800b860:	f7f4 fd3e 	bl	80002e0 <__aeabi_ldivmod>
 800b864:	2a00      	cmp	r2, #0
 800b866:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800b86a:	bfb7      	itett	lt
 800b86c:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800b870:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800b874:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800b878:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800b87c:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800b880:	fbb2 f1f0 	udiv	r1, r2, r0
 800b884:	fb00 2211 	mls	r2, r0, r1, r2
 800b888:	203c      	movs	r0, #60	; 0x3c
 800b88a:	60a1      	str	r1, [r4, #8]
 800b88c:	fbb2 f1f0 	udiv	r1, r2, r0
 800b890:	fb00 2211 	mls	r2, r0, r1, r2
 800b894:	6061      	str	r1, [r4, #4]
 800b896:	6022      	str	r2, [r4, #0]
 800b898:	2107      	movs	r1, #7
 800b89a:	1cda      	adds	r2, r3, #3
 800b89c:	fb92 f1f1 	sdiv	r1, r2, r1
 800b8a0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800b8a4:	1a52      	subs	r2, r2, r1
 800b8a6:	bf48      	it	mi
 800b8a8:	3207      	addmi	r2, #7
 800b8aa:	4d38      	ldr	r5, [pc, #224]	; (800b98c <gmtime_r+0x14c>)
 800b8ac:	4838      	ldr	r0, [pc, #224]	; (800b990 <gmtime_r+0x150>)
 800b8ae:	61a2      	str	r2, [r4, #24]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	bfb7      	itett	lt
 800b8b4:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800b8b8:	fb93 f5f5 	sdivge	r5, r3, r5
 800b8bc:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800b8c0:	fb92 f5f5 	sdivlt	r5, r2, r5
 800b8c4:	fb00 3005 	mla	r0, r0, r5, r3
 800b8c8:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800b8cc:	fbb0 f2f2 	udiv	r2, r0, r2
 800b8d0:	4402      	add	r2, r0
 800b8d2:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800b8d6:	fbb0 f1f3 	udiv	r1, r0, r3
 800b8da:	1a52      	subs	r2, r2, r1
 800b8dc:	f240 1c6d 	movw	ip, #365	; 0x16d
 800b8e0:	492c      	ldr	r1, [pc, #176]	; (800b994 <gmtime_r+0x154>)
 800b8e2:	fbb0 f1f1 	udiv	r1, r0, r1
 800b8e6:	2764      	movs	r7, #100	; 0x64
 800b8e8:	1a52      	subs	r2, r2, r1
 800b8ea:	fbb2 f1fc 	udiv	r1, r2, ip
 800b8ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8f2:	fbb1 f6f7 	udiv	r6, r1, r7
 800b8f6:	1af3      	subs	r3, r6, r3
 800b8f8:	4403      	add	r3, r0
 800b8fa:	fb0c 3311 	mls	r3, ip, r1, r3
 800b8fe:	2299      	movs	r2, #153	; 0x99
 800b900:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800b904:	f10e 0e02 	add.w	lr, lr, #2
 800b908:	f103 0c01 	add.w	ip, r3, #1
 800b90c:	fbbe f0f2 	udiv	r0, lr, r2
 800b910:	4342      	muls	r2, r0
 800b912:	3202      	adds	r2, #2
 800b914:	f04f 0805 	mov.w	r8, #5
 800b918:	fbb2 f2f8 	udiv	r2, r2, r8
 800b91c:	ebac 0c02 	sub.w	ip, ip, r2
 800b920:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800b924:	4596      	cmp	lr, r2
 800b926:	bf94      	ite	ls
 800b928:	2202      	movls	r2, #2
 800b92a:	f06f 0209 	mvnhi.w	r2, #9
 800b92e:	4410      	add	r0, r2
 800b930:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b934:	fb02 1505 	mla	r5, r2, r5, r1
 800b938:	2801      	cmp	r0, #1
 800b93a:	bf98      	it	ls
 800b93c:	3501      	addls	r5, #1
 800b93e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800b942:	d30d      	bcc.n	800b960 <gmtime_r+0x120>
 800b944:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800b948:	61e3      	str	r3, [r4, #28]
 800b94a:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800b94e:	2300      	movs	r3, #0
 800b950:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800b954:	f8c4 c00c 	str.w	ip, [r4, #12]
 800b958:	6223      	str	r3, [r4, #32]
 800b95a:	4620      	mov	r0, r4
 800b95c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b960:	078a      	lsls	r2, r1, #30
 800b962:	d102      	bne.n	800b96a <gmtime_r+0x12a>
 800b964:	fb07 1616 	mls	r6, r7, r6, r1
 800b968:	b95e      	cbnz	r6, 800b982 <gmtime_r+0x142>
 800b96a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b96e:	fbb1 f6f2 	udiv	r6, r1, r2
 800b972:	fb02 1216 	mls	r2, r2, r6, r1
 800b976:	fab2 f282 	clz	r2, r2
 800b97a:	0952      	lsrs	r2, r2, #5
 800b97c:	333b      	adds	r3, #59	; 0x3b
 800b97e:	4413      	add	r3, r2
 800b980:	e7e2      	b.n	800b948 <gmtime_r+0x108>
 800b982:	2201      	movs	r2, #1
 800b984:	e7fa      	b.n	800b97c <gmtime_r+0x13c>
 800b986:	bf00      	nop
 800b988:	00015180 	.word	0x00015180
 800b98c:	00023ab1 	.word	0x00023ab1
 800b990:	fffdc54f 	.word	0xfffdc54f
 800b994:	00023ab0 	.word	0x00023ab0

0800b998 <__retarget_lock_init_recursive>:
 800b998:	4770      	bx	lr

0800b99a <__retarget_lock_acquire>:
 800b99a:	4770      	bx	lr

0800b99c <__retarget_lock_acquire_recursive>:
 800b99c:	4770      	bx	lr

0800b99e <__retarget_lock_release>:
 800b99e:	4770      	bx	lr

0800b9a0 <__retarget_lock_release_recursive>:
 800b9a0:	4770      	bx	lr
	...

0800b9a4 <__malloc_lock>:
 800b9a4:	4801      	ldr	r0, [pc, #4]	; (800b9ac <__malloc_lock+0x8>)
 800b9a6:	f7ff bff9 	b.w	800b99c <__retarget_lock_acquire_recursive>
 800b9aa:	bf00      	nop
 800b9ac:	20000fb5 	.word	0x20000fb5

0800b9b0 <__malloc_unlock>:
 800b9b0:	4801      	ldr	r0, [pc, #4]	; (800b9b8 <__malloc_unlock+0x8>)
 800b9b2:	f7ff bff5 	b.w	800b9a0 <__retarget_lock_release_recursive>
 800b9b6:	bf00      	nop
 800b9b8:	20000fb5 	.word	0x20000fb5

0800b9bc <__sfputc_r>:
 800b9bc:	6893      	ldr	r3, [r2, #8]
 800b9be:	3b01      	subs	r3, #1
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	b410      	push	{r4}
 800b9c4:	6093      	str	r3, [r2, #8]
 800b9c6:	da08      	bge.n	800b9da <__sfputc_r+0x1e>
 800b9c8:	6994      	ldr	r4, [r2, #24]
 800b9ca:	42a3      	cmp	r3, r4
 800b9cc:	db01      	blt.n	800b9d2 <__sfputc_r+0x16>
 800b9ce:	290a      	cmp	r1, #10
 800b9d0:	d103      	bne.n	800b9da <__sfputc_r+0x1e>
 800b9d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9d6:	f000 bbeb 	b.w	800c1b0 <__swbuf_r>
 800b9da:	6813      	ldr	r3, [r2, #0]
 800b9dc:	1c58      	adds	r0, r3, #1
 800b9de:	6010      	str	r0, [r2, #0]
 800b9e0:	7019      	strb	r1, [r3, #0]
 800b9e2:	4608      	mov	r0, r1
 800b9e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9e8:	4770      	bx	lr

0800b9ea <__sfputs_r>:
 800b9ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ec:	4606      	mov	r6, r0
 800b9ee:	460f      	mov	r7, r1
 800b9f0:	4614      	mov	r4, r2
 800b9f2:	18d5      	adds	r5, r2, r3
 800b9f4:	42ac      	cmp	r4, r5
 800b9f6:	d101      	bne.n	800b9fc <__sfputs_r+0x12>
 800b9f8:	2000      	movs	r0, #0
 800b9fa:	e007      	b.n	800ba0c <__sfputs_r+0x22>
 800b9fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba00:	463a      	mov	r2, r7
 800ba02:	4630      	mov	r0, r6
 800ba04:	f7ff ffda 	bl	800b9bc <__sfputc_r>
 800ba08:	1c43      	adds	r3, r0, #1
 800ba0a:	d1f3      	bne.n	800b9f4 <__sfputs_r+0xa>
 800ba0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba10 <_vfiprintf_r>:
 800ba10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba14:	460d      	mov	r5, r1
 800ba16:	b09d      	sub	sp, #116	; 0x74
 800ba18:	4614      	mov	r4, r2
 800ba1a:	4698      	mov	r8, r3
 800ba1c:	4606      	mov	r6, r0
 800ba1e:	b118      	cbz	r0, 800ba28 <_vfiprintf_r+0x18>
 800ba20:	6983      	ldr	r3, [r0, #24]
 800ba22:	b90b      	cbnz	r3, 800ba28 <_vfiprintf_r+0x18>
 800ba24:	f000 fdd4 	bl	800c5d0 <__sinit>
 800ba28:	4b89      	ldr	r3, [pc, #548]	; (800bc50 <_vfiprintf_r+0x240>)
 800ba2a:	429d      	cmp	r5, r3
 800ba2c:	d11b      	bne.n	800ba66 <_vfiprintf_r+0x56>
 800ba2e:	6875      	ldr	r5, [r6, #4]
 800ba30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba32:	07d9      	lsls	r1, r3, #31
 800ba34:	d405      	bmi.n	800ba42 <_vfiprintf_r+0x32>
 800ba36:	89ab      	ldrh	r3, [r5, #12]
 800ba38:	059a      	lsls	r2, r3, #22
 800ba3a:	d402      	bmi.n	800ba42 <_vfiprintf_r+0x32>
 800ba3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba3e:	f7ff ffad 	bl	800b99c <__retarget_lock_acquire_recursive>
 800ba42:	89ab      	ldrh	r3, [r5, #12]
 800ba44:	071b      	lsls	r3, r3, #28
 800ba46:	d501      	bpl.n	800ba4c <_vfiprintf_r+0x3c>
 800ba48:	692b      	ldr	r3, [r5, #16]
 800ba4a:	b9eb      	cbnz	r3, 800ba88 <_vfiprintf_r+0x78>
 800ba4c:	4629      	mov	r1, r5
 800ba4e:	4630      	mov	r0, r6
 800ba50:	f000 fc12 	bl	800c278 <__swsetup_r>
 800ba54:	b1c0      	cbz	r0, 800ba88 <_vfiprintf_r+0x78>
 800ba56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba58:	07dc      	lsls	r4, r3, #31
 800ba5a:	d50e      	bpl.n	800ba7a <_vfiprintf_r+0x6a>
 800ba5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba60:	b01d      	add	sp, #116	; 0x74
 800ba62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba66:	4b7b      	ldr	r3, [pc, #492]	; (800bc54 <_vfiprintf_r+0x244>)
 800ba68:	429d      	cmp	r5, r3
 800ba6a:	d101      	bne.n	800ba70 <_vfiprintf_r+0x60>
 800ba6c:	68b5      	ldr	r5, [r6, #8]
 800ba6e:	e7df      	b.n	800ba30 <_vfiprintf_r+0x20>
 800ba70:	4b79      	ldr	r3, [pc, #484]	; (800bc58 <_vfiprintf_r+0x248>)
 800ba72:	429d      	cmp	r5, r3
 800ba74:	bf08      	it	eq
 800ba76:	68f5      	ldreq	r5, [r6, #12]
 800ba78:	e7da      	b.n	800ba30 <_vfiprintf_r+0x20>
 800ba7a:	89ab      	ldrh	r3, [r5, #12]
 800ba7c:	0598      	lsls	r0, r3, #22
 800ba7e:	d4ed      	bmi.n	800ba5c <_vfiprintf_r+0x4c>
 800ba80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba82:	f7ff ff8d 	bl	800b9a0 <__retarget_lock_release_recursive>
 800ba86:	e7e9      	b.n	800ba5c <_vfiprintf_r+0x4c>
 800ba88:	2300      	movs	r3, #0
 800ba8a:	9309      	str	r3, [sp, #36]	; 0x24
 800ba8c:	2320      	movs	r3, #32
 800ba8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba92:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba96:	2330      	movs	r3, #48	; 0x30
 800ba98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bc5c <_vfiprintf_r+0x24c>
 800ba9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800baa0:	f04f 0901 	mov.w	r9, #1
 800baa4:	4623      	mov	r3, r4
 800baa6:	469a      	mov	sl, r3
 800baa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800baac:	b10a      	cbz	r2, 800bab2 <_vfiprintf_r+0xa2>
 800baae:	2a25      	cmp	r2, #37	; 0x25
 800bab0:	d1f9      	bne.n	800baa6 <_vfiprintf_r+0x96>
 800bab2:	ebba 0b04 	subs.w	fp, sl, r4
 800bab6:	d00b      	beq.n	800bad0 <_vfiprintf_r+0xc0>
 800bab8:	465b      	mov	r3, fp
 800baba:	4622      	mov	r2, r4
 800babc:	4629      	mov	r1, r5
 800babe:	4630      	mov	r0, r6
 800bac0:	f7ff ff93 	bl	800b9ea <__sfputs_r>
 800bac4:	3001      	adds	r0, #1
 800bac6:	f000 80aa 	beq.w	800bc1e <_vfiprintf_r+0x20e>
 800baca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bacc:	445a      	add	r2, fp
 800bace:	9209      	str	r2, [sp, #36]	; 0x24
 800bad0:	f89a 3000 	ldrb.w	r3, [sl]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	f000 80a2 	beq.w	800bc1e <_vfiprintf_r+0x20e>
 800bada:	2300      	movs	r3, #0
 800badc:	f04f 32ff 	mov.w	r2, #4294967295
 800bae0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bae4:	f10a 0a01 	add.w	sl, sl, #1
 800bae8:	9304      	str	r3, [sp, #16]
 800baea:	9307      	str	r3, [sp, #28]
 800baec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800baf0:	931a      	str	r3, [sp, #104]	; 0x68
 800baf2:	4654      	mov	r4, sl
 800baf4:	2205      	movs	r2, #5
 800baf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bafa:	4858      	ldr	r0, [pc, #352]	; (800bc5c <_vfiprintf_r+0x24c>)
 800bafc:	f7f4 fba0 	bl	8000240 <memchr>
 800bb00:	9a04      	ldr	r2, [sp, #16]
 800bb02:	b9d8      	cbnz	r0, 800bb3c <_vfiprintf_r+0x12c>
 800bb04:	06d1      	lsls	r1, r2, #27
 800bb06:	bf44      	itt	mi
 800bb08:	2320      	movmi	r3, #32
 800bb0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb0e:	0713      	lsls	r3, r2, #28
 800bb10:	bf44      	itt	mi
 800bb12:	232b      	movmi	r3, #43	; 0x2b
 800bb14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb18:	f89a 3000 	ldrb.w	r3, [sl]
 800bb1c:	2b2a      	cmp	r3, #42	; 0x2a
 800bb1e:	d015      	beq.n	800bb4c <_vfiprintf_r+0x13c>
 800bb20:	9a07      	ldr	r2, [sp, #28]
 800bb22:	4654      	mov	r4, sl
 800bb24:	2000      	movs	r0, #0
 800bb26:	f04f 0c0a 	mov.w	ip, #10
 800bb2a:	4621      	mov	r1, r4
 800bb2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb30:	3b30      	subs	r3, #48	; 0x30
 800bb32:	2b09      	cmp	r3, #9
 800bb34:	d94e      	bls.n	800bbd4 <_vfiprintf_r+0x1c4>
 800bb36:	b1b0      	cbz	r0, 800bb66 <_vfiprintf_r+0x156>
 800bb38:	9207      	str	r2, [sp, #28]
 800bb3a:	e014      	b.n	800bb66 <_vfiprintf_r+0x156>
 800bb3c:	eba0 0308 	sub.w	r3, r0, r8
 800bb40:	fa09 f303 	lsl.w	r3, r9, r3
 800bb44:	4313      	orrs	r3, r2
 800bb46:	9304      	str	r3, [sp, #16]
 800bb48:	46a2      	mov	sl, r4
 800bb4a:	e7d2      	b.n	800baf2 <_vfiprintf_r+0xe2>
 800bb4c:	9b03      	ldr	r3, [sp, #12]
 800bb4e:	1d19      	adds	r1, r3, #4
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	9103      	str	r1, [sp, #12]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	bfbb      	ittet	lt
 800bb58:	425b      	neglt	r3, r3
 800bb5a:	f042 0202 	orrlt.w	r2, r2, #2
 800bb5e:	9307      	strge	r3, [sp, #28]
 800bb60:	9307      	strlt	r3, [sp, #28]
 800bb62:	bfb8      	it	lt
 800bb64:	9204      	strlt	r2, [sp, #16]
 800bb66:	7823      	ldrb	r3, [r4, #0]
 800bb68:	2b2e      	cmp	r3, #46	; 0x2e
 800bb6a:	d10c      	bne.n	800bb86 <_vfiprintf_r+0x176>
 800bb6c:	7863      	ldrb	r3, [r4, #1]
 800bb6e:	2b2a      	cmp	r3, #42	; 0x2a
 800bb70:	d135      	bne.n	800bbde <_vfiprintf_r+0x1ce>
 800bb72:	9b03      	ldr	r3, [sp, #12]
 800bb74:	1d1a      	adds	r2, r3, #4
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	9203      	str	r2, [sp, #12]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	bfb8      	it	lt
 800bb7e:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb82:	3402      	adds	r4, #2
 800bb84:	9305      	str	r3, [sp, #20]
 800bb86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bc6c <_vfiprintf_r+0x25c>
 800bb8a:	7821      	ldrb	r1, [r4, #0]
 800bb8c:	2203      	movs	r2, #3
 800bb8e:	4650      	mov	r0, sl
 800bb90:	f7f4 fb56 	bl	8000240 <memchr>
 800bb94:	b140      	cbz	r0, 800bba8 <_vfiprintf_r+0x198>
 800bb96:	2340      	movs	r3, #64	; 0x40
 800bb98:	eba0 000a 	sub.w	r0, r0, sl
 800bb9c:	fa03 f000 	lsl.w	r0, r3, r0
 800bba0:	9b04      	ldr	r3, [sp, #16]
 800bba2:	4303      	orrs	r3, r0
 800bba4:	3401      	adds	r4, #1
 800bba6:	9304      	str	r3, [sp, #16]
 800bba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbac:	482c      	ldr	r0, [pc, #176]	; (800bc60 <_vfiprintf_r+0x250>)
 800bbae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbb2:	2206      	movs	r2, #6
 800bbb4:	f7f4 fb44 	bl	8000240 <memchr>
 800bbb8:	2800      	cmp	r0, #0
 800bbba:	d03f      	beq.n	800bc3c <_vfiprintf_r+0x22c>
 800bbbc:	4b29      	ldr	r3, [pc, #164]	; (800bc64 <_vfiprintf_r+0x254>)
 800bbbe:	bb1b      	cbnz	r3, 800bc08 <_vfiprintf_r+0x1f8>
 800bbc0:	9b03      	ldr	r3, [sp, #12]
 800bbc2:	3307      	adds	r3, #7
 800bbc4:	f023 0307 	bic.w	r3, r3, #7
 800bbc8:	3308      	adds	r3, #8
 800bbca:	9303      	str	r3, [sp, #12]
 800bbcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbce:	443b      	add	r3, r7
 800bbd0:	9309      	str	r3, [sp, #36]	; 0x24
 800bbd2:	e767      	b.n	800baa4 <_vfiprintf_r+0x94>
 800bbd4:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbd8:	460c      	mov	r4, r1
 800bbda:	2001      	movs	r0, #1
 800bbdc:	e7a5      	b.n	800bb2a <_vfiprintf_r+0x11a>
 800bbde:	2300      	movs	r3, #0
 800bbe0:	3401      	adds	r4, #1
 800bbe2:	9305      	str	r3, [sp, #20]
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	f04f 0c0a 	mov.w	ip, #10
 800bbea:	4620      	mov	r0, r4
 800bbec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbf0:	3a30      	subs	r2, #48	; 0x30
 800bbf2:	2a09      	cmp	r2, #9
 800bbf4:	d903      	bls.n	800bbfe <_vfiprintf_r+0x1ee>
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d0c5      	beq.n	800bb86 <_vfiprintf_r+0x176>
 800bbfa:	9105      	str	r1, [sp, #20]
 800bbfc:	e7c3      	b.n	800bb86 <_vfiprintf_r+0x176>
 800bbfe:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc02:	4604      	mov	r4, r0
 800bc04:	2301      	movs	r3, #1
 800bc06:	e7f0      	b.n	800bbea <_vfiprintf_r+0x1da>
 800bc08:	ab03      	add	r3, sp, #12
 800bc0a:	9300      	str	r3, [sp, #0]
 800bc0c:	462a      	mov	r2, r5
 800bc0e:	4b16      	ldr	r3, [pc, #88]	; (800bc68 <_vfiprintf_r+0x258>)
 800bc10:	a904      	add	r1, sp, #16
 800bc12:	4630      	mov	r0, r6
 800bc14:	f3af 8000 	nop.w
 800bc18:	4607      	mov	r7, r0
 800bc1a:	1c78      	adds	r0, r7, #1
 800bc1c:	d1d6      	bne.n	800bbcc <_vfiprintf_r+0x1bc>
 800bc1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc20:	07d9      	lsls	r1, r3, #31
 800bc22:	d405      	bmi.n	800bc30 <_vfiprintf_r+0x220>
 800bc24:	89ab      	ldrh	r3, [r5, #12]
 800bc26:	059a      	lsls	r2, r3, #22
 800bc28:	d402      	bmi.n	800bc30 <_vfiprintf_r+0x220>
 800bc2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc2c:	f7ff feb8 	bl	800b9a0 <__retarget_lock_release_recursive>
 800bc30:	89ab      	ldrh	r3, [r5, #12]
 800bc32:	065b      	lsls	r3, r3, #25
 800bc34:	f53f af12 	bmi.w	800ba5c <_vfiprintf_r+0x4c>
 800bc38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc3a:	e711      	b.n	800ba60 <_vfiprintf_r+0x50>
 800bc3c:	ab03      	add	r3, sp, #12
 800bc3e:	9300      	str	r3, [sp, #0]
 800bc40:	462a      	mov	r2, r5
 800bc42:	4b09      	ldr	r3, [pc, #36]	; (800bc68 <_vfiprintf_r+0x258>)
 800bc44:	a904      	add	r1, sp, #16
 800bc46:	4630      	mov	r0, r6
 800bc48:	f000 f880 	bl	800bd4c <_printf_i>
 800bc4c:	e7e4      	b.n	800bc18 <_vfiprintf_r+0x208>
 800bc4e:	bf00      	nop
 800bc50:	0800d470 	.word	0x0800d470
 800bc54:	0800d490 	.word	0x0800d490
 800bc58:	0800d450 	.word	0x0800d450
 800bc5c:	0800d31c 	.word	0x0800d31c
 800bc60:	0800d326 	.word	0x0800d326
 800bc64:	00000000 	.word	0x00000000
 800bc68:	0800b9eb 	.word	0x0800b9eb
 800bc6c:	0800d322 	.word	0x0800d322

0800bc70 <_printf_common>:
 800bc70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc74:	4616      	mov	r6, r2
 800bc76:	4699      	mov	r9, r3
 800bc78:	688a      	ldr	r2, [r1, #8]
 800bc7a:	690b      	ldr	r3, [r1, #16]
 800bc7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc80:	4293      	cmp	r3, r2
 800bc82:	bfb8      	it	lt
 800bc84:	4613      	movlt	r3, r2
 800bc86:	6033      	str	r3, [r6, #0]
 800bc88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc8c:	4607      	mov	r7, r0
 800bc8e:	460c      	mov	r4, r1
 800bc90:	b10a      	cbz	r2, 800bc96 <_printf_common+0x26>
 800bc92:	3301      	adds	r3, #1
 800bc94:	6033      	str	r3, [r6, #0]
 800bc96:	6823      	ldr	r3, [r4, #0]
 800bc98:	0699      	lsls	r1, r3, #26
 800bc9a:	bf42      	ittt	mi
 800bc9c:	6833      	ldrmi	r3, [r6, #0]
 800bc9e:	3302      	addmi	r3, #2
 800bca0:	6033      	strmi	r3, [r6, #0]
 800bca2:	6825      	ldr	r5, [r4, #0]
 800bca4:	f015 0506 	ands.w	r5, r5, #6
 800bca8:	d106      	bne.n	800bcb8 <_printf_common+0x48>
 800bcaa:	f104 0a19 	add.w	sl, r4, #25
 800bcae:	68e3      	ldr	r3, [r4, #12]
 800bcb0:	6832      	ldr	r2, [r6, #0]
 800bcb2:	1a9b      	subs	r3, r3, r2
 800bcb4:	42ab      	cmp	r3, r5
 800bcb6:	dc26      	bgt.n	800bd06 <_printf_common+0x96>
 800bcb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bcbc:	1e13      	subs	r3, r2, #0
 800bcbe:	6822      	ldr	r2, [r4, #0]
 800bcc0:	bf18      	it	ne
 800bcc2:	2301      	movne	r3, #1
 800bcc4:	0692      	lsls	r2, r2, #26
 800bcc6:	d42b      	bmi.n	800bd20 <_printf_common+0xb0>
 800bcc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bccc:	4649      	mov	r1, r9
 800bcce:	4638      	mov	r0, r7
 800bcd0:	47c0      	blx	r8
 800bcd2:	3001      	adds	r0, #1
 800bcd4:	d01e      	beq.n	800bd14 <_printf_common+0xa4>
 800bcd6:	6823      	ldr	r3, [r4, #0]
 800bcd8:	68e5      	ldr	r5, [r4, #12]
 800bcda:	6832      	ldr	r2, [r6, #0]
 800bcdc:	f003 0306 	and.w	r3, r3, #6
 800bce0:	2b04      	cmp	r3, #4
 800bce2:	bf08      	it	eq
 800bce4:	1aad      	subeq	r5, r5, r2
 800bce6:	68a3      	ldr	r3, [r4, #8]
 800bce8:	6922      	ldr	r2, [r4, #16]
 800bcea:	bf0c      	ite	eq
 800bcec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bcf0:	2500      	movne	r5, #0
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	bfc4      	itt	gt
 800bcf6:	1a9b      	subgt	r3, r3, r2
 800bcf8:	18ed      	addgt	r5, r5, r3
 800bcfa:	2600      	movs	r6, #0
 800bcfc:	341a      	adds	r4, #26
 800bcfe:	42b5      	cmp	r5, r6
 800bd00:	d11a      	bne.n	800bd38 <_printf_common+0xc8>
 800bd02:	2000      	movs	r0, #0
 800bd04:	e008      	b.n	800bd18 <_printf_common+0xa8>
 800bd06:	2301      	movs	r3, #1
 800bd08:	4652      	mov	r2, sl
 800bd0a:	4649      	mov	r1, r9
 800bd0c:	4638      	mov	r0, r7
 800bd0e:	47c0      	blx	r8
 800bd10:	3001      	adds	r0, #1
 800bd12:	d103      	bne.n	800bd1c <_printf_common+0xac>
 800bd14:	f04f 30ff 	mov.w	r0, #4294967295
 800bd18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd1c:	3501      	adds	r5, #1
 800bd1e:	e7c6      	b.n	800bcae <_printf_common+0x3e>
 800bd20:	18e1      	adds	r1, r4, r3
 800bd22:	1c5a      	adds	r2, r3, #1
 800bd24:	2030      	movs	r0, #48	; 0x30
 800bd26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd2a:	4422      	add	r2, r4
 800bd2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd34:	3302      	adds	r3, #2
 800bd36:	e7c7      	b.n	800bcc8 <_printf_common+0x58>
 800bd38:	2301      	movs	r3, #1
 800bd3a:	4622      	mov	r2, r4
 800bd3c:	4649      	mov	r1, r9
 800bd3e:	4638      	mov	r0, r7
 800bd40:	47c0      	blx	r8
 800bd42:	3001      	adds	r0, #1
 800bd44:	d0e6      	beq.n	800bd14 <_printf_common+0xa4>
 800bd46:	3601      	adds	r6, #1
 800bd48:	e7d9      	b.n	800bcfe <_printf_common+0x8e>
	...

0800bd4c <_printf_i>:
 800bd4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd50:	7e0f      	ldrb	r7, [r1, #24]
 800bd52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bd54:	2f78      	cmp	r7, #120	; 0x78
 800bd56:	4691      	mov	r9, r2
 800bd58:	4680      	mov	r8, r0
 800bd5a:	460c      	mov	r4, r1
 800bd5c:	469a      	mov	sl, r3
 800bd5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bd62:	d807      	bhi.n	800bd74 <_printf_i+0x28>
 800bd64:	2f62      	cmp	r7, #98	; 0x62
 800bd66:	d80a      	bhi.n	800bd7e <_printf_i+0x32>
 800bd68:	2f00      	cmp	r7, #0
 800bd6a:	f000 80d8 	beq.w	800bf1e <_printf_i+0x1d2>
 800bd6e:	2f58      	cmp	r7, #88	; 0x58
 800bd70:	f000 80a3 	beq.w	800beba <_printf_i+0x16e>
 800bd74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bd7c:	e03a      	b.n	800bdf4 <_printf_i+0xa8>
 800bd7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bd82:	2b15      	cmp	r3, #21
 800bd84:	d8f6      	bhi.n	800bd74 <_printf_i+0x28>
 800bd86:	a101      	add	r1, pc, #4	; (adr r1, 800bd8c <_printf_i+0x40>)
 800bd88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bd8c:	0800bde5 	.word	0x0800bde5
 800bd90:	0800bdf9 	.word	0x0800bdf9
 800bd94:	0800bd75 	.word	0x0800bd75
 800bd98:	0800bd75 	.word	0x0800bd75
 800bd9c:	0800bd75 	.word	0x0800bd75
 800bda0:	0800bd75 	.word	0x0800bd75
 800bda4:	0800bdf9 	.word	0x0800bdf9
 800bda8:	0800bd75 	.word	0x0800bd75
 800bdac:	0800bd75 	.word	0x0800bd75
 800bdb0:	0800bd75 	.word	0x0800bd75
 800bdb4:	0800bd75 	.word	0x0800bd75
 800bdb8:	0800bf05 	.word	0x0800bf05
 800bdbc:	0800be29 	.word	0x0800be29
 800bdc0:	0800bee7 	.word	0x0800bee7
 800bdc4:	0800bd75 	.word	0x0800bd75
 800bdc8:	0800bd75 	.word	0x0800bd75
 800bdcc:	0800bf27 	.word	0x0800bf27
 800bdd0:	0800bd75 	.word	0x0800bd75
 800bdd4:	0800be29 	.word	0x0800be29
 800bdd8:	0800bd75 	.word	0x0800bd75
 800bddc:	0800bd75 	.word	0x0800bd75
 800bde0:	0800beef 	.word	0x0800beef
 800bde4:	682b      	ldr	r3, [r5, #0]
 800bde6:	1d1a      	adds	r2, r3, #4
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	602a      	str	r2, [r5, #0]
 800bdec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bdf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	e0a3      	b.n	800bf40 <_printf_i+0x1f4>
 800bdf8:	6820      	ldr	r0, [r4, #0]
 800bdfa:	6829      	ldr	r1, [r5, #0]
 800bdfc:	0606      	lsls	r6, r0, #24
 800bdfe:	f101 0304 	add.w	r3, r1, #4
 800be02:	d50a      	bpl.n	800be1a <_printf_i+0xce>
 800be04:	680e      	ldr	r6, [r1, #0]
 800be06:	602b      	str	r3, [r5, #0]
 800be08:	2e00      	cmp	r6, #0
 800be0a:	da03      	bge.n	800be14 <_printf_i+0xc8>
 800be0c:	232d      	movs	r3, #45	; 0x2d
 800be0e:	4276      	negs	r6, r6
 800be10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be14:	485e      	ldr	r0, [pc, #376]	; (800bf90 <_printf_i+0x244>)
 800be16:	230a      	movs	r3, #10
 800be18:	e019      	b.n	800be4e <_printf_i+0x102>
 800be1a:	680e      	ldr	r6, [r1, #0]
 800be1c:	602b      	str	r3, [r5, #0]
 800be1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800be22:	bf18      	it	ne
 800be24:	b236      	sxthne	r6, r6
 800be26:	e7ef      	b.n	800be08 <_printf_i+0xbc>
 800be28:	682b      	ldr	r3, [r5, #0]
 800be2a:	6820      	ldr	r0, [r4, #0]
 800be2c:	1d19      	adds	r1, r3, #4
 800be2e:	6029      	str	r1, [r5, #0]
 800be30:	0601      	lsls	r1, r0, #24
 800be32:	d501      	bpl.n	800be38 <_printf_i+0xec>
 800be34:	681e      	ldr	r6, [r3, #0]
 800be36:	e002      	b.n	800be3e <_printf_i+0xf2>
 800be38:	0646      	lsls	r6, r0, #25
 800be3a:	d5fb      	bpl.n	800be34 <_printf_i+0xe8>
 800be3c:	881e      	ldrh	r6, [r3, #0]
 800be3e:	4854      	ldr	r0, [pc, #336]	; (800bf90 <_printf_i+0x244>)
 800be40:	2f6f      	cmp	r7, #111	; 0x6f
 800be42:	bf0c      	ite	eq
 800be44:	2308      	moveq	r3, #8
 800be46:	230a      	movne	r3, #10
 800be48:	2100      	movs	r1, #0
 800be4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800be4e:	6865      	ldr	r5, [r4, #4]
 800be50:	60a5      	str	r5, [r4, #8]
 800be52:	2d00      	cmp	r5, #0
 800be54:	bfa2      	ittt	ge
 800be56:	6821      	ldrge	r1, [r4, #0]
 800be58:	f021 0104 	bicge.w	r1, r1, #4
 800be5c:	6021      	strge	r1, [r4, #0]
 800be5e:	b90e      	cbnz	r6, 800be64 <_printf_i+0x118>
 800be60:	2d00      	cmp	r5, #0
 800be62:	d04d      	beq.n	800bf00 <_printf_i+0x1b4>
 800be64:	4615      	mov	r5, r2
 800be66:	fbb6 f1f3 	udiv	r1, r6, r3
 800be6a:	fb03 6711 	mls	r7, r3, r1, r6
 800be6e:	5dc7      	ldrb	r7, [r0, r7]
 800be70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800be74:	4637      	mov	r7, r6
 800be76:	42bb      	cmp	r3, r7
 800be78:	460e      	mov	r6, r1
 800be7a:	d9f4      	bls.n	800be66 <_printf_i+0x11a>
 800be7c:	2b08      	cmp	r3, #8
 800be7e:	d10b      	bne.n	800be98 <_printf_i+0x14c>
 800be80:	6823      	ldr	r3, [r4, #0]
 800be82:	07de      	lsls	r6, r3, #31
 800be84:	d508      	bpl.n	800be98 <_printf_i+0x14c>
 800be86:	6923      	ldr	r3, [r4, #16]
 800be88:	6861      	ldr	r1, [r4, #4]
 800be8a:	4299      	cmp	r1, r3
 800be8c:	bfde      	ittt	le
 800be8e:	2330      	movle	r3, #48	; 0x30
 800be90:	f805 3c01 	strble.w	r3, [r5, #-1]
 800be94:	f105 35ff 	addle.w	r5, r5, #4294967295
 800be98:	1b52      	subs	r2, r2, r5
 800be9a:	6122      	str	r2, [r4, #16]
 800be9c:	f8cd a000 	str.w	sl, [sp]
 800bea0:	464b      	mov	r3, r9
 800bea2:	aa03      	add	r2, sp, #12
 800bea4:	4621      	mov	r1, r4
 800bea6:	4640      	mov	r0, r8
 800bea8:	f7ff fee2 	bl	800bc70 <_printf_common>
 800beac:	3001      	adds	r0, #1
 800beae:	d14c      	bne.n	800bf4a <_printf_i+0x1fe>
 800beb0:	f04f 30ff 	mov.w	r0, #4294967295
 800beb4:	b004      	add	sp, #16
 800beb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beba:	4835      	ldr	r0, [pc, #212]	; (800bf90 <_printf_i+0x244>)
 800bebc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bec0:	6829      	ldr	r1, [r5, #0]
 800bec2:	6823      	ldr	r3, [r4, #0]
 800bec4:	f851 6b04 	ldr.w	r6, [r1], #4
 800bec8:	6029      	str	r1, [r5, #0]
 800beca:	061d      	lsls	r5, r3, #24
 800becc:	d514      	bpl.n	800bef8 <_printf_i+0x1ac>
 800bece:	07df      	lsls	r7, r3, #31
 800bed0:	bf44      	itt	mi
 800bed2:	f043 0320 	orrmi.w	r3, r3, #32
 800bed6:	6023      	strmi	r3, [r4, #0]
 800bed8:	b91e      	cbnz	r6, 800bee2 <_printf_i+0x196>
 800beda:	6823      	ldr	r3, [r4, #0]
 800bedc:	f023 0320 	bic.w	r3, r3, #32
 800bee0:	6023      	str	r3, [r4, #0]
 800bee2:	2310      	movs	r3, #16
 800bee4:	e7b0      	b.n	800be48 <_printf_i+0xfc>
 800bee6:	6823      	ldr	r3, [r4, #0]
 800bee8:	f043 0320 	orr.w	r3, r3, #32
 800beec:	6023      	str	r3, [r4, #0]
 800beee:	2378      	movs	r3, #120	; 0x78
 800bef0:	4828      	ldr	r0, [pc, #160]	; (800bf94 <_printf_i+0x248>)
 800bef2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bef6:	e7e3      	b.n	800bec0 <_printf_i+0x174>
 800bef8:	0659      	lsls	r1, r3, #25
 800befa:	bf48      	it	mi
 800befc:	b2b6      	uxthmi	r6, r6
 800befe:	e7e6      	b.n	800bece <_printf_i+0x182>
 800bf00:	4615      	mov	r5, r2
 800bf02:	e7bb      	b.n	800be7c <_printf_i+0x130>
 800bf04:	682b      	ldr	r3, [r5, #0]
 800bf06:	6826      	ldr	r6, [r4, #0]
 800bf08:	6961      	ldr	r1, [r4, #20]
 800bf0a:	1d18      	adds	r0, r3, #4
 800bf0c:	6028      	str	r0, [r5, #0]
 800bf0e:	0635      	lsls	r5, r6, #24
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	d501      	bpl.n	800bf18 <_printf_i+0x1cc>
 800bf14:	6019      	str	r1, [r3, #0]
 800bf16:	e002      	b.n	800bf1e <_printf_i+0x1d2>
 800bf18:	0670      	lsls	r0, r6, #25
 800bf1a:	d5fb      	bpl.n	800bf14 <_printf_i+0x1c8>
 800bf1c:	8019      	strh	r1, [r3, #0]
 800bf1e:	2300      	movs	r3, #0
 800bf20:	6123      	str	r3, [r4, #16]
 800bf22:	4615      	mov	r5, r2
 800bf24:	e7ba      	b.n	800be9c <_printf_i+0x150>
 800bf26:	682b      	ldr	r3, [r5, #0]
 800bf28:	1d1a      	adds	r2, r3, #4
 800bf2a:	602a      	str	r2, [r5, #0]
 800bf2c:	681d      	ldr	r5, [r3, #0]
 800bf2e:	6862      	ldr	r2, [r4, #4]
 800bf30:	2100      	movs	r1, #0
 800bf32:	4628      	mov	r0, r5
 800bf34:	f7f4 f984 	bl	8000240 <memchr>
 800bf38:	b108      	cbz	r0, 800bf3e <_printf_i+0x1f2>
 800bf3a:	1b40      	subs	r0, r0, r5
 800bf3c:	6060      	str	r0, [r4, #4]
 800bf3e:	6863      	ldr	r3, [r4, #4]
 800bf40:	6123      	str	r3, [r4, #16]
 800bf42:	2300      	movs	r3, #0
 800bf44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf48:	e7a8      	b.n	800be9c <_printf_i+0x150>
 800bf4a:	6923      	ldr	r3, [r4, #16]
 800bf4c:	462a      	mov	r2, r5
 800bf4e:	4649      	mov	r1, r9
 800bf50:	4640      	mov	r0, r8
 800bf52:	47d0      	blx	sl
 800bf54:	3001      	adds	r0, #1
 800bf56:	d0ab      	beq.n	800beb0 <_printf_i+0x164>
 800bf58:	6823      	ldr	r3, [r4, #0]
 800bf5a:	079b      	lsls	r3, r3, #30
 800bf5c:	d413      	bmi.n	800bf86 <_printf_i+0x23a>
 800bf5e:	68e0      	ldr	r0, [r4, #12]
 800bf60:	9b03      	ldr	r3, [sp, #12]
 800bf62:	4298      	cmp	r0, r3
 800bf64:	bfb8      	it	lt
 800bf66:	4618      	movlt	r0, r3
 800bf68:	e7a4      	b.n	800beb4 <_printf_i+0x168>
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	4632      	mov	r2, r6
 800bf6e:	4649      	mov	r1, r9
 800bf70:	4640      	mov	r0, r8
 800bf72:	47d0      	blx	sl
 800bf74:	3001      	adds	r0, #1
 800bf76:	d09b      	beq.n	800beb0 <_printf_i+0x164>
 800bf78:	3501      	adds	r5, #1
 800bf7a:	68e3      	ldr	r3, [r4, #12]
 800bf7c:	9903      	ldr	r1, [sp, #12]
 800bf7e:	1a5b      	subs	r3, r3, r1
 800bf80:	42ab      	cmp	r3, r5
 800bf82:	dcf2      	bgt.n	800bf6a <_printf_i+0x21e>
 800bf84:	e7eb      	b.n	800bf5e <_printf_i+0x212>
 800bf86:	2500      	movs	r5, #0
 800bf88:	f104 0619 	add.w	r6, r4, #25
 800bf8c:	e7f5      	b.n	800bf7a <_printf_i+0x22e>
 800bf8e:	bf00      	nop
 800bf90:	0800d32d 	.word	0x0800d32d
 800bf94:	0800d33e 	.word	0x0800d33e

0800bf98 <siscanf>:
 800bf98:	b40e      	push	{r1, r2, r3}
 800bf9a:	b510      	push	{r4, lr}
 800bf9c:	b09f      	sub	sp, #124	; 0x7c
 800bf9e:	ac21      	add	r4, sp, #132	; 0x84
 800bfa0:	f44f 7101 	mov.w	r1, #516	; 0x204
 800bfa4:	f854 2b04 	ldr.w	r2, [r4], #4
 800bfa8:	9201      	str	r2, [sp, #4]
 800bfaa:	f8ad 101c 	strh.w	r1, [sp, #28]
 800bfae:	9004      	str	r0, [sp, #16]
 800bfb0:	9008      	str	r0, [sp, #32]
 800bfb2:	f7f4 f937 	bl	8000224 <strlen>
 800bfb6:	4b0c      	ldr	r3, [pc, #48]	; (800bfe8 <siscanf+0x50>)
 800bfb8:	9005      	str	r0, [sp, #20]
 800bfba:	9009      	str	r0, [sp, #36]	; 0x24
 800bfbc:	930d      	str	r3, [sp, #52]	; 0x34
 800bfbe:	480b      	ldr	r0, [pc, #44]	; (800bfec <siscanf+0x54>)
 800bfc0:	9a01      	ldr	r2, [sp, #4]
 800bfc2:	6800      	ldr	r0, [r0, #0]
 800bfc4:	9403      	str	r4, [sp, #12]
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	9311      	str	r3, [sp, #68]	; 0x44
 800bfca:	9316      	str	r3, [sp, #88]	; 0x58
 800bfcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bfd0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800bfd4:	a904      	add	r1, sp, #16
 800bfd6:	4623      	mov	r3, r4
 800bfd8:	f000 fc9a 	bl	800c910 <__ssvfiscanf_r>
 800bfdc:	b01f      	add	sp, #124	; 0x7c
 800bfde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfe2:	b003      	add	sp, #12
 800bfe4:	4770      	bx	lr
 800bfe6:	bf00      	nop
 800bfe8:	0800c013 	.word	0x0800c013
 800bfec:	20000150 	.word	0x20000150

0800bff0 <__sread>:
 800bff0:	b510      	push	{r4, lr}
 800bff2:	460c      	mov	r4, r1
 800bff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bff8:	f000 ff54 	bl	800cea4 <_read_r>
 800bffc:	2800      	cmp	r0, #0
 800bffe:	bfab      	itete	ge
 800c000:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c002:	89a3      	ldrhlt	r3, [r4, #12]
 800c004:	181b      	addge	r3, r3, r0
 800c006:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c00a:	bfac      	ite	ge
 800c00c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c00e:	81a3      	strhlt	r3, [r4, #12]
 800c010:	bd10      	pop	{r4, pc}

0800c012 <__seofread>:
 800c012:	2000      	movs	r0, #0
 800c014:	4770      	bx	lr

0800c016 <__swrite>:
 800c016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c01a:	461f      	mov	r7, r3
 800c01c:	898b      	ldrh	r3, [r1, #12]
 800c01e:	05db      	lsls	r3, r3, #23
 800c020:	4605      	mov	r5, r0
 800c022:	460c      	mov	r4, r1
 800c024:	4616      	mov	r6, r2
 800c026:	d505      	bpl.n	800c034 <__swrite+0x1e>
 800c028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c02c:	2302      	movs	r3, #2
 800c02e:	2200      	movs	r2, #0
 800c030:	f000 fb6c 	bl	800c70c <_lseek_r>
 800c034:	89a3      	ldrh	r3, [r4, #12]
 800c036:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c03a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c03e:	81a3      	strh	r3, [r4, #12]
 800c040:	4632      	mov	r2, r6
 800c042:	463b      	mov	r3, r7
 800c044:	4628      	mov	r0, r5
 800c046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c04a:	f000 b903 	b.w	800c254 <_write_r>

0800c04e <__sseek>:
 800c04e:	b510      	push	{r4, lr}
 800c050:	460c      	mov	r4, r1
 800c052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c056:	f000 fb59 	bl	800c70c <_lseek_r>
 800c05a:	1c43      	adds	r3, r0, #1
 800c05c:	89a3      	ldrh	r3, [r4, #12]
 800c05e:	bf15      	itete	ne
 800c060:	6560      	strne	r0, [r4, #84]	; 0x54
 800c062:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c066:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c06a:	81a3      	strheq	r3, [r4, #12]
 800c06c:	bf18      	it	ne
 800c06e:	81a3      	strhne	r3, [r4, #12]
 800c070:	bd10      	pop	{r4, pc}

0800c072 <__sclose>:
 800c072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c076:	f000 b975 	b.w	800c364 <_close_r>

0800c07a <strcpy>:
 800c07a:	4603      	mov	r3, r0
 800c07c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c080:	f803 2b01 	strb.w	r2, [r3], #1
 800c084:	2a00      	cmp	r2, #0
 800c086:	d1f9      	bne.n	800c07c <strcpy+0x2>
 800c088:	4770      	bx	lr

0800c08a <strncmp>:
 800c08a:	b510      	push	{r4, lr}
 800c08c:	b17a      	cbz	r2, 800c0ae <strncmp+0x24>
 800c08e:	4603      	mov	r3, r0
 800c090:	3901      	subs	r1, #1
 800c092:	1884      	adds	r4, r0, r2
 800c094:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c098:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c09c:	4290      	cmp	r0, r2
 800c09e:	d101      	bne.n	800c0a4 <strncmp+0x1a>
 800c0a0:	42a3      	cmp	r3, r4
 800c0a2:	d101      	bne.n	800c0a8 <strncmp+0x1e>
 800c0a4:	1a80      	subs	r0, r0, r2
 800c0a6:	bd10      	pop	{r4, pc}
 800c0a8:	2800      	cmp	r0, #0
 800c0aa:	d1f3      	bne.n	800c094 <strncmp+0xa>
 800c0ac:	e7fa      	b.n	800c0a4 <strncmp+0x1a>
 800c0ae:	4610      	mov	r0, r2
 800c0b0:	e7f9      	b.n	800c0a6 <strncmp+0x1c>
	...

0800c0b4 <_strtoul_l.constprop.0>:
 800c0b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c0b8:	4f36      	ldr	r7, [pc, #216]	; (800c194 <_strtoul_l.constprop.0+0xe0>)
 800c0ba:	4686      	mov	lr, r0
 800c0bc:	460d      	mov	r5, r1
 800c0be:	4628      	mov	r0, r5
 800c0c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c0c4:	5de6      	ldrb	r6, [r4, r7]
 800c0c6:	f016 0608 	ands.w	r6, r6, #8
 800c0ca:	d1f8      	bne.n	800c0be <_strtoul_l.constprop.0+0xa>
 800c0cc:	2c2d      	cmp	r4, #45	; 0x2d
 800c0ce:	d12f      	bne.n	800c130 <_strtoul_l.constprop.0+0x7c>
 800c0d0:	782c      	ldrb	r4, [r5, #0]
 800c0d2:	2601      	movs	r6, #1
 800c0d4:	1c85      	adds	r5, r0, #2
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d057      	beq.n	800c18a <_strtoul_l.constprop.0+0xd6>
 800c0da:	2b10      	cmp	r3, #16
 800c0dc:	d109      	bne.n	800c0f2 <_strtoul_l.constprop.0+0x3e>
 800c0de:	2c30      	cmp	r4, #48	; 0x30
 800c0e0:	d107      	bne.n	800c0f2 <_strtoul_l.constprop.0+0x3e>
 800c0e2:	7828      	ldrb	r0, [r5, #0]
 800c0e4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c0e8:	2858      	cmp	r0, #88	; 0x58
 800c0ea:	d149      	bne.n	800c180 <_strtoul_l.constprop.0+0xcc>
 800c0ec:	786c      	ldrb	r4, [r5, #1]
 800c0ee:	2310      	movs	r3, #16
 800c0f0:	3502      	adds	r5, #2
 800c0f2:	f04f 38ff 	mov.w	r8, #4294967295
 800c0f6:	2700      	movs	r7, #0
 800c0f8:	fbb8 f8f3 	udiv	r8, r8, r3
 800c0fc:	fb03 f908 	mul.w	r9, r3, r8
 800c100:	ea6f 0909 	mvn.w	r9, r9
 800c104:	4638      	mov	r0, r7
 800c106:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c10a:	f1bc 0f09 	cmp.w	ip, #9
 800c10e:	d814      	bhi.n	800c13a <_strtoul_l.constprop.0+0x86>
 800c110:	4664      	mov	r4, ip
 800c112:	42a3      	cmp	r3, r4
 800c114:	dd22      	ble.n	800c15c <_strtoul_l.constprop.0+0xa8>
 800c116:	2f00      	cmp	r7, #0
 800c118:	db1d      	blt.n	800c156 <_strtoul_l.constprop.0+0xa2>
 800c11a:	4580      	cmp	r8, r0
 800c11c:	d31b      	bcc.n	800c156 <_strtoul_l.constprop.0+0xa2>
 800c11e:	d101      	bne.n	800c124 <_strtoul_l.constprop.0+0x70>
 800c120:	45a1      	cmp	r9, r4
 800c122:	db18      	blt.n	800c156 <_strtoul_l.constprop.0+0xa2>
 800c124:	fb00 4003 	mla	r0, r0, r3, r4
 800c128:	2701      	movs	r7, #1
 800c12a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c12e:	e7ea      	b.n	800c106 <_strtoul_l.constprop.0+0x52>
 800c130:	2c2b      	cmp	r4, #43	; 0x2b
 800c132:	bf04      	itt	eq
 800c134:	782c      	ldrbeq	r4, [r5, #0]
 800c136:	1c85      	addeq	r5, r0, #2
 800c138:	e7cd      	b.n	800c0d6 <_strtoul_l.constprop.0+0x22>
 800c13a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c13e:	f1bc 0f19 	cmp.w	ip, #25
 800c142:	d801      	bhi.n	800c148 <_strtoul_l.constprop.0+0x94>
 800c144:	3c37      	subs	r4, #55	; 0x37
 800c146:	e7e4      	b.n	800c112 <_strtoul_l.constprop.0+0x5e>
 800c148:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c14c:	f1bc 0f19 	cmp.w	ip, #25
 800c150:	d804      	bhi.n	800c15c <_strtoul_l.constprop.0+0xa8>
 800c152:	3c57      	subs	r4, #87	; 0x57
 800c154:	e7dd      	b.n	800c112 <_strtoul_l.constprop.0+0x5e>
 800c156:	f04f 37ff 	mov.w	r7, #4294967295
 800c15a:	e7e6      	b.n	800c12a <_strtoul_l.constprop.0+0x76>
 800c15c:	2f00      	cmp	r7, #0
 800c15e:	da07      	bge.n	800c170 <_strtoul_l.constprop.0+0xbc>
 800c160:	2322      	movs	r3, #34	; 0x22
 800c162:	f8ce 3000 	str.w	r3, [lr]
 800c166:	f04f 30ff 	mov.w	r0, #4294967295
 800c16a:	b932      	cbnz	r2, 800c17a <_strtoul_l.constprop.0+0xc6>
 800c16c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c170:	b106      	cbz	r6, 800c174 <_strtoul_l.constprop.0+0xc0>
 800c172:	4240      	negs	r0, r0
 800c174:	2a00      	cmp	r2, #0
 800c176:	d0f9      	beq.n	800c16c <_strtoul_l.constprop.0+0xb8>
 800c178:	b107      	cbz	r7, 800c17c <_strtoul_l.constprop.0+0xc8>
 800c17a:	1e69      	subs	r1, r5, #1
 800c17c:	6011      	str	r1, [r2, #0]
 800c17e:	e7f5      	b.n	800c16c <_strtoul_l.constprop.0+0xb8>
 800c180:	2430      	movs	r4, #48	; 0x30
 800c182:	2b00      	cmp	r3, #0
 800c184:	d1b5      	bne.n	800c0f2 <_strtoul_l.constprop.0+0x3e>
 800c186:	2308      	movs	r3, #8
 800c188:	e7b3      	b.n	800c0f2 <_strtoul_l.constprop.0+0x3e>
 800c18a:	2c30      	cmp	r4, #48	; 0x30
 800c18c:	d0a9      	beq.n	800c0e2 <_strtoul_l.constprop.0+0x2e>
 800c18e:	230a      	movs	r3, #10
 800c190:	e7af      	b.n	800c0f2 <_strtoul_l.constprop.0+0x3e>
 800c192:	bf00      	nop
 800c194:	0800d350 	.word	0x0800d350

0800c198 <_strtoul_r>:
 800c198:	f7ff bf8c 	b.w	800c0b4 <_strtoul_l.constprop.0>

0800c19c <strtoul>:
 800c19c:	4613      	mov	r3, r2
 800c19e:	460a      	mov	r2, r1
 800c1a0:	4601      	mov	r1, r0
 800c1a2:	4802      	ldr	r0, [pc, #8]	; (800c1ac <strtoul+0x10>)
 800c1a4:	6800      	ldr	r0, [r0, #0]
 800c1a6:	f7ff bf85 	b.w	800c0b4 <_strtoul_l.constprop.0>
 800c1aa:	bf00      	nop
 800c1ac:	20000150 	.word	0x20000150

0800c1b0 <__swbuf_r>:
 800c1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1b2:	460e      	mov	r6, r1
 800c1b4:	4614      	mov	r4, r2
 800c1b6:	4605      	mov	r5, r0
 800c1b8:	b118      	cbz	r0, 800c1c2 <__swbuf_r+0x12>
 800c1ba:	6983      	ldr	r3, [r0, #24]
 800c1bc:	b90b      	cbnz	r3, 800c1c2 <__swbuf_r+0x12>
 800c1be:	f000 fa07 	bl	800c5d0 <__sinit>
 800c1c2:	4b21      	ldr	r3, [pc, #132]	; (800c248 <__swbuf_r+0x98>)
 800c1c4:	429c      	cmp	r4, r3
 800c1c6:	d12b      	bne.n	800c220 <__swbuf_r+0x70>
 800c1c8:	686c      	ldr	r4, [r5, #4]
 800c1ca:	69a3      	ldr	r3, [r4, #24]
 800c1cc:	60a3      	str	r3, [r4, #8]
 800c1ce:	89a3      	ldrh	r3, [r4, #12]
 800c1d0:	071a      	lsls	r2, r3, #28
 800c1d2:	d52f      	bpl.n	800c234 <__swbuf_r+0x84>
 800c1d4:	6923      	ldr	r3, [r4, #16]
 800c1d6:	b36b      	cbz	r3, 800c234 <__swbuf_r+0x84>
 800c1d8:	6923      	ldr	r3, [r4, #16]
 800c1da:	6820      	ldr	r0, [r4, #0]
 800c1dc:	1ac0      	subs	r0, r0, r3
 800c1de:	6963      	ldr	r3, [r4, #20]
 800c1e0:	b2f6      	uxtb	r6, r6
 800c1e2:	4283      	cmp	r3, r0
 800c1e4:	4637      	mov	r7, r6
 800c1e6:	dc04      	bgt.n	800c1f2 <__swbuf_r+0x42>
 800c1e8:	4621      	mov	r1, r4
 800c1ea:	4628      	mov	r0, r5
 800c1ec:	f000 f95c 	bl	800c4a8 <_fflush_r>
 800c1f0:	bb30      	cbnz	r0, 800c240 <__swbuf_r+0x90>
 800c1f2:	68a3      	ldr	r3, [r4, #8]
 800c1f4:	3b01      	subs	r3, #1
 800c1f6:	60a3      	str	r3, [r4, #8]
 800c1f8:	6823      	ldr	r3, [r4, #0]
 800c1fa:	1c5a      	adds	r2, r3, #1
 800c1fc:	6022      	str	r2, [r4, #0]
 800c1fe:	701e      	strb	r6, [r3, #0]
 800c200:	6963      	ldr	r3, [r4, #20]
 800c202:	3001      	adds	r0, #1
 800c204:	4283      	cmp	r3, r0
 800c206:	d004      	beq.n	800c212 <__swbuf_r+0x62>
 800c208:	89a3      	ldrh	r3, [r4, #12]
 800c20a:	07db      	lsls	r3, r3, #31
 800c20c:	d506      	bpl.n	800c21c <__swbuf_r+0x6c>
 800c20e:	2e0a      	cmp	r6, #10
 800c210:	d104      	bne.n	800c21c <__swbuf_r+0x6c>
 800c212:	4621      	mov	r1, r4
 800c214:	4628      	mov	r0, r5
 800c216:	f000 f947 	bl	800c4a8 <_fflush_r>
 800c21a:	b988      	cbnz	r0, 800c240 <__swbuf_r+0x90>
 800c21c:	4638      	mov	r0, r7
 800c21e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c220:	4b0a      	ldr	r3, [pc, #40]	; (800c24c <__swbuf_r+0x9c>)
 800c222:	429c      	cmp	r4, r3
 800c224:	d101      	bne.n	800c22a <__swbuf_r+0x7a>
 800c226:	68ac      	ldr	r4, [r5, #8]
 800c228:	e7cf      	b.n	800c1ca <__swbuf_r+0x1a>
 800c22a:	4b09      	ldr	r3, [pc, #36]	; (800c250 <__swbuf_r+0xa0>)
 800c22c:	429c      	cmp	r4, r3
 800c22e:	bf08      	it	eq
 800c230:	68ec      	ldreq	r4, [r5, #12]
 800c232:	e7ca      	b.n	800c1ca <__swbuf_r+0x1a>
 800c234:	4621      	mov	r1, r4
 800c236:	4628      	mov	r0, r5
 800c238:	f000 f81e 	bl	800c278 <__swsetup_r>
 800c23c:	2800      	cmp	r0, #0
 800c23e:	d0cb      	beq.n	800c1d8 <__swbuf_r+0x28>
 800c240:	f04f 37ff 	mov.w	r7, #4294967295
 800c244:	e7ea      	b.n	800c21c <__swbuf_r+0x6c>
 800c246:	bf00      	nop
 800c248:	0800d470 	.word	0x0800d470
 800c24c:	0800d490 	.word	0x0800d490
 800c250:	0800d450 	.word	0x0800d450

0800c254 <_write_r>:
 800c254:	b538      	push	{r3, r4, r5, lr}
 800c256:	4d07      	ldr	r5, [pc, #28]	; (800c274 <_write_r+0x20>)
 800c258:	4604      	mov	r4, r0
 800c25a:	4608      	mov	r0, r1
 800c25c:	4611      	mov	r1, r2
 800c25e:	2200      	movs	r2, #0
 800c260:	602a      	str	r2, [r5, #0]
 800c262:	461a      	mov	r2, r3
 800c264:	f7f7 ffe5 	bl	8004232 <_write>
 800c268:	1c43      	adds	r3, r0, #1
 800c26a:	d102      	bne.n	800c272 <_write_r+0x1e>
 800c26c:	682b      	ldr	r3, [r5, #0]
 800c26e:	b103      	cbz	r3, 800c272 <_write_r+0x1e>
 800c270:	6023      	str	r3, [r4, #0]
 800c272:	bd38      	pop	{r3, r4, r5, pc}
 800c274:	20000fbc 	.word	0x20000fbc

0800c278 <__swsetup_r>:
 800c278:	4b32      	ldr	r3, [pc, #200]	; (800c344 <__swsetup_r+0xcc>)
 800c27a:	b570      	push	{r4, r5, r6, lr}
 800c27c:	681d      	ldr	r5, [r3, #0]
 800c27e:	4606      	mov	r6, r0
 800c280:	460c      	mov	r4, r1
 800c282:	b125      	cbz	r5, 800c28e <__swsetup_r+0x16>
 800c284:	69ab      	ldr	r3, [r5, #24]
 800c286:	b913      	cbnz	r3, 800c28e <__swsetup_r+0x16>
 800c288:	4628      	mov	r0, r5
 800c28a:	f000 f9a1 	bl	800c5d0 <__sinit>
 800c28e:	4b2e      	ldr	r3, [pc, #184]	; (800c348 <__swsetup_r+0xd0>)
 800c290:	429c      	cmp	r4, r3
 800c292:	d10f      	bne.n	800c2b4 <__swsetup_r+0x3c>
 800c294:	686c      	ldr	r4, [r5, #4]
 800c296:	89a3      	ldrh	r3, [r4, #12]
 800c298:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c29c:	0719      	lsls	r1, r3, #28
 800c29e:	d42c      	bmi.n	800c2fa <__swsetup_r+0x82>
 800c2a0:	06dd      	lsls	r5, r3, #27
 800c2a2:	d411      	bmi.n	800c2c8 <__swsetup_r+0x50>
 800c2a4:	2309      	movs	r3, #9
 800c2a6:	6033      	str	r3, [r6, #0]
 800c2a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c2ac:	81a3      	strh	r3, [r4, #12]
 800c2ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c2b2:	e03e      	b.n	800c332 <__swsetup_r+0xba>
 800c2b4:	4b25      	ldr	r3, [pc, #148]	; (800c34c <__swsetup_r+0xd4>)
 800c2b6:	429c      	cmp	r4, r3
 800c2b8:	d101      	bne.n	800c2be <__swsetup_r+0x46>
 800c2ba:	68ac      	ldr	r4, [r5, #8]
 800c2bc:	e7eb      	b.n	800c296 <__swsetup_r+0x1e>
 800c2be:	4b24      	ldr	r3, [pc, #144]	; (800c350 <__swsetup_r+0xd8>)
 800c2c0:	429c      	cmp	r4, r3
 800c2c2:	bf08      	it	eq
 800c2c4:	68ec      	ldreq	r4, [r5, #12]
 800c2c6:	e7e6      	b.n	800c296 <__swsetup_r+0x1e>
 800c2c8:	0758      	lsls	r0, r3, #29
 800c2ca:	d512      	bpl.n	800c2f2 <__swsetup_r+0x7a>
 800c2cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2ce:	b141      	cbz	r1, 800c2e2 <__swsetup_r+0x6a>
 800c2d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2d4:	4299      	cmp	r1, r3
 800c2d6:	d002      	beq.n	800c2de <__swsetup_r+0x66>
 800c2d8:	4630      	mov	r0, r6
 800c2da:	f7fe ff0d 	bl	800b0f8 <_free_r>
 800c2de:	2300      	movs	r3, #0
 800c2e0:	6363      	str	r3, [r4, #52]	; 0x34
 800c2e2:	89a3      	ldrh	r3, [r4, #12]
 800c2e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c2e8:	81a3      	strh	r3, [r4, #12]
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	6063      	str	r3, [r4, #4]
 800c2ee:	6923      	ldr	r3, [r4, #16]
 800c2f0:	6023      	str	r3, [r4, #0]
 800c2f2:	89a3      	ldrh	r3, [r4, #12]
 800c2f4:	f043 0308 	orr.w	r3, r3, #8
 800c2f8:	81a3      	strh	r3, [r4, #12]
 800c2fa:	6923      	ldr	r3, [r4, #16]
 800c2fc:	b94b      	cbnz	r3, 800c312 <__swsetup_r+0x9a>
 800c2fe:	89a3      	ldrh	r3, [r4, #12]
 800c300:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c308:	d003      	beq.n	800c312 <__swsetup_r+0x9a>
 800c30a:	4621      	mov	r1, r4
 800c30c:	4630      	mov	r0, r6
 800c30e:	f000 fa35 	bl	800c77c <__smakebuf_r>
 800c312:	89a0      	ldrh	r0, [r4, #12]
 800c314:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c318:	f010 0301 	ands.w	r3, r0, #1
 800c31c:	d00a      	beq.n	800c334 <__swsetup_r+0xbc>
 800c31e:	2300      	movs	r3, #0
 800c320:	60a3      	str	r3, [r4, #8]
 800c322:	6963      	ldr	r3, [r4, #20]
 800c324:	425b      	negs	r3, r3
 800c326:	61a3      	str	r3, [r4, #24]
 800c328:	6923      	ldr	r3, [r4, #16]
 800c32a:	b943      	cbnz	r3, 800c33e <__swsetup_r+0xc6>
 800c32c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c330:	d1ba      	bne.n	800c2a8 <__swsetup_r+0x30>
 800c332:	bd70      	pop	{r4, r5, r6, pc}
 800c334:	0781      	lsls	r1, r0, #30
 800c336:	bf58      	it	pl
 800c338:	6963      	ldrpl	r3, [r4, #20]
 800c33a:	60a3      	str	r3, [r4, #8]
 800c33c:	e7f4      	b.n	800c328 <__swsetup_r+0xb0>
 800c33e:	2000      	movs	r0, #0
 800c340:	e7f7      	b.n	800c332 <__swsetup_r+0xba>
 800c342:	bf00      	nop
 800c344:	20000150 	.word	0x20000150
 800c348:	0800d470 	.word	0x0800d470
 800c34c:	0800d490 	.word	0x0800d490
 800c350:	0800d450 	.word	0x0800d450

0800c354 <abort>:
 800c354:	b508      	push	{r3, lr}
 800c356:	2006      	movs	r0, #6
 800c358:	f000 fe16 	bl	800cf88 <raise>
 800c35c:	2001      	movs	r0, #1
 800c35e:	f7f7 ff41 	bl	80041e4 <_exit>
	...

0800c364 <_close_r>:
 800c364:	b538      	push	{r3, r4, r5, lr}
 800c366:	4d06      	ldr	r5, [pc, #24]	; (800c380 <_close_r+0x1c>)
 800c368:	2300      	movs	r3, #0
 800c36a:	4604      	mov	r4, r0
 800c36c:	4608      	mov	r0, r1
 800c36e:	602b      	str	r3, [r5, #0]
 800c370:	f7f7 ff7b 	bl	800426a <_close>
 800c374:	1c43      	adds	r3, r0, #1
 800c376:	d102      	bne.n	800c37e <_close_r+0x1a>
 800c378:	682b      	ldr	r3, [r5, #0]
 800c37a:	b103      	cbz	r3, 800c37e <_close_r+0x1a>
 800c37c:	6023      	str	r3, [r4, #0]
 800c37e:	bd38      	pop	{r3, r4, r5, pc}
 800c380:	20000fbc 	.word	0x20000fbc

0800c384 <__env_lock>:
 800c384:	4801      	ldr	r0, [pc, #4]	; (800c38c <__env_lock+0x8>)
 800c386:	f7ff bb09 	b.w	800b99c <__retarget_lock_acquire_recursive>
 800c38a:	bf00      	nop
 800c38c:	20000fb4 	.word	0x20000fb4

0800c390 <__env_unlock>:
 800c390:	4801      	ldr	r0, [pc, #4]	; (800c398 <__env_unlock+0x8>)
 800c392:	f7ff bb05 	b.w	800b9a0 <__retarget_lock_release_recursive>
 800c396:	bf00      	nop
 800c398:	20000fb4 	.word	0x20000fb4

0800c39c <__sflush_r>:
 800c39c:	898a      	ldrh	r2, [r1, #12]
 800c39e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3a2:	4605      	mov	r5, r0
 800c3a4:	0710      	lsls	r0, r2, #28
 800c3a6:	460c      	mov	r4, r1
 800c3a8:	d458      	bmi.n	800c45c <__sflush_r+0xc0>
 800c3aa:	684b      	ldr	r3, [r1, #4]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	dc05      	bgt.n	800c3bc <__sflush_r+0x20>
 800c3b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	dc02      	bgt.n	800c3bc <__sflush_r+0x20>
 800c3b6:	2000      	movs	r0, #0
 800c3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c3be:	2e00      	cmp	r6, #0
 800c3c0:	d0f9      	beq.n	800c3b6 <__sflush_r+0x1a>
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c3c8:	682f      	ldr	r7, [r5, #0]
 800c3ca:	602b      	str	r3, [r5, #0]
 800c3cc:	d032      	beq.n	800c434 <__sflush_r+0x98>
 800c3ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c3d0:	89a3      	ldrh	r3, [r4, #12]
 800c3d2:	075a      	lsls	r2, r3, #29
 800c3d4:	d505      	bpl.n	800c3e2 <__sflush_r+0x46>
 800c3d6:	6863      	ldr	r3, [r4, #4]
 800c3d8:	1ac0      	subs	r0, r0, r3
 800c3da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c3dc:	b10b      	cbz	r3, 800c3e2 <__sflush_r+0x46>
 800c3de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c3e0:	1ac0      	subs	r0, r0, r3
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	4602      	mov	r2, r0
 800c3e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c3e8:	6a21      	ldr	r1, [r4, #32]
 800c3ea:	4628      	mov	r0, r5
 800c3ec:	47b0      	blx	r6
 800c3ee:	1c43      	adds	r3, r0, #1
 800c3f0:	89a3      	ldrh	r3, [r4, #12]
 800c3f2:	d106      	bne.n	800c402 <__sflush_r+0x66>
 800c3f4:	6829      	ldr	r1, [r5, #0]
 800c3f6:	291d      	cmp	r1, #29
 800c3f8:	d82c      	bhi.n	800c454 <__sflush_r+0xb8>
 800c3fa:	4a2a      	ldr	r2, [pc, #168]	; (800c4a4 <__sflush_r+0x108>)
 800c3fc:	40ca      	lsrs	r2, r1
 800c3fe:	07d6      	lsls	r6, r2, #31
 800c400:	d528      	bpl.n	800c454 <__sflush_r+0xb8>
 800c402:	2200      	movs	r2, #0
 800c404:	6062      	str	r2, [r4, #4]
 800c406:	04d9      	lsls	r1, r3, #19
 800c408:	6922      	ldr	r2, [r4, #16]
 800c40a:	6022      	str	r2, [r4, #0]
 800c40c:	d504      	bpl.n	800c418 <__sflush_r+0x7c>
 800c40e:	1c42      	adds	r2, r0, #1
 800c410:	d101      	bne.n	800c416 <__sflush_r+0x7a>
 800c412:	682b      	ldr	r3, [r5, #0]
 800c414:	b903      	cbnz	r3, 800c418 <__sflush_r+0x7c>
 800c416:	6560      	str	r0, [r4, #84]	; 0x54
 800c418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c41a:	602f      	str	r7, [r5, #0]
 800c41c:	2900      	cmp	r1, #0
 800c41e:	d0ca      	beq.n	800c3b6 <__sflush_r+0x1a>
 800c420:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c424:	4299      	cmp	r1, r3
 800c426:	d002      	beq.n	800c42e <__sflush_r+0x92>
 800c428:	4628      	mov	r0, r5
 800c42a:	f7fe fe65 	bl	800b0f8 <_free_r>
 800c42e:	2000      	movs	r0, #0
 800c430:	6360      	str	r0, [r4, #52]	; 0x34
 800c432:	e7c1      	b.n	800c3b8 <__sflush_r+0x1c>
 800c434:	6a21      	ldr	r1, [r4, #32]
 800c436:	2301      	movs	r3, #1
 800c438:	4628      	mov	r0, r5
 800c43a:	47b0      	blx	r6
 800c43c:	1c41      	adds	r1, r0, #1
 800c43e:	d1c7      	bne.n	800c3d0 <__sflush_r+0x34>
 800c440:	682b      	ldr	r3, [r5, #0]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d0c4      	beq.n	800c3d0 <__sflush_r+0x34>
 800c446:	2b1d      	cmp	r3, #29
 800c448:	d001      	beq.n	800c44e <__sflush_r+0xb2>
 800c44a:	2b16      	cmp	r3, #22
 800c44c:	d101      	bne.n	800c452 <__sflush_r+0xb6>
 800c44e:	602f      	str	r7, [r5, #0]
 800c450:	e7b1      	b.n	800c3b6 <__sflush_r+0x1a>
 800c452:	89a3      	ldrh	r3, [r4, #12]
 800c454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c458:	81a3      	strh	r3, [r4, #12]
 800c45a:	e7ad      	b.n	800c3b8 <__sflush_r+0x1c>
 800c45c:	690f      	ldr	r7, [r1, #16]
 800c45e:	2f00      	cmp	r7, #0
 800c460:	d0a9      	beq.n	800c3b6 <__sflush_r+0x1a>
 800c462:	0793      	lsls	r3, r2, #30
 800c464:	680e      	ldr	r6, [r1, #0]
 800c466:	bf08      	it	eq
 800c468:	694b      	ldreq	r3, [r1, #20]
 800c46a:	600f      	str	r7, [r1, #0]
 800c46c:	bf18      	it	ne
 800c46e:	2300      	movne	r3, #0
 800c470:	eba6 0807 	sub.w	r8, r6, r7
 800c474:	608b      	str	r3, [r1, #8]
 800c476:	f1b8 0f00 	cmp.w	r8, #0
 800c47a:	dd9c      	ble.n	800c3b6 <__sflush_r+0x1a>
 800c47c:	6a21      	ldr	r1, [r4, #32]
 800c47e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c480:	4643      	mov	r3, r8
 800c482:	463a      	mov	r2, r7
 800c484:	4628      	mov	r0, r5
 800c486:	47b0      	blx	r6
 800c488:	2800      	cmp	r0, #0
 800c48a:	dc06      	bgt.n	800c49a <__sflush_r+0xfe>
 800c48c:	89a3      	ldrh	r3, [r4, #12]
 800c48e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c492:	81a3      	strh	r3, [r4, #12]
 800c494:	f04f 30ff 	mov.w	r0, #4294967295
 800c498:	e78e      	b.n	800c3b8 <__sflush_r+0x1c>
 800c49a:	4407      	add	r7, r0
 800c49c:	eba8 0800 	sub.w	r8, r8, r0
 800c4a0:	e7e9      	b.n	800c476 <__sflush_r+0xda>
 800c4a2:	bf00      	nop
 800c4a4:	20400001 	.word	0x20400001

0800c4a8 <_fflush_r>:
 800c4a8:	b538      	push	{r3, r4, r5, lr}
 800c4aa:	690b      	ldr	r3, [r1, #16]
 800c4ac:	4605      	mov	r5, r0
 800c4ae:	460c      	mov	r4, r1
 800c4b0:	b913      	cbnz	r3, 800c4b8 <_fflush_r+0x10>
 800c4b2:	2500      	movs	r5, #0
 800c4b4:	4628      	mov	r0, r5
 800c4b6:	bd38      	pop	{r3, r4, r5, pc}
 800c4b8:	b118      	cbz	r0, 800c4c2 <_fflush_r+0x1a>
 800c4ba:	6983      	ldr	r3, [r0, #24]
 800c4bc:	b90b      	cbnz	r3, 800c4c2 <_fflush_r+0x1a>
 800c4be:	f000 f887 	bl	800c5d0 <__sinit>
 800c4c2:	4b14      	ldr	r3, [pc, #80]	; (800c514 <_fflush_r+0x6c>)
 800c4c4:	429c      	cmp	r4, r3
 800c4c6:	d11b      	bne.n	800c500 <_fflush_r+0x58>
 800c4c8:	686c      	ldr	r4, [r5, #4]
 800c4ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d0ef      	beq.n	800c4b2 <_fflush_r+0xa>
 800c4d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c4d4:	07d0      	lsls	r0, r2, #31
 800c4d6:	d404      	bmi.n	800c4e2 <_fflush_r+0x3a>
 800c4d8:	0599      	lsls	r1, r3, #22
 800c4da:	d402      	bmi.n	800c4e2 <_fflush_r+0x3a>
 800c4dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4de:	f7ff fa5d 	bl	800b99c <__retarget_lock_acquire_recursive>
 800c4e2:	4628      	mov	r0, r5
 800c4e4:	4621      	mov	r1, r4
 800c4e6:	f7ff ff59 	bl	800c39c <__sflush_r>
 800c4ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c4ec:	07da      	lsls	r2, r3, #31
 800c4ee:	4605      	mov	r5, r0
 800c4f0:	d4e0      	bmi.n	800c4b4 <_fflush_r+0xc>
 800c4f2:	89a3      	ldrh	r3, [r4, #12]
 800c4f4:	059b      	lsls	r3, r3, #22
 800c4f6:	d4dd      	bmi.n	800c4b4 <_fflush_r+0xc>
 800c4f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4fa:	f7ff fa51 	bl	800b9a0 <__retarget_lock_release_recursive>
 800c4fe:	e7d9      	b.n	800c4b4 <_fflush_r+0xc>
 800c500:	4b05      	ldr	r3, [pc, #20]	; (800c518 <_fflush_r+0x70>)
 800c502:	429c      	cmp	r4, r3
 800c504:	d101      	bne.n	800c50a <_fflush_r+0x62>
 800c506:	68ac      	ldr	r4, [r5, #8]
 800c508:	e7df      	b.n	800c4ca <_fflush_r+0x22>
 800c50a:	4b04      	ldr	r3, [pc, #16]	; (800c51c <_fflush_r+0x74>)
 800c50c:	429c      	cmp	r4, r3
 800c50e:	bf08      	it	eq
 800c510:	68ec      	ldreq	r4, [r5, #12]
 800c512:	e7da      	b.n	800c4ca <_fflush_r+0x22>
 800c514:	0800d470 	.word	0x0800d470
 800c518:	0800d490 	.word	0x0800d490
 800c51c:	0800d450 	.word	0x0800d450

0800c520 <std>:
 800c520:	2300      	movs	r3, #0
 800c522:	b510      	push	{r4, lr}
 800c524:	4604      	mov	r4, r0
 800c526:	e9c0 3300 	strd	r3, r3, [r0]
 800c52a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c52e:	6083      	str	r3, [r0, #8]
 800c530:	8181      	strh	r1, [r0, #12]
 800c532:	6643      	str	r3, [r0, #100]	; 0x64
 800c534:	81c2      	strh	r2, [r0, #14]
 800c536:	6183      	str	r3, [r0, #24]
 800c538:	4619      	mov	r1, r3
 800c53a:	2208      	movs	r2, #8
 800c53c:	305c      	adds	r0, #92	; 0x5c
 800c53e:	f7fe fdd3 	bl	800b0e8 <memset>
 800c542:	4b05      	ldr	r3, [pc, #20]	; (800c558 <std+0x38>)
 800c544:	6263      	str	r3, [r4, #36]	; 0x24
 800c546:	4b05      	ldr	r3, [pc, #20]	; (800c55c <std+0x3c>)
 800c548:	62a3      	str	r3, [r4, #40]	; 0x28
 800c54a:	4b05      	ldr	r3, [pc, #20]	; (800c560 <std+0x40>)
 800c54c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c54e:	4b05      	ldr	r3, [pc, #20]	; (800c564 <std+0x44>)
 800c550:	6224      	str	r4, [r4, #32]
 800c552:	6323      	str	r3, [r4, #48]	; 0x30
 800c554:	bd10      	pop	{r4, pc}
 800c556:	bf00      	nop
 800c558:	0800bff1 	.word	0x0800bff1
 800c55c:	0800c017 	.word	0x0800c017
 800c560:	0800c04f 	.word	0x0800c04f
 800c564:	0800c073 	.word	0x0800c073

0800c568 <_cleanup_r>:
 800c568:	4901      	ldr	r1, [pc, #4]	; (800c570 <_cleanup_r+0x8>)
 800c56a:	f000 b8af 	b.w	800c6cc <_fwalk_reent>
 800c56e:	bf00      	nop
 800c570:	0800c4a9 	.word	0x0800c4a9

0800c574 <__sfmoreglue>:
 800c574:	b570      	push	{r4, r5, r6, lr}
 800c576:	2268      	movs	r2, #104	; 0x68
 800c578:	1e4d      	subs	r5, r1, #1
 800c57a:	4355      	muls	r5, r2
 800c57c:	460e      	mov	r6, r1
 800c57e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c582:	f7fe fe25 	bl	800b1d0 <_malloc_r>
 800c586:	4604      	mov	r4, r0
 800c588:	b140      	cbz	r0, 800c59c <__sfmoreglue+0x28>
 800c58a:	2100      	movs	r1, #0
 800c58c:	e9c0 1600 	strd	r1, r6, [r0]
 800c590:	300c      	adds	r0, #12
 800c592:	60a0      	str	r0, [r4, #8]
 800c594:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c598:	f7fe fda6 	bl	800b0e8 <memset>
 800c59c:	4620      	mov	r0, r4
 800c59e:	bd70      	pop	{r4, r5, r6, pc}

0800c5a0 <__sfp_lock_acquire>:
 800c5a0:	4801      	ldr	r0, [pc, #4]	; (800c5a8 <__sfp_lock_acquire+0x8>)
 800c5a2:	f7ff b9fb 	b.w	800b99c <__retarget_lock_acquire_recursive>
 800c5a6:	bf00      	nop
 800c5a8:	20000fb6 	.word	0x20000fb6

0800c5ac <__sfp_lock_release>:
 800c5ac:	4801      	ldr	r0, [pc, #4]	; (800c5b4 <__sfp_lock_release+0x8>)
 800c5ae:	f7ff b9f7 	b.w	800b9a0 <__retarget_lock_release_recursive>
 800c5b2:	bf00      	nop
 800c5b4:	20000fb6 	.word	0x20000fb6

0800c5b8 <__sinit_lock_acquire>:
 800c5b8:	4801      	ldr	r0, [pc, #4]	; (800c5c0 <__sinit_lock_acquire+0x8>)
 800c5ba:	f7ff b9ef 	b.w	800b99c <__retarget_lock_acquire_recursive>
 800c5be:	bf00      	nop
 800c5c0:	20000fb7 	.word	0x20000fb7

0800c5c4 <__sinit_lock_release>:
 800c5c4:	4801      	ldr	r0, [pc, #4]	; (800c5cc <__sinit_lock_release+0x8>)
 800c5c6:	f7ff b9eb 	b.w	800b9a0 <__retarget_lock_release_recursive>
 800c5ca:	bf00      	nop
 800c5cc:	20000fb7 	.word	0x20000fb7

0800c5d0 <__sinit>:
 800c5d0:	b510      	push	{r4, lr}
 800c5d2:	4604      	mov	r4, r0
 800c5d4:	f7ff fff0 	bl	800c5b8 <__sinit_lock_acquire>
 800c5d8:	69a3      	ldr	r3, [r4, #24]
 800c5da:	b11b      	cbz	r3, 800c5e4 <__sinit+0x14>
 800c5dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5e0:	f7ff bff0 	b.w	800c5c4 <__sinit_lock_release>
 800c5e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c5e8:	6523      	str	r3, [r4, #80]	; 0x50
 800c5ea:	4b13      	ldr	r3, [pc, #76]	; (800c638 <__sinit+0x68>)
 800c5ec:	4a13      	ldr	r2, [pc, #76]	; (800c63c <__sinit+0x6c>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	62a2      	str	r2, [r4, #40]	; 0x28
 800c5f2:	42a3      	cmp	r3, r4
 800c5f4:	bf04      	itt	eq
 800c5f6:	2301      	moveq	r3, #1
 800c5f8:	61a3      	streq	r3, [r4, #24]
 800c5fa:	4620      	mov	r0, r4
 800c5fc:	f000 f820 	bl	800c640 <__sfp>
 800c600:	6060      	str	r0, [r4, #4]
 800c602:	4620      	mov	r0, r4
 800c604:	f000 f81c 	bl	800c640 <__sfp>
 800c608:	60a0      	str	r0, [r4, #8]
 800c60a:	4620      	mov	r0, r4
 800c60c:	f000 f818 	bl	800c640 <__sfp>
 800c610:	2200      	movs	r2, #0
 800c612:	60e0      	str	r0, [r4, #12]
 800c614:	2104      	movs	r1, #4
 800c616:	6860      	ldr	r0, [r4, #4]
 800c618:	f7ff ff82 	bl	800c520 <std>
 800c61c:	68a0      	ldr	r0, [r4, #8]
 800c61e:	2201      	movs	r2, #1
 800c620:	2109      	movs	r1, #9
 800c622:	f7ff ff7d 	bl	800c520 <std>
 800c626:	68e0      	ldr	r0, [r4, #12]
 800c628:	2202      	movs	r2, #2
 800c62a:	2112      	movs	r1, #18
 800c62c:	f7ff ff78 	bl	800c520 <std>
 800c630:	2301      	movs	r3, #1
 800c632:	61a3      	str	r3, [r4, #24]
 800c634:	e7d2      	b.n	800c5dc <__sinit+0xc>
 800c636:	bf00      	nop
 800c638:	0800d1cc 	.word	0x0800d1cc
 800c63c:	0800c569 	.word	0x0800c569

0800c640 <__sfp>:
 800c640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c642:	4607      	mov	r7, r0
 800c644:	f7ff ffac 	bl	800c5a0 <__sfp_lock_acquire>
 800c648:	4b1e      	ldr	r3, [pc, #120]	; (800c6c4 <__sfp+0x84>)
 800c64a:	681e      	ldr	r6, [r3, #0]
 800c64c:	69b3      	ldr	r3, [r6, #24]
 800c64e:	b913      	cbnz	r3, 800c656 <__sfp+0x16>
 800c650:	4630      	mov	r0, r6
 800c652:	f7ff ffbd 	bl	800c5d0 <__sinit>
 800c656:	3648      	adds	r6, #72	; 0x48
 800c658:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c65c:	3b01      	subs	r3, #1
 800c65e:	d503      	bpl.n	800c668 <__sfp+0x28>
 800c660:	6833      	ldr	r3, [r6, #0]
 800c662:	b30b      	cbz	r3, 800c6a8 <__sfp+0x68>
 800c664:	6836      	ldr	r6, [r6, #0]
 800c666:	e7f7      	b.n	800c658 <__sfp+0x18>
 800c668:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c66c:	b9d5      	cbnz	r5, 800c6a4 <__sfp+0x64>
 800c66e:	4b16      	ldr	r3, [pc, #88]	; (800c6c8 <__sfp+0x88>)
 800c670:	60e3      	str	r3, [r4, #12]
 800c672:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c676:	6665      	str	r5, [r4, #100]	; 0x64
 800c678:	f7ff f98e 	bl	800b998 <__retarget_lock_init_recursive>
 800c67c:	f7ff ff96 	bl	800c5ac <__sfp_lock_release>
 800c680:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c684:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c688:	6025      	str	r5, [r4, #0]
 800c68a:	61a5      	str	r5, [r4, #24]
 800c68c:	2208      	movs	r2, #8
 800c68e:	4629      	mov	r1, r5
 800c690:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c694:	f7fe fd28 	bl	800b0e8 <memset>
 800c698:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c69c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c6a0:	4620      	mov	r0, r4
 800c6a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6a4:	3468      	adds	r4, #104	; 0x68
 800c6a6:	e7d9      	b.n	800c65c <__sfp+0x1c>
 800c6a8:	2104      	movs	r1, #4
 800c6aa:	4638      	mov	r0, r7
 800c6ac:	f7ff ff62 	bl	800c574 <__sfmoreglue>
 800c6b0:	4604      	mov	r4, r0
 800c6b2:	6030      	str	r0, [r6, #0]
 800c6b4:	2800      	cmp	r0, #0
 800c6b6:	d1d5      	bne.n	800c664 <__sfp+0x24>
 800c6b8:	f7ff ff78 	bl	800c5ac <__sfp_lock_release>
 800c6bc:	230c      	movs	r3, #12
 800c6be:	603b      	str	r3, [r7, #0]
 800c6c0:	e7ee      	b.n	800c6a0 <__sfp+0x60>
 800c6c2:	bf00      	nop
 800c6c4:	0800d1cc 	.word	0x0800d1cc
 800c6c8:	ffff0001 	.word	0xffff0001

0800c6cc <_fwalk_reent>:
 800c6cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6d0:	4606      	mov	r6, r0
 800c6d2:	4688      	mov	r8, r1
 800c6d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c6d8:	2700      	movs	r7, #0
 800c6da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c6de:	f1b9 0901 	subs.w	r9, r9, #1
 800c6e2:	d505      	bpl.n	800c6f0 <_fwalk_reent+0x24>
 800c6e4:	6824      	ldr	r4, [r4, #0]
 800c6e6:	2c00      	cmp	r4, #0
 800c6e8:	d1f7      	bne.n	800c6da <_fwalk_reent+0xe>
 800c6ea:	4638      	mov	r0, r7
 800c6ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6f0:	89ab      	ldrh	r3, [r5, #12]
 800c6f2:	2b01      	cmp	r3, #1
 800c6f4:	d907      	bls.n	800c706 <_fwalk_reent+0x3a>
 800c6f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c6fa:	3301      	adds	r3, #1
 800c6fc:	d003      	beq.n	800c706 <_fwalk_reent+0x3a>
 800c6fe:	4629      	mov	r1, r5
 800c700:	4630      	mov	r0, r6
 800c702:	47c0      	blx	r8
 800c704:	4307      	orrs	r7, r0
 800c706:	3568      	adds	r5, #104	; 0x68
 800c708:	e7e9      	b.n	800c6de <_fwalk_reent+0x12>
	...

0800c70c <_lseek_r>:
 800c70c:	b538      	push	{r3, r4, r5, lr}
 800c70e:	4d07      	ldr	r5, [pc, #28]	; (800c72c <_lseek_r+0x20>)
 800c710:	4604      	mov	r4, r0
 800c712:	4608      	mov	r0, r1
 800c714:	4611      	mov	r1, r2
 800c716:	2200      	movs	r2, #0
 800c718:	602a      	str	r2, [r5, #0]
 800c71a:	461a      	mov	r2, r3
 800c71c:	f7f7 fdcc 	bl	80042b8 <_lseek>
 800c720:	1c43      	adds	r3, r0, #1
 800c722:	d102      	bne.n	800c72a <_lseek_r+0x1e>
 800c724:	682b      	ldr	r3, [r5, #0]
 800c726:	b103      	cbz	r3, 800c72a <_lseek_r+0x1e>
 800c728:	6023      	str	r3, [r4, #0]
 800c72a:	bd38      	pop	{r3, r4, r5, pc}
 800c72c:	20000fbc 	.word	0x20000fbc

0800c730 <__swhatbuf_r>:
 800c730:	b570      	push	{r4, r5, r6, lr}
 800c732:	460e      	mov	r6, r1
 800c734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c738:	2900      	cmp	r1, #0
 800c73a:	b096      	sub	sp, #88	; 0x58
 800c73c:	4614      	mov	r4, r2
 800c73e:	461d      	mov	r5, r3
 800c740:	da08      	bge.n	800c754 <__swhatbuf_r+0x24>
 800c742:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c746:	2200      	movs	r2, #0
 800c748:	602a      	str	r2, [r5, #0]
 800c74a:	061a      	lsls	r2, r3, #24
 800c74c:	d410      	bmi.n	800c770 <__swhatbuf_r+0x40>
 800c74e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c752:	e00e      	b.n	800c772 <__swhatbuf_r+0x42>
 800c754:	466a      	mov	r2, sp
 800c756:	f000 fcf1 	bl	800d13c <_fstat_r>
 800c75a:	2800      	cmp	r0, #0
 800c75c:	dbf1      	blt.n	800c742 <__swhatbuf_r+0x12>
 800c75e:	9a01      	ldr	r2, [sp, #4]
 800c760:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c764:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c768:	425a      	negs	r2, r3
 800c76a:	415a      	adcs	r2, r3
 800c76c:	602a      	str	r2, [r5, #0]
 800c76e:	e7ee      	b.n	800c74e <__swhatbuf_r+0x1e>
 800c770:	2340      	movs	r3, #64	; 0x40
 800c772:	2000      	movs	r0, #0
 800c774:	6023      	str	r3, [r4, #0]
 800c776:	b016      	add	sp, #88	; 0x58
 800c778:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c77c <__smakebuf_r>:
 800c77c:	898b      	ldrh	r3, [r1, #12]
 800c77e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c780:	079d      	lsls	r5, r3, #30
 800c782:	4606      	mov	r6, r0
 800c784:	460c      	mov	r4, r1
 800c786:	d507      	bpl.n	800c798 <__smakebuf_r+0x1c>
 800c788:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c78c:	6023      	str	r3, [r4, #0]
 800c78e:	6123      	str	r3, [r4, #16]
 800c790:	2301      	movs	r3, #1
 800c792:	6163      	str	r3, [r4, #20]
 800c794:	b002      	add	sp, #8
 800c796:	bd70      	pop	{r4, r5, r6, pc}
 800c798:	ab01      	add	r3, sp, #4
 800c79a:	466a      	mov	r2, sp
 800c79c:	f7ff ffc8 	bl	800c730 <__swhatbuf_r>
 800c7a0:	9900      	ldr	r1, [sp, #0]
 800c7a2:	4605      	mov	r5, r0
 800c7a4:	4630      	mov	r0, r6
 800c7a6:	f7fe fd13 	bl	800b1d0 <_malloc_r>
 800c7aa:	b948      	cbnz	r0, 800c7c0 <__smakebuf_r+0x44>
 800c7ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7b0:	059a      	lsls	r2, r3, #22
 800c7b2:	d4ef      	bmi.n	800c794 <__smakebuf_r+0x18>
 800c7b4:	f023 0303 	bic.w	r3, r3, #3
 800c7b8:	f043 0302 	orr.w	r3, r3, #2
 800c7bc:	81a3      	strh	r3, [r4, #12]
 800c7be:	e7e3      	b.n	800c788 <__smakebuf_r+0xc>
 800c7c0:	4b0d      	ldr	r3, [pc, #52]	; (800c7f8 <__smakebuf_r+0x7c>)
 800c7c2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c7c4:	89a3      	ldrh	r3, [r4, #12]
 800c7c6:	6020      	str	r0, [r4, #0]
 800c7c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7cc:	81a3      	strh	r3, [r4, #12]
 800c7ce:	9b00      	ldr	r3, [sp, #0]
 800c7d0:	6163      	str	r3, [r4, #20]
 800c7d2:	9b01      	ldr	r3, [sp, #4]
 800c7d4:	6120      	str	r0, [r4, #16]
 800c7d6:	b15b      	cbz	r3, 800c7f0 <__smakebuf_r+0x74>
 800c7d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7dc:	4630      	mov	r0, r6
 800c7de:	f000 fcbf 	bl	800d160 <_isatty_r>
 800c7e2:	b128      	cbz	r0, 800c7f0 <__smakebuf_r+0x74>
 800c7e4:	89a3      	ldrh	r3, [r4, #12]
 800c7e6:	f023 0303 	bic.w	r3, r3, #3
 800c7ea:	f043 0301 	orr.w	r3, r3, #1
 800c7ee:	81a3      	strh	r3, [r4, #12]
 800c7f0:	89a0      	ldrh	r0, [r4, #12]
 800c7f2:	4305      	orrs	r5, r0
 800c7f4:	81a5      	strh	r5, [r4, #12]
 800c7f6:	e7cd      	b.n	800c794 <__smakebuf_r+0x18>
 800c7f8:	0800c569 	.word	0x0800c569

0800c7fc <_realloc_r>:
 800c7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c800:	4680      	mov	r8, r0
 800c802:	4614      	mov	r4, r2
 800c804:	460e      	mov	r6, r1
 800c806:	b921      	cbnz	r1, 800c812 <_realloc_r+0x16>
 800c808:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c80c:	4611      	mov	r1, r2
 800c80e:	f7fe bcdf 	b.w	800b1d0 <_malloc_r>
 800c812:	b92a      	cbnz	r2, 800c820 <_realloc_r+0x24>
 800c814:	f7fe fc70 	bl	800b0f8 <_free_r>
 800c818:	4625      	mov	r5, r4
 800c81a:	4628      	mov	r0, r5
 800c81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c820:	f000 fcae 	bl	800d180 <_malloc_usable_size_r>
 800c824:	4284      	cmp	r4, r0
 800c826:	4607      	mov	r7, r0
 800c828:	d802      	bhi.n	800c830 <_realloc_r+0x34>
 800c82a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c82e:	d812      	bhi.n	800c856 <_realloc_r+0x5a>
 800c830:	4621      	mov	r1, r4
 800c832:	4640      	mov	r0, r8
 800c834:	f7fe fccc 	bl	800b1d0 <_malloc_r>
 800c838:	4605      	mov	r5, r0
 800c83a:	2800      	cmp	r0, #0
 800c83c:	d0ed      	beq.n	800c81a <_realloc_r+0x1e>
 800c83e:	42bc      	cmp	r4, r7
 800c840:	4622      	mov	r2, r4
 800c842:	4631      	mov	r1, r6
 800c844:	bf28      	it	cs
 800c846:	463a      	movcs	r2, r7
 800c848:	f7fe fc40 	bl	800b0cc <memcpy>
 800c84c:	4631      	mov	r1, r6
 800c84e:	4640      	mov	r0, r8
 800c850:	f7fe fc52 	bl	800b0f8 <_free_r>
 800c854:	e7e1      	b.n	800c81a <_realloc_r+0x1e>
 800c856:	4635      	mov	r5, r6
 800c858:	e7df      	b.n	800c81a <_realloc_r+0x1e>

0800c85a <_sungetc_r>:
 800c85a:	b538      	push	{r3, r4, r5, lr}
 800c85c:	1c4b      	adds	r3, r1, #1
 800c85e:	4614      	mov	r4, r2
 800c860:	d103      	bne.n	800c86a <_sungetc_r+0x10>
 800c862:	f04f 35ff 	mov.w	r5, #4294967295
 800c866:	4628      	mov	r0, r5
 800c868:	bd38      	pop	{r3, r4, r5, pc}
 800c86a:	8993      	ldrh	r3, [r2, #12]
 800c86c:	f023 0320 	bic.w	r3, r3, #32
 800c870:	8193      	strh	r3, [r2, #12]
 800c872:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c874:	6852      	ldr	r2, [r2, #4]
 800c876:	b2cd      	uxtb	r5, r1
 800c878:	b18b      	cbz	r3, 800c89e <_sungetc_r+0x44>
 800c87a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c87c:	4293      	cmp	r3, r2
 800c87e:	dd08      	ble.n	800c892 <_sungetc_r+0x38>
 800c880:	6823      	ldr	r3, [r4, #0]
 800c882:	1e5a      	subs	r2, r3, #1
 800c884:	6022      	str	r2, [r4, #0]
 800c886:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c88a:	6863      	ldr	r3, [r4, #4]
 800c88c:	3301      	adds	r3, #1
 800c88e:	6063      	str	r3, [r4, #4]
 800c890:	e7e9      	b.n	800c866 <_sungetc_r+0xc>
 800c892:	4621      	mov	r1, r4
 800c894:	f000 fc18 	bl	800d0c8 <__submore>
 800c898:	2800      	cmp	r0, #0
 800c89a:	d0f1      	beq.n	800c880 <_sungetc_r+0x26>
 800c89c:	e7e1      	b.n	800c862 <_sungetc_r+0x8>
 800c89e:	6921      	ldr	r1, [r4, #16]
 800c8a0:	6823      	ldr	r3, [r4, #0]
 800c8a2:	b151      	cbz	r1, 800c8ba <_sungetc_r+0x60>
 800c8a4:	4299      	cmp	r1, r3
 800c8a6:	d208      	bcs.n	800c8ba <_sungetc_r+0x60>
 800c8a8:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c8ac:	42a9      	cmp	r1, r5
 800c8ae:	d104      	bne.n	800c8ba <_sungetc_r+0x60>
 800c8b0:	3b01      	subs	r3, #1
 800c8b2:	3201      	adds	r2, #1
 800c8b4:	6023      	str	r3, [r4, #0]
 800c8b6:	6062      	str	r2, [r4, #4]
 800c8b8:	e7d5      	b.n	800c866 <_sungetc_r+0xc>
 800c8ba:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c8be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8c2:	6363      	str	r3, [r4, #52]	; 0x34
 800c8c4:	2303      	movs	r3, #3
 800c8c6:	63a3      	str	r3, [r4, #56]	; 0x38
 800c8c8:	4623      	mov	r3, r4
 800c8ca:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c8ce:	6023      	str	r3, [r4, #0]
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	e7dc      	b.n	800c88e <_sungetc_r+0x34>

0800c8d4 <__ssrefill_r>:
 800c8d4:	b510      	push	{r4, lr}
 800c8d6:	460c      	mov	r4, r1
 800c8d8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c8da:	b169      	cbz	r1, 800c8f8 <__ssrefill_r+0x24>
 800c8dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8e0:	4299      	cmp	r1, r3
 800c8e2:	d001      	beq.n	800c8e8 <__ssrefill_r+0x14>
 800c8e4:	f7fe fc08 	bl	800b0f8 <_free_r>
 800c8e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c8ea:	6063      	str	r3, [r4, #4]
 800c8ec:	2000      	movs	r0, #0
 800c8ee:	6360      	str	r0, [r4, #52]	; 0x34
 800c8f0:	b113      	cbz	r3, 800c8f8 <__ssrefill_r+0x24>
 800c8f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c8f4:	6023      	str	r3, [r4, #0]
 800c8f6:	bd10      	pop	{r4, pc}
 800c8f8:	6923      	ldr	r3, [r4, #16]
 800c8fa:	6023      	str	r3, [r4, #0]
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	6063      	str	r3, [r4, #4]
 800c900:	89a3      	ldrh	r3, [r4, #12]
 800c902:	f043 0320 	orr.w	r3, r3, #32
 800c906:	81a3      	strh	r3, [r4, #12]
 800c908:	f04f 30ff 	mov.w	r0, #4294967295
 800c90c:	e7f3      	b.n	800c8f6 <__ssrefill_r+0x22>
	...

0800c910 <__ssvfiscanf_r>:
 800c910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c914:	460c      	mov	r4, r1
 800c916:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c91a:	2100      	movs	r1, #0
 800c91c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c920:	49a6      	ldr	r1, [pc, #664]	; (800cbbc <__ssvfiscanf_r+0x2ac>)
 800c922:	91a0      	str	r1, [sp, #640]	; 0x280
 800c924:	f10d 0804 	add.w	r8, sp, #4
 800c928:	49a5      	ldr	r1, [pc, #660]	; (800cbc0 <__ssvfiscanf_r+0x2b0>)
 800c92a:	4fa6      	ldr	r7, [pc, #664]	; (800cbc4 <__ssvfiscanf_r+0x2b4>)
 800c92c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800cbc8 <__ssvfiscanf_r+0x2b8>
 800c930:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c934:	4606      	mov	r6, r0
 800c936:	91a1      	str	r1, [sp, #644]	; 0x284
 800c938:	9300      	str	r3, [sp, #0]
 800c93a:	7813      	ldrb	r3, [r2, #0]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	f000 815a 	beq.w	800cbf6 <__ssvfiscanf_r+0x2e6>
 800c942:	5dd9      	ldrb	r1, [r3, r7]
 800c944:	f011 0108 	ands.w	r1, r1, #8
 800c948:	f102 0501 	add.w	r5, r2, #1
 800c94c:	d019      	beq.n	800c982 <__ssvfiscanf_r+0x72>
 800c94e:	6863      	ldr	r3, [r4, #4]
 800c950:	2b00      	cmp	r3, #0
 800c952:	dd0f      	ble.n	800c974 <__ssvfiscanf_r+0x64>
 800c954:	6823      	ldr	r3, [r4, #0]
 800c956:	781a      	ldrb	r2, [r3, #0]
 800c958:	5cba      	ldrb	r2, [r7, r2]
 800c95a:	0712      	lsls	r2, r2, #28
 800c95c:	d401      	bmi.n	800c962 <__ssvfiscanf_r+0x52>
 800c95e:	462a      	mov	r2, r5
 800c960:	e7eb      	b.n	800c93a <__ssvfiscanf_r+0x2a>
 800c962:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c964:	3201      	adds	r2, #1
 800c966:	9245      	str	r2, [sp, #276]	; 0x114
 800c968:	6862      	ldr	r2, [r4, #4]
 800c96a:	3301      	adds	r3, #1
 800c96c:	3a01      	subs	r2, #1
 800c96e:	6062      	str	r2, [r4, #4]
 800c970:	6023      	str	r3, [r4, #0]
 800c972:	e7ec      	b.n	800c94e <__ssvfiscanf_r+0x3e>
 800c974:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c976:	4621      	mov	r1, r4
 800c978:	4630      	mov	r0, r6
 800c97a:	4798      	blx	r3
 800c97c:	2800      	cmp	r0, #0
 800c97e:	d0e9      	beq.n	800c954 <__ssvfiscanf_r+0x44>
 800c980:	e7ed      	b.n	800c95e <__ssvfiscanf_r+0x4e>
 800c982:	2b25      	cmp	r3, #37	; 0x25
 800c984:	d012      	beq.n	800c9ac <__ssvfiscanf_r+0x9c>
 800c986:	469a      	mov	sl, r3
 800c988:	6863      	ldr	r3, [r4, #4]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	f340 8091 	ble.w	800cab2 <__ssvfiscanf_r+0x1a2>
 800c990:	6822      	ldr	r2, [r4, #0]
 800c992:	7813      	ldrb	r3, [r2, #0]
 800c994:	4553      	cmp	r3, sl
 800c996:	f040 812e 	bne.w	800cbf6 <__ssvfiscanf_r+0x2e6>
 800c99a:	6863      	ldr	r3, [r4, #4]
 800c99c:	3b01      	subs	r3, #1
 800c99e:	6063      	str	r3, [r4, #4]
 800c9a0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c9a2:	3201      	adds	r2, #1
 800c9a4:	3301      	adds	r3, #1
 800c9a6:	6022      	str	r2, [r4, #0]
 800c9a8:	9345      	str	r3, [sp, #276]	; 0x114
 800c9aa:	e7d8      	b.n	800c95e <__ssvfiscanf_r+0x4e>
 800c9ac:	9141      	str	r1, [sp, #260]	; 0x104
 800c9ae:	9143      	str	r1, [sp, #268]	; 0x10c
 800c9b0:	7853      	ldrb	r3, [r2, #1]
 800c9b2:	2b2a      	cmp	r3, #42	; 0x2a
 800c9b4:	bf02      	ittt	eq
 800c9b6:	2310      	moveq	r3, #16
 800c9b8:	1c95      	addeq	r5, r2, #2
 800c9ba:	9341      	streq	r3, [sp, #260]	; 0x104
 800c9bc:	220a      	movs	r2, #10
 800c9be:	46aa      	mov	sl, r5
 800c9c0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c9c4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c9c8:	2b09      	cmp	r3, #9
 800c9ca:	d91d      	bls.n	800ca08 <__ssvfiscanf_r+0xf8>
 800c9cc:	487e      	ldr	r0, [pc, #504]	; (800cbc8 <__ssvfiscanf_r+0x2b8>)
 800c9ce:	2203      	movs	r2, #3
 800c9d0:	f7f3 fc36 	bl	8000240 <memchr>
 800c9d4:	b140      	cbz	r0, 800c9e8 <__ssvfiscanf_r+0xd8>
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	eba0 0009 	sub.w	r0, r0, r9
 800c9dc:	fa03 f000 	lsl.w	r0, r3, r0
 800c9e0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c9e2:	4318      	orrs	r0, r3
 800c9e4:	9041      	str	r0, [sp, #260]	; 0x104
 800c9e6:	4655      	mov	r5, sl
 800c9e8:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c9ec:	2b78      	cmp	r3, #120	; 0x78
 800c9ee:	d806      	bhi.n	800c9fe <__ssvfiscanf_r+0xee>
 800c9f0:	2b57      	cmp	r3, #87	; 0x57
 800c9f2:	d810      	bhi.n	800ca16 <__ssvfiscanf_r+0x106>
 800c9f4:	2b25      	cmp	r3, #37	; 0x25
 800c9f6:	d0c6      	beq.n	800c986 <__ssvfiscanf_r+0x76>
 800c9f8:	d856      	bhi.n	800caa8 <__ssvfiscanf_r+0x198>
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d064      	beq.n	800cac8 <__ssvfiscanf_r+0x1b8>
 800c9fe:	2303      	movs	r3, #3
 800ca00:	9347      	str	r3, [sp, #284]	; 0x11c
 800ca02:	230a      	movs	r3, #10
 800ca04:	9342      	str	r3, [sp, #264]	; 0x108
 800ca06:	e071      	b.n	800caec <__ssvfiscanf_r+0x1dc>
 800ca08:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ca0a:	fb02 1103 	mla	r1, r2, r3, r1
 800ca0e:	3930      	subs	r1, #48	; 0x30
 800ca10:	9143      	str	r1, [sp, #268]	; 0x10c
 800ca12:	4655      	mov	r5, sl
 800ca14:	e7d3      	b.n	800c9be <__ssvfiscanf_r+0xae>
 800ca16:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800ca1a:	2a20      	cmp	r2, #32
 800ca1c:	d8ef      	bhi.n	800c9fe <__ssvfiscanf_r+0xee>
 800ca1e:	a101      	add	r1, pc, #4	; (adr r1, 800ca24 <__ssvfiscanf_r+0x114>)
 800ca20:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ca24:	0800cad7 	.word	0x0800cad7
 800ca28:	0800c9ff 	.word	0x0800c9ff
 800ca2c:	0800c9ff 	.word	0x0800c9ff
 800ca30:	0800cb35 	.word	0x0800cb35
 800ca34:	0800c9ff 	.word	0x0800c9ff
 800ca38:	0800c9ff 	.word	0x0800c9ff
 800ca3c:	0800c9ff 	.word	0x0800c9ff
 800ca40:	0800c9ff 	.word	0x0800c9ff
 800ca44:	0800c9ff 	.word	0x0800c9ff
 800ca48:	0800c9ff 	.word	0x0800c9ff
 800ca4c:	0800c9ff 	.word	0x0800c9ff
 800ca50:	0800cb4b 	.word	0x0800cb4b
 800ca54:	0800cb21 	.word	0x0800cb21
 800ca58:	0800caaf 	.word	0x0800caaf
 800ca5c:	0800caaf 	.word	0x0800caaf
 800ca60:	0800caaf 	.word	0x0800caaf
 800ca64:	0800c9ff 	.word	0x0800c9ff
 800ca68:	0800cb25 	.word	0x0800cb25
 800ca6c:	0800c9ff 	.word	0x0800c9ff
 800ca70:	0800c9ff 	.word	0x0800c9ff
 800ca74:	0800c9ff 	.word	0x0800c9ff
 800ca78:	0800c9ff 	.word	0x0800c9ff
 800ca7c:	0800cb5b 	.word	0x0800cb5b
 800ca80:	0800cb2d 	.word	0x0800cb2d
 800ca84:	0800cacf 	.word	0x0800cacf
 800ca88:	0800c9ff 	.word	0x0800c9ff
 800ca8c:	0800c9ff 	.word	0x0800c9ff
 800ca90:	0800cb57 	.word	0x0800cb57
 800ca94:	0800c9ff 	.word	0x0800c9ff
 800ca98:	0800cb21 	.word	0x0800cb21
 800ca9c:	0800c9ff 	.word	0x0800c9ff
 800caa0:	0800c9ff 	.word	0x0800c9ff
 800caa4:	0800cad7 	.word	0x0800cad7
 800caa8:	3b45      	subs	r3, #69	; 0x45
 800caaa:	2b02      	cmp	r3, #2
 800caac:	d8a7      	bhi.n	800c9fe <__ssvfiscanf_r+0xee>
 800caae:	2305      	movs	r3, #5
 800cab0:	e01b      	b.n	800caea <__ssvfiscanf_r+0x1da>
 800cab2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cab4:	4621      	mov	r1, r4
 800cab6:	4630      	mov	r0, r6
 800cab8:	4798      	blx	r3
 800caba:	2800      	cmp	r0, #0
 800cabc:	f43f af68 	beq.w	800c990 <__ssvfiscanf_r+0x80>
 800cac0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cac2:	2800      	cmp	r0, #0
 800cac4:	f040 808d 	bne.w	800cbe2 <__ssvfiscanf_r+0x2d2>
 800cac8:	f04f 30ff 	mov.w	r0, #4294967295
 800cacc:	e08f      	b.n	800cbee <__ssvfiscanf_r+0x2de>
 800cace:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cad0:	f042 0220 	orr.w	r2, r2, #32
 800cad4:	9241      	str	r2, [sp, #260]	; 0x104
 800cad6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cadc:	9241      	str	r2, [sp, #260]	; 0x104
 800cade:	2210      	movs	r2, #16
 800cae0:	2b6f      	cmp	r3, #111	; 0x6f
 800cae2:	9242      	str	r2, [sp, #264]	; 0x108
 800cae4:	bf34      	ite	cc
 800cae6:	2303      	movcc	r3, #3
 800cae8:	2304      	movcs	r3, #4
 800caea:	9347      	str	r3, [sp, #284]	; 0x11c
 800caec:	6863      	ldr	r3, [r4, #4]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	dd42      	ble.n	800cb78 <__ssvfiscanf_r+0x268>
 800caf2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800caf4:	0659      	lsls	r1, r3, #25
 800caf6:	d404      	bmi.n	800cb02 <__ssvfiscanf_r+0x1f2>
 800caf8:	6823      	ldr	r3, [r4, #0]
 800cafa:	781a      	ldrb	r2, [r3, #0]
 800cafc:	5cba      	ldrb	r2, [r7, r2]
 800cafe:	0712      	lsls	r2, r2, #28
 800cb00:	d441      	bmi.n	800cb86 <__ssvfiscanf_r+0x276>
 800cb02:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800cb04:	2b02      	cmp	r3, #2
 800cb06:	dc50      	bgt.n	800cbaa <__ssvfiscanf_r+0x29a>
 800cb08:	466b      	mov	r3, sp
 800cb0a:	4622      	mov	r2, r4
 800cb0c:	a941      	add	r1, sp, #260	; 0x104
 800cb0e:	4630      	mov	r0, r6
 800cb10:	f000 f876 	bl	800cc00 <_scanf_chars>
 800cb14:	2801      	cmp	r0, #1
 800cb16:	d06e      	beq.n	800cbf6 <__ssvfiscanf_r+0x2e6>
 800cb18:	2802      	cmp	r0, #2
 800cb1a:	f47f af20 	bne.w	800c95e <__ssvfiscanf_r+0x4e>
 800cb1e:	e7cf      	b.n	800cac0 <__ssvfiscanf_r+0x1b0>
 800cb20:	220a      	movs	r2, #10
 800cb22:	e7dd      	b.n	800cae0 <__ssvfiscanf_r+0x1d0>
 800cb24:	2300      	movs	r3, #0
 800cb26:	9342      	str	r3, [sp, #264]	; 0x108
 800cb28:	2303      	movs	r3, #3
 800cb2a:	e7de      	b.n	800caea <__ssvfiscanf_r+0x1da>
 800cb2c:	2308      	movs	r3, #8
 800cb2e:	9342      	str	r3, [sp, #264]	; 0x108
 800cb30:	2304      	movs	r3, #4
 800cb32:	e7da      	b.n	800caea <__ssvfiscanf_r+0x1da>
 800cb34:	4629      	mov	r1, r5
 800cb36:	4640      	mov	r0, r8
 800cb38:	f000 f9c6 	bl	800cec8 <__sccl>
 800cb3c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cb3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb42:	9341      	str	r3, [sp, #260]	; 0x104
 800cb44:	4605      	mov	r5, r0
 800cb46:	2301      	movs	r3, #1
 800cb48:	e7cf      	b.n	800caea <__ssvfiscanf_r+0x1da>
 800cb4a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cb4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb50:	9341      	str	r3, [sp, #260]	; 0x104
 800cb52:	2300      	movs	r3, #0
 800cb54:	e7c9      	b.n	800caea <__ssvfiscanf_r+0x1da>
 800cb56:	2302      	movs	r3, #2
 800cb58:	e7c7      	b.n	800caea <__ssvfiscanf_r+0x1da>
 800cb5a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800cb5c:	06c3      	lsls	r3, r0, #27
 800cb5e:	f53f aefe 	bmi.w	800c95e <__ssvfiscanf_r+0x4e>
 800cb62:	9b00      	ldr	r3, [sp, #0]
 800cb64:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cb66:	1d19      	adds	r1, r3, #4
 800cb68:	9100      	str	r1, [sp, #0]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	f010 0f01 	tst.w	r0, #1
 800cb70:	bf14      	ite	ne
 800cb72:	801a      	strhne	r2, [r3, #0]
 800cb74:	601a      	streq	r2, [r3, #0]
 800cb76:	e6f2      	b.n	800c95e <__ssvfiscanf_r+0x4e>
 800cb78:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cb7a:	4621      	mov	r1, r4
 800cb7c:	4630      	mov	r0, r6
 800cb7e:	4798      	blx	r3
 800cb80:	2800      	cmp	r0, #0
 800cb82:	d0b6      	beq.n	800caf2 <__ssvfiscanf_r+0x1e2>
 800cb84:	e79c      	b.n	800cac0 <__ssvfiscanf_r+0x1b0>
 800cb86:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cb88:	3201      	adds	r2, #1
 800cb8a:	9245      	str	r2, [sp, #276]	; 0x114
 800cb8c:	6862      	ldr	r2, [r4, #4]
 800cb8e:	3a01      	subs	r2, #1
 800cb90:	2a00      	cmp	r2, #0
 800cb92:	6062      	str	r2, [r4, #4]
 800cb94:	dd02      	ble.n	800cb9c <__ssvfiscanf_r+0x28c>
 800cb96:	3301      	adds	r3, #1
 800cb98:	6023      	str	r3, [r4, #0]
 800cb9a:	e7ad      	b.n	800caf8 <__ssvfiscanf_r+0x1e8>
 800cb9c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cb9e:	4621      	mov	r1, r4
 800cba0:	4630      	mov	r0, r6
 800cba2:	4798      	blx	r3
 800cba4:	2800      	cmp	r0, #0
 800cba6:	d0a7      	beq.n	800caf8 <__ssvfiscanf_r+0x1e8>
 800cba8:	e78a      	b.n	800cac0 <__ssvfiscanf_r+0x1b0>
 800cbaa:	2b04      	cmp	r3, #4
 800cbac:	dc0e      	bgt.n	800cbcc <__ssvfiscanf_r+0x2bc>
 800cbae:	466b      	mov	r3, sp
 800cbb0:	4622      	mov	r2, r4
 800cbb2:	a941      	add	r1, sp, #260	; 0x104
 800cbb4:	4630      	mov	r0, r6
 800cbb6:	f000 f87d 	bl	800ccb4 <_scanf_i>
 800cbba:	e7ab      	b.n	800cb14 <__ssvfiscanf_r+0x204>
 800cbbc:	0800c85b 	.word	0x0800c85b
 800cbc0:	0800c8d5 	.word	0x0800c8d5
 800cbc4:	0800d350 	.word	0x0800d350
 800cbc8:	0800d322 	.word	0x0800d322
 800cbcc:	4b0b      	ldr	r3, [pc, #44]	; (800cbfc <__ssvfiscanf_r+0x2ec>)
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	f43f aec5 	beq.w	800c95e <__ssvfiscanf_r+0x4e>
 800cbd4:	466b      	mov	r3, sp
 800cbd6:	4622      	mov	r2, r4
 800cbd8:	a941      	add	r1, sp, #260	; 0x104
 800cbda:	4630      	mov	r0, r6
 800cbdc:	f3af 8000 	nop.w
 800cbe0:	e798      	b.n	800cb14 <__ssvfiscanf_r+0x204>
 800cbe2:	89a3      	ldrh	r3, [r4, #12]
 800cbe4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cbe8:	bf18      	it	ne
 800cbea:	f04f 30ff 	movne.w	r0, #4294967295
 800cbee:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800cbf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbf6:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cbf8:	e7f9      	b.n	800cbee <__ssvfiscanf_r+0x2de>
 800cbfa:	bf00      	nop
 800cbfc:	00000000 	.word	0x00000000

0800cc00 <_scanf_chars>:
 800cc00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc04:	4615      	mov	r5, r2
 800cc06:	688a      	ldr	r2, [r1, #8]
 800cc08:	4680      	mov	r8, r0
 800cc0a:	460c      	mov	r4, r1
 800cc0c:	b932      	cbnz	r2, 800cc1c <_scanf_chars+0x1c>
 800cc0e:	698a      	ldr	r2, [r1, #24]
 800cc10:	2a00      	cmp	r2, #0
 800cc12:	bf0c      	ite	eq
 800cc14:	2201      	moveq	r2, #1
 800cc16:	f04f 32ff 	movne.w	r2, #4294967295
 800cc1a:	608a      	str	r2, [r1, #8]
 800cc1c:	6822      	ldr	r2, [r4, #0]
 800cc1e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800ccb0 <_scanf_chars+0xb0>
 800cc22:	06d1      	lsls	r1, r2, #27
 800cc24:	bf5f      	itttt	pl
 800cc26:	681a      	ldrpl	r2, [r3, #0]
 800cc28:	1d11      	addpl	r1, r2, #4
 800cc2a:	6019      	strpl	r1, [r3, #0]
 800cc2c:	6816      	ldrpl	r6, [r2, #0]
 800cc2e:	2700      	movs	r7, #0
 800cc30:	69a0      	ldr	r0, [r4, #24]
 800cc32:	b188      	cbz	r0, 800cc58 <_scanf_chars+0x58>
 800cc34:	2801      	cmp	r0, #1
 800cc36:	d107      	bne.n	800cc48 <_scanf_chars+0x48>
 800cc38:	682a      	ldr	r2, [r5, #0]
 800cc3a:	7811      	ldrb	r1, [r2, #0]
 800cc3c:	6962      	ldr	r2, [r4, #20]
 800cc3e:	5c52      	ldrb	r2, [r2, r1]
 800cc40:	b952      	cbnz	r2, 800cc58 <_scanf_chars+0x58>
 800cc42:	2f00      	cmp	r7, #0
 800cc44:	d031      	beq.n	800ccaa <_scanf_chars+0xaa>
 800cc46:	e022      	b.n	800cc8e <_scanf_chars+0x8e>
 800cc48:	2802      	cmp	r0, #2
 800cc4a:	d120      	bne.n	800cc8e <_scanf_chars+0x8e>
 800cc4c:	682b      	ldr	r3, [r5, #0]
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	f813 3009 	ldrb.w	r3, [r3, r9]
 800cc54:	071b      	lsls	r3, r3, #28
 800cc56:	d41a      	bmi.n	800cc8e <_scanf_chars+0x8e>
 800cc58:	6823      	ldr	r3, [r4, #0]
 800cc5a:	06da      	lsls	r2, r3, #27
 800cc5c:	bf5e      	ittt	pl
 800cc5e:	682b      	ldrpl	r3, [r5, #0]
 800cc60:	781b      	ldrbpl	r3, [r3, #0]
 800cc62:	f806 3b01 	strbpl.w	r3, [r6], #1
 800cc66:	682a      	ldr	r2, [r5, #0]
 800cc68:	686b      	ldr	r3, [r5, #4]
 800cc6a:	3201      	adds	r2, #1
 800cc6c:	602a      	str	r2, [r5, #0]
 800cc6e:	68a2      	ldr	r2, [r4, #8]
 800cc70:	3b01      	subs	r3, #1
 800cc72:	3a01      	subs	r2, #1
 800cc74:	606b      	str	r3, [r5, #4]
 800cc76:	3701      	adds	r7, #1
 800cc78:	60a2      	str	r2, [r4, #8]
 800cc7a:	b142      	cbz	r2, 800cc8e <_scanf_chars+0x8e>
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	dcd7      	bgt.n	800cc30 <_scanf_chars+0x30>
 800cc80:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cc84:	4629      	mov	r1, r5
 800cc86:	4640      	mov	r0, r8
 800cc88:	4798      	blx	r3
 800cc8a:	2800      	cmp	r0, #0
 800cc8c:	d0d0      	beq.n	800cc30 <_scanf_chars+0x30>
 800cc8e:	6823      	ldr	r3, [r4, #0]
 800cc90:	f013 0310 	ands.w	r3, r3, #16
 800cc94:	d105      	bne.n	800cca2 <_scanf_chars+0xa2>
 800cc96:	68e2      	ldr	r2, [r4, #12]
 800cc98:	3201      	adds	r2, #1
 800cc9a:	60e2      	str	r2, [r4, #12]
 800cc9c:	69a2      	ldr	r2, [r4, #24]
 800cc9e:	b102      	cbz	r2, 800cca2 <_scanf_chars+0xa2>
 800cca0:	7033      	strb	r3, [r6, #0]
 800cca2:	6923      	ldr	r3, [r4, #16]
 800cca4:	443b      	add	r3, r7
 800cca6:	6123      	str	r3, [r4, #16]
 800cca8:	2000      	movs	r0, #0
 800ccaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccae:	bf00      	nop
 800ccb0:	0800d350 	.word	0x0800d350

0800ccb4 <_scanf_i>:
 800ccb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccb8:	4698      	mov	r8, r3
 800ccba:	4b76      	ldr	r3, [pc, #472]	; (800ce94 <_scanf_i+0x1e0>)
 800ccbc:	460c      	mov	r4, r1
 800ccbe:	4682      	mov	sl, r0
 800ccc0:	4616      	mov	r6, r2
 800ccc2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ccc6:	b087      	sub	sp, #28
 800ccc8:	ab03      	add	r3, sp, #12
 800ccca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ccce:	4b72      	ldr	r3, [pc, #456]	; (800ce98 <_scanf_i+0x1e4>)
 800ccd0:	69a1      	ldr	r1, [r4, #24]
 800ccd2:	4a72      	ldr	r2, [pc, #456]	; (800ce9c <_scanf_i+0x1e8>)
 800ccd4:	2903      	cmp	r1, #3
 800ccd6:	bf18      	it	ne
 800ccd8:	461a      	movne	r2, r3
 800ccda:	68a3      	ldr	r3, [r4, #8]
 800ccdc:	9201      	str	r2, [sp, #4]
 800ccde:	1e5a      	subs	r2, r3, #1
 800cce0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cce4:	bf88      	it	hi
 800cce6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ccea:	4627      	mov	r7, r4
 800ccec:	bf82      	ittt	hi
 800ccee:	eb03 0905 	addhi.w	r9, r3, r5
 800ccf2:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ccf6:	60a3      	strhi	r3, [r4, #8]
 800ccf8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ccfc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800cd00:	bf98      	it	ls
 800cd02:	f04f 0900 	movls.w	r9, #0
 800cd06:	6023      	str	r3, [r4, #0]
 800cd08:	463d      	mov	r5, r7
 800cd0a:	f04f 0b00 	mov.w	fp, #0
 800cd0e:	6831      	ldr	r1, [r6, #0]
 800cd10:	ab03      	add	r3, sp, #12
 800cd12:	7809      	ldrb	r1, [r1, #0]
 800cd14:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800cd18:	2202      	movs	r2, #2
 800cd1a:	f7f3 fa91 	bl	8000240 <memchr>
 800cd1e:	b328      	cbz	r0, 800cd6c <_scanf_i+0xb8>
 800cd20:	f1bb 0f01 	cmp.w	fp, #1
 800cd24:	d159      	bne.n	800cdda <_scanf_i+0x126>
 800cd26:	6862      	ldr	r2, [r4, #4]
 800cd28:	b92a      	cbnz	r2, 800cd36 <_scanf_i+0x82>
 800cd2a:	6822      	ldr	r2, [r4, #0]
 800cd2c:	2308      	movs	r3, #8
 800cd2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cd32:	6063      	str	r3, [r4, #4]
 800cd34:	6022      	str	r2, [r4, #0]
 800cd36:	6822      	ldr	r2, [r4, #0]
 800cd38:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800cd3c:	6022      	str	r2, [r4, #0]
 800cd3e:	68a2      	ldr	r2, [r4, #8]
 800cd40:	1e51      	subs	r1, r2, #1
 800cd42:	60a1      	str	r1, [r4, #8]
 800cd44:	b192      	cbz	r2, 800cd6c <_scanf_i+0xb8>
 800cd46:	6832      	ldr	r2, [r6, #0]
 800cd48:	1c51      	adds	r1, r2, #1
 800cd4a:	6031      	str	r1, [r6, #0]
 800cd4c:	7812      	ldrb	r2, [r2, #0]
 800cd4e:	f805 2b01 	strb.w	r2, [r5], #1
 800cd52:	6872      	ldr	r2, [r6, #4]
 800cd54:	3a01      	subs	r2, #1
 800cd56:	2a00      	cmp	r2, #0
 800cd58:	6072      	str	r2, [r6, #4]
 800cd5a:	dc07      	bgt.n	800cd6c <_scanf_i+0xb8>
 800cd5c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800cd60:	4631      	mov	r1, r6
 800cd62:	4650      	mov	r0, sl
 800cd64:	4790      	blx	r2
 800cd66:	2800      	cmp	r0, #0
 800cd68:	f040 8085 	bne.w	800ce76 <_scanf_i+0x1c2>
 800cd6c:	f10b 0b01 	add.w	fp, fp, #1
 800cd70:	f1bb 0f03 	cmp.w	fp, #3
 800cd74:	d1cb      	bne.n	800cd0e <_scanf_i+0x5a>
 800cd76:	6863      	ldr	r3, [r4, #4]
 800cd78:	b90b      	cbnz	r3, 800cd7e <_scanf_i+0xca>
 800cd7a:	230a      	movs	r3, #10
 800cd7c:	6063      	str	r3, [r4, #4]
 800cd7e:	6863      	ldr	r3, [r4, #4]
 800cd80:	4947      	ldr	r1, [pc, #284]	; (800cea0 <_scanf_i+0x1ec>)
 800cd82:	6960      	ldr	r0, [r4, #20]
 800cd84:	1ac9      	subs	r1, r1, r3
 800cd86:	f000 f89f 	bl	800cec8 <__sccl>
 800cd8a:	f04f 0b00 	mov.w	fp, #0
 800cd8e:	68a3      	ldr	r3, [r4, #8]
 800cd90:	6822      	ldr	r2, [r4, #0]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d03d      	beq.n	800ce12 <_scanf_i+0x15e>
 800cd96:	6831      	ldr	r1, [r6, #0]
 800cd98:	6960      	ldr	r0, [r4, #20]
 800cd9a:	f891 c000 	ldrb.w	ip, [r1]
 800cd9e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800cda2:	2800      	cmp	r0, #0
 800cda4:	d035      	beq.n	800ce12 <_scanf_i+0x15e>
 800cda6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800cdaa:	d124      	bne.n	800cdf6 <_scanf_i+0x142>
 800cdac:	0510      	lsls	r0, r2, #20
 800cdae:	d522      	bpl.n	800cdf6 <_scanf_i+0x142>
 800cdb0:	f10b 0b01 	add.w	fp, fp, #1
 800cdb4:	f1b9 0f00 	cmp.w	r9, #0
 800cdb8:	d003      	beq.n	800cdc2 <_scanf_i+0x10e>
 800cdba:	3301      	adds	r3, #1
 800cdbc:	f109 39ff 	add.w	r9, r9, #4294967295
 800cdc0:	60a3      	str	r3, [r4, #8]
 800cdc2:	6873      	ldr	r3, [r6, #4]
 800cdc4:	3b01      	subs	r3, #1
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	6073      	str	r3, [r6, #4]
 800cdca:	dd1b      	ble.n	800ce04 <_scanf_i+0x150>
 800cdcc:	6833      	ldr	r3, [r6, #0]
 800cdce:	3301      	adds	r3, #1
 800cdd0:	6033      	str	r3, [r6, #0]
 800cdd2:	68a3      	ldr	r3, [r4, #8]
 800cdd4:	3b01      	subs	r3, #1
 800cdd6:	60a3      	str	r3, [r4, #8]
 800cdd8:	e7d9      	b.n	800cd8e <_scanf_i+0xda>
 800cdda:	f1bb 0f02 	cmp.w	fp, #2
 800cdde:	d1ae      	bne.n	800cd3e <_scanf_i+0x8a>
 800cde0:	6822      	ldr	r2, [r4, #0]
 800cde2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800cde6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800cdea:	d1bf      	bne.n	800cd6c <_scanf_i+0xb8>
 800cdec:	2310      	movs	r3, #16
 800cdee:	6063      	str	r3, [r4, #4]
 800cdf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cdf4:	e7a2      	b.n	800cd3c <_scanf_i+0x88>
 800cdf6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800cdfa:	6022      	str	r2, [r4, #0]
 800cdfc:	780b      	ldrb	r3, [r1, #0]
 800cdfe:	f805 3b01 	strb.w	r3, [r5], #1
 800ce02:	e7de      	b.n	800cdc2 <_scanf_i+0x10e>
 800ce04:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ce08:	4631      	mov	r1, r6
 800ce0a:	4650      	mov	r0, sl
 800ce0c:	4798      	blx	r3
 800ce0e:	2800      	cmp	r0, #0
 800ce10:	d0df      	beq.n	800cdd2 <_scanf_i+0x11e>
 800ce12:	6823      	ldr	r3, [r4, #0]
 800ce14:	05db      	lsls	r3, r3, #23
 800ce16:	d50d      	bpl.n	800ce34 <_scanf_i+0x180>
 800ce18:	42bd      	cmp	r5, r7
 800ce1a:	d909      	bls.n	800ce30 <_scanf_i+0x17c>
 800ce1c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ce20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce24:	4632      	mov	r2, r6
 800ce26:	4650      	mov	r0, sl
 800ce28:	4798      	blx	r3
 800ce2a:	f105 39ff 	add.w	r9, r5, #4294967295
 800ce2e:	464d      	mov	r5, r9
 800ce30:	42bd      	cmp	r5, r7
 800ce32:	d02d      	beq.n	800ce90 <_scanf_i+0x1dc>
 800ce34:	6822      	ldr	r2, [r4, #0]
 800ce36:	f012 0210 	ands.w	r2, r2, #16
 800ce3a:	d113      	bne.n	800ce64 <_scanf_i+0x1b0>
 800ce3c:	702a      	strb	r2, [r5, #0]
 800ce3e:	6863      	ldr	r3, [r4, #4]
 800ce40:	9e01      	ldr	r6, [sp, #4]
 800ce42:	4639      	mov	r1, r7
 800ce44:	4650      	mov	r0, sl
 800ce46:	47b0      	blx	r6
 800ce48:	6821      	ldr	r1, [r4, #0]
 800ce4a:	f8d8 3000 	ldr.w	r3, [r8]
 800ce4e:	f011 0f20 	tst.w	r1, #32
 800ce52:	d013      	beq.n	800ce7c <_scanf_i+0x1c8>
 800ce54:	1d1a      	adds	r2, r3, #4
 800ce56:	f8c8 2000 	str.w	r2, [r8]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	6018      	str	r0, [r3, #0]
 800ce5e:	68e3      	ldr	r3, [r4, #12]
 800ce60:	3301      	adds	r3, #1
 800ce62:	60e3      	str	r3, [r4, #12]
 800ce64:	1bed      	subs	r5, r5, r7
 800ce66:	44ab      	add	fp, r5
 800ce68:	6925      	ldr	r5, [r4, #16]
 800ce6a:	445d      	add	r5, fp
 800ce6c:	6125      	str	r5, [r4, #16]
 800ce6e:	2000      	movs	r0, #0
 800ce70:	b007      	add	sp, #28
 800ce72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce76:	f04f 0b00 	mov.w	fp, #0
 800ce7a:	e7ca      	b.n	800ce12 <_scanf_i+0x15e>
 800ce7c:	1d1a      	adds	r2, r3, #4
 800ce7e:	f8c8 2000 	str.w	r2, [r8]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	f011 0f01 	tst.w	r1, #1
 800ce88:	bf14      	ite	ne
 800ce8a:	8018      	strhne	r0, [r3, #0]
 800ce8c:	6018      	streq	r0, [r3, #0]
 800ce8e:	e7e6      	b.n	800ce5e <_scanf_i+0x1aa>
 800ce90:	2001      	movs	r0, #1
 800ce92:	e7ed      	b.n	800ce70 <_scanf_i+0x1bc>
 800ce94:	0800d1a8 	.word	0x0800d1a8
 800ce98:	0800c199 	.word	0x0800c199
 800ce9c:	0800d0c5 	.word	0x0800d0c5
 800cea0:	0800d4c9 	.word	0x0800d4c9

0800cea4 <_read_r>:
 800cea4:	b538      	push	{r3, r4, r5, lr}
 800cea6:	4d07      	ldr	r5, [pc, #28]	; (800cec4 <_read_r+0x20>)
 800cea8:	4604      	mov	r4, r0
 800ceaa:	4608      	mov	r0, r1
 800ceac:	4611      	mov	r1, r2
 800ceae:	2200      	movs	r2, #0
 800ceb0:	602a      	str	r2, [r5, #0]
 800ceb2:	461a      	mov	r2, r3
 800ceb4:	f7f7 f9a0 	bl	80041f8 <_read>
 800ceb8:	1c43      	adds	r3, r0, #1
 800ceba:	d102      	bne.n	800cec2 <_read_r+0x1e>
 800cebc:	682b      	ldr	r3, [r5, #0]
 800cebe:	b103      	cbz	r3, 800cec2 <_read_r+0x1e>
 800cec0:	6023      	str	r3, [r4, #0]
 800cec2:	bd38      	pop	{r3, r4, r5, pc}
 800cec4:	20000fbc 	.word	0x20000fbc

0800cec8 <__sccl>:
 800cec8:	b570      	push	{r4, r5, r6, lr}
 800ceca:	780b      	ldrb	r3, [r1, #0]
 800cecc:	4604      	mov	r4, r0
 800cece:	2b5e      	cmp	r3, #94	; 0x5e
 800ced0:	bf0b      	itete	eq
 800ced2:	784b      	ldrbeq	r3, [r1, #1]
 800ced4:	1c48      	addne	r0, r1, #1
 800ced6:	1c88      	addeq	r0, r1, #2
 800ced8:	2200      	movne	r2, #0
 800ceda:	bf08      	it	eq
 800cedc:	2201      	moveq	r2, #1
 800cede:	1e61      	subs	r1, r4, #1
 800cee0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800cee4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800cee8:	42a9      	cmp	r1, r5
 800ceea:	d1fb      	bne.n	800cee4 <__sccl+0x1c>
 800ceec:	b90b      	cbnz	r3, 800cef2 <__sccl+0x2a>
 800ceee:	3801      	subs	r0, #1
 800cef0:	bd70      	pop	{r4, r5, r6, pc}
 800cef2:	f082 0201 	eor.w	r2, r2, #1
 800cef6:	54e2      	strb	r2, [r4, r3]
 800cef8:	4605      	mov	r5, r0
 800cefa:	4628      	mov	r0, r5
 800cefc:	f810 1b01 	ldrb.w	r1, [r0], #1
 800cf00:	292d      	cmp	r1, #45	; 0x2d
 800cf02:	d006      	beq.n	800cf12 <__sccl+0x4a>
 800cf04:	295d      	cmp	r1, #93	; 0x5d
 800cf06:	d0f3      	beq.n	800cef0 <__sccl+0x28>
 800cf08:	b909      	cbnz	r1, 800cf0e <__sccl+0x46>
 800cf0a:	4628      	mov	r0, r5
 800cf0c:	e7f0      	b.n	800cef0 <__sccl+0x28>
 800cf0e:	460b      	mov	r3, r1
 800cf10:	e7f1      	b.n	800cef6 <__sccl+0x2e>
 800cf12:	786e      	ldrb	r6, [r5, #1]
 800cf14:	2e5d      	cmp	r6, #93	; 0x5d
 800cf16:	d0fa      	beq.n	800cf0e <__sccl+0x46>
 800cf18:	42b3      	cmp	r3, r6
 800cf1a:	dcf8      	bgt.n	800cf0e <__sccl+0x46>
 800cf1c:	3502      	adds	r5, #2
 800cf1e:	4619      	mov	r1, r3
 800cf20:	3101      	adds	r1, #1
 800cf22:	428e      	cmp	r6, r1
 800cf24:	5462      	strb	r2, [r4, r1]
 800cf26:	dcfb      	bgt.n	800cf20 <__sccl+0x58>
 800cf28:	1af1      	subs	r1, r6, r3
 800cf2a:	3901      	subs	r1, #1
 800cf2c:	1c58      	adds	r0, r3, #1
 800cf2e:	42b3      	cmp	r3, r6
 800cf30:	bfa8      	it	ge
 800cf32:	2100      	movge	r1, #0
 800cf34:	1843      	adds	r3, r0, r1
 800cf36:	e7e0      	b.n	800cefa <__sccl+0x32>

0800cf38 <_raise_r>:
 800cf38:	291f      	cmp	r1, #31
 800cf3a:	b538      	push	{r3, r4, r5, lr}
 800cf3c:	4604      	mov	r4, r0
 800cf3e:	460d      	mov	r5, r1
 800cf40:	d904      	bls.n	800cf4c <_raise_r+0x14>
 800cf42:	2316      	movs	r3, #22
 800cf44:	6003      	str	r3, [r0, #0]
 800cf46:	f04f 30ff 	mov.w	r0, #4294967295
 800cf4a:	bd38      	pop	{r3, r4, r5, pc}
 800cf4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cf4e:	b112      	cbz	r2, 800cf56 <_raise_r+0x1e>
 800cf50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf54:	b94b      	cbnz	r3, 800cf6a <_raise_r+0x32>
 800cf56:	4620      	mov	r0, r4
 800cf58:	f000 f830 	bl	800cfbc <_getpid_r>
 800cf5c:	462a      	mov	r2, r5
 800cf5e:	4601      	mov	r1, r0
 800cf60:	4620      	mov	r0, r4
 800cf62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf66:	f000 b817 	b.w	800cf98 <_kill_r>
 800cf6a:	2b01      	cmp	r3, #1
 800cf6c:	d00a      	beq.n	800cf84 <_raise_r+0x4c>
 800cf6e:	1c59      	adds	r1, r3, #1
 800cf70:	d103      	bne.n	800cf7a <_raise_r+0x42>
 800cf72:	2316      	movs	r3, #22
 800cf74:	6003      	str	r3, [r0, #0]
 800cf76:	2001      	movs	r0, #1
 800cf78:	e7e7      	b.n	800cf4a <_raise_r+0x12>
 800cf7a:	2400      	movs	r4, #0
 800cf7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cf80:	4628      	mov	r0, r5
 800cf82:	4798      	blx	r3
 800cf84:	2000      	movs	r0, #0
 800cf86:	e7e0      	b.n	800cf4a <_raise_r+0x12>

0800cf88 <raise>:
 800cf88:	4b02      	ldr	r3, [pc, #8]	; (800cf94 <raise+0xc>)
 800cf8a:	4601      	mov	r1, r0
 800cf8c:	6818      	ldr	r0, [r3, #0]
 800cf8e:	f7ff bfd3 	b.w	800cf38 <_raise_r>
 800cf92:	bf00      	nop
 800cf94:	20000150 	.word	0x20000150

0800cf98 <_kill_r>:
 800cf98:	b538      	push	{r3, r4, r5, lr}
 800cf9a:	4d07      	ldr	r5, [pc, #28]	; (800cfb8 <_kill_r+0x20>)
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	4604      	mov	r4, r0
 800cfa0:	4608      	mov	r0, r1
 800cfa2:	4611      	mov	r1, r2
 800cfa4:	602b      	str	r3, [r5, #0]
 800cfa6:	f7f7 f90d 	bl	80041c4 <_kill>
 800cfaa:	1c43      	adds	r3, r0, #1
 800cfac:	d102      	bne.n	800cfb4 <_kill_r+0x1c>
 800cfae:	682b      	ldr	r3, [r5, #0]
 800cfb0:	b103      	cbz	r3, 800cfb4 <_kill_r+0x1c>
 800cfb2:	6023      	str	r3, [r4, #0]
 800cfb4:	bd38      	pop	{r3, r4, r5, pc}
 800cfb6:	bf00      	nop
 800cfb8:	20000fbc 	.word	0x20000fbc

0800cfbc <_getpid_r>:
 800cfbc:	f7f7 b8fa 	b.w	80041b4 <_getpid>

0800cfc0 <_strtol_l.constprop.0>:
 800cfc0:	2b01      	cmp	r3, #1
 800cfc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfc6:	d001      	beq.n	800cfcc <_strtol_l.constprop.0+0xc>
 800cfc8:	2b24      	cmp	r3, #36	; 0x24
 800cfca:	d906      	bls.n	800cfda <_strtol_l.constprop.0+0x1a>
 800cfcc:	f7fd ff32 	bl	800ae34 <__errno>
 800cfd0:	2316      	movs	r3, #22
 800cfd2:	6003      	str	r3, [r0, #0]
 800cfd4:	2000      	movs	r0, #0
 800cfd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfda:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d0c0 <_strtol_l.constprop.0+0x100>
 800cfde:	460d      	mov	r5, r1
 800cfe0:	462e      	mov	r6, r5
 800cfe2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cfe6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800cfea:	f017 0708 	ands.w	r7, r7, #8
 800cfee:	d1f7      	bne.n	800cfe0 <_strtol_l.constprop.0+0x20>
 800cff0:	2c2d      	cmp	r4, #45	; 0x2d
 800cff2:	d132      	bne.n	800d05a <_strtol_l.constprop.0+0x9a>
 800cff4:	782c      	ldrb	r4, [r5, #0]
 800cff6:	2701      	movs	r7, #1
 800cff8:	1cb5      	adds	r5, r6, #2
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d05b      	beq.n	800d0b6 <_strtol_l.constprop.0+0xf6>
 800cffe:	2b10      	cmp	r3, #16
 800d000:	d109      	bne.n	800d016 <_strtol_l.constprop.0+0x56>
 800d002:	2c30      	cmp	r4, #48	; 0x30
 800d004:	d107      	bne.n	800d016 <_strtol_l.constprop.0+0x56>
 800d006:	782c      	ldrb	r4, [r5, #0]
 800d008:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d00c:	2c58      	cmp	r4, #88	; 0x58
 800d00e:	d14d      	bne.n	800d0ac <_strtol_l.constprop.0+0xec>
 800d010:	786c      	ldrb	r4, [r5, #1]
 800d012:	2310      	movs	r3, #16
 800d014:	3502      	adds	r5, #2
 800d016:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d01a:	f108 38ff 	add.w	r8, r8, #4294967295
 800d01e:	f04f 0c00 	mov.w	ip, #0
 800d022:	fbb8 f9f3 	udiv	r9, r8, r3
 800d026:	4666      	mov	r6, ip
 800d028:	fb03 8a19 	mls	sl, r3, r9, r8
 800d02c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d030:	f1be 0f09 	cmp.w	lr, #9
 800d034:	d816      	bhi.n	800d064 <_strtol_l.constprop.0+0xa4>
 800d036:	4674      	mov	r4, lr
 800d038:	42a3      	cmp	r3, r4
 800d03a:	dd24      	ble.n	800d086 <_strtol_l.constprop.0+0xc6>
 800d03c:	f1bc 0f00 	cmp.w	ip, #0
 800d040:	db1e      	blt.n	800d080 <_strtol_l.constprop.0+0xc0>
 800d042:	45b1      	cmp	r9, r6
 800d044:	d31c      	bcc.n	800d080 <_strtol_l.constprop.0+0xc0>
 800d046:	d101      	bne.n	800d04c <_strtol_l.constprop.0+0x8c>
 800d048:	45a2      	cmp	sl, r4
 800d04a:	db19      	blt.n	800d080 <_strtol_l.constprop.0+0xc0>
 800d04c:	fb06 4603 	mla	r6, r6, r3, r4
 800d050:	f04f 0c01 	mov.w	ip, #1
 800d054:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d058:	e7e8      	b.n	800d02c <_strtol_l.constprop.0+0x6c>
 800d05a:	2c2b      	cmp	r4, #43	; 0x2b
 800d05c:	bf04      	itt	eq
 800d05e:	782c      	ldrbeq	r4, [r5, #0]
 800d060:	1cb5      	addeq	r5, r6, #2
 800d062:	e7ca      	b.n	800cffa <_strtol_l.constprop.0+0x3a>
 800d064:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d068:	f1be 0f19 	cmp.w	lr, #25
 800d06c:	d801      	bhi.n	800d072 <_strtol_l.constprop.0+0xb2>
 800d06e:	3c37      	subs	r4, #55	; 0x37
 800d070:	e7e2      	b.n	800d038 <_strtol_l.constprop.0+0x78>
 800d072:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d076:	f1be 0f19 	cmp.w	lr, #25
 800d07a:	d804      	bhi.n	800d086 <_strtol_l.constprop.0+0xc6>
 800d07c:	3c57      	subs	r4, #87	; 0x57
 800d07e:	e7db      	b.n	800d038 <_strtol_l.constprop.0+0x78>
 800d080:	f04f 3cff 	mov.w	ip, #4294967295
 800d084:	e7e6      	b.n	800d054 <_strtol_l.constprop.0+0x94>
 800d086:	f1bc 0f00 	cmp.w	ip, #0
 800d08a:	da05      	bge.n	800d098 <_strtol_l.constprop.0+0xd8>
 800d08c:	2322      	movs	r3, #34	; 0x22
 800d08e:	6003      	str	r3, [r0, #0]
 800d090:	4646      	mov	r6, r8
 800d092:	b942      	cbnz	r2, 800d0a6 <_strtol_l.constprop.0+0xe6>
 800d094:	4630      	mov	r0, r6
 800d096:	e79e      	b.n	800cfd6 <_strtol_l.constprop.0+0x16>
 800d098:	b107      	cbz	r7, 800d09c <_strtol_l.constprop.0+0xdc>
 800d09a:	4276      	negs	r6, r6
 800d09c:	2a00      	cmp	r2, #0
 800d09e:	d0f9      	beq.n	800d094 <_strtol_l.constprop.0+0xd4>
 800d0a0:	f1bc 0f00 	cmp.w	ip, #0
 800d0a4:	d000      	beq.n	800d0a8 <_strtol_l.constprop.0+0xe8>
 800d0a6:	1e69      	subs	r1, r5, #1
 800d0a8:	6011      	str	r1, [r2, #0]
 800d0aa:	e7f3      	b.n	800d094 <_strtol_l.constprop.0+0xd4>
 800d0ac:	2430      	movs	r4, #48	; 0x30
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d1b1      	bne.n	800d016 <_strtol_l.constprop.0+0x56>
 800d0b2:	2308      	movs	r3, #8
 800d0b4:	e7af      	b.n	800d016 <_strtol_l.constprop.0+0x56>
 800d0b6:	2c30      	cmp	r4, #48	; 0x30
 800d0b8:	d0a5      	beq.n	800d006 <_strtol_l.constprop.0+0x46>
 800d0ba:	230a      	movs	r3, #10
 800d0bc:	e7ab      	b.n	800d016 <_strtol_l.constprop.0+0x56>
 800d0be:	bf00      	nop
 800d0c0:	0800d350 	.word	0x0800d350

0800d0c4 <_strtol_r>:
 800d0c4:	f7ff bf7c 	b.w	800cfc0 <_strtol_l.constprop.0>

0800d0c8 <__submore>:
 800d0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0cc:	460c      	mov	r4, r1
 800d0ce:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d0d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d0d4:	4299      	cmp	r1, r3
 800d0d6:	d11d      	bne.n	800d114 <__submore+0x4c>
 800d0d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d0dc:	f7fe f878 	bl	800b1d0 <_malloc_r>
 800d0e0:	b918      	cbnz	r0, 800d0ea <__submore+0x22>
 800d0e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d0e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0ee:	63a3      	str	r3, [r4, #56]	; 0x38
 800d0f0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d0f4:	6360      	str	r0, [r4, #52]	; 0x34
 800d0f6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d0fa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d0fe:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d102:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d106:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d10a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d10e:	6020      	str	r0, [r4, #0]
 800d110:	2000      	movs	r0, #0
 800d112:	e7e8      	b.n	800d0e6 <__submore+0x1e>
 800d114:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d116:	0077      	lsls	r7, r6, #1
 800d118:	463a      	mov	r2, r7
 800d11a:	f7ff fb6f 	bl	800c7fc <_realloc_r>
 800d11e:	4605      	mov	r5, r0
 800d120:	2800      	cmp	r0, #0
 800d122:	d0de      	beq.n	800d0e2 <__submore+0x1a>
 800d124:	eb00 0806 	add.w	r8, r0, r6
 800d128:	4601      	mov	r1, r0
 800d12a:	4632      	mov	r2, r6
 800d12c:	4640      	mov	r0, r8
 800d12e:	f7fd ffcd 	bl	800b0cc <memcpy>
 800d132:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d136:	f8c4 8000 	str.w	r8, [r4]
 800d13a:	e7e9      	b.n	800d110 <__submore+0x48>

0800d13c <_fstat_r>:
 800d13c:	b538      	push	{r3, r4, r5, lr}
 800d13e:	4d07      	ldr	r5, [pc, #28]	; (800d15c <_fstat_r+0x20>)
 800d140:	2300      	movs	r3, #0
 800d142:	4604      	mov	r4, r0
 800d144:	4608      	mov	r0, r1
 800d146:	4611      	mov	r1, r2
 800d148:	602b      	str	r3, [r5, #0]
 800d14a:	f7f7 f89a 	bl	8004282 <_fstat>
 800d14e:	1c43      	adds	r3, r0, #1
 800d150:	d102      	bne.n	800d158 <_fstat_r+0x1c>
 800d152:	682b      	ldr	r3, [r5, #0]
 800d154:	b103      	cbz	r3, 800d158 <_fstat_r+0x1c>
 800d156:	6023      	str	r3, [r4, #0]
 800d158:	bd38      	pop	{r3, r4, r5, pc}
 800d15a:	bf00      	nop
 800d15c:	20000fbc 	.word	0x20000fbc

0800d160 <_isatty_r>:
 800d160:	b538      	push	{r3, r4, r5, lr}
 800d162:	4d06      	ldr	r5, [pc, #24]	; (800d17c <_isatty_r+0x1c>)
 800d164:	2300      	movs	r3, #0
 800d166:	4604      	mov	r4, r0
 800d168:	4608      	mov	r0, r1
 800d16a:	602b      	str	r3, [r5, #0]
 800d16c:	f7f7 f899 	bl	80042a2 <_isatty>
 800d170:	1c43      	adds	r3, r0, #1
 800d172:	d102      	bne.n	800d17a <_isatty_r+0x1a>
 800d174:	682b      	ldr	r3, [r5, #0]
 800d176:	b103      	cbz	r3, 800d17a <_isatty_r+0x1a>
 800d178:	6023      	str	r3, [r4, #0]
 800d17a:	bd38      	pop	{r3, r4, r5, pc}
 800d17c:	20000fbc 	.word	0x20000fbc

0800d180 <_malloc_usable_size_r>:
 800d180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d184:	1f18      	subs	r0, r3, #4
 800d186:	2b00      	cmp	r3, #0
 800d188:	bfbc      	itt	lt
 800d18a:	580b      	ldrlt	r3, [r1, r0]
 800d18c:	18c0      	addlt	r0, r0, r3
 800d18e:	4770      	bx	lr

0800d190 <_init>:
 800d190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d192:	bf00      	nop
 800d194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d196:	bc08      	pop	{r3}
 800d198:	469e      	mov	lr, r3
 800d19a:	4770      	bx	lr

0800d19c <_fini>:
 800d19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d19e:	bf00      	nop
 800d1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1a2:	bc08      	pop	{r3}
 800d1a4:	469e      	mov	lr, r3
 800d1a6:	4770      	bx	lr
